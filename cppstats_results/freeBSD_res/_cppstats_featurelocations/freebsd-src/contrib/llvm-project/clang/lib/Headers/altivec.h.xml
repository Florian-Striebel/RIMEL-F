<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/altivec.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ALTIVEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ALTIVEC_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ALTIVEC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"AltiVec support not enabled"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CR6_EQ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CR6_EQ_REV</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CR6_LT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CR6_LT_REV</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_SUBNORMAL_N</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_SUBNORMAL_P</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_SUBNORMAL</name></cpp:macro> <cpp:value>(__VEC_CLASS_FP_SUBNORMAL_P | __VEC_CLASS_FP_SUBNORMAL_N)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_ZERO_N</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_ZERO_P</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_ZERO</name></cpp:macro> <cpp:value>(__VEC_CLASS_FP_ZERO_P | __VEC_CLASS_FP_ZERO_N)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_INFINITY_N</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_INFINITY_P</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_INFINITY</name></cpp:macro> <cpp:value>(__VEC_CLASS_FP_INFINITY_P | __VEC_CLASS_FP_INFINITY_N)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_NAN</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__VEC_CLASS_FP_NOT_NORMAL</name></cpp:macro> <cpp:value>(__VEC_CLASS_FP_NAN | __VEC_CLASS_FP_SUBNORMAL | __VEC_CLASS_FP_ZERO | __VEC_CLASS_FP_INFINITY)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ATTRS_o_ai</name></cpp:macro> <cpp:value>__attribute__((__overloadable__, __always_inline__))</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_abs_v16qi</name></cpp:macro> <cpp:value>vec_abs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_abs_v8hi</name></cpp:macro> <cpp:value>vec_abs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_abs_v4si</name></cpp:macro> <cpp:value>vec_abs</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_abs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_abs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_abs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_abs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_abs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvabssp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_abs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvabsdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_abss_v16qi</name></cpp:macro> <cpp:value>vec_abss</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_abss_v8hi</name></cpp:macro> <cpp:value>vec_abss</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_abss_v4si</name></cpp:macro> <cpp:value>vec_abss</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_abss</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>__builtin_altivec_vsubsbs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_abss</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>__builtin_altivec_vsubshs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_abss</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>__builtin_altivec_vsubsws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_absd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vabsdub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_absd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vabsduh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_absd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vabsduw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_add_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__carry</name> <init>= <expr><call><name>__builtin_altivec_vaddcuw</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__carry</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__carry</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__carry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name>__res</name> <operator>+</operator> <name>__carry</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_add</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_add</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adde</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adde</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_adde_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vaddeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adde</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__mask</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__carry</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <name>__mask</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_add</name><argument_list>(<argument><expr><call><name>vec_add</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__carry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adde</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__mask</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__carry</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <name>__mask</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_add</name><argument_list>(<argument><expr><call><name>vec_add</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__carry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_addec_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vaddecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name><name>__result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__tempa</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>__a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__tempb</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>__b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__tempc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>__c</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__tempc</name> <operator>=</operator> <name>__tempc</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__longa</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>__tempa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__longb</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>__tempb</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__longc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>__tempc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__sum</name> <init>= <expr><name>__longa</name> <operator>+</operator> <name>__longb</name> <operator>+</operator> <name>__longc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>__sum</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__tempres</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__res</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>int</name><operator>)</operator> <name>__tempres</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>ret</name> <init>= <expr><block>{ <expr><name><name>__result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>__result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>__result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>__result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>__tempc</name> <init>= <expr><name><name>__c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__longa</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>__a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__longb</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>__b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__longc</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>__tempc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__sum</name> <init>= <expr><name>__longa</name> <operator>+</operator> <name>__longb</name> <operator>+</operator> <name>__longc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>__sum</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__tempres</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__res</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>int</name><operator>)</operator> <name>__tempres</name></expr>;</expr_stmt>
</block_content>}</block></for>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>ret</name> <init>= <expr><block>{ <expr><name><name>__result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>__result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>__result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vaddubm</name></cpp:macro> <cpp:value>vec_vaddubm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vadduhm</name></cpp:macro> <cpp:value>vec_vadduhm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vadduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vadduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vadduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vadduwm</name></cpp:macro> <cpp:value>vec_vadduwm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vadduwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vadduwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vadduwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vaddfp</name></cpp:macro> <cpp:value>vec_vaddfp</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vaddfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vaddcuw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddcuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>__int128</name><operator>)</operator><call><name>__builtin_altivec_vaddcuq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_addc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_addc_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vaddcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vaddcuw</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddcuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsbs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddubs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddubs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddubs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddshs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduhs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_adds</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddsbs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddsbs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsbs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddsbs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddubs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddubs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddubs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddubs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vaddshs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vaddshs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddshs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vaddshs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduhs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduhs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduhs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduhs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vaddsws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vaddsws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vaddsws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vadduws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vadduqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>+</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddeuqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddeuqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddcuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddcuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddecuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vaddecuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vaddecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vand</name></cpp:macro> <cpp:value>vec_and</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_and</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vandc</name></cpp:macro> <cpp:value>vec_andc</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_andc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vandc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_avg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_avg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_avg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_avg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavguh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_avg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_avg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavguw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vavgsb</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vavgub</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vavgsh</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vavguh</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavguh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vavgsw</name><argument_list>(<argument><expr><name>vector</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavgsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vavguw</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vavguw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_ceil</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvrspip</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vrfip</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_ceil</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrdpip</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_ceil</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_ceil</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vrfip</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrfip</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_cmpb</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpbfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpbfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpbfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpequb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpequb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpequb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpequh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpequh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpequh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpequw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpequw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpequw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vcmpequd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vcmpequd</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vcmpequd</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__wordcmp</name> <init>=
<expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__wordcmp</name> <operator>&amp;=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__wordcmp</name> <operator>&amp;=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><name>__wordcmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_xvcmpeqsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpeqfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_xvcmpeqdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><call><name>__builtin_altivec_vcmpequq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpeq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><call><name>__builtin_altivec_vcmpequq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpneb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpneb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpneb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpneh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpneh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpneh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpnew</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpnew</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpnew</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpnew</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator> <operator>~</operator><operator>(</operator><call><name>__builtin_altivec_vcmpequq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator> <operator>~</operator><operator>(</operator><call><name>__builtin_altivec_vcmpequq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpnez</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpnezb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpnez</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpnezb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpnez</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpnezh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpnez</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpnezh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpnez</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpnezw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpnez</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpnezw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vctzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vclzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vctzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vclzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vclzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vctzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vclzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vctzlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_parity_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vprtybw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_parity_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vprtybw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_parity_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vprtybq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_parity_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vprtybq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_parity_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vprtybd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_parity_lsbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vprtybd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator>
<operator>~</operator><operator>(</operator><call><name>__builtin_altivec_vcmpequd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator>
<operator>~</operator><operator>(</operator><call><name>__builtin_altivec_vcmpequd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator>
<operator>~</operator><operator>(</operator><call><name>__builtin_altivec_vcmpequd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><operator>~</operator><operator>(</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><operator>~</operator><operator>(</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><operator>~</operator><operator>(</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator>
<operator>~</operator><operator>(</operator><call><name>__builtin_altivec_vcmpequd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__sgtw</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_cmpgt</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__ugtw</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_cmpgt</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__eqw</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__ugtw</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>__eqw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__sgtw</name> <operator>|=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__ugtw</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__sgtw</name></expr></argument>, <argument><expr><name>__sgtw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__ugtw</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>__eqw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__sgtw</name> <operator>|=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__ugtw</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__sgtw</name></expr></argument>, <argument><expr><name>__sgtw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__ugtw</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_cmpgt</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__eqw</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__eqw</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>__eqw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__ugtw</name> <operator>|=</operator> <name>__eqw</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__eqw</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>__eqw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__ugtw</name> <operator>|=</operator> <name>__eqw</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><name>__ugtw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_xvcmpgtsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_xvcmpgtdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpgt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtuq</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>__int128</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_xvcmpgesp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_xvcmpgedp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmpge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgefp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgtsb</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgtub</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgtsh</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgtuh</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgtsw</name><argument_list>(<argument><expr><name>vector</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgtuw</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vcmpgtfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vcmpgtfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmple</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpge</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cmplt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcntb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcntb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcnth</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcnth</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcntw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcntw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcntd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_popcnt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpopcntd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vclz</name></cpp:macro> <cpp:value>vec_cntlz</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>




<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__tmp1</name> <init>= <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__tmp2</name> <init>= <expr><name>__tmp1</name> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__tmp1</name> <init>= <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__tmp2</name> <init>= <expr><name>__tmp1</name> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__tmp1</name> <init>= <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__tmp2</name> <init>= <expr><name>__tmp1</name> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__tmp1</name> <init>= <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__tmp2</name> <init>= <expr><name>__tmp1</name> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__tmp1</name> <init>= <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__tmp2</name> <init>= <expr><name>__tmp1</name> <operator>|</operator> <call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_match_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__tmp1</name> <init>= <expr><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__tmp2</name> <init>= <expr><name>__tmp1</name> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>|</operator>
<call><name>vec_cmpeq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__tmp1</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpne</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__ATTRS_o_ai</name></type>
<name>vec_first_mismatch_or_eos_index</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>vec_cnttz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>vec_cntlz</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_cmpnez</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>__res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert_exp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xviexpdp</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert_exp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xviexpdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>,<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert_exp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xviexpsp</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert_exp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xviexpsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>,<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>__int128</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>__int128</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>__int128</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_xl_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><call><name>__builtin_vsx_lxvl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_len_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvll</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>-</operator> <name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__res</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__res</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__res</name></expr></argument>, <argument><expr><name>__mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>__int128</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>__int128</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_stxvl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_len_r</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>-</operator> <name>__c</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__res</name> <init>=
<expr><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_vsx_stxvll</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__res</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_stxvll</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__vec_ldrmb</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>CNT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_xl_len_r((const unsigned char *)(PTR), (CNT))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__vec_strmb</name><parameter_list>(<parameter><type><name>PTR</name></type></parameter>, <parameter><type><name>CNT</name></type></parameter>, <parameter><type><name>VAL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vec_xst_len_r((VAL), (unsigned char *)(PTR), (CNT))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__vec_ldrmb</name></cpp:macro> <cpp:value>__builtin_vsx_ldrmb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__vec_strmb</name></cpp:macro> <cpp:value>__builtin_vsx_strmb</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_cpsgn</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcpsgnsp</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_cpsgn</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcpsgndp</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__XL_COMPAT_ALTIVEC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctf</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector int : (vector float)__builtin_altivec_vcfsx((vector int)(__a), (__b)), vector unsigned int : (vector float)__builtin_altivec_vcfux((vector unsigned int)(__a), (__b)), vector unsigned long long : (__builtin_vsx_xvcvuxdsp((vector unsigned long long)(__a)) * (vector float)(vector unsigned)((0x7f - (__b)) &lt;&lt; 23)), vector signed long long : (__builtin_vsx_xvcvsxdsp((vector signed long long)(__a)) * (vector float)(vector unsigned)((0x7f - (__b)) &lt;&lt; 23)))</cpp:value></cpp:define>











<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctf</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector int : (vector float)__builtin_altivec_vcfsx((vector int)(__a), (__b)), vector unsigned int : (vector float)__builtin_altivec_vcfux((vector unsigned int)(__a), (__b)), vector unsigned long long : (__builtin_convertvector((vector unsigned long long)(__a), vector double) * (vector double)(vector unsigned long long)((0x3ffULL - (__b)) &lt;&lt; 52)), vector signed long long : (__builtin_convertvector((vector signed long long)(__a), vector double) * (vector double)(vector unsigned long long)((0x3ffULL - (__b)) &lt;&lt; 52)))</cpp:value></cpp:define>















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctf</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector int : (vector float)__builtin_altivec_vcfsx((vector int)(__a), (__b)), vector unsigned int : (vector float)__builtin_altivec_vcfux((vector unsigned int)(__a), (__b)))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctd</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector signed int : (vec_doublee((vector signed int)(__a)) * (vector double)(vector unsigned long long)((0x3ffULL - (__b)) &lt;&lt; 52)), vector unsigned int : (vec_doublee((vector unsigned int)(__a)) * (vector double)(vector unsigned long long)((0x3ffULL - (__b)) &lt;&lt; 52)), vector unsigned long long : (__builtin_convertvector((vector unsigned long long)(__a), vector double) * (vector double)(vector unsigned long long)((0x3ffULL - (__b)) &lt;&lt; 52)), vector signed long long : (__builtin_convertvector((vector signed long long)(__a), vector double) * (vector double)(vector unsigned long long)((0x3ffULL - (__b)) &lt;&lt; 52)))</cpp:value></cpp:define>


















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vcfux</name></cpp:macro> <cpp:value>__builtin_altivec_vcfux</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vcfsx</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vcfsx((vector int)(__a), (__b))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__XL_COMPAT_ALTIVEC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_cts</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __builtin_altivec_vctsxs((vector float)(__a), (__b)), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + (__b)) &lt;&lt; 52); __builtin_vsx_xvcvdpsxws(__ret); }))</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_cts</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __builtin_altivec_vctsxs((vector float)(__a), (__b)), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + (__b)) &lt;&lt; 52); __builtin_convertvector(__ret, vector signed long long); }))</cpp:value></cpp:define>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_cts</name></cpp:macro> <cpp:value>__builtin_altivec_vctsxs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vctsxs</name></cpp:macro> <cpp:value>__builtin_altivec_vctsxs</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__XL_COMPAT_ALTIVEC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctu</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __builtin_altivec_vctuxs((vector float)(__a), (__b)), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + __b) &lt;&lt; 52); __builtin_vsx_xvcvdpuxws(__ret); }))</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctu</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __builtin_altivec_vctuxs((vector float)(__a), (__b)), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + __b) &lt;&lt; 52); __builtin_convertvector(__ret, vector unsigned long long); }))</cpp:value></cpp:define>










<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctu</name></cpp:macro> <cpp:value>__builtin_altivec_vctuxs</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctsl</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __extension__({ vector float __ret = (vector float)(__a) * (vector float)(vector unsigned)((0x7f + (__b)) &lt;&lt; 23); __builtin_vsx_xvcvspsxds( __builtin_vsx_xxsldwi(__ret, __ret, 1)); }), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + __b) &lt;&lt; 52); __builtin_convertvector(__ret, vector signed long long); }))</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctul</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __extension__({ vector float __ret = (vector float)(__a) * (vector float)(vector unsigned)((0x7f + (__b)) &lt;&lt; 23); __builtin_vsx_xvcvspuxds( __builtin_vsx_xxsldwi(__ret, __ret, 1)); }), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + __b) &lt;&lt; 52); __builtin_convertvector(__ret, vector unsigned long long); }))</cpp:value></cpp:define>
















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctsl</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __extension__({ vector float __ret = (vector float)(__a) * (vector float)(vector unsigned)((0x7f + (__b)) &lt;&lt; 23); __builtin_vsx_xvcvspsxds(__ret); }), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + __b) &lt;&lt; 52); __builtin_convertvector(__ret, vector signed long long); }))</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ctul</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector float : __extension__({ vector float __ret = (vector float)(__a) * (vector float)(vector unsigned)((0x7f + (__b)) &lt;&lt; 23); __builtin_vsx_xvcvspuxds(__ret); }), vector double : __extension__({ vector double __ret = (vector double)(__a) * (vector double)(vector unsigned long long)((0x3ffULL + __b) &lt;&lt; 52); __builtin_convertvector(__ret, vector unsigned long long); }))</cpp:value></cpp:define>















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vctuxs</name></cpp:macro> <cpp:value>__builtin_altivec_vctuxs</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signexti</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextsb2w</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signexti</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextsh2w</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signextll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextsb2d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signextll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextsh2d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signextll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextsw2d</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signextq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextsd2q</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signed</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector signed int</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signed</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector signed long long</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_signed2</name><argument_list>(<argument><expr><name>vector</name> <name>double</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>double</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator> <block>{ <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signede</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvdpsxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvdpsxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_signedo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvdpsxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvdpsxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unsigned</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector unsigned int</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unsigned</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector unsigned long long</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_unsigned2</name><argument_list>(<argument><expr><name>vector</name> <name>double</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>double</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <block>{ <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unsignede</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvdpuxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvdpuxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unsignedo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvdpuxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvdpuxws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name></type> <name>float</name></decl></parameter>, <parameter><decl><type><name>vector</name></type> <name>float</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_float</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector float</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_float</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector float</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_float2</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <block>{ <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_float2</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <block>{ <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_float2</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <block>{ <expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_floate</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvsxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvsxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_floate</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvuxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvuxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_floate</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvdpsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvdpsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_floato</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvsxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvsxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_floato</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvuxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvuxdsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_floato</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvdpsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_vsx_xvcvdpsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_double</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector double</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_double</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_convertvector</name><argument_list>(<argument>__a</argument>, <argument>vector double</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doublee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvsxwdp</name><argument_list>(<argument><expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvsxwdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doublee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvuxwdp</name><argument_list>(<argument><expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvuxwdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doublee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvspdp</name><argument_list>(<argument><expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvspdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doubleh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>double</name></type> <name>__ret</name> <init>= <expr><block>{<expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doubleh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>double</name></type> <name>__ret</name> <init>= <expr><block>{<expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doubleh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>double</name></type> <name>__ret</name> <init>= <expr><block>{<expr><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doublel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>double</name></type> <name>__ret</name> <init>= <expr><block>{<expr><name><name>__a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doublel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>double</name></type> <name>__ret</name> <init>= <expr><block>{<expr><name><name>__a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doublel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>double</name></type> <name>__ret</name> <init>= <expr><block>{<expr><name><name>__a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>__a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doubleo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvsxwdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvsxwdp</name><argument_list>(<argument><expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doubleo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvuxwdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvuxwdp</name><argument_list>(<argument><expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_doubleo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcvspdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_vsx_xvcvspdp</name><argument_list>(<argument><expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_cvf</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_doublee</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_cvf</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_floate</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_dive</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vdivesw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_dive</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vdiveuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_dive</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vdivesd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_dive</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vdiveud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_dive</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vdiveuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_dive</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vdivesq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_div</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>/</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_test_swdiv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvtdivdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_test_swdivs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvtdivsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_dss</name></cpp:macro> <cpp:value>__builtin_altivec_dss</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list> <name>vec_dssall</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_dssall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_dst</name><parameter_list>(<parameter><type><name>__PTR</name></type></parameter>, <parameter><type><name>__CW</name></type></parameter>, <parameter><type><name>__STR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_dst((const void *)(__PTR), (__CW), (__STR))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_dstst</name><parameter_list>(<parameter><type><name>__PTR</name></type></parameter>, <parameter><type><name>__CW</name></type></parameter>, <parameter><type><name>__STR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_dstst((const void *)(__PTR), (__CW), (__STR))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_dststt</name><parameter_list>(<parameter><type><name>__PTR</name></type></parameter>, <parameter><type><name>__CW</name></type></parameter>, <parameter><type><name>__STR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_dststt((const void *)(__PTR), (__CW), (__STR))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_dstt</name><parameter_list>(<parameter><type><name>__PTR</name></type></parameter>, <parameter><type><name>__CW</name></type></parameter>, <parameter><type><name>__STR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_dstt((const void *)(__PTR), (__CW), (__STR))</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_eqv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><call><name>__builtin_vsx_xxleqv</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_expte</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vexptefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vexptefp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vexptefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_floor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvrspim</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vrfim</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_floor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrdpim</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_floor</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_floor</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vrfim</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrfim</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_ld</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lde</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvebx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lde</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvebx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lde</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvehx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lde</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvehx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lde</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lde</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lde</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvebx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvebx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvebx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvebx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvehx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvehx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvehx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvehx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvewx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvewx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvewx</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_ldl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvxl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_lvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_loge</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vlogefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vlogefp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vlogefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsl</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>signed</name> <name>char</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsl</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsl</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>short</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvsl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsl</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>short</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsl</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvsl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsl</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>int</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsl</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvsl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsr</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>signed</name> <name>char</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsr</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsr</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>short</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvsr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsr</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>short</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsr</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvsr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsr</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>int</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvsr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(<argument><expr><literal type="string">"use assignment for unaligned little endian \
loads/stores"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>vec_lvsr</name><argument_list>(<argument><expr><name>int</name> <name>__a</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator><name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>mask</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>reverse</name> <init>= <expr><block>{<expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvsr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_lvsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mladd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mladd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mladd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mladd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_madd</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_madd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_madd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_madd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mladd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_madd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvmaddasp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmaddfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_madd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvmaddadp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmaddfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaddfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_madds</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>short</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>signed</name> <name>short</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmhaddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmhaddshs</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>short</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>signed</name> <name>short</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmhaddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_msub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvmsubasp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_msub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvmsubadp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxub</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxud</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvmaxsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmaxfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_max</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvmaxdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxub</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmaxsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmaxsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmaxsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxuh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxuh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxuh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmaxsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmaxsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmaxsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxuw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxuw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmaxuw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmaxuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmaxfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvmaxsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmaxfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator>
<literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator>
<literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator>
<literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vmrghb</name></cpp:macro> <cpp:value>vec_vmrghb</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrghb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator>
<literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrghb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator>
<literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrghb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator>
<literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vmrghh</name></cpp:macro> <cpp:value>vec_vmrghh</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrghh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrghh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrghh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrghh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vmrghw</name></cpp:macro> <cpp:value>vec_vmrghw</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrghw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrghw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrghw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrghw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator>
<literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator>
<literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator>
<literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0X19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vmrglb</name></cpp:macro> <cpp:value>vec_vmrglb</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrglb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator>
<literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrglb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator>
<literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrglb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator>
<literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vmrglh</name></cpp:macro> <cpp:value>vec_vmrglh</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrglh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrglh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrglh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrglh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator>
<literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vmrglw</name></cpp:macro> <cpp:value>vec_vmrglw</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrglw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmrglw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrglw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmrglw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator>
<literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergee</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergeh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator>
<literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mergeo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_mergel</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_mfvscr</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_mfvscr</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminub</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminud</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvminsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vminfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_min</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvmindp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminub</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vminsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vminsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vminsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminuh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminuh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminuh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vminsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vminsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vminsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminuw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminuw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vminuw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vminfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvminsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vminfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vmladduhm</name></cpp:macro> <cpp:value>vec_mladd</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_mladd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name> <operator>+</operator> <name>__c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_mladd</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_mladd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>*</operator> <name>__b</name> <operator>+</operator> <name>__c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mladd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name> <operator>+</operator> <name>__c</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmladduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name> <operator>+</operator> <name>__c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vmladduhm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name> <operator>+</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmladduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>*</operator> <name>__b</name> <operator>+</operator> <name>__c</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vmladduhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name> <operator>+</operator> <name>__c</name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_mradds</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmhraddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmhraddshs</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmhraddshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_msum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsummbm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_msum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumubm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_msum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumshm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_msum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumuhm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_msumc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumcud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmsummbm</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsummbm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmsumubm</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumubm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmsumshm</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumshm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmsumuhm</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumuhm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_msums</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_msums</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumuhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmsumshs</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmsumuhs</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmsumuhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_mtvscr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_mtvscr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_mul</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>*</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulosb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulesb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuloub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuleub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulosh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulesh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulouh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuleuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulosw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulesw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulouw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuleuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulosd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulesd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mule</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuloud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuleud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmulesb</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulosb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulesb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmuleub</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuloub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuleub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmulesh</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulosh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulesh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmuleuh</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulouh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuleuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmulhsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmulhuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmulhsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vmulhud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulesb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulosb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuleub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuloub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulesh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulosh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuleuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulouh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulesw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulosw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuleuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulouw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulesd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulosd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mulo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuleud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuloud</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmulosb</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulesb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulosb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmuloub</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuleub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmuloub</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmulosh</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmulesh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulosh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vmulouh</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vmuleuh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vmulouh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>&amp;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nand</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_nmadd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvnmaddasp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_nmadd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvnmaddadp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_nmsub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvnmsubasp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vnmsubfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_nmsub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvnmsubadp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vnmsubfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vnmsubfp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vnor</name></cpp:macro> <cpp:value>vec_nor</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>~</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>=
<expr><operator>~</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vnor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>~</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_nor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>~</operator><operator>(</operator><name>__a</name> <operator>|</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vor</name></cpp:macro> <cpp:value>vec_or</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_or</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><name>__a</name> <operator>|</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>~</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_orc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><name>__a</name> <operator>|</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>|</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator> <operator>(</operator><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>__b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pack_to_short_fp32</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__resa</name> <init>= <expr><call><name>__builtin_vsx_xvcvsphp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__resb</name> <init>= <expr><call><name>__builtin_vsx_xvcvsphp</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_mergee</name><argument_list>(<argument><expr><name>__resa</name></expr></argument>, <argument><expr><name>__resb</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_mergeo</name><argument_list>(<argument><expr><name>__resa</name></expr></argument>, <argument><expr><name>__resb</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vpkuhum</name></cpp:macro> <cpp:value>vec_vpkuhum</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkuhum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkuhum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkuhum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vpkuwum</name></cpp:macro> <cpp:value>vec_vpkuwum</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vpkuwum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkuwum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkuwum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vpkudum</name></cpp:macro> <cpp:value>vec_vpkudum</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vpkudum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkudum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkudum</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x00</literal><operator>,</operator> <literal type="number">0x01</literal><operator>,</operator> <literal type="number">0x02</literal><operator>,</operator> <literal type="number">0x03</literal><operator>,</operator> <literal type="number">0x08</literal><operator>,</operator> <literal type="number">0x09</literal><operator>,</operator> <literal type="number">0x0A</literal><operator>,</operator> <literal type="number">0x0B</literal><operator>,</operator>
<literal type="number">0x10</literal><operator>,</operator> <literal type="number">0x11</literal><operator>,</operator> <literal type="number">0x12</literal><operator>,</operator> <literal type="number">0x13</literal><operator>,</operator> <literal type="number">0x18</literal><operator>,</operator> <literal type="number">0x19</literal><operator>,</operator> <literal type="number">0x1A</literal><operator>,</operator> <literal type="number">0x1B</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0x04</literal><operator>,</operator> <literal type="number">0x05</literal><operator>,</operator> <literal type="number">0x06</literal><operator>,</operator> <literal type="number">0x07</literal><operator>,</operator> <literal type="number">0x0C</literal><operator>,</operator> <literal type="number">0x0D</literal><operator>,</operator> <literal type="number">0x0E</literal><operator>,</operator> <literal type="number">0x0F</literal><operator>,</operator>
<literal type="number">0x14</literal><operator>,</operator> <literal type="number">0x15</literal><operator>,</operator> <literal type="number">0x16</literal><operator>,</operator> <literal type="number">0x17</literal><operator>,</operator> <literal type="number">0x1C</literal><operator>,</operator> <literal type="number">0x1D</literal><operator>,</operator> <literal type="number">0x1E</literal><operator>,</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_packpx</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vpkpx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vpkpx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vpkpx</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vpkpx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vpkpx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_packs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkshss</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkshss</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_packs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkswss</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkswss</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_packs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpksdss</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpksdss</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkudus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkudus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vpkshss</name><argument_list>(<argument><expr><name>vector</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkshss</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkshss</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vpksdss</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpksdss</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpksdss</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vpkuhus</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>short</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vpkudus</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkudus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkudus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vpkswss</name><argument_list>(<argument><expr><name>vector</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkswss</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkswss</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vpkuwus</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packsu</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkshus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkshus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packsu</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packsu</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkswus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkswus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packsu</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packsu</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpksdus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpksdus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_packsu</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkudus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkudus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkshus</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkshus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkshus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkshus</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuhus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkswus</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkswus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkswus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpkswus</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpkuwus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vpksdus</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vpksdus</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vpksdus</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_perm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><block>{<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>,
<expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>vec_xor</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><call><name>__builtin_altivec_vperm_4si</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vperm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vperm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vperm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_vperm</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vperm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_re</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvresp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vrefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_re</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvredp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vrefp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vrlb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vrlb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrlh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vrlh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrlw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vrlw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <name>__a</name><operator>)</operator><operator>|</operator><operator>(</operator><name>__b</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>__CHAR_BIT__</name> <operator>*</operator> sizeof<operator>(</operator><name>vector</name> <name>signed</name> <name>__int128</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>__a</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__b</name> <operator>&lt;&lt;</operator> <name>__a</name><operator>)</operator><operator>|</operator><operator>(</operator><name>__b</name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>__CHAR_BIT__</name> <operator>*</operator> sizeof<operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>__a</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlmi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrlwmi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlmi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrldmi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlmi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrlqmi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlmi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrlqmi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlnm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>OneByte</name> <init>= <expr><block>{ <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_altivec_vrlwnm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <name>OneByte</name><operator>)</operator> <operator>|</operator> <name>__b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlnm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>OneByte</name> <init>= <expr><block>{ <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_altivec_vrldnm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <name>OneByte</name><operator>)</operator> <operator>|</operator> <name>__b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlnm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>TmpB</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>TmpC</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>MaskAndShift</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>TmpB</name></expr></argument>, <argument><expr><name>TmpC</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>TmpB</name></expr></argument>, <argument><expr><name>TmpC</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>__builtin_altivec_vrlqnm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator> <name>MaskAndShift</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_rlnm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>TmpB</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>TmpC</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>MaskAndShift</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>TmpB</name></expr></argument>, <argument><expr><name>TmpC</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>TmpB</name></expr></argument>, <argument><expr><name>TmpC</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>__builtin_altivec_vrlqnm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator> <name>MaskAndShift</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vrlb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vrlb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vrlb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vrlb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vrlh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrlh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vrlh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vrlh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vrlw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrlw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vrlw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vrlw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_round</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrfin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_round</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrdpi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_rint</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrspic</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_rint</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrdpic</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrspic</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrdpic</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_nearbyint</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrspi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_nearbyint</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrdpi</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vrfin</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrfin</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sqrt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvsqrtsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_sqrt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvsqrtdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_rsqrte</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvrsqrtesp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vrsqrtefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_rsqrte</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrsqrtedp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_rsqrt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ppc_rsqrtf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_rsqrt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ppc_rsqrtd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>__vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vrsqrtefp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrsqrtefp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_test_swsqrt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvtsqrtdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_test_swsqrts</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvtsqrtsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsel_4si</name></cpp:macro> <cpp:value>vec_sel</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>int</name></type> <name>__res</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>int</name></type> <name>__res</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><name>__c</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__b</name> <operator>&amp;</operator> <name>__c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>int</name></type> <name>__res</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsel</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>int</name></type> <name>__res</name> <init>= <expr><operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name> <operator>&amp;</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__c</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_sl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>vec_sl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>vec_sl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_sl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vspltb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>%=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator></expr>;</expr_stmt>




<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__rightelt</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__rightelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__rightelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__rightelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__rightelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__leftelt</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__leftelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__leftelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__rightelt</name></expr></argument>,
<argument><expr><name>__leftelt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__leftelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__leftelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__leftelt</name></expr></argument>,
<argument><expr><name>__rightelt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_sl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vslb</name></cpp:macro> <cpp:value>vec_vslb</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vslh</name></cpp:macro> <cpp:value>vec_vslh</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vslw</name></cpp:macro> <cpp:value>vec_vslw</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsldoi_4si</name></cpp:macro> <cpp:value>vec_sld</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_sld</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sld</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sld</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_sld</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_sldw</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sldw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sldw</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sldw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sldw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sldw</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sldw</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sldw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sldw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_sldw</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>__c</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vslv</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsrv</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsldoi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsldoi</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsldoi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsldoi</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsldoi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsldoi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsldoi</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsldoi</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>__d</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">17</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">18</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">19</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">20</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">21</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">22</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">23</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">24</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">25</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">26</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">27</literal> <operator>-</operator> <name>__d</name><operator>,</operator>
<literal type="number">28</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">29</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">30</literal> <operator>-</operator> <name>__d</name><operator>,</operator> <literal type="number">31</literal> <operator>-</operator> <name>__d</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__d</name><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">3</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">4</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">5</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">6</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">7</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">8</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">9</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">10</literal><operator>,</operator>
<name>__d</name> <operator>+</operator> <literal type="number">11</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">12</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">13</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">14</literal><operator>,</operator> <name>__d</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sll</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_slo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vslo</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vslo</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>b4</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>b5</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><type ref="prev"/><name>b6</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>, <decl><type ref="prev"/><name>b7</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>b4</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>b5</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><type ref="prev"/><name>b6</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>, <decl><type ref="prev"/><name>b7</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>b4</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>b5</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><type ref="prev"/><name>b6</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>, <decl><type ref="prev"/><name>b7</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <specifier>const</specifier> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>__b</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>b4</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>b5</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><type ref="prev"/><name>b6</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>, <decl><type ref="prev"/><name>b7</name> <init>= <expr><name>b0</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>,</operator> <name>b0</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>b4</name><operator>,</operator> <name>b5</name><operator>,</operator> <name>b6</name><operator>,</operator> <name>b7</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vspltb</name></cpp:macro> <cpp:value>vec_vspltb</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vspltb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vspltb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vspltb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsplth</name></cpp:macro> <cpp:value>vec_vsplth</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsplth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsplth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsplth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsplth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator>
<name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vspltw</name></cpp:macro> <cpp:value>vec_vspltw</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vspltw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator>
<name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vspltw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator>
<name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vspltw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator>
<name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vspltw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b1</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b2</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>b3</name> <init>= <expr><name>__b</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator>
<name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>,</operator> <name>__b</name><operator>,</operator> <name>b1</name><operator>,</operator> <name>b2</name><operator>,</operator> <name>b3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vspltisb</name></cpp:macro> <cpp:value>vec_splat_s8</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat_s8</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vspltisb</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vspltish</name></cpp:macro> <cpp:value>vec_splat_s16</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_splat_s16</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vspltish</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vspltisw</name></cpp:macro> <cpp:value>vec_splat_s32</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_splat_s32</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vspltisw</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat_u8</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat_u16</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splat_u32</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator>
<operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_sr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator>
<operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>vec_sr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator>
<operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>vec_sr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_sr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>%=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator></expr>;</expr_stmt>





<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__swapshift</name> <init>=
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__leftelt</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__swapshift</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__leftelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__leftelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__swapshift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__leftelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__leftelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__swapshift</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__rightelt</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__rightelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__rightelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__rightelt</name></expr></argument>, <argument><expr><name>__leftelt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__rightelt</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__rightelt</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_vspltb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__leftelt</name></expr></argument>, <argument><expr><name>__rightelt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><call><name>vec_sr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsrb</name></cpp:macro> <cpp:value>vec_vsrb</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsrh</name></cpp:macro> <cpp:value>vec_vsrh</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsrw</name></cpp:macro> <cpp:value>vec_vsrw</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsrw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_sr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsrab</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsrab</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsrah</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsrah</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsraw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsraw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&gt;&gt;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>%=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>__b</name> <operator>%=</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>__CHAR_BIT__</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>&gt;&gt;</operator> <name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrab</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsrab</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrab</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsrab</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrah</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsrah</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsrah</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsrah</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsraw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsraw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsraw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsraw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_srl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsro</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_altivec_vsro</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_ste</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvebx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvebx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvebx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvebx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvebx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvehx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvehx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvehx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvehx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvehx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvehx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvehx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvewx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvewx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvewx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvewx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvewx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvewx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_altivec_stvxl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_sub</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsububm</name></cpp:macro> <cpp:value>vec_vsububm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsubuhm</name></cpp:macro> <cpp:value>vec_vsubuhm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubuhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubuhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubuhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuhm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsubuwm</name></cpp:macro> <cpp:value>vec_vsubuwm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubuwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubuwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubuwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuwm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vsubfp</name></cpp:macro> <cpp:value>vec_vsubfp</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vsubfp</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vsubcuw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubcuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_subc_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsubcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vsubcuw</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubcuw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsbs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsububs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsububs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsububs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubshs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuhs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubsbs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubsbs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsbs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubsbs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsububs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsububs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsububs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsububs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubshs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubshs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubshs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubshs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubshs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuhs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuhs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuhs</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuhs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuhs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubsws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubsws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsubsws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuws</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuws</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubuqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>-</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_sub_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubeuqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubeuqm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sube</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sube</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_sube_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsubeuqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubcuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubcuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubcuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubecuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsubecuq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_addec</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>~</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_addec</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>~</operator><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_subec</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsubecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_subec_u128</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_altivec_vsubecuq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sube</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__mask</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__carry</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <name>__mask</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_adde</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>~</operator><name>__b</name></expr></argument>, <argument><expr><name>__carry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sube</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__mask</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__carry</name> <init>= <expr><name>__c</name> <operator>&amp;</operator> <name>__mask</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_adde</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>~</operator><name>__b</name></expr></argument>, <argument><expr><name>__carry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sum4s</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsum4sbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sum4s</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsum4ubs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_sum4s</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsum4shs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vsum4sbs</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsum4sbs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vsum4ubs</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsum4ubs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vsum4shs</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>short</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vsum4shs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_sum2s</name><argument_list>(<argument><expr><name>vector</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>int</name></type> <name>__c</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">4</literal>, <literal type="number">5</literal>, <literal type="number">6</literal>, <literal type="number">7</literal>, <literal type="number">0</literal>, <literal type="number">1</literal>, <literal type="number">2</literal>, <literal type="number">3</literal>, <literal type="number">12</literal>, <literal type="number">13</literal>, <literal type="number">14</literal>, <literal type="number">15</literal>,
<literal type="number">8</literal>, <literal type="number">9</literal>, <literal type="number">10</literal>, <literal type="number">11</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>__builtin_altivec_vsum2sws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">4</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">12</literal><operator>,</operator> <literal type="number">13</literal><operator>,</operator> <literal type="number">14</literal><operator>,</operator> <literal type="number">15</literal><operator>,</operator>
<literal type="number">8</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vsum2sws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vsum2sws</name><argument_list>(<argument><expr><name>vector</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>vector</name> <name>int</name></type> <name>__c</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">4</literal>, <literal type="number">5</literal>, <literal type="number">6</literal>, <literal type="number">7</literal>, <literal type="number">0</literal>, <literal type="number">1</literal>, <literal type="number">2</literal>, <literal type="number">3</literal>, <literal type="number">12</literal>, <literal type="number">13</literal>, <literal type="number">14</literal>, <literal type="number">15</literal>,
<literal type="number">8</literal>, <literal type="number">9</literal>, <literal type="number">10</literal>, <literal type="number">11</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>__builtin_altivec_vsum2sws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_perm</name><argument_list>(
<argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">4</literal><operator>,</operator> <literal type="number">5</literal><operator>,</operator> <literal type="number">6</literal><operator>,</operator> <literal type="number">7</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">2</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">12</literal><operator>,</operator> <literal type="number">13</literal><operator>,</operator> <literal type="number">14</literal><operator>,</operator> <literal type="number">15</literal><operator>,</operator>
<literal type="number">8</literal><operator>,</operator> <literal type="number">9</literal><operator>,</operator> <literal type="number">10</literal><operator>,</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vsum2sws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_sums</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splat</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>__builtin_altivec_vsumsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vsumsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vsumsws</name><argument_list>(<argument><expr><name>vector</name> <name>signed</name> <name>int</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>signed</name> <name>int</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splat</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>__builtin_altivec_vsumsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <name><name>__b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vsumsws</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvrspiz</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vrfiz</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvrdpiz</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_trunc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_roundz</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_trunc</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_vrfiz</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vrfiz</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vupkhpx</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vupklpx((vector short)(__a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vupklpx</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vupkhpx((vector short)(__a))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vupkhpx</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vupkhpx((vector short)(__a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_vupklpx</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vupklpx((vector short)(__a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupkhsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupkhsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vupkhsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupkhsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupkhsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_vupkhsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupkhsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_unpackl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><name><name>__a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <name><name>__a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupklsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupklsb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupkhsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_vupklsb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vupklsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupklsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklsh</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupklsh</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupkhpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_vupklpx</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_vupklsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vupklsw</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupkhsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_vupklsw</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>double</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vsx_ld</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_vsx_st</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xxpermdi</name></cpp:macro> <cpp:value>__builtin_vsx_xxpermdi</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xxsldwi</name></cpp:macro> <cpp:value>__builtin_vsx_xxsldwi</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_permi</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>, <parameter><type><name>__c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector signed long long : __builtin_shufflevector((__a), (__b), (((__c) &gt;&gt; 1) &amp; 0x1), (((__c)&amp;0x1) + 2)), vector unsigned long long : __builtin_shufflevector((__a), (__b), (((__c) &gt;&gt; 1) &amp; 0x1), (((__c)&amp;0x1) + 2)), vector double : __builtin_shufflevector((__a), (__b), (((__c) &gt;&gt; 1) &amp; 0x1), (((__c)&amp;0x1) + 2)))</cpp:value></cpp:define>









<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_altivec_vxor</name></cpp:macro> <cpp:value>vec_xor</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>^</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>^</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_xor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>^</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>=
<expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>^</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_extract</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>__a</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_insert4b</name></cpp:macro> <cpp:value>__builtin_vsx_insertword</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_extract4b</name></cpp:macro> <cpp:value>__builtin_vsx_extractuword</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract_exp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvxexpsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract_exp</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvxexpdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract_sig</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvxsigsp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract_sig</name> <parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvxsigdp</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract_fp32_from_shorth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>__builtin_vsx_xvcvhpsp</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extract_fp32_from_shortl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>__builtin_vsx_xvcvhpsp</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insert</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_insert</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_insert</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>__b</name><index>[<expr><name>__c</name></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__b</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvlxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ld</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>pixel</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>pixel</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>bool</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_lvrxl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>vec_ldl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>vec_lvsl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvlxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><call><name>vec_lvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrx</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_st</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_stvrxl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_stl</name><argument_list>(
<argument><expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><call><name>vec_lvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>vec_lvsr</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_promote</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_promote</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_promote</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>short</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_promote</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_promote</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>int</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_promote</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_promote</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>float</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_promote</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>double</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_promote</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_promote</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__res</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__res</name><index>[<expr><name>__b</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>]</index></name> <operator>=</operator> <name>__a</name></expr>;</expr_stmt>
<return>return <expr><name>__res</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_splats</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_splats</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_splats</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splats</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splats</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>__int128</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_splats</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_splats</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>(</operator><name>__a</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_all_in</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpbfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_nan</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_nan</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_nge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_nge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ngt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_ngt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_all_nle</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_nle</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_all_nlt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_nlt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_all_numeric</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_all_numeric</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_LT</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_eq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_gt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_le</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsb_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtub_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuh_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuw_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsd_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtud_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtsq_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_lt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpgtuq_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nan</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nan</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequb_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>pixel</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequh_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>short</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequw_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequd_p</name><argument_list>(
<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ne</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpequq_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ngt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_ngt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nle</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgesp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgefp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nle</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgedp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nlt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtsp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpgtfp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_nlt</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpgtdp_p</name><argument_list>(<argument><expr><name>__CR6_LT_REV</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_numeric</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqsp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vcmpeqfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_any_numeric</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvcmpeqdp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_any_out</name><argument_list>(<argument><expr><name>vector</name> <name>float</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>float</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcmpbfp_p</name><argument_list>(<argument><expr><name>__CR6_EQ_REV</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CRYPTO__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_sbox_be</name></cpp:macro> <cpp:value>__builtin_altivec_crypto_vsbox</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_cipher_be</name></cpp:macro> <cpp:value>__builtin_altivec_crypto_vcipher</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_cipherlast_be</name></cpp:macro> <cpp:value>__builtin_altivec_crypto_vcipherlast</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ncipher_be</name></cpp:macro> <cpp:value>__builtin_altivec_crypto_vncipher</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ncipherlast_be</name></cpp:macro> <cpp:value>__builtin_altivec_crypto_vncipherlast</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_crypto_vsbox</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__a</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vsbox</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_crypto_vcipher</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__a</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vcipher</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_crypto_vcipherlast</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__a</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vcipherlast</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_crypto_vncipher</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__a</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vncipher</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_crypto_vncipherlast</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__a</name></expr></argument>,
<argument><expr><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vncipherlast</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_crypto_vshasigmad</name></cpp:macro> <cpp:value>__builtin_altivec_crypto_vshasigmad</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_crypto_vshasigmaw</name></cpp:macro> <cpp:value>__builtin_altivec_crypto_vshasigmaw</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_shasigma_be</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((X), vector unsigned int : __builtin_crypto_vshasigmaw, vector unsigned long long : __builtin_crypto_vshasigmad)((X), (Y), (Z))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_permxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpermxor</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_permxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpermxor</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_permxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpermxor</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__builtin_crypto_vpermxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpermxor</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>__builtin_crypto_vpermxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_altivec_crypto_vpermxor</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>__builtin_crypto_vpermxor</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_altivec_crypto_vpermxor</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>__builtin_crypto_vpermxor</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_altivec_crypto_vpermxor</name><argument_list>(
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>__builtin_crypto_vpmsumb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpmsumb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>__builtin_crypto_vpmsumb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpmsumh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>__builtin_crypto_vpmsumb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpmsumw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>__builtin_crypto_vpmsumb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_crypto_vpmsumd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vgbbd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vgbbd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_pmsum_be</name></cpp:macro> <cpp:value>__builtin_crypto_vpmsumb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_gb</name></cpp:macro> <cpp:value>__builtin_altivec_vgbbd</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vgbbd</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vgbbd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_gbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vgbbd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_gbb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vgbbd</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vbpermq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vbpermq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_vbpermq</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vbpermq</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>vec_bperm</name><argument_list>(<argument><expr><name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__a</name></expr></argument>, <argument><expr><name>vector</name> <name>unsigned</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vbpermq</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>bool</name> <name>char</name></type> <name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>char</name></type> <name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>char</name></type>
<name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>bool</name> <name>int</name></type> <name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>int</name></type>
<name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>bool</name> <name>short</name></type> <name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>short</name></type>
<name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>short</name></type>
<name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>float</name></type> <name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type>
<name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type>
<name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>double</name></type> <name>vec_reve</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>bool</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>bool</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_perm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>__int128</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_revb</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__indices</name> <init>=
<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><name>__a</name></expr></argument>,
<argument><expr><name>__indices</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xld2</name></cpp:macro> <cpp:value>vec_xl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xlw4</name></cpp:macro> <cpp:value>vec_xl</cpp:value></cpp:define>
<typedef>typedef <type><name>vector</name> <name>signed</name> <name>char</name> <name>unaligned_vec_schar</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>unsigned</name> <name>char</name> <name>unaligned_vec_uchar</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>signed</name> <name>short</name> <name>unaligned_vec_sshort</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>unsigned</name> <name>short</name> <name>unaligned_vec_ushort</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>signed</name> <name>int</name> <name>unaligned_vec_sint</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>unsigned</name> <name>int</name> <name>unaligned_vec_uint</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>float</name> <name>unaligned_vec_float</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>char</name></type> <name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_schar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>char</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_uchar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>short</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_sshort</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>short</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_ushort</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>int</name></type> <name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_sint</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>int</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_uint</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>float</name></type> <name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_float</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>unaligned_vec_sll</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>unaligned_vec_ull</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>double</name> <name>unaligned_vec_double</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_sll</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_ull</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>double</name></type> <name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_double</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><name>vector</name> <name>signed</name> <name>__int128</name> <name>unaligned_vec_si128</name></type> <name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<typedef>typedef <type><name>vector</name> <name>unsigned</name> <name>__int128</name> <name>unaligned_vec_ui128</name></type>
<name>__attribute__</name>((<name>aligned</name>(1)));</typedef>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>signed</name> <name>__int128</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_si128</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>vector</name> <name>unsigned</name> <name>__int128</name></type>
<name>vec_xl</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>*</operator><operator>(</operator><name>unaligned_vec_ui128</name> <operator>*</operator><operator>)</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__vec</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,
<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__vec</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,
<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__vec</name> <init>= <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__vec</name> <init>= <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><call><name>__builtin_vsx_lxvw4x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><call><name>__builtin_vsx_lxvd2x_be</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_xl</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_be</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>vec_xl</name><argument_list>(<argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xl_be</name></cpp:macro> <cpp:value>vec_xl</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_sext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_sext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_sext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_sext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_zext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_zext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_zext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xl_zext</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__pointer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>*</operator><operator>(</operator><name>__pointer</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xlds</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>long</name> <name>long</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>long</name> <name>long</name><operator>)</operator> <operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_xlds</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>unaligned_vec_ull</name><operator>)</operator> <operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_xlds</name><parameter_list>(<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>unaligned_vec_double</name><operator>)</operator> <operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_load_splats</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_load_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>signed</name> <name>int</name><operator>)</operator><operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_load_splats</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_load_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>unsigned</name> <name>int</name><operator>)</operator><operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_load_splats</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_load_splats</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>vector</name> <name>float</name><operator>)</operator><operator>*</operator><name>__addr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xstd2</name></cpp:macro> <cpp:value>vec_xst</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xstw4</name></cpp:macro> <cpp:value>vec_xst</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type>
<name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__vec</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_schar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type>
<name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__vec</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_uchar</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type>
<name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__vec</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_sshort</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_ushort</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_sint</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type>
<name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__vec</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_uint</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__vec</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_float</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_sll</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_ull</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__vec</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_double</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_si128</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__addr</name> <init>= <expr><operator>(</operator><name>signed</name> <name>char</name> <operator>*</operator><operator>)</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>unaligned_vec_ui128</name> <operator>*</operator><operator>)</operator><name>__addr</name> <operator>=</operator> <name>__vec</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>signed</name> <name>short</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>signed</name> <name>int</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>signed</name> <name>long</name> <name>long</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__ATTRS_o_ai</name> <name>void</name></type> <name>vec_xst_trunc</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>ptrdiff_t</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__ptr</name> <operator>+</operator> <name>__offset</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>__vec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__tmp</name> <init>=
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,
<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<typedef>typedef <macro><name>__attribute__</name><argument_list>(<argument>(vector_size(sizeof(__tmp)))</argument>)</argument_list></macro> <type><name>double</name></type> <name>__vector_double</name>;</typedef>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x_be</name><argument_list>(<argument><expr><operator>(</operator><name>__vector_double</name><operator>)</operator><name>__tmp</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__tmp</name> <init>=
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,
<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<typedef>typedef <macro><name>__attribute__</name><argument_list>(<argument>(vector_size(sizeof(__tmp)))</argument>)</argument_list></macro> <type><name>double</name></type> <name>__vector_double</name>;</typedef>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x_be</name><argument_list>(<argument><expr><operator>(</operator><name>__vector_double</name><operator>)</operator><name>__tmp</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__tmp</name> <init>=
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<typedef>typedef <macro><name>__attribute__</name><argument_list>(<argument>(vector_size(sizeof(__tmp)))</argument>)</argument_list></macro> <type><name>double</name></type> <name>__vector_double</name>;</typedef>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x_be</name><argument_list>(<argument><expr><operator>(</operator><name>__vector_double</name><operator>)</operator><name>__tmp</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__tmp</name> <init>=
<expr><call><name>__builtin_shufflevector</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__vec</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<typedef>typedef <macro><name>__attribute__</name><argument_list>(<argument>(vector_size(sizeof(__tmp)))</argument>)</argument_list></macro> <type><name>double</name></type> <name>__vector_double</name>;</typedef>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x_be</name><argument_list>(<argument><expr><operator>(</operator><name>__vector_double</name><operator>)</operator><name>__tmp</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x_be</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x_be</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvw4x_be</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>int</name><operator>)</operator><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x_be</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x_be</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_vsx_stxvd2x_be</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>vec_xst</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__ATTRS_o_ai</name></type> <name>vec_xst_be</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__vec</name></decl></parameter>,
<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>__offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>__int128</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>vec_xst</name><argument_list>(<argument><expr><name>__vec</name></expr></argument>, <argument><expr><name>__offset</name></expr></argument>, <argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_xst_be</name></cpp:macro> <cpp:value>vec_xst</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER9_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_test_data_class</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic( (__a), vector float : (vector bool int)__builtin_vsx_xvtstdcsp((vector float)(__a), (__b)), vector double : (vector bool long long)__builtin_vsx_xvtstdcdp((vector double)(__a), (__b)))</cpp:value></cpp:define>







<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_neg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_neg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_neg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_neg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_neg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_neg</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_nabs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator> <call><name>vec_abs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_nabs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>-</operator> <call><name>vec_abs</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER8_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vector</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_nabs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_nabs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type> <name>vec_nabs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type> <name>vec_nabs</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vminsb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><operator>-</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type> <name>vec_recipdiv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ppc_recipdivf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_recipdiv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ppc_recipdivd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__POWER10_VECTOR__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extractm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextractbm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extractm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextracthm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extractm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextractwm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extractm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextractdm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extractm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vextractqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_expandm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vexpandbm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_expandm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vexpandhm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_expandm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vexpandwm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_expandm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vexpanddm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_expandm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vexpandqm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_cntm</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__mp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector unsigned char : __builtin_altivec_vcntmbb((__a), (unsigned int)(__mp)), vector unsigned short : __builtin_altivec_vcntmbh((__a), (unsigned int)(__mp)), vector unsigned int : __builtin_altivec_vcntmbw((__a), (unsigned int)(__mp)), vector unsigned long long : __builtin_altivec_vcntmbd((__a), (unsigned int)(__mp)))</cpp:value></cpp:define>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_genbm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__bm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_mtvsrbm</name><argument_list>(<argument><expr><name>__bm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_genhm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__bm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_mtvsrhm</name><argument_list>(<argument><expr><name>__bm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_genwm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__bm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_mtvsrwm</name><argument_list>(<argument><expr><name>__bm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_gendm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__bm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_mtvsrdm</name><argument_list>(<argument><expr><name>__bm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_genqm</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__bm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_mtvsrqm</name><argument_list>(<argument><expr><name>__bm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pdep</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpdepd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_pext</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vpextd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cfuge</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vcfuged</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_gnb</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vgnb(__a, __b)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ternarylogic</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>, <parameter><type><name>__c</name></type></parameter>, <parameter><type><name>__imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector unsigned char : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)), vector unsigned short : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)), vector unsigned int : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)), vector unsigned long long : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)), vector unsigned __int128 : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)))</cpp:value></cpp:define>




















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_ternarylogic</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>, <parameter><type><name>__c</name></type></parameter>, <parameter><type><name>__imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector unsigned char : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)), vector unsigned short : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)), vector unsigned int : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)), vector unsigned long long : __builtin_vsx_xxeval((vector unsigned long long)(__a), (vector unsigned long long)(__b), (vector unsigned long long)(__c), (__imm)))</cpp:value></cpp:define>
















<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_genpcvm</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), vector unsigned char : __builtin_vsx_xxgenpcvbm((__a), (int)(__imm)), vector unsigned short : __builtin_vsx_xxgenpcvhm((__a), (int)(__imm)), vector unsigned int : __builtin_vsx_xxgenpcvwm((__a), (int)(__imm)), vector unsigned long long : __builtin_vsx_xxgenpcvdm((__a), (int)(__imm)))</cpp:value></cpp:define>








<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_clrl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vclrrb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vclrlb</name><argument_list>( <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_clrl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vclrrb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vclrlb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_clrr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vclrlb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vclrrb</name><argument_list>( <argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_clrr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vclrlb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vclrrb</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cntlzm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vclzdm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_cnttzm</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_altivec_vctzdm</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mod</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>%</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mod</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>%</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mod</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>%</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mod</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>%</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mod</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>%</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_mod</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>%</operator> <name>__b</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_sldb</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>, <parameter><type><name>__c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vsldbi(__a, __b, (__c &amp; 0x7))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_srdb</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>, <parameter><type><name>__c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_altivec_vsrdbi(__a, __b, (__c &amp; 0x7))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insertl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinsbrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinsblx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insertl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinshrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinshlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insertl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinswrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinswlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insertl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinsdrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinsdlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insertl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinsbvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinsbvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insertl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinshvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinshvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_insertl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinswvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinswvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_inserth</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinsblx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinsbrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_inserth</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinshlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinshrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_inserth</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinswlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinswrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_inserth</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinsdlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinsdrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_inserth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinsbvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinsbvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_inserth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinshvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinshvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_inserth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vinswvlx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vinswvrx</name><argument_list>(<argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_extractl</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextdubvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextdubvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_extractl</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextduhvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextduhvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_extractl</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextduwvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextduwvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extractl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextddvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextddvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_extracth</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextdubvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextdubvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_extracth</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextduhvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextduhvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type> <name>vec_extracth</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextduwvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextduwvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_extracth</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vextddvlx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ret</name> <init>= <expr><call><name>__builtin_altivec_vextddvrx</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sld</name><argument_list>(<argument><expr><name>__ret</name></expr></argument>, <argument><expr><name>__ret</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__VSX__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_permx</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>, <parameter><type><name>__b</name></type></parameter>, <parameter><type><name>__c</name></type></parameter>, <parameter><type><name>__d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_vsx_xxpermx((__a), (__b), (__c), (__d))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvh</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>signed</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvw</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type>
<name>vec_blendv</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>double</name></type> <name>__b</name></decl></parameter>,
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xxblendvd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_replace_elt</name></cpp:macro> <cpp:value>__builtin_altivec_vec_replace_elt</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_replace_unaligned</name></cpp:macro> <cpp:value>__builtin_altivec_vec_replace_unaligned</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec_splati</name><parameter_list>(<parameter><type><name>__a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__a), signed int : ((vector signed int)__a), unsigned int : ((vector unsigned int)__a), float : ((vector float)__a))</cpp:value></cpp:define>







<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>double</name> <name>__ATTRS_o_ai</name></type> <name>vec_splatid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>vector</name> <name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>__a</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_splati_ins</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>signed</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__a</name><index>[<expr><name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_splati_ins</name><parameter_list>(
<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>int</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__a</name><index>[<expr><name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>float</name> <name>__ATTRS_o_ai</name></type>
<name>vec_splati_ins</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__a</name><index>[<expr><name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__a</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>__b</name></expr>]</index></name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__a</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_test_lsbb_all_ones</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvtlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type>
<name>vec_test_lsbb_all_zeros</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_vsx_xvtlsbb</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_stril</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_stril</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_stril</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_stril</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_stril_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_stril_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_stril_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_stril_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_strir</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>char</name> <name>__ATTRS_o_ai</name></type>
<name>vec_strir</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_strir</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihl</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihr</name><argument_list>(<argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>short</name> <name>__ATTRS_o_ai</name></type>
<name>vec_strir</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihl</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihr</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_strir_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>char</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_strir_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>char</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstribl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstribr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_strir_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><operator>(</operator><name>vector</name> <name>signed</name> <name>short</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__ATTRS_o_ai</name></type> <name>vec_strir_p</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>__builtin_altivec_vstrihl_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>__builtin_altivec_vstrihr_p</name><argument_list>(<argument><expr><name>__CR6_EQ</name></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SIZEOF_INT128__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sl</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sr</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator>
<name>vector</name> <name>signed</name> <name>__int128</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><name>__a</name><operator>)</operator> <operator>&gt;&gt;</operator>
<operator>(</operator><name>__b</name> <operator>%</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator>
<name>unsigned</name> <name>__int128</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>unsigned</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator>
<name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>vector</name> <name>signed</name> <name>__int128</name><operator>)</operator><name>__a</name><operator>)</operator> <operator>&gt;&gt;</operator>
<operator>(</operator><name>__b</name> <operator>%</operator>
<operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator>
<name>unsigned</name> <name>__int128</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>vector</name> <name>signed</name> <name>__int128</name> <name>__ATTRS_o_ai</name></type>
<name>vec_sra</name><parameter_list>(<parameter><decl><type><name>vector</name> <name>signed</name> <name>__int128</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>vector</name> <name>unsigned</name> <name>__int128</name></type> <name>__b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>__a</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>__b</name> <operator>%</operator> <operator>(</operator><name>vector</name> <name>unsigned</name> <name>__int128</name><operator>)</operator><operator>(</operator>sizeof<operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator> <operator>*</operator>
<name>__CHAR_BIT__</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__ATTRS_o_ai</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
