<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/intrin.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#include_next &lt;intrin.h&gt;</cpp:empty>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INTRIN_H</name></cpp:macro></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;x86intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;armintr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arm64intr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_HOSTED__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__x86_64__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LPTRINT_TYPE__</name></cpp:macro> <cpp:value>__int64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LPTRINT_TYPE__</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MMX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>__m64</name></type> <name>_m_from_float</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float</name></type> <name>_m_to_float</name><parameter_list>(<parameter><decl><type><name>__m64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><name>void</name></type> <name>__addfsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__addfsdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__addfsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__code_seg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__cpuid</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__cpuidex</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>__emul</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__emulu</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>__getcallerseflags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__halt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__inbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__inbytestring</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__incfsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__incfsdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__incfsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>__indword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__indwordstring</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__int2c</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__invlpg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>short</name></type> <name>__inword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__inwordstring</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__lidt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__ll_lshift</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>__ll_rshift</name><parameter_list>(<parameter><decl><type><name>__int64</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__movsb</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__movsd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__movsw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__nop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__nvreg_restore_fence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__nvreg_save_fence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__outbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__outbytestring</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__outdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__outdwordstring</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__outword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__outwordstring</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>__readcr0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>__readcr2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__LPTRINT_TYPE__</name></type> <name>__readcr3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>__readcr4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>__readcr8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>__readdr</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__readfsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__readfsqword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>short</name></type> <name>__readfsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__readmsr</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__readpmc</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>__segmentlimit</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__sidt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__stosb</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__stosd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__stosw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__svm_clgi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__svm_invlpga</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__svm_skinit</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__svm_stgi</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__svm_vmload</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__svm_vmrun</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__svm_vmsave</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__ud2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__ull_rshift</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__vmx_off</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__vmx_vmptrst</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__wbinvd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writecr0</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writecr3</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__INTPTR_TYPE__</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writecr4</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writecr8</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writedr</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writefsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writefsdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writefsqword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writefsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writemsr</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_AddressOfReturnAddress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_BitScanForward</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>_Index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_BitScanReverse</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>_Index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittest</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittestandcomplement</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittestandreset</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittestandset</name><parameter_list>(<parameter><decl><type><name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>__cdecl</name></type> <name>_disable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <name>__cdecl</name></type> <name>_enable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedAddLargeStatistic</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandreset</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandset</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_InterlockedCompareExchangePointer_HLEAcquire</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_InterlockedCompareExchangePointer_HLERelease</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchangeAdd_HLEAcquire</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchangeAdd_HLERelease</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchangeAdd64_HLEAcquire</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchangeAdd64_HLERelease</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(
<argument><expr><literal type="string">"use other intrinsics or C++11 atomics instead"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>_ReadBarrier</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(
<argument><expr><literal type="string">"use other intrinsics or C++11 atomics instead"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>_ReadWriteBarrier</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>_rorx_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>_sarx_i32</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_HOSTED__</name></expr></cpp:if>
<function_decl><type><name>int</name> <name>__cdecl</name></type> <name>_setjmp</name><parameter_list>(<parameter><decl><type><name>jmp_buf</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>_shlx_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>_shrx_u32</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_Store_HLERelease</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_Store64_HLERelease</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_StorePointer_HLERelease</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__deprecated__</name><argument_list>(
<argument><expr><literal type="string">"use other intrinsics or C++11 atomics instead"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>_WriteBarrier</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>unsigned</name> <name>__int32</name></type> <name>xbegin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_xend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>__addgsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__addgsdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__addgsqword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__addgsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__faststorefence</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__incgsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__incgsdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__incgsqword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__incgsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__movsq</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__readgsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>__readgsdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__readgsqword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>short</name></type> <name>__readgsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__shiftleft128</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>_LowPart</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>_HighPart</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>_Shift</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__shiftright128</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>_LowPart</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>_HighPart</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>_Shift</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__stosq</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__vmx_on</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__vmx_vmclear</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__vmx_vmlaunch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__vmx_vmptrld</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__vmx_vmread</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__vmx_vmresume</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>__vmx_vmwrite</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writegsbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writegsdword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writegsqword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>__writegsword</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>short</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittest64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittestandcomplement64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittestandreset64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_bittestandset64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedAnd_np</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedAnd16_np</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedAnd64_np</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedAnd8_np</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandreset64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandset64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedCompareExchange_np</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Exchange</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_InterlockedCompareExchange128_np</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeHigh</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeLow</name></decl></parameter>,
<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type><name>_ComparandResult</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedCompareExchange16_np</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedCompareExchange64_np</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_InterlockedCompareExchangePointer_np</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedOr_np</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedOr16_np</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedOr64_np</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedOr8_np</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedXor_np</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedXor16_np</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedXor64_np</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedXor8_np</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>_rorx_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_sarx_i64</name><parameter_list>(<parameter><decl><type><name>__int64</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>_shlx_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>_shrx_u64</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>__mulh</name><parameter_list>(<parameter><decl><type><name>__int64</name></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__umulh</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_mul128</name><parameter_list>(<parameter><decl><type><name>__int64</name></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>, <parameter><decl><type><name>__int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>_umul128</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>__int64</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>__int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_BitScanForward64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>_Index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_BitScanReverse64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>_Index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>__int64</name></type> <name>_InterlockedDecrement64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchange64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchangeAdd64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchangeSub64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Subend</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedIncrement64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedOr64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedXor64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedAnd64</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name></type> <name>_InterlockedExchangeAdd8_acq</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedExchangeAdd8_nf</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedExchangeAdd8_rel</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedExchangeAdd16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedExchangeAdd16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedExchangeAdd16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchangeAdd_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchangeAdd_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchangeAdd_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchangeAdd64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchangeAdd64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchangeAdd64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Addend</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>short</name></type> <name>_InterlockedIncrement16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedIncrement16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedIncrement16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedIncrement_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedIncrement_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedIncrement_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedIncrement64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedIncrement64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedIncrement64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>short</name></type> <name>_InterlockedDecrement16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedDecrement16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedDecrement16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedDecrement_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedDecrement_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedDecrement_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedDecrement64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedDecrement64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedDecrement64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name></type> <name>_InterlockedAnd8_acq</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedAnd8_nf</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedAnd8_rel</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedAnd16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedAnd16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedAnd16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedAnd_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedAnd_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedAnd_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedAnd64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedAnd64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedAnd64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandset_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_BitBase</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_BitPos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandset_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_BitBase</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_BitPos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandset_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_BitBase</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_BitPos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandreset_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_BitBase</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_BitPos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandreset_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_BitBase</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_BitPos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_interlockedbittestandreset_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_BitBase</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_BitPos</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name></type> <name>_InterlockedOr8_acq</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedOr8_nf</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedOr8_rel</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedOr16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedOr16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedOr16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedOr_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedOr_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedOr_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedOr64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedOr64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedOr64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name></type> <name>_InterlockedXor8_acq</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedXor8_nf</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedXor8_rel</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedXor16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedXor16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedXor16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedXor_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedXor_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedXor_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedXor64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedXor64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedXor64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Value</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Mask</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name></type> <name>_InterlockedExchange8_acq</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedExchange8_nf</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedExchange8_rel</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedExchange16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedExchange16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedExchange16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchange_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchange_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedExchange_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchange64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchange64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedExchange64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>char</name></type> <name>_InterlockedCompareExchange8_acq</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedCompareExchange8_nf</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name></type> <name>_InterlockedCompareExchange8_rel</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>char</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedCompareExchange16_acq</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedCompareExchange16_nf</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>short</name></type> <name>_InterlockedCompareExchange16_rel</name><parameter_list>(<parameter><decl><type><name>short</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>short</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedCompareExchange_acq</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedCompareExchange_nf</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedCompareExchange_rel</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedCompareExchange64_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedCompareExchange64_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_InterlockedCompareExchange64_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_InterlockedCompareExchange128</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeHigh</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeLow</name></decl></parameter>,
<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type><name>_ComparandResult</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_InterlockedCompareExchange128_acq</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeHigh</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeLow</name></decl></parameter>,
<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type><name>_ComparandResult</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_InterlockedCompareExchange128_nf</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeHigh</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeLow</name></decl></parameter>,
<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type><name>_ComparandResult</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>_InterlockedCompareExchange128_rel</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeHigh</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_ExchangeLow</name></decl></parameter>,
<parameter><decl><type><name>__int64</name> <modifier>*</modifier></type><name>_ComparandResult</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__movsb</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>__dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm__ <specifier>__volatile__</specifier>("rep movsb"
: "+D"(__dst), "+S"(__src), "+c"(__n)
:
: "memory");</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<asm>__asm__ <specifier>__volatile__</specifier>("xchg %%esi, %1\nrep movsb\nxchg %%esi, %1"
: "+D"(__dst), "+r"(__src), "+c"(__n)
:
: "memory");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__movsd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>__dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm__ <specifier>__volatile__</specifier>("rep movsl"
: "+D"(__dst), "+S"(__src), "+c"(__n)
:
: "memory");</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<asm>__asm__ <specifier>__volatile__</specifier>("xchg %%esi, %1\nrep movsl\nxchg %%esi, %1"
: "+D"(__dst), "+r"(__src), "+c"(__n)
:
: "memory");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__movsw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__src</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<asm>__asm__ <specifier>__volatile__</specifier>("rep movsw"
: "+D"(__dst), "+S"(__src), "+c"(__n)
:
: "memory");</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<asm>__asm__ <specifier>__volatile__</specifier>("xchg %%esi, %1\nrep movsw\nxchg %%esi, %1"
: "+D"(__dst), "+r"(__src), "+c"(__n)
:
: "memory");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__stosd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>__dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>__x</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("rep stosl"
: "+D"(__dst), "+c"(__n)
: "a"(__x)
: "memory");</asm>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__stosw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>__dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__x</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("rep stosw"
: "+D"(__dst), "+c"(__n)
: "a"(__x)
: "memory");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__movsq</name><parameter_list>(
<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>__dst</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <specifier>const</specifier> <modifier>*</modifier></type><name>__src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("rep movsq"
: "+D"(__dst), "+S"(__src), "+c"(__n)
:
: "memory");</asm>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__stosq</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name> <modifier>*</modifier></type><name>__dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>__x</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("rep stosq" : "+D"(__dst), "+c"(__n) : "a"(__x)
: "memory");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cpuid_count</name><parameter_list>(<parameter><type><name>__leaf</name></type></parameter>, <parameter><type><name>__count</name></type></parameter>, <parameter><type><name>__eax</name></type></parameter>, <parameter><type><name>__ebx</name></type></parameter>, <parameter><type><name>__ecx</name></type></parameter>, <parameter><type><name>__edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm("cpuid" : "=a"(__eax), "=b"(__ebx), "=c"(__ecx), "=d"(__edx) : "0"(__leaf), "2"(__count))</cpp:value></cpp:define>



<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cpuid_count</name><parameter_list>(<parameter><type><name>__leaf</name></type></parameter>, <parameter><type><name>__count</name></type></parameter>, <parameter><type><name>__eax</name></type></parameter>, <parameter><type><name>__ebx</name></type></parameter>, <parameter><type><name>__ecx</name></type></parameter>, <parameter><type><name>__edx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm("xchgq %%rbx,%q1\n" "cpuid\n" "xchgq %%rbx,%q1" : "=a"(__eax), "=r"(__ebx), "=c"(__ecx), "=d"(__edx) : "0"(__leaf), "2"(__count))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__cpuid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>__info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__level</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__cpuid_count</name><argument_list>(<argument><expr><name>__level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__cpuidex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>__info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__level</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>__ecx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__cpuid_count</name><argument_list>(<argument><expr><name>__level</name></expr></argument>, <argument><expr><name>__ecx</name></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>__info</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__halt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>("hlt");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__nop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>volatile</specifier>("nop");</asm>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__getReg</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>long</name></type> <name>_InterlockedAdd</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>Addend</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__int64</name></type> <name>_ReadStatusReg</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_WriteStatusReg</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>__int64</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>short</name> <name>__cdecl</name></type> <name>_byteswap_ushort</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name> <name>__cdecl</name></type> <name>_byteswap_ulong</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name> <name>__cdecl</name></type> <name>_byteswap_uint64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>val</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>__int64</name></type> <name>__mulh</name><parameter_list>(<parameter><decl><type><name>__int64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>__b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>__int64</name></type> <name>__umulh</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>__int64</name></type> <name>__b</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__int64</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__readmsr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>__register</name></decl></parameter>)</parameter_list> <block>{<block_content>






<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>__edx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>__eax</name></decl>;</decl_stmt>
<asm>__asm__ ("rdmsr" : "=d"(__edx), "=a"(__eax) : "c"(__register));</asm>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>__int64</name><operator>)</operator><name>__edx</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>__int64</name><operator>)</operator><name>__eax</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>__LPTRINT_TYPE__</name> <name>__DEFAULT_FN_ATTRS</name></type> <name>__readcr3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>__LPTRINT_TYPE__</name></type> <name>__cr3_val</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier> ("mov %%cr3, %0" : "=r"(__cr3_val) : : "memory");</asm>
<return>return <expr><name>__cr3_val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__writecr3</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>__INTPTR_TYPE__</name></type> <name>__cr3_val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ ("mov %0, %%cr3" : : "r"(__cr3_val) : "memory");</asm>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__LPTRINT_TYPE__</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
