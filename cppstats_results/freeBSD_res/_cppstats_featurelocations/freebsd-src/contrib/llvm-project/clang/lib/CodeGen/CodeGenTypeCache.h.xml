<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CodeGenTypeCache.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CODEGENTYPECACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CODEGENTYPECACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/AddressSpaces.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/CallingConv.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IntegerType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PointerType</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>




<struct>struct <name>CodeGenTypeCache</name> <block>{

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>VoidTy</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>Int8Ty</name></expr><operator>,</operator> <expr><operator>*</operator><name>Int16Ty</name></expr><operator>,</operator> <expr><operator>*</operator><name>Int32Ty</name></expr><operator>,</operator> <expr><operator>*</operator><name>Int64Ty</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>HalfTy</name></expr><operator>,</operator> <expr><operator>*</operator><name>BFloatTy</name></expr><operator>,</operator> <expr><operator>*</operator><name>FloatTy</name></expr><operator>,</operator> <expr><operator>*</operator><name>DoubleTy</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>IntTy</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>CharTy</name></expr>;</expr_stmt>


<union>union <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>IntPtrTy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>SizeTy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>PtrDiffTy</name></expr>;</expr_stmt>
}</block>;</union>


<union>union <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>VoidPtrTy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>Int8PtrTy</name></expr>;</expr_stmt>
}</block>;</union>


<union>union <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>VoidPtrPtrTy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>Int8PtrPtrTy</name></expr>;</expr_stmt>
}</block>;</union>


<union>union <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>AllocaVoidPtrTy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>AllocaInt8PtrTy</name></expr>;</expr_stmt>
}</block>;</union>



<union>union <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>IntSizeInBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>IntAlignInBytes</name></decl>;</decl_stmt>
}</block>;</union>
<expr_stmt><expr><name>CharUnits</name> <macro><name>getIntSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>IntSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <macro><name>getIntAlign</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>IntAlignInBytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>PointerWidthInBits</name></decl>;</decl_stmt>


<union>union <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>PointerAlignInBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>PointerSizeInBytes</name></decl>;</decl_stmt>
}</block>;</union>


<union>union <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>SizeSizeInBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>SizeAlignInBytes</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>LangAS</name></type> <name>ASTAllocaAddressSpace</name></decl>;</decl_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getSizeSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>SizeSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <macro><name>getSizeAlign</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>SizeAlignInBytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <macro><name>getPointerSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>PointerSizeInBytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <macro><name>getPointerAlign</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>PointerAlignInBytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallingConv</name><operator>::</operator><name>ID</name> <name>RuntimeCC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>CallingConv</name><operator>::</operator><name>ID</name> <macro><name>getRuntimeCC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RuntimeCC</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>LangAS</name> <macro><name>getASTAllocaAddressSpace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ASTAllocaAddressSpace</name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
