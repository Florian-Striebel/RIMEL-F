<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/PPC.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_PPC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_PPC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OSTargets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSwitch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>PPCTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{


<typedef>typedef <type><enum>enum <block>{
<decl><name>ArchDefineNone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>ArchDefineName</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>ArchDefinePpcgr</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>ArchDefinePpcsq</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>ArchDefine440</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>ArchDefine603</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>ArchDefine604</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>ArchDefinePwr4</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>ArchDefinePwr5</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>ArchDefinePwr5x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,
<decl><name>ArchDefinePwr6</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>,
<decl><name>ArchDefinePwr6x</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>,
<decl><name>ArchDefinePwr7</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></init></decl>,
<decl><name>ArchDefinePwr8</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>,
<decl><name>ArchDefinePwr9</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></init></decl>,
<decl><name>ArchDefinePwr10</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>,
<decl><name>ArchDefineFuture</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>,
<decl><name>ArchDefineA2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,
<decl><name>ArchDefineE500</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>
}</init> <name>ArchDefineTypes</name></decl><empty_stmt>;</empty_stmt>

<type><name>ArchDefineTypes</name></type> <name>ArchDefs</name> <init>= <expr><name>ArchDefineNone</name></expr></init>;
<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;</expr_stmt>
<type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>GCCRegNames</name><index>[]</index></name>;
<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>GCCRegAliases</name><index>[]</index></name></expr>;</expr_stmt>
<decl><name>std</name>::<name>string</name> <name>CPU</name></decl><empty_stmt>;</empty_stmt>
<enum>enum <name>PPCFloatABI</name> <block>{ <decl><name>HardFloat</name></decl>, <decl><name>SoftFloat</name> } <name>FloatABI</name></decl><empty_stmt>;</empty_stmt>


<type><name>bool</name></type> <name>HasAltivec</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasMMA</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasROPProtect</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasPrivileged</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasVSX</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasP8Vector</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasP8Crypto</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasDirectMove</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasHTM</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasBPERMD</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasExtDiv</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasP9Vector</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasSPE</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>PairedVectorMemops</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasP10Vector</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasPCRelativeMemops</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>HasPrefixInstrs</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>IsISA2_07</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>IsISA3_0</name> <init>= <expr><name>false</name></expr></init>;
<type><name>bool</name></type> <name>IsISA3_1</name> <init>= <expr><name>false</name></expr></init>;

<label><name>protected</name>:</label>
<decl><name>std</name>::<name>string</name> <name>ABI</name></decl><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>
<decl><name>PPCTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list>
<range>: <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <expr><block>{
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>SimdDefaultAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>PPCDoubleDouble</name><argument_list>()</argument_list></call></expr>;
<expr><name>HasStrictFP</name> <operator>=</operator> <name>true</name></expr>;
}</block>


<name>void</name> <macro><name>adjust</name><argument_list>(<argument>DiagnosticsEngine &amp;Diags</argument>, <argument>LangOptions &amp;Opts</argument>)</argument_list></macro> <name>override</name></expr></range></decl><empty_stmt>;</empty_stmt>




<type><name>bool</name></type> <name>isValidCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name>;
<type><name>void</name></type> <name>fillValidCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name>;

<type><name>bool</name></type> <name>setCPU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<type><name>bool</name></type> <name>CPUKnown</name> <init>= <expr><call><name>isValidCPUName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></init>;
<if_stmt><if>if <condition>(<expr><name>CPUKnown</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ArchDefs</name> <operator>=</operator>
<operator>(</operator><name>ArchDefineTypes</name><operator>)</operator><name>llvm</name><operator>::</operator><call><name><name>StringSwitch</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CPU</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"440"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"450"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefine440</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"601"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"602"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"603"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"603e"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefine603</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"603ev"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefine603</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"604"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"604e"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefine604</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"620"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"630"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"7400"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"7450"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"750"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"970"</literal></expr></argument>, <argument><expr><name>ArchDefineName</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator>
<name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"a2"</literal></expr></argument>, <argument><expr><name>ArchDefineA2</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power3"</literal></expr></argument>, <argument><expr><literal type="string">"pwr3"</literal></expr></argument>, <argument><expr><name>ArchDefinePpcgr</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power4"</literal></expr></argument>, <argument><expr><literal type="string">"pwr4"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator> <name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power5"</literal></expr></argument>, <argument><expr><literal type="string">"pwr5"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr5</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator>
<name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power5x"</literal></expr></argument>, <argument><expr><literal type="string">"pwr5x"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr5x</name> <operator>|</operator> <name>ArchDefinePwr5</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator>
<name>ArchDefinePpcgr</name> <operator>|</operator> <name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power6"</literal></expr></argument>, <argument><expr><literal type="string">"pwr6"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr6</name> <operator>|</operator> <name>ArchDefinePwr5x</name> <operator>|</operator> <name>ArchDefinePwr5</name> <operator>|</operator>
<name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator> <name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power6x"</literal></expr></argument>, <argument><expr><literal type="string">"pwr6x"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr6x</name> <operator>|</operator> <name>ArchDefinePwr6</name> <operator>|</operator> <name>ArchDefinePwr5x</name> <operator>|</operator>
<name>ArchDefinePwr5</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator>
<name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power7"</literal></expr></argument>, <argument><expr><literal type="string">"pwr7"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr7</name> <operator>|</operator> <name>ArchDefinePwr6</name> <operator>|</operator> <name>ArchDefinePwr5x</name> <operator>|</operator>
<name>ArchDefinePwr5</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator>
<name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>

<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power8"</literal></expr></argument>, <argument><expr><literal type="string">"pwr8"</literal></expr></argument>, <argument><expr><literal type="string">"ppc64le"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr8</name> <operator>|</operator> <name>ArchDefinePwr7</name> <operator>|</operator> <name>ArchDefinePwr6</name> <operator>|</operator>
<name>ArchDefinePwr5x</name> <operator>|</operator> <name>ArchDefinePwr5</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator>
<name>ArchDefinePpcgr</name> <operator>|</operator> <name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power9"</literal></expr></argument>, <argument><expr><literal type="string">"pwr9"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr9</name> <operator>|</operator> <name>ArchDefinePwr8</name> <operator>|</operator> <name>ArchDefinePwr7</name> <operator>|</operator>
<name>ArchDefinePwr6</name> <operator>|</operator> <name>ArchDefinePwr5x</name> <operator>|</operator> <name>ArchDefinePwr5</name> <operator>|</operator>
<name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator> <name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"power10"</literal></expr></argument>, <argument><expr><literal type="string">"pwr10"</literal></expr></argument>,
<argument><expr><name>ArchDefinePwr10</name> <operator>|</operator> <name>ArchDefinePwr9</name> <operator>|</operator> <name>ArchDefinePwr8</name> <operator>|</operator>
<name>ArchDefinePwr7</name> <operator>|</operator> <name>ArchDefinePwr6</name> <operator>|</operator> <name>ArchDefinePwr5x</name> <operator>|</operator>
<name>ArchDefinePwr5</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator> <name>ArchDefinePpcgr</name> <operator>|</operator>
<name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Case</name><argument_list>(<argument><expr><literal type="string">"future"</literal></expr></argument>,
<argument><expr><name>ArchDefineFuture</name> <operator>|</operator> <name>ArchDefinePwr10</name> <operator>|</operator> <name>ArchDefinePwr9</name> <operator>|</operator>
<name>ArchDefinePwr8</name> <operator>|</operator> <name>ArchDefinePwr7</name> <operator>|</operator> <name>ArchDefinePwr6</name> <operator>|</operator>
<name>ArchDefinePwr5x</name> <operator>|</operator> <name>ArchDefinePwr5</name> <operator>|</operator> <name>ArchDefinePwr4</name> <operator>|</operator>
<name>ArchDefinePpcgr</name> <operator>|</operator> <name>ArchDefinePpcsq</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"8548"</literal></expr></argument>, <argument><expr><literal type="string">"e500"</literal></expr></argument>, <argument><expr><name>ArchDefineE500</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Default</name><argument_list>(<argument><expr><name>ArchDefineNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return CPUKnown</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>

StringRef getABI(</block>) const override <block>{<block_content> <return>return <expr><name>ABI</name></expr>;</return> <expr_stmt/>}</block_content>

ArrayRef&lt;Builtin::Info&gt; getTargetBuiltins(</block>)</block> <expr_stmt><expr><specifier>const</specifier> <name>override</name></expr>;</expr_stmt></enum>

<decl><name>bool</name> <name>isCLZForZeroUndef</name><argument_list>()</argument_list> const <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> <expr_stmt/>}</block>

<name>void</name> <name>getTargetDefines</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name>MacroBuilder</name> <operator>&amp;</operator><name>Builder</name></expr></argument>)</argument_list> const <name>override</name></decl><empty_stmt>;</empty_stmt>

<type><name>bool</name></type>
<name>initFeatureMap</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>CPU</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FeaturesVec</name></expr></argument>)</argument_list> const <name>override</name>;

<type><name>void</name></type> <name>addP10SpecificFeatures</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>)</argument_list> const;
<type><name>void</name></type> <name>addFutureSpecificFeatures</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>)</argument_list> const;

<type><name>bool</name></type> <name>handleTargetFeatures</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> <name>override</name>;

<type><name>bool</name></type> <name>hasFeature</name><argument_list>(<argument><expr><name>StringRef</name> <name>Feature</name></expr></argument>)</argument_list> const <name>override</name>;

<type><name>void</name></type> <name>setFeatureEnabled</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Name</name></expr></argument>,
<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <name>override</name>;

<decl><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>getGCCRegNames</name><argument_list>()</argument_list> const <name>override</name></decl><empty_stmt>;</empty_stmt>

<decl><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <name>getGCCRegAliases</name><argument_list>()</argument_list> const <name>override</name></decl><empty_stmt>;</empty_stmt>

<decl><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>AddlRegName</name></expr></argument>&gt;</argument_list></name> <name>getGCCAddlRegNames</name><argument_list>()</argument_list> const <name>override</name></decl><empty_stmt>;</empty_stmt>

<type><name>bool</name></type> <name>validateAsmConstraint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>&amp;</operator><name>Name</name></expr></argument>,
<argument><expr><name>TargetInfo</name><operator>::</operator><name>ConstraintInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>FloatABI</name> <operator>==</operator> <name>SoftFloat</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>LLVM_FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>


<if_stmt><if>if <condition>(<expr><name>FloatABI</name> <operator>==</operator> <name>SoftFloat</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<switch>switch <condition>(<expr><name><name>Name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/>}</block_content>
Info.setAllowsRegister(</block></switch>)</block_content></block><empty_stmt>;</empty_stmt></switch>
<expr_stmt><expr><name>Name</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>











<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>Name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsMemory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Name</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>LLVM_FALLTHROUGH</name></expr>;</expr_stmt>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>


<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsMemory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<case>case <expr><literal type="char">'j'</literal></expr>:</case>
<break>break;</break>

<expr_stmt/>}</block_content>
return true</block>;
<expr_stmt/>}</block>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>convertConstraint</name><argument_list>(<argument>const char *&amp;Constraint</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>R</name></expr>;
<switch>switch <condition>(<expr><operator>*</operator><name>Constraint</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<expr_stmt><expr><name>R</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Constraint</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>TargetInfo</name><operator>::</operator><call><name>convertConstraint</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
return R</block><empty_stmt>;</empty_stmt></switch>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block>
<name>int</name> <macro><name>getEHDataRegisterNumber</name><argument_list>(<argument>unsigned RegNo</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt></enum></type></typedef>
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasSjLjLowering</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getLongDoubleMangling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>LongDoubleWidth</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"e"</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><ternary><condition><expr><name>LongDoubleFormat</name> <operator>==</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>PPCDoubleDouble</name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><literal type="string">"g"</literal></expr>
</then><else>: <expr><literal type="string">"u9__ieee128"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getFloat128Mangling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"u9__ieee128"</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isSPRegName</name><argument_list>(<argument><expr><name>StringRef</name> <name>RegName</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"r1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"x1"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>PPC32TargetInfo</name> <range>: <expr><name>public</name> <name>PPCTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>PPC32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>PPCTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isOSAIX</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:a-p:32:32-i64:64-n32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppcle</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-i64:64-n32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:e-p:32:32-i64:64-n32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr>

<switch>switch <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOS</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>Linux</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>FreeBSD</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>NetBSD</name></expr>:</case>
<expr_stmt><expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IntPtrType</name> <operator>=</operator> <name>SignedInt</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>AIX</name></expr>:</case>
<expr_stmt><expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleAlign</name> <operator>=</operator> <name>DoubleAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
<expr_stmt/>}</block_content>

if (Triple.isOSFreeBSD(</block></switch>) <operator>||</operator> <call><name><name>Triple</name><operator>.</operator><name>isOSNetBSD</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Triple</name><operator>.</operator><name>isOSOpenBSD</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name><name>Triple</name><operator>.</operator><name>isMusl</name></name><argument_list>()</argument_list></call>)</block> <block>{
<expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;
}</block>


<name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">32</literal></expr></range></decl>;</decl_stmt>
}

BuiltinVaListKind <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>TargetInfo</name><operator>::</operator><name>PowerABIBuiltinVaList</name></expr>;</return>
}</block></expr></expr_stmt>
};



<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>PPC64TargetInfo</name> <range>: <expr><name>public</name> <name>PPCTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>PPC64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>PPCTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>Int64Type</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>DataLayout</name> <operator>=</operator> <literal type="string">""</literal></expr>;

<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isOSAIX</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>DataLayout</name> <operator>=</operator> <literal type="string">"E-m:a-i64:64-n32:64"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleAlign</name> <operator>=</operator> <name>DoubleAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if ((Triple.getArch(</block></if></if_stmt>) <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64le</name>)</block></expr>) <block>{
<expr><name>DataLayout</name> <operator>=</operator> <literal type="string">"e-m:e-i64:64-n32:64"</literal></expr>;
<expr><name>ABI</name> <operator>=</operator> <literal type="string">"elfv2"</literal></expr>;
}</block></block></expr></range></decl></decl_stmt> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name>DataLayout</name> <operator>=</operator> <literal type="string">"E-m:e-i64:64-n32:64"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ABI</name> <operator>=</operator> <literal type="string">"elfv1"</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isOSFreeBSD</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Triple</name><operator>.</operator><name>isOSOpenBSD</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Triple</name><operator>.</operator><name>isMusl</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isOSAIX</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Triple</name><operator>.</operator><name>isOSLinux</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DataLayout</name> <operator>+=</operator> <literal type="string">"-S128-v256:256:256-v512:512:512"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><name>DataLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
}

BuiltinVaListKind <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>setABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"elfv1"</literal> <operator>||</operator> <name>Name</name> <operator>==</operator> <literal type="string">"elfv2"</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ABI</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>CallingConvCheckResult</name></type> <name>checkCallingConvention</name><argument_list>(<argument><expr><name>CallingConv</name> <name>CC</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_Swift</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
<case>case <expr><name>CC_SwiftAsync</name></expr>:</case>
<return>return <expr><name>CCCR_Error</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>DarwinPPC32TargetInfo</name>
<range>: <expr><name>public</name> <name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>PPC32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DarwinPPC32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DarwinTargetInfo</name></macro><operator>&lt;</operator><name>PPC32TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>HasAlignMac68kSupport</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>BoolWidth</name> <operator>=</operator> <name>BoolAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>LongLongAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:o-p:32:32-f64:32:64-n32"</literal></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>DarwinPPC64TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>PPC64TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DarwinPPC64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DarwinTargetInfo</name></macro><operator>&lt;</operator><name>PPC64TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>HasAlignMac68kSupport</name> <operator>=</operator> <name>true</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:o-i64:64-n32:64"</literal></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>AIXPPC32TargetInfo</name> <operator>:</operator>
<name>public</name> <name><name>AIXTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>PPC32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>AIXTargetInfo</name><operator>::</operator><name>AIXTargetInfo</name></expr>;
<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>AIXPPC64TargetInfo</name> <operator>:</operator>
<name>public</name> <name><name>AIXTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>PPC64TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>AIXTargetInfo</name><operator>::</operator><name>AIXTargetInfo</name></expr>;
}</block></expr>;

}</block></expr>
}</block></expr></range></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
