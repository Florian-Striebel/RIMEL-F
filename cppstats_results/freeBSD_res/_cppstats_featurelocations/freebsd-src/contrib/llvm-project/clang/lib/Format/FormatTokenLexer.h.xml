<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/FormatTokenLexer.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_FORMATTOKENLEXER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_FORMATTOKENLEXER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FormatToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/MapVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Regex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>

<enum>enum <name>LexerState</name> <block>{
<decl><name>NORMAL</name></decl>,
<decl><name>TEMPLATE_STRING</name></decl>,
<decl><name>TOKEN_STASHED</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>FormatTokenLexer</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>FormatTokenLexer</name><argument_list>(<argument>const SourceManager &amp;SourceMgr</argument>, <argument>FileID ID</argument>, <argument>unsigned Column</argument>,
<argument>const FormatStyle &amp;Style</argument>, <argument>encoding::Encoding Encoding</argument>,
<argument>llvm::SpecificBumpPtrAllocator&lt;FormatToken&gt; &amp;Allocator</argument>,
<argument>IdentifierTable &amp;IdentTable</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FormatToken</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>lex</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>const</specifier> <name>AdditionalKeywords</name> <modifier>&amp;</modifier></type><name>getKeywords</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Keywords</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>tryMergePreviousTokens</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tryMergeLessLess</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryMergeNSStringLiteral</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryMergeJSPrivateIdentifier</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryMergeCSharpStringLiteral</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryMergeCSharpKeywordVariables</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryMergeNullishCoalescingEqual</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryTransformCSharpForEach</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryMergeForEach</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>tryTransformTryUsageForC</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tryMergeTokens</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name></expr></argument>&gt;</argument_list></name></type> <name>Kinds</name></decl></parameter>, <parameter><decl><type><name>TokenType</name></type> <name>NewType</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>precedesOperand</name><parameter_list>(<parameter><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>Tok</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>canPrecedeRegexLiteral</name><parameter_list>(<parameter><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>Prev</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>tryParseJSRegexLiteral</name><parameter_list>()</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>handleTemplateStrings</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>handleCSharpVerbatimAndInterpolatedStrings</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>tryParsePythonComment</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tryMerge_TMacro</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>tryMergeConflictMarkers</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>getStashedToken</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>getNextToken</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>FormatTok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsFirstToken</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>LexerState</name></expr></argument>&gt;</argument_list></name> <name>StateStack</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>TrailingWhitespace</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Lexer</name></expr></argument>&gt;</argument_list></name> <name>Lex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileID</name></type> <name>ID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FormatStyle</name> <modifier>&amp;</modifier></type><name>Style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdentifierTable</name> <modifier>&amp;</modifier></type><name>IdentTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AdditionalKeywords</name></type> <name>Keywords</name></decl>;</decl_stmt>
<expr_stmt><expr><name>encoding</name><operator>::</operator><name>Encoding</name> <name>Encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SpecificBumpPtrAllocator</name><argument_list type="generic">&lt;<argument><expr><name>FormatToken</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Allocator</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>FirstInLineIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FormatToken</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>Tokens</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallMapVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>TokenType</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>Macros</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>FormattingDisabled</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Regex</name> <name>MacroBlockBeginRegex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Regex</name> <name>MacroBlockEndRegex</name></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>CSharpAttributeTargets</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>readRawToken</name><parameter_list>(<parameter><decl><type><name>FormatToken</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>resetLexer</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
