<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/immintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IMMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IMMINTRIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;x86gprintrin.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MMX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xmmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSE3__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pmmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSSE3__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tmmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__SSE4_2__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SSE4_1__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;smmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AES__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PCLMUL__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wmmintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CLFLUSHOPT__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clflushoptintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CLWB__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clwbintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avxintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx2intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__F16C__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;f16cintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bmiintrin.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BMI2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bmi2intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LZCNT__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lzcntintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__POPCNT__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;popcntintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FMA__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fmaintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512F__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512fintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512BW__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512bwintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512BITALG__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512bitalgintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512CD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512cdintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VPOPCNTDQ__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vpopcntdqintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VPOPCNTDQ__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vpopcntdqvlintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VNNI__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vnniintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VNNI__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlvnniintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVXVNNI__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avxvnniintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512DQ__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512dqintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512BITALG__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlbitalgintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512BW__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlbwintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512CD__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlcdintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512DQ__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vldqintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512ER__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512erintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512IFMA__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512ifmaintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512IFMA__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512ifmavlintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VBMI__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vbmiintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VBMI__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vbmivlintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VBMI2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vbmi2intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VBMI2__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlvbmi2intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512PF__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512pfintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512BF16__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512bf16intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512BF16__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlbf16intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PKU__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pkuintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__VPCLMULQDQ__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpclmulqdqintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__VAES__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vaesintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GFNI__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gfniintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__RDPID__</name></expr></argument>)</argument_list></call></expr></cpp:if>






<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"rdpid"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_rdpid_u32</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdpid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__RDRND__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"rdrnd"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_rdrand16_step</name><argument_list>(<argument><expr><name>unsigned</name> <name>short</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdrand16_step</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"rdrnd"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_rdrand32_step</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdrand32_step</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"rdrnd"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_rdrand64_step</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>long</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdrand64_step</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FSGSBASE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_readfsbase_u32</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdfsbase32</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_readfsbase_u64</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdfsbase64</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_readgsbase_u32</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdgsbase32</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_readgsbase_u64</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdgsbase64</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_writefsbase_u32</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>__V</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_wrfsbase32</name><argument_list>(<argument><expr><name>__V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_writefsbase_u64</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>long</name> <name>__V</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_wrfsbase64</name><argument_list>(<argument><expr><name>__V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_writegsbase_u32</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>__V</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_wrgsbase32</name><argument_list>(<argument><expr><name>__V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"fsgsbase"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_writegsbase_u64</name><argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>long</name> <name>__V</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_wrgsbase64</name><argument_list>(<argument><expr><name>__V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MOVBE__</name></expr></argument>)</argument_list></call></expr></cpp:if>








<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>short</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"movbe"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_loadbe_i16</name><argument_list>(<argument><expr><name>void</name> <specifier>const</specifier> <operator>*</operator> <name>__P</name></expr></argument>)</argument_list> <block>{<block_content>
<struct>struct <name>__loadu_i16</name> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<return>return <expr><call><name>__builtin_bswap16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__loadu_i16</name><operator>*</operator><operator>)</operator><name>__P</name><operator>)</operator><operator>-&gt;</operator><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"movbe"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_storebe_i16</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator> <name>__P</name></expr></argument>, <argument><expr><name>short</name> <name>__D</name></expr></argument>)</argument_list> <block>{<block_content>
<struct>struct <name>__storeu_i16</name> <block>{
<decl_stmt><decl><type><name>short</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__storeu_i16</name><operator>*</operator><operator>)</operator><name>__P</name><operator>)</operator><operator>-&gt;</operator><name>__v</name> <operator>=</operator> <call><name>__builtin_bswap16</name><argument_list>(<argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"movbe"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_loadbe_i32</name><argument_list>(<argument><expr><name>void</name> <specifier>const</specifier> <operator>*</operator> <name>__P</name></expr></argument>)</argument_list> <block>{<block_content>
<struct>struct <name>__loadu_i32</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__loadu_i32</name><operator>*</operator><operator>)</operator><name>__P</name><operator>)</operator><operator>-&gt;</operator><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"movbe"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_storebe_i32</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator> <name>__P</name></expr></argument>, <argument><expr><name>int</name> <name>__D</name></expr></argument>)</argument_list> <block>{<block_content>
<struct>struct <name>__storeu_i32</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__storeu_i32</name><operator>*</operator><operator>)</operator><name>__P</name><operator>)</operator><operator>-&gt;</operator><name>__v</name> <operator>=</operator> <call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"movbe"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_loadbe_i64</name><argument_list>(<argument><expr><name>void</name> <specifier>const</specifier> <operator>*</operator> <name>__P</name></expr></argument>)</argument_list> <block>{<block_content>
<struct>struct <name>__loadu_i64</name> <block>{
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>__loadu_i64</name><operator>*</operator><operator>)</operator><name>__P</name><operator>)</operator><operator>-&gt;</operator><name>__v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"movbe"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_storebe_i64</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator> <name>__P</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>__D</name></expr></argument>)</argument_list> <block>{<block_content>
<struct>struct <name>__storeu_i64</name> <block>{
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>__v</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <name>__may_alias__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>__storeu_i64</name><operator>*</operator><operator>)</operator><name>__P</name><operator>)</operator><operator>-&gt;</operator><name>__v</name> <operator>=</operator> <call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__RTM__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rtmintrin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xtestintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SHA__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shaintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FXSR__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fxsrintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xsaveintrin.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__XSAVEOPT__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xsaveoptintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__XSAVEC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xsavecintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__XSAVES__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xsavesintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SHSTK__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cetintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;adxintrin.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__RDSEED__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rdseedintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WBNOINVD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wbnoinvdintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CLDEMOTE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cldemoteintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WAITPKG__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;waitpkgintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MOVDIRI__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MOVDIR64B__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;movdirintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PCONFIG__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pconfigintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SGX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgxintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__PTWRITE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ptwriteintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INVPCID__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;invpcidintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__KL__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WIDEKL__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;keylockerintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AMXTILE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AMXINT8__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AMXBF16__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amxintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VP2INTERSECT__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vp2intersectintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VL__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__AVX512VP2INTERSECT__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avx512vlvp2intersectintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ENQCMD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;enqcmdintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SERIALIZE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serializeintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SCE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>__has_feature</name><argument_list>(<argument><expr><name>modules</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TSXLDTRK__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tsxldtrkintrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__has_extension</name><argument_list>(<argument><expr><name>gnu_asm</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedExchange_HLEAcquire</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf2 ; lock ; xchg %0, %1"
: "+r" (_Value), "+m" (*_Target) :: "memory");</asm>
<return>return <expr><name>_Value</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedExchange_HLERelease</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf3 ; lock ; xchg %0, %1"
: "+r" (_Value), "+m" (*_Target) :: "memory");</asm>
<return>return <expr><name>_Value</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>__int64</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedExchange64_HLEAcquire</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf2 ; lock ; xchg %0, %1"
: "+r" (_Value), "+m" (*_Target) :: "memory");</asm>
<return>return <expr><name>_Value</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>__int64</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedExchange64_HLERelease</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Target</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf3 ; lock ; xchg %0, %1"
: "+r" (_Value), "+m" (*_Target) :: "memory");</asm>
<return>return <expr><name>_Value</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedCompareExchange_HLEAcquire</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf2 ; lock ; cmpxchg %2, %1"
: "+a" (_Comparand), "+m" (*_Destination)
: "r" (_Exchange) : "memory");</asm>
<return>return <expr><name>_Comparand</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedCompareExchange_HLERelease</name><parameter_list>(<parameter><decl><type><name>long</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf3 ; lock ; cmpxchg %2, %1"
: "+a" (_Comparand), "+m" (*_Destination)
: "r" (_Exchange) : "memory");</asm>
<return>return <expr><name>_Comparand</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>__int64</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedCompareExchange64_HLEAcquire</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf2 ; lock ; cmpxchg %2, %1"
: "+a" (_Comparand), "+m" (*_Destination)
: "r" (_Exchange) : "memory");</asm>
<return>return <expr><name>_Comparand</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>__int64</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_InterlockedCompareExchange64_HLERelease</name><parameter_list>(<parameter><decl><type><name>__int64</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>_Destination</name></decl></parameter>,
<parameter><decl><type><name>__int64</name></type> <name>_Exchange</name></decl></parameter>, <parameter><decl><type><name>__int64</name></type> <name>_Comparand</name></decl></parameter>)</parameter_list> <block>{<block_content>
<asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xf3 ; lock ; cmpxchg %2, %1"
: "+a" (_Comparand), "+m" (*_Destination)
: "r" (_Exchange) : "memory");</asm>
<return>return <expr><name>_Comparand</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
