<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_cuda_complex_builtins.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_CUDA_COMPLEX_BUILTINS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_CUDA_COMPLEX_BUILTINS</name></cpp:macro></cpp:define>






<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>declare</omp:name> <omp:name>target</omp:name></omp:directive></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>__attribute__((noinline, nothrow, cold, weak))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>__device__ inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISNANd</name></cpp:macro> <cpp:value>std::isnan</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISNANf</name></cpp:macro> <cpp:value>std::isnan</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISINFd</name></cpp:macro> <cpp:value>std::isinf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISINFf</name></cpp:macro> <cpp:value>std::isinf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISFINITEd</name></cpp:macro> <cpp:value>std::isfinite</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISFINITEf</name></cpp:macro> <cpp:value>std::isfinite</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COPYSIGNd</name></cpp:macro> <cpp:value>std::copysign</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COPYSIGNf</name></cpp:macro> <cpp:value>std::copysign</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SCALBNd</name></cpp:macro> <cpp:value>std::scalbn</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SCALBNf</name></cpp:macro> <cpp:value>std::scalbn</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABSd</name></cpp:macro> <cpp:value>std::abs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABSf</name></cpp:macro> <cpp:value>std::abs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOGBd</name></cpp:macro> <cpp:value>std::logb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOGBf</name></cpp:macro> <cpp:value>std::logb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_fmaxd</name></cpp:macro> <cpp:value>max</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_fmaxf</name></cpp:macro> <cpp:value>max</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISNANd</name></cpp:macro> <cpp:value>__ocml_isnan_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISNANf</name></cpp:macro> <cpp:value>__ocml_isnan_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISINFd</name></cpp:macro> <cpp:value>__ocml_isinf_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISINFf</name></cpp:macro> <cpp:value>__ocml_isinf_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISFINITEd</name></cpp:macro> <cpp:value>__ocml_isfinite_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISFINITEf</name></cpp:macro> <cpp:value>__ocml_isfinite_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COPYSIGNd</name></cpp:macro> <cpp:value>__ocml_copysign_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COPYSIGNf</name></cpp:macro> <cpp:value>__ocml_copysign_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SCALBNd</name></cpp:macro> <cpp:value>__ocml_scalbn_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SCALBNf</name></cpp:macro> <cpp:value>__ocml_scalbn_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABSd</name></cpp:macro> <cpp:value>__ocml_fabs_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABSf</name></cpp:macro> <cpp:value>__ocml_fabs_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOGBd</name></cpp:macro> <cpp:value>__ocml_logb_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOGBf</name></cpp:macro> <cpp:value>__ocml_logb_f32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_fmaxd</name></cpp:macro> <cpp:value>__ocml_fmax_f64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_fmaxf</name></cpp:macro> <cpp:value>__ocml_fmax_f32</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISNANd</name></cpp:macro> <cpp:value>__nv_isnand</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISNANf</name></cpp:macro> <cpp:value>__nv_isnanf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISINFd</name></cpp:macro> <cpp:value>__nv_isinfd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISINFf</name></cpp:macro> <cpp:value>__nv_isinff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISFINITEd</name></cpp:macro> <cpp:value>__nv_isfinited</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ISFINITEf</name></cpp:macro> <cpp:value>__nv_finitef</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COPYSIGNd</name></cpp:macro> <cpp:value>__nv_copysign</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_COPYSIGNf</name></cpp:macro> <cpp:value>__nv_copysignf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SCALBNd</name></cpp:macro> <cpp:value>__nv_scalbn</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SCALBNf</name></cpp:macro> <cpp:value>__nv_scalbnf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABSd</name></cpp:macro> <cpp:value>__nv_fabs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ABSf</name></cpp:macro> <cpp:value>__nv_fabsf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOGBd</name></cpp:macro> <cpp:value>__nv_logb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOGBf</name></cpp:macro> <cpp:value>__nv_logbf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_fmaxd</name></cpp:macro> <cpp:value>__nv_fmax</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_fmaxf</name></cpp:macro> <cpp:value>__nv_fmaxf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__muldc3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__ac</name> <init>= <expr><name>__a</name> <operator>*</operator> <name>__c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__bd</name> <init>= <expr><name>__b</name> <operator>*</operator> <name>__d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__ad</name> <init>= <expr><name>__a</name> <operator>*</operator> <name>__d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__bc</name> <init>= <expr><name>__b</name> <operator>*</operator> <name>__c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>__ac</name> <operator>-</operator> <name>__bd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>__ad</name> <operator>+</operator> <name>__bc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>_ISNANd</name><argument_list>(<argument><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__recalc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__recalc</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__ac</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFd</name><argument_list>(<argument><expr><name>__bd</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFd</name><argument_list>(<argument><expr><name>__ad</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFd</name><argument_list>(<argument><expr><name>__bc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__recalc</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_val</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_val</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__d</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__c</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name> <name>float</name> <specifier>_Complex</specifier></type> <name>__mulsc3</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__ac</name> <init>= <expr><name>__a</name> <operator>*</operator> <name>__c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>__bd</name> <init>= <expr><name>__b</name> <operator>*</operator> <name>__d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>__ad</name> <init>= <expr><name>__a</name> <operator>*</operator> <name>__d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>__bc</name> <init>= <expr><name>__b</name> <operator>*</operator> <name>__c</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>__ac</name> <operator>-</operator> <name>__bd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>__ad</name> <operator>+</operator> <name>__bc</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>_ISNANf</name><argument_list>(<argument><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__recalc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__recalc</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__ac</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFf</name><argument_list>(<argument><expr><name>__bd</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFf</name><argument_list>(<argument><expr><name>__ad</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFf</name><argument_list>(<argument><expr><name>__bc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>__recalc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__recalc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_valf</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_valf</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__d</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__c</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__divdc3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__c</name></decl></parameter>,
<parameter><decl><type><name>double</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__ilogbw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>double</name></type> <name>__logbw</name> <init>= <expr><call><name>_LOGBd</name><argument_list>(<argument><expr><call><name>_fmaxd</name><argument_list>(<argument><expr><call><name>_ABSd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_ABSd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISFINITEd</name><argument_list>(<argument><expr><name>__logbw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__ilogbw</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>__logbw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_SCALBNd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_SCALBNd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__denom</name> <init>= <expr><name>__c</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__d</name> <operator>*</operator> <name>__d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_SCALBNd</name><argument_list>(<argument><expr><operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator> <operator>/</operator> <name>__denom</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_SCALBNd</name><argument_list>(<argument><expr><operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator> <operator>/</operator> <name>__denom</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANd</name><argument_list>(<argument><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>_ISNANd</name><argument_list>(<argument><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>__denom</name> <operator>==</operator> <literal type="number">0.0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>_ISNANd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><call><name>__builtin_huge_val</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><call><name>__builtin_huge_val</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__b</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>_ISFINITEd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>_ISFINITEd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_val</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_val</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__logbw</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__logbw</name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <call><name>_ISFINITEd</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>_ISFINITEd</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNd</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFd</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.0</literal> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.0</literal> <operator>*</operator> <operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name> <name>float</name> <specifier>_Complex</specifier></type> <name>__divsc3</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__ilogbw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>__logbw</name> <init>= <expr><call><name>_LOGBf</name><argument_list>(<argument><expr><call><name>_fmaxf</name><argument_list>(<argument><expr><call><name>_ABSf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_ABSf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISFINITEf</name><argument_list>(<argument><expr><name>__logbw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__ilogbw</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>__logbw</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_SCALBNf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_SCALBNf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>__denom</name> <init>= <expr><name>__c</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__d</name> <operator>*</operator> <name>__d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>z</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_SCALBNf</name><argument_list>(<argument><expr><operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator> <operator>/</operator> <name>__denom</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_SCALBNf</name><argument_list>(<argument><expr><operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator> <operator>/</operator> <name>__denom</name></expr></argument>, <argument><expr><operator>-</operator><name>__ilogbw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>_ISNANf</name><argument_list>(<argument><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>_ISNANf</name><argument_list>(<argument><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>__denom</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>_ISNANf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><call><name>__builtin_huge_valf</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__a</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><call><name>__builtin_huge_valf</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>__b</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>_ISINFf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>_ISFINITEf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>_ISFINITEf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__a</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__b</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_valf</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_huge_valf</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__logbw</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__logbw</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>_ISFINITEf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>_ISFINITEf</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__d</name> <operator>=</operator> <call><name>_COPYSIGNf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>_ISINFf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__real__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal> <operator>*</operator> <operator>(</operator><name>__a</name> <operator>*</operator> <name>__c</name> <operator>+</operator> <name>__b</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__imag__</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal> <operator>*</operator> <operator>(</operator><name>__b</name> <operator>*</operator> <name>__c</name> <operator>-</operator> <name>__a</name> <operator>*</operator> <name>__d</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ISNANd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ISNANf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ISINFd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ISINFf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_COPYSIGNd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_COPYSIGNf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ISFINITEd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ISFINITEf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_SCALBNd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_SCALBNf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ABSd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_ABSf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_LOGBd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_LOGBf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_fmaxd</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_fmaxf</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_NVPTX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>target</omp:name></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
