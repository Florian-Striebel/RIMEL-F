<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/DiagOutputUtils.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYZER_WEBKIT_DIAGPRINTUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYZER_WEBKIT_DIAGPRINTUTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>NamedDeclDerivedT</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>printQuotedQualifiedName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Os</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NamedDeclDerivedT</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>Os</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>D</name><operator>-&gt;</operator><name>getNameForDiagnostic</name></name><argument_list>(<argument><expr><name>Os</name></expr></argument>, <argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getASTContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrintingPolicy</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Os</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>NamedDeclDerivedT</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>printQuotedName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Os</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>NamedDeclDerivedT</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>Os</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>D</name><operator>-&gt;</operator><name>getNameForDiagnostic</name></name><argument_list>(<argument><expr><name>Os</name></expr></argument>, <argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getASTContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrintingPolicy</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Os</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
