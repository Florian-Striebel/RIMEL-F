<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/WebAssembly.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_WEBASSEMBLY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_WEBASSEMBLY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WebAssemblyTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;

enum <expr><name>SIMDEnum</name> <block>{
<expr><name>NoSIMD</name></expr>,
<expr><name>SIMD128</name></expr>,
}</block> <name>SIMDLevel</name> <operator>=</operator> <name>NoSIMD</name></expr>;

<expr><name>bool</name> <name>HasNontrappingFPToInt</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasSignExt</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasExceptionHandling</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasBulkMemory</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAtomics</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasMutableGlobals</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasMultivalue</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasTailCall</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasReferenceTypes</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>ABI</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>WebAssemblyTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>T</argument>)</argument_list></macro> <block>{
<expr><name>NoAsmVariants</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LargeArrayMinWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LargeArrayAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>SimdDefaultAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>SigAtomicType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call></expr>;
<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;


<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;
}</block>

<name>StringRef</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>setABI</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>static</specifier> <name>void</name> <macro><name>setSIMDLevel</name><argument_list>(<argument>llvm::StringMap&lt;bool&gt; &amp;Features</argument>, <argument>SIMDEnum Level</argument>,
<argument>bool Enabled</argument>)</argument_list></macro></expr>;

<expr><name>bool</name>
<macro><name>initFeatureMap</name><argument_list>(<argument>llvm::StringMap&lt;bool&gt; &amp;Features</argument>, <argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>StringRef CPU</argument>,
<argument>const std::vector&lt;std::string&gt; &amp;FeaturesVec</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasFeature</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name></expr>;

<expr><name>void</name> <macro><name>setFeatureEnabled</name><argument_list>(<argument>llvm::StringMap&lt;bool&gt; &amp;Features</argument>, <argument>StringRef Name</argument>,
<argument>bool Enabled</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name></expr>;

<expr><name>bool</name> <macro><name>handleTargetFeatures</name><argument_list>(<argument>std::vector&lt;std::string&gt; &amp;Features</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <name>final</name></expr>;

<expr><name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name></expr>;
<expr><name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name></expr>;

<expr><name>bool</name> <macro><name>setCPU</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>final</name> <block>{ <return>return <expr><call><name>isValidCPUName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name></expr>;

<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{
<return>return <expr><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{ <return>return <expr><name>None</name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{
<return>return <expr><name>None</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;Info</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block>

<name>bool</name> <macro><name>isCLZForZeroUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>hasInt128Type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>IntType</name> <macro><name>getIntTypeByWidth</name><argument_list>(<argument>unsigned BitWidth</argument>, <argument>bool IsSigned</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{

<return>return <expr><name>BitWidth</name> <operator>==</operator> <literal type="number">64</literal> <operator>?</operator> <operator>(</operator><name>IsSigned</name> <operator>?</operator> <name>SignedLongLong</name> <operator>:</operator> <name>UnsignedLongLong</name><operator>)</operator>
<operator>:</operator> <name>TargetInfo</name><operator>::</operator><call><name>getIntTypeByWidth</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsSigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>IntType</name> <macro><name>getLeastIntTypeByWidth</name><argument_list>(<argument>unsigned BitWidth</argument>, <argument>bool IsSigned</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{

<return>return <expr><ternary><condition><expr><name>BitWidth</name> <operator>==</operator> <literal type="number">64</literal></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>IsSigned</name></expr> ?</condition><then> <expr><name>SignedLongLong</name></expr> </then><else>: <expr><name>UnsignedLongLong</name></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><name>TargetInfo</name><operator>::</operator><call><name>getLeastIntTypeByWidth</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsSigned</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_C</name></expr>:</case>
<case>case <expr><name>CC_Swift</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
<case>case <expr><name>CC_SwiftAsync</name></expr>:</case>
<return>return <expr><name>CCCR_Error</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
<expr_stmt/>}</block_content>
}

bool hasExtIntType(</block></switch>) <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></block>

<name>bool</name> <macro><name>hasProtectedVisibility</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>adjust</name><argument_list>(<argument>DiagnosticsEngine &amp;Diags</argument>, <argument>LangOptions &amp;Opts</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WebAssembly32TargetInfo</name>
<range>: <expr><name>public</name> <name>WebAssemblyTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>WebAssembly32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WebAssemblyTargetInfo</name><argument_list>(<argument>T</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>isOSEmscripten</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-i64:64-f128:64-n32:64-S128-ni:1:10:20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-i64:64-n32:64-S128-ni:1:10:20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WebAssembly64TargetInfo</name>
<range>: <expr><name>public</name> <name>WebAssemblyTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>WebAssembly64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WebAssemblyTargetInfo</name><argument_list>(<argument>T</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>LongAlign</name> <operator>=</operator> <name>LongWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>PointerAlign</name> <operator>=</operator> <name>PointerWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>isOSEmscripten</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:64:64-i64:64-f128:64-n32:64-S128-ni:1:10:20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:64:64-i64:64-n32:64-S128-ni:1:10:20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
