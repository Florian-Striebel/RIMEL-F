<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/openmp_wrappers/time.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_OPENMP_TIME_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_OPENMP_TIME_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for OpenMP compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static constexpr __attribute__((always_inline, nothrow))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static __attribute__((always_inline, nothrow))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;time.h&gt;</cpp:empty>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>begin</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name> <omp:clause><omp:name>match</omp:name><omp:argument_list>( <omp:argument><omp:expr>device = {arch(nvptx</omp:expr></omp:argument>, <omp:argument><omp:expr>nvptx64</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name>, <omp:name>implementation</omp:name> <omp:name>=</omp:name> <omp:name>{</omp:name><omp:clause><omp:name>extension</omp:name><omp:argument_list>(<omp:argument><omp:expr>match_any</omp:expr></omp:argument>)</omp:argument_list></omp:clause><omp:name>}</omp:name><omp:name>)</omp:name></omp:directive></cpp:pragma>


<function><type><name>__DEVICE__</name> <name>clock_t</name></type> <name>clock</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nvvm_read_ptx_sreg_clock</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>end</omp:name> <omp:name>declare</omp:name> <omp:name>variant</omp:name></omp:directive></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
