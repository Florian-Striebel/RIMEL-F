<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/X86.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_X86_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_X86_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OSTargets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/X86TargetParser.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>X86AddrSpaceMap</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">270</literal></expr>,
<expr><literal type="number">271</literal></expr>,
<expr><literal type="number">272</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>X86TargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{

enum <expr><name>X86SSEEnum</name> <block>{
<expr><name>NoSSE</name></expr>,
<expr><name>SSE1</name></expr>,
<expr><name>SSE2</name></expr>,
<expr><name>SSE3</name></expr>,
<expr><name>SSSE3</name></expr>,
<expr><name>SSE41</name></expr>,
<expr><name>SSE42</name></expr>,
<expr><name>AVX</name></expr>,
<expr><name>AVX2</name></expr>,
<expr><name>AVX512F</name></expr>
}</block> <name>SSELevel</name> <operator>=</operator> <name>NoSSE</name></expr>;
enum <expr><name>MMX3DNowEnum</name> <block>{
<expr><name>NoMMX3DNow</name></expr>,
<expr><name>MMX</name></expr>,
<expr><name>AMD3DNow</name></expr>,
<expr><name>AMD3DNowAthlon</name></expr>
}</block> <name>MMX3DNowLevel</name> <operator>=</operator> <name>NoMMX3DNow</name></expr>;
enum <expr><name>XOPEnum</name> <block>{ <expr><name>NoXOP</name></expr>, <expr><name>SSE4A</name></expr>, <expr><name>FMA4</name></expr>, <expr><name>XOP</name></expr> }</block> <name>XOPLevel</name> <operator>=</operator> <name>NoXOP</name></expr>;
enum <expr><name>AddrSpace</name> <block>{ <expr><name>ptr32_sptr</name> <operator>=</operator> <literal type="number">270</literal></expr>, <expr><name>ptr32_uptr</name> <operator>=</operator> <literal type="number">271</literal></expr>, <expr><name>ptr64</name> <operator>=</operator> <literal type="number">272</literal></expr> }</block></expr>;

<expr><name>bool</name> <name>HasAES</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasVAES</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasPCLMUL</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasVPCLMULQDQ</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasGFNI</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasLZCNT</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasRDRND</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasFSGSBASE</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasBMI</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasBMI2</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasPOPCNT</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasRTM</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasPRFCHW</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasRDSEED</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasADX</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasTBM</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasLWP</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasFMA</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasF16C</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512CD</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512VPOPCNTDQ</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512VNNI</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512BF16</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512ER</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512PF</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512DQ</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512BITALG</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512BW</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512VL</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512VBMI</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512VBMI2</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512IFMA</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVX512VP2INTERSECT</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasSHA</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasSHSTK</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasSGX</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasCX8</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasCX16</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasFXSR</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasXSAVE</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasXSAVEOPT</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasXSAVEC</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasXSAVES</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasMWAITX</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasCLZERO</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasCLDEMOTE</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasPCONFIG</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasPKU</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasCLFLUSHOPT</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasCLWB</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasMOVBE</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasPREFETCHWT1</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasRDPID</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasRetpolineExternalThunk</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasLAHFSAHF</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasWBNOINVD</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasWAITPKG</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasMOVDIRI</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasMOVDIR64B</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasPTWRITE</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasINVPCID</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasENQCMD</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasKL</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasWIDEKL</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasHRESET</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAVXVNNI</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAMXTILE</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAMXINT8</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasAMXBF16</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasSERIALIZE</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasTSXLDTRK</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasUINTR</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><name>CPUKind</name> <name>CPU</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><name>CK_None</name></expr>;

enum <expr><name>FPMathKind</name> <block>{ <expr><name>FP_Default</name></expr>, <expr><name>FP_SSE</name></expr>, <expr><name>FP_387</name></expr> }</block> <name>FPMath</name> <operator>=</operator> <name>FP_Default</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>X86TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>x87DoubleExtended</name><argument_list>()</argument_list></call></expr>;
<expr><name>AddrSpaceMap</name> <operator>=</operator> <operator>&amp;</operator><name>X86AddrSpaceMap</name></expr>;
<expr><name>HasStrictFP</name> <operator>=</operator> <name>true</name></expr>;

<expr><name>bool</name> <name>IsWinCOFF</name> <operator>=</operator>
<call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSWindows</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSBinFormatCOFF</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>IsWinCOFF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>MaxVectorAlign</name> <operator>=</operator> <name>MaxTLSAlign</name> <operator>=</operator> <literal type="number">8192u</literal> <operator>*</operator> <call><name>getCharWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getLongDoubleMangling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>LongDoubleFormat</name> <operator>==</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call> <operator>?</operator> <literal type="string">"g"</literal> <operator>:</operator> <literal type="string">"e"</literal></expr>;</return>
}</block>

<name>unsigned</name> <macro><name>getFloatEvalMethod</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><ternary><condition><expr><name>SSELevel</name> <operator>==</operator> <name>NoSSE</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>None</name></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>AddlRegName</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCAddlRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isSPRegName</name><argument_list>(<argument>StringRef RegName</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"esp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"rsp"</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>validateCpuSupports</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>validateCpuIs</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>validateCPUSpecificCPUDispatch</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>char</name> <macro><name>CPUSpecificManglingCharacter</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>getCPUSpecificCPUDispatchFeatures</name><argument_list>(
<argument>StringRef Name</argument>,
<argument>llvm::SmallVectorImpl&lt;StringRef&gt; &amp;Features</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getCPUCacheLineSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>validateGlobalRegisterVariable</name><argument_list>(<argument>StringRef RegName</argument>, <argument>unsigned RegSize</argument>,
<argument>bool &amp;HasSizeMismatch</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<if_stmt><if>if <condition>(<expr><call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"esp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"ebp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>HasSizeMismatch</name> <operator>=</operator> <name>RegSize</name> <operator>!=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>

return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>bool</name> <macro><name>validateOutputSize</name><argument_list>(<argument>const llvm::StringMap&lt;bool&gt; &amp;FeatureMap</argument>,
<argument>StringRef Constraint</argument>, <argument>unsigned Size</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>validateInputSize</name><argument_list>(<argument>const llvm::StringMap&lt;bool&gt; &amp;FeatureMap</argument>,
<argument>StringRef Constraint</argument>, <argument>unsigned Size</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>virtual</name> <name>bool</name>
<macro><name>checkCFProtectionReturnSupported</name><argument_list>(<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block></expr>;

<expr><name>virtual</name> <name>bool</name>
<macro><name>checkCFProtectionBranchSupported</name><argument_list>(<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>validateOperandSize</name><argument_list>(<argument>const llvm::StringMap&lt;bool&gt; &amp;FeatureMap</argument>,
<argument>StringRef Constraint</argument>, <argument>unsigned Size</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>convertConstraint</name><argument_list>(<argument>const char *&amp;Constraint</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><literal type="string">"~{dirflag},~{fpsr},~{flags}"</literal></expr>;</return>
}</block>

<name>StringRef</name> <macro><name>getConstraintRegister</name><argument_list>(<argument>StringRef Constraint</argument>,
<argument>StringRef Expression</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>StringRef</name><operator>::</operator><name>iterator</name> <name>I</name></expr>, <expr><name>E</name></expr>;
<for>for <control>(<init><expr><name>I</name> <operator>=</operator> <call><name><name>Constraint</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>, <expr><name>E</name> <operator>=</operator> <call><name><name>Constraint</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>I</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
if (I == E</block></for>)</block></expr>
<return>return <expr><literal type="string">""</literal></expr>;</return></block></expr></range></decl></decl_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>I</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<return>return <expr><literal type="string">"ax"</literal></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<return>return <expr><literal type="string">"bx"</literal></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<return>return <expr><literal type="string">"cx"</literal></expr>;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<return>return <expr><literal type="string">"dx"</literal></expr>;</return>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<return>return <expr><literal type="string">"si"</literal></expr>;</return>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<return>return <expr><literal type="string">"di"</literal></expr>;</return>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<return>return <expr><name>Expression</name></expr>;</return>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name>I</name> <operator>!=</operator> <name>E</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>I</name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>I</name> <operator>==</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"xmm0"</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>useFP16ConversionIntrinsics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>getTargetDefines</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name>MacroBuilder</name> <operator>&amp;</operator><name>Builder</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setFeatureEnabled</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Name</name></expr></argument>,
<argument><expr><name>bool</name> <name>Enabled</name></expr></argument>)</argument_list> const <name>final</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>initFeatureMap</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>CPU</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FeaturesVec</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidFeatureName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasFeature</name><argument_list>(<argument><expr><name>StringRef</name> <name>Feature</name></expr></argument>)</argument_list> const <name>final</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>handleTargetFeatures</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArch</name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name> <operator>&amp;&amp;</operator> <name>SSELevel</name> <operator>&gt;=</operator> <name>AVX512F</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"avx512"</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArch</name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name> <operator>&amp;&amp;</operator> <name>SSELevel</name> <operator>&gt;=</operator> <name>AVX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"avx"</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArch</name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name> <operator>&amp;&amp;</operator>
<name>MMX3DNowLevel</name> <operator>==</operator> <name>NoMMX3DNow</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"no-mmx"</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>supportsTargetAttributeTune</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>Only64Bit</name> <init>= <expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArch</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><call><name>parseArchX86</name><argument_list>(<argument><expr><name>Name</name></expr></argument>, <argument><expr><name>Only64Bit</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><name>CK_None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidTuneCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"generic"</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>




<return>return <expr><name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><call><name>parseTuneCPU</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><name>CK_None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>fillValidCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>fillValidTuneCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setCPU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>Only64Bit</name> <init>= <expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArch</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><call><name>parseArchX86</name><argument_list>(<argument><expr><name>Name</name></expr></argument>, <argument><expr><name>Only64Bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CPU</name> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>X86</name><operator>::</operator><name>CK_None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>multiVersionSortPriority</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setFPMath</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>supportsExtendIntArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArch</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>CallingConvCheckResult</name></type> <name>checkCallingConvention</name><argument_list>(<argument><expr><name>CallingConv</name> <name>CC</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>

<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_X86ThisCall</name></expr>:</case>
<case>case <expr><name>CC_X86FastCall</name></expr>:</case>
<case>case <expr><name>CC_X86StdCall</name></expr>:</case>
<case>case <expr><name>CC_X86VectorCall</name></expr>:</case>
<case>case <expr><name>CC_X86RegCall</name></expr>:</case>
<case>case <expr><name>CC_C</name></expr>:</case>
<case>case <expr><name>CC_PreserveMost</name></expr>:</case>
<case>case <expr><name>CC_Swift</name></expr>:</case>
<case>case <expr><name>CC_X86Pascal</name></expr>:</case>
<case>case <expr><name>CC_IntelOclBicc</name></expr>:</case>
<case>case <expr><name>CC_OpenCLKernel</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
<case>case <expr><name>CC_SwiftAsync</name></expr>:</case>
<return>return <expr><name>CCCR_Error</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>checkArithmeticFenceSupported</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>CallingConv</name> <macro><name>getDefaultCallingConv</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>CC_C</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasSjLjLowering</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setSupportedOpenCLOpts</name><parameter_list>()</parameter_list> override <block>{<block_content> <expr_stmt><expr><call><name>supportAllOpenCLOpts</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getPointerWidthV</name><argument_list>(<argument><expr><name>unsigned</name> <name>AddrSpace</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>AddrSpace</name> <operator>==</operator> <name>ptr32_sptr</name> <operator>||</operator> <name>AddrSpace</name> <operator>==</operator> <name>ptr32_uptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>AddrSpace</name> <operator>==</operator> <name>ptr64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">64</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>PointerWidth</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>getPointerAlignV</name><argument_list>(<argument><expr><name>unsigned</name> <name>AddrSpace</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><call><name>getPointerWidthV</name><argument_list>(<argument><expr><name>AddrSpace</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
};


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>X86_32TargetInfo</name> <range>: <expr><name>public</name> <name>X86TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>X86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>X86TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>DoubleAlign</name> <operator>=</operator> <name>LongLongAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">96</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(
<argument><expr><ternary><condition><expr><call><name><name>Triple</name><operator>.</operator><name>isOSBinFormatMachO</name></name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><literal type="string">"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-"</literal>
<literal type="string">"f80:32-n8:16:32-S128"</literal></expr>
</then><else>: <expr><literal type="string">"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-"</literal>
<literal type="string">"f80:32-n8:16:32-S128"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name><name>Triple</name><operator>.</operator><name>isOSBinFormatMachO</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"_"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>RegParmMax</name> <operator>=</operator> <literal type="number">3</literal></expr>;


<expr><name>RealTypeUsesObjCFPRet</name> <operator>=</operator>
<operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TargetInfo</name><operator>::</operator><name>Float</name><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TargetInfo</name><operator>::</operator><name>Double</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TargetInfo</name><operator>::</operator><name>LongDouble</name><operator>)</operator><operator>)</operator></expr>;


<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;
}</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block>

<name>int</name> <macro><name>getEHDataRegisterNumber</name><argument_list>(<argument>unsigned RegNo</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}

bool <macro><name>validateOperandSize</name><argument_list>(<argument>const llvm::StringMap&lt;bool&gt; &amp;FeatureMap</argument>,
<argument>StringRef Constraint</argument>, <argument>unsigned Size</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><name><name>Constraint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<break>break;</break>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<return>return <expr><name>Size</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>;</return>
<case>case <expr><literal type="char">'A'</literal></expr>:</case>
<return>return <expr><name>Size</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr></expr_stmt>

<return>return <expr><name>X86TargetInfo</name><operator>::</operator><call><name>validateOperandSize</name><argument_list>(<argument><expr><name>FeatureMap</name></expr></argument>, <argument><expr><name>Constraint</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
}

void <macro><name>setMaxAtomicWidth</name><argument_list>()</argument_list></macro> <macro><name>override</name></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>hasFeature</name><argument_list>(<argument><expr><literal type="string">"cx8"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>NetBSDI386TargetInfo</name>
<range>: <expr><name>public</name> <name><name>NetBSDTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>NetBSDI386TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>NetBSDTargetInfo</name></macro><operator>&lt;</operator><name>X86_32TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block>

<name>unsigned</name> <macro><name>getFloatEvalMethod</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>unsigned</name> <name>Major</name></expr>, <expr><name>Minor</name></expr>, <expr><name>Micro</name></expr>;
<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOSVersion</name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Micro</name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name>Major</name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>||</operator> <operator>(</operator><name>Major</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>Minor</name> <operator>==</operator> <literal type="number">99</literal> <operator>&amp;&amp;</operator> <name>Micro</name> <operator>&gt;=</operator> <literal type="number">26</literal><operator>)</operator> <operator>||</operator> <name>Major</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>X86_32TargetInfo</name><operator>::</operator><call><name>getFloatEvalMethod</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></expr></range></decl></decl_stmt>
};

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>OpenBSDI386TargetInfo</name>
<range>: <expr><name>public</name> <name><name>OpenBSDTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OpenBSDI386TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OpenBSDTargetInfo</name></macro><operator>&lt;</operator><name>X86_32TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>DarwinI386TargetInfo</name>
<range>: <expr><name>public</name> <name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DarwinI386TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DarwinTargetInfo</name></macro><operator>&lt;</operator><name>X86_32TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>MaxVectorAlign</name> <operator>=</operator> <literal type="number">256</literal></expr>;

<expr><name>llvm</name><operator>::</operator><name>Triple</name> <name>T</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>Triple</name><argument_list>(<argument><expr><name>Triple</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>isWatchOS</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>UseSignedCharForObjCBool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></block></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-"</literal>
<literal type="string">"f80:128-n8:16:32-S128"</literal></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>HasAlignMac68kSupport</name> <operator>=</operator> <name>true</name></expr>;
}</block>

<name>bool</name> <macro><name>handleTargetFeatures</name><argument_list>(<argument>std::vector&lt;std::string&gt; &amp;Features</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>handleTargetFeatures</name><argument_list>(<argument><expr><name>Features</name></expr></argument>,
<argument><expr><name>Diags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<name>MaxVectorAlign</name> <operator>=</operator>
<ternary><condition><expr><call><name>hasFeature</name><argument_list>(<argument><expr><literal type="string">"avx512f"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">512</literal></expr> </then><else>: <expr><ternary><condition><expr><call><name>hasFeature</name><argument_list>(<argument><expr><literal type="string">"avx"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></else></ternary></block></expr></range></decl>;</decl_stmt>
<return>return <expr><name>true</name></expr>;</return>
}
}<empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WindowsX86_32TargetInfo</name>
<range>: <expr><name>public</name> <name><name>WindowsTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>WindowsX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WindowsTargetInfo</name></macro><operator>&lt;</operator><name>X86_32TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>DoubleAlign</name> <operator>=</operator> <name>LongLongAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>bool</name> <name>IsWinCOFF</name> <operator>=</operator>
<call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSWindows</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSBinFormatCOFF</name><argument_list>()</argument_list></call></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><ternary><condition><expr><name>IsWinCOFF</name></expr> ?</condition><then> <expr><literal type="string">"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:"</literal>
<literal type="string">"64-i64:64-f80:32-n8:16:32-a:0:32-S32"</literal></expr>
</then><else>: <expr><literal type="string">"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:"</literal>
<literal type="string">"64-i64:64-f80:32-n8:16:32-a:0:32-S32"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>IsWinCOFF</name></expr> ?</condition><then> <expr><literal type="string">"_"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MicrosoftX86_32TargetInfo</name>
<range>: <expr><name>public</name> <name>WindowsX86_32TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MicrosoftX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WindowsX86_32TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>WindowsX86_32TargetInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;



<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_M_IX86"</literal></expr></argument>, <argument><expr><literal type="string">"600"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MinGWX86_32TargetInfo</name>
<range>: <expr><name>public</name> <name>WindowsX86_32TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MinGWX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WindowsX86_32TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>HasFloat128</name> <operator>=</operator> <name>true</name></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>WindowsX86_32TargetInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_X86_"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>CygwinX86_32TargetInfo</name> <range>: <expr><name>public</name> <name>X86_32TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CygwinX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>X86_32TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedShort</name></expr>;
<expr><name>DoubleAlign</name> <operator>=</operator> <name>LongLongAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:"</literal>
<literal type="string">"32-n8:16:32-a:0:32-S32"</literal></expr></argument>,
<argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>X86_32TargetInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_X86_"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__CYGWIN__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__CYGWIN32__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addCygMingDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>
}</expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>HaikuX86_32TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>HaikuTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>HaikuX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>HaikuTargetInfo</name></macro><operator>&lt;</operator><name>X86_32TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name><name>HaikuTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__INTEL__"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>MCUX86_32TargetInfo</name> <operator>:</operator> <name>public</name> <name>X86_32TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MCUX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>X86_32TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:32-f64:"</literal>
<literal type="string">"32-f128:32-n8:16:32-a:0:32-S32"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>WIntType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
}</block>

<name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>CC</name> <operator>==</operator> <name>CC_C</name> <operator>?</operator> <name>CCCR_OK</name> <operator>:</operator> <name>CCCR_Warning</name></expr>;</return>
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>X86_32TargetInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__iamcu"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__iamcu__"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>allowsLargerPreferedTypeAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>RTEMSX86_32TargetInfo</name> <operator>:</operator> <name>public</name> <name>X86_32TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RTEMSX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>X86_32TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>X86_32TargetInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__INTEL__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__rtems__"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>X86_64TargetInfo</name> <operator>:</operator> <name>public</name> <name>X86TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>X86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>X86TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>bool</name> <name>IsX32</name> <operator>=</operator> <call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isX32</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <name>IsWinCOFF</name> <operator>=</operator>
<call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSWindows</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSBinFormatCOFF</name><argument_list>()</argument_list></call></expr>;
<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <ternary><condition><expr><name>IsX32</name></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LargeArrayMinWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LargeArrayAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>SizeType</name> <operator>=</operator> <ternary><condition><expr><name>IsX32</name></expr> ?</condition><then> <expr><name>UnsignedInt</name></expr> </then><else>: <expr><name>UnsignedLong</name></expr></else></ternary></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <ternary><condition><expr><name>IsX32</name></expr> ?</condition><then> <expr><name>SignedInt</name></expr> </then><else>: <expr><name>SignedLong</name></expr></else></ternary></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <ternary><condition><expr><name>IsX32</name></expr> ?</condition><then> <expr><name>SignedInt</name></expr> </then><else>: <expr><name>SignedLong</name></expr></else></ternary></expr>;
<expr><name>IntMaxType</name> <operator>=</operator> <ternary><condition><expr><name>IsX32</name></expr> ?</condition><then> <expr><name>SignedLongLong</name></expr> </then><else>: <expr><name>SignedLong</name></expr></else></ternary></expr>;
<expr><name>Int64Type</name> <operator>=</operator> <ternary><condition><expr><name>IsX32</name></expr> ?</condition><then> <expr><name>SignedLongLong</name></expr> </then><else>: <expr><name>SignedLong</name></expr></else></ternary></expr>;
<expr><name>RegParmMax</name> <operator>=</operator> <literal type="number">6</literal></expr>;


<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><ternary><condition><expr><name>IsX32</name></expr> ?</condition><then> <expr><literal type="string">"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-"</literal>
<literal type="string">"i64:64-f80:128-n8:16:32:64-S128"</literal></expr>
</then><else>: <expr><ternary><condition><expr><name>IsWinCOFF</name></expr> ?</condition><then> <expr><literal type="string">"e-m:w-p270:32:32-p271:32:32-p272:64:"</literal>
<literal type="string">"64-i64:64-f80:128-n8:16:32:64-S128"</literal></expr>
</then><else>: <expr><literal type="string">"e-m:e-p270:32:32-p271:32:32-p272:64:"</literal>
<literal type="string">"64-i64:64-f80:128-n8:16:32:64-S128"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;


<expr><name>RealTypeUsesObjCFPRet</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>TargetInfo</name><operator>::</operator><name>LongDouble</name><operator>)</operator></expr>;


<expr><name>ComplexLongDoubleUsesFP2Ret</name> <operator>=</operator> <name>true</name></expr>;


<expr><name>HasBuiltinMSVaList</name> <operator>=</operator> <name>true</name></expr>;


<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
}</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>X86_64ABIBuiltinVaList</name></expr>;</return>
}</block>

<name>int</name> <macro><name>getEHDataRegisterNumber</name><argument_list>(<argument>unsigned RegNo</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block>

<name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_C</name></expr>:</case>
<case>case <expr><name>CC_Swift</name></expr>:</case>
<case>case <expr><name>CC_SwiftAsync</name></expr>:</case>
<case>case <expr><name>CC_X86VectorCall</name></expr>:</case>
<case>case <expr><name>CC_IntelOclBicc</name></expr>:</case>
<case>case <expr><name>CC_Win64</name></expr>:</case>
<case>case <expr><name>CC_PreserveMost</name></expr>:</case>
<case>case <expr><name>CC_PreserveAll</name></expr>:</case>
<case>case <expr><name>CC_X86RegCall</name></expr>:</case>
<case>case <expr><name>CC_OpenCLKernel</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
<expr_stmt/>}</block_content>
}

CallingConv getDefaultCallingConv(</block></switch>) <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>CC_C</name></expr>;</return>
}</block></block>


<name>bool</name> <macro><name>hasInt128Type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>unsigned</name> <macro><name>getUnwindWordWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">64</literal></expr>;</return> }</block>

<name>unsigned</name> <macro><name>getRegisterWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">64</literal></expr>;</return> }</block>

<name>bool</name> <macro><name>validateGlobalRegisterVariable</name><argument_list>(<argument>StringRef RegName</argument>, <argument>unsigned RegSize</argument>,
<argument>bool &amp;HasSizeMismatch</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<if_stmt><if>if <condition>(<expr><call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"rsp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>RegName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"rbp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>HasSizeMismatch</name> <operator>=</operator> <name>RegSize</name> <operator>!=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>


return X86TargetInfo::validateGlobalRegisterVariable(RegName</block><operator>,</operator> <expr_stmt><expr><name>RegSize</name></expr><operator>,</operator>
<expr><name>HasSizeMismatch</name></expr></expr_stmt></if></if_stmt>)</block></expr>;
}</block>

<name>void</name> <macro><name>setMaxAtomicWidth</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><call><name>hasFeature</name><argument_list>(<argument><expr><literal type="string">"cx16"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
};


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WindowsX86_64TargetInfo</name>
<range>: <expr><name>public</name> <name><name>WindowsTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_64TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>WindowsX86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WindowsTargetInfo</name></macro><operator>&lt;</operator><name>X86_64TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>DoubleAlign</name> <operator>=</operator> <name>LongLongAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLongLong</name></expr>;
<expr><name>Int64Type</name> <operator>=</operator> <name>SignedLongLong</name></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLongLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLongLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLongLong</name></expr>;
}</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block>

<name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CC_X86StdCall</name></expr>:</case>
<case>case <expr><name>CC_X86ThisCall</name></expr>:</case>
<case>case <expr><name>CC_X86FastCall</name></expr>:</case>
<return>return <expr><name>CCCR_Ignore</name></expr>;</return>
<case>case <expr><name>CC_C</name></expr>:</case>
<case>case <expr><name>CC_X86VectorCall</name></expr>:</case>
<case>case <expr><name>CC_IntelOclBicc</name></expr>:</case>
<case>case <expr><name>CC_PreserveMost</name></expr>:</case>
<case>case <expr><name>CC_PreserveAll</name></expr>:</case>
<case>case <expr><name>CC_X86_64SysV</name></expr>:</case>
<case>case <expr><name>CC_Swift</name></expr>:</case>
<case>case <expr><name>CC_SwiftAsync</name></expr>:</case>
<case>case <expr><name>CC_X86RegCall</name></expr>:</case>
<case>case <expr><name>CC_OpenCLKernel</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
<expr_stmt/>}</block_content>
}
}</block><empty_stmt>;</empty_stmt></switch>


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>MicrosoftX86_64TargetInfo</name>
<operator>:</operator> <name>public</name> <name>WindowsX86_64TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MicrosoftX86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WindowsX86_64TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>WindowsX86_64TargetInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_M_X64"</literal></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_M_AMD64"</literal></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>TargetInfo</name><operator>::</operator><name>CallingConvKind</name>
<macro><name>getCallingConvKind</name><argument_list>(<argument>bool ClangABICompat4</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>CCK_MicrosoftWin64</name></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>MinGWX86_64TargetInfo</name>
<operator>:</operator> <name>public</name> <name>WindowsX86_64TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MinGWX86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WindowsX86_64TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{


<expr><name>LongDoubleWidth</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>x87DoubleExtended</name><argument_list>()</argument_list></call></expr>;
<expr><name>HasFloat128</name> <operator>=</operator> <name>true</name></expr>;
}</block></expr>
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>CygwinX86_64TargetInfo</name> <operator>:</operator> <name>public</name> <name>X86_64TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CygwinX86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>X86_64TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedShort</name></expr>;
<expr><name>TLSSupported</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>X86_64TargetInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__x86_64__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__CYGWIN__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__CYGWIN64__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>addCygMingDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>
}</expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>DarwinX86_64TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_64TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DarwinX86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DarwinTargetInfo</name></macro><operator>&lt;</operator><name>X86_64TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>Int64Type</name> <operator>=</operator> <name>SignedLongLong</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>Triple</name> <name>T</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>Triple</name><argument_list>(<argument><expr><name>Triple</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>isiOS</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>UseSignedCharForObjCBool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:"</literal>
<literal type="string">"16:32:64-S128"</literal></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></block></expr>;
}</block>

<name>bool</name> <macro><name>handleTargetFeatures</name><argument_list>(<argument>std::vector&lt;std::string&gt; &amp;Features</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_64TargetInfo</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>handleTargetFeatures</name><argument_list>(<argument><expr><name>Features</name></expr></argument>,
<argument><expr><name>Diags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<name>MaxVectorAlign</name> <operator>=</operator>
<ternary><condition><expr><call><name>hasFeature</name><argument_list>(<argument><expr><literal type="string">"avx512f"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">512</literal></expr> </then><else>: <expr><ternary><condition><expr><call><name>hasFeature</name><argument_list>(<argument><expr><literal type="string">"avx"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></else></ternary></block></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>OpenBSDX86_64TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>OpenBSDTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_64TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OpenBSDX86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OpenBSDTargetInfo</name></macro><operator>&lt;</operator><name>X86_64TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLongLong</name></expr>;
<expr><name>Int64Type</name> <operator>=</operator> <name>SignedLongLong</name></expr>;
}</block></expr>
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>AndroidX86_32TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>LinuxTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_32TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>AndroidX86_32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>LinuxTargetInfo</name></macro><operator>&lt;</operator><name>X86_32TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;
}</block></expr>
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>AndroidX86_64TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>LinuxTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>X86_64TargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>AndroidX86_64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>LinuxTargetInfo</name></macro><operator>&lt;</operator><name>X86_64TargetInfo</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call></expr>;
}</block></expr>
}</block></expr>;
}</block></expr>
}</block></expr></block></expr></range></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
