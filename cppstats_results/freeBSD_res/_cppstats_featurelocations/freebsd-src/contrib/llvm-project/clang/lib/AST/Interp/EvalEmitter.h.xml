<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/EvalEmitter.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_EVALEMITTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_EVALEMITTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ByteCodeGenError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InterpStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InterpState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"PrimType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Program.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InterpState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Program</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceInfo</name></decl>;</decl_stmt>
<enum_decl>enum <name>Opcode</name> : <type><name>uint32_t</name></type>;</enum_decl>


<decl_stmt><decl><type><name>class</name></type> <name>EvalEmitter</name> <range>: <expr><name>public</name> <name>SourceMapper</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>LabelTy</name> <operator>=</operator> <name>uint32_t</name></expr>;
<expr><name>using</name> <name>AddrTy</name> <operator>=</operator> <name>uintptr_t</name></expr>;
<expr><name>using</name> <name>Local</name> <operator>=</operator> <name>Scope</name><operator>::</operator><name>Local</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>interpretExpr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></call></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <call><name>interpretDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>EvalEmitter</name><argument_list>(<argument><expr><name>Context</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><name>Program</name> <operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>State</name> <operator>&amp;</operator><name>Parent</name></expr></argument>, <argument><expr><name>InterpStack</name> <operator>&amp;</operator><name>Stk</name></expr></argument>,
<argument><expr><name>APValue</name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <operator>~</operator><macro><name>EvalEmitter</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>void</name> <macro><name>emitLabel</name><argument_list>(<argument>LabelTy Label</argument>)</argument_list></macro></expr>;

<expr><name>LabelTy</name> <call><name>getLabel</name><argument_list>()</argument_list></call></expr>;


<expr><name>virtual</name> <name>bool</name> <call><name>visitExpr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>bool</name> <call><name>visitDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>bool</name> <macro><name>bail</name><argument_list>(<argument>const Stmt *S</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>bail</name><argument_list>(<argument><expr><call><name><name>S</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>bool</name> <macro><name>bail</name><argument_list>(<argument>const Decl *D</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>bail</name><argument_list>(<argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>bool</name> <call><name>bail</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceLocation</name> <operator>&amp;</operator><name>Loc</name></expr></argument>)</argument_list></call></expr>;


<expr><name>bool</name> <call><name>jumpTrue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LabelTy</name> <operator>&amp;</operator><name>Label</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>jumpFalse</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LabelTy</name> <operator>&amp;</operator><name>Label</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>jump</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LabelTy</name> <operator>&amp;</operator><name>Label</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>fallthrough</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LabelTy</name> <operator>&amp;</operator><name>Label</name></expr></argument>)</argument_list></call></expr>;


<expr><name>Local</name> <call><name>createLocal</name><argument_list>(<argument><expr><name>Descriptor</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;


<expr><name>SourceInfo</name> <macro><name>getSource</name><argument_list>(<argument>Function *F</argument>, <argument>CodePtr PC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>F</name> <operator>?</operator> <call><name><name>F</name><operator>-&gt;</operator><name>getSource</name></name><argument_list>(<argument><expr><name>PC</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>CurrentSource</name></expr>;</return>
}</block>


<name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>Params</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Local</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>Descriptors</name></expr>;

<expr><name>private</name><operator>:</operator>

<name>Context</name> <operator>&amp;</operator><name>Ctx</name></expr>;

<expr><name>Program</name> <operator>&amp;</operator><name>P</name></expr>;

<expr><name>InterpState</name> <name>S</name></expr>;

<expr><name>APValue</name> <operator>&amp;</operator><name>Result</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>char</name><index>[]</index></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Locals</name></expr>;



<expr><name>CodePtr</name> <name>OpPC</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <name>BailLocation</name></expr>;

<expr><name>SourceInfo</name> <name>CurrentSource</name></expr>;


<expr><name>LabelTy</name> <name>NextLabel</name> <operator>=</operator> <literal type="number">1</literal></expr>;

<expr><name>LabelTy</name> <name>CurrentLabel</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>LabelTy</name> <name>ActiveLabel</name> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>bool</name> <macro><name>isActive</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>CurrentLabel</name> <operator>==</operator> <name>ActiveLabel</name></expr>;</return> }</block>


<name>bool</name> <call><name>ExecuteCall</name><argument_list>(<argument><expr><name>Function</name> <operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Pointer</name> <operator>&amp;&amp;</operator><name>This</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>ExecuteNoCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>F</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator></expr>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_EVAL_PROTO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Opcodes.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_EVAL_PROTO</name></cpp:undef>
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
