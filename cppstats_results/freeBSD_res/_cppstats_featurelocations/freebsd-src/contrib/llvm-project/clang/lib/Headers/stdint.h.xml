<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/stdint.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_STDINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_STD_TYPES_T</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_HOSTED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_STDINT_H</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_HOSTED__</name> <operator>&amp;&amp;</operator> <call><name>__has_include_next</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>stdint</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_LIMIT_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STDC_LIMIT_MACROS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STDC_LIMIT_MACROS_DEFINED_BY_CLANG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_CONSTANT_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STDC_CONSTANT_MACROS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STDC_CONSTANT_MACROS_DEFINED_BY_CLANG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:empty>#include_next &lt;stdint.h&gt;</cpp:empty>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_LIMIT_MACROS_DEFINED_BY_CLANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__STDC_LIMIT_MACROS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__STDC_LIMIT_MACROS_DEFINED_BY_CLANG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_CONSTANT_MACROS_DEFINED_BY_CLANG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__STDC_CONSTANT_MACROS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__STDC_CONSTANT_MACROS_DEFINED_BY_CLANG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT64_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__int8_t_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT64_TYPE__</name></type> <name>int64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>__UINT64_TYPE__</name></type> <name>uint64_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least64_t</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least64_t</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least32_t</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least32_t</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least16_t</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least16_t</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least64_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__int_least64_t</name></type> <name>int_least64_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least64_t</name></type> <name>uint_least64_t</name>;</typedef>
<typedef>typedef <type><name>__int_least64_t</name></type> <name>int_fast64_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least64_t</name></type> <name>uint_fast64_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT56_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT56_TYPE__</name></type> <name>int56_t</name>;</typedef>
<typedef>typedef <type><name>__UINT56_TYPE__</name></type> <name>uint56_t</name>;</typedef>
<typedef>typedef <type><name>int56_t</name></type> <name>int_least56_t</name>;</typedef>
<typedef>typedef <type><name>uint56_t</name></type> <name>uint_least56_t</name>;</typedef>
<typedef>typedef <type><name>int56_t</name></type> <name>int_fast56_t</name>;</typedef>
<typedef>typedef <type><name>uint56_t</name></type> <name>uint_fast56_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least32_t</name></cpp:macro> <cpp:value>int56_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least32_t</name></cpp:macro> <cpp:value>uint56_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least16_t</name></cpp:macro> <cpp:value>int56_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least16_t</name></cpp:macro> <cpp:value>uint56_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int56_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint56_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT48_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT48_TYPE__</name></type> <name>int48_t</name>;</typedef>
<typedef>typedef <type><name>__UINT48_TYPE__</name></type> <name>uint48_t</name>;</typedef>
<typedef>typedef <type><name>int48_t</name></type> <name>int_least48_t</name>;</typedef>
<typedef>typedef <type><name>uint48_t</name></type> <name>uint_least48_t</name>;</typedef>
<typedef>typedef <type><name>int48_t</name></type> <name>int_fast48_t</name>;</typedef>
<typedef>typedef <type><name>uint48_t</name></type> <name>uint_fast48_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least32_t</name></cpp:macro> <cpp:value>int48_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least32_t</name></cpp:macro> <cpp:value>uint48_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least16_t</name></cpp:macro> <cpp:value>int48_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least16_t</name></cpp:macro> <cpp:value>uint48_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int48_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint48_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT40_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT40_TYPE__</name></type> <name>int40_t</name>;</typedef>
<typedef>typedef <type><name>__UINT40_TYPE__</name></type> <name>uint40_t</name>;</typedef>
<typedef>typedef <type><name>int40_t</name></type> <name>int_least40_t</name>;</typedef>
<typedef>typedef <type><name>uint40_t</name></type> <name>uint_least40_t</name>;</typedef>
<typedef>typedef <type><name>int40_t</name></type> <name>int_fast40_t</name>;</typedef>
<typedef>typedef <type><name>uint40_t</name></type> <name>uint_fast40_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least32_t</name></cpp:macro> <cpp:value>int40_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least32_t</name></cpp:macro> <cpp:value>uint40_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least16_t</name></cpp:macro> <cpp:value>int40_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least16_t</name></cpp:macro> <cpp:value>uint40_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int40_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint40_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT32_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__int8_t_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT32_TYPE__</name></type> <name>int32_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__uint32_t_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint32_t_defined</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>__UINT32_TYPE__</name></type> <name>uint32_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least32_t</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least32_t</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least16_t</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least16_t</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least32_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__int_least32_t</name></type> <name>int_least32_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least32_t</name></type> <name>uint_least32_t</name>;</typedef>
<typedef>typedef <type><name>__int_least32_t</name></type> <name>int_fast32_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least32_t</name></type> <name>uint_fast32_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT24_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT24_TYPE__</name></type> <name>int24_t</name>;</typedef>
<typedef>typedef <type><name>__UINT24_TYPE__</name></type> <name>uint24_t</name>;</typedef>
<typedef>typedef <type><name>int24_t</name></type> <name>int_least24_t</name>;</typedef>
<typedef>typedef <type><name>uint24_t</name></type> <name>uint_least24_t</name>;</typedef>
<typedef>typedef <type><name>int24_t</name></type> <name>int_fast24_t</name>;</typedef>
<typedef>typedef <type><name>uint24_t</name></type> <name>uint_fast24_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least16_t</name></cpp:macro> <cpp:value>int24_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least16_t</name></cpp:macro> <cpp:value>uint24_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int24_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint24_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT16_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__int8_t_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT16_TYPE__</name></type> <name>int16_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>__UINT16_TYPE__</name></type> <name>uint16_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least16_t</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least16_t</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least16_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__int_least16_t</name></type> <name>int_least16_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least16_t</name></type> <name>uint_least16_t</name>;</typedef>
<typedef>typedef <type><name>__int_least16_t</name></type> <name>int_fast16_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least16_t</name></type> <name>uint_fast16_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT8_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__int8_t_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INT8_TYPE__</name></type> <name>int8_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>__UINT8_TYPE__</name></type> <name>uint8_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_least8_t</name></cpp:macro> <cpp:value>int8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_least8_t</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least8_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__int_least8_t</name></type> <name>int_least8_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least8_t</name></type> <name>uint_least8_t</name>;</typedef>
<typedef>typedef <type><name>__int_least8_t</name></type> <name>int_fast8_t</name>;</typedef>
<typedef>typedef <type><name>__uint_least8_t</name></type> <name>uint_fast8_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__int8_t_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_t_defined</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__stdint_join3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##b ##c</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_INTPTR_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__intptr_t_defined</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__INTPTR_TYPE__</name></type> <name>intptr_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__intptr_t_defined</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_INTPTR_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UINTPTR_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>__UINTPTR_TYPE__</name></type> <name>uintptr_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UINTPTR_T</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>__INTMAX_TYPE__</name></type> <name>intmax_t</name>;</typedef>
<typedef>typedef <type><name>__UINTMAX_TYPE__</name></type> <name>uintmax_t</name>;</typedef>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_c_join</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int_c</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c_join(v, suffix)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__uint_c</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c_join(v##U, suffix)</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT64_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT64_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int64_c_suffix</name></cpp:macro> <cpp:value>__INT64_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int32_c_suffix</name></cpp:macro> <cpp:value>__INT64_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int16_c_suffix</name></cpp:macro> <cpp:value>__INT64_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT64_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int64_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int32_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int16_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least64_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int64_c_suffix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __int64_c_suffix)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __int64_c_suffix)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT56_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT56_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT56_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __INT56_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT56_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __INT56_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int32_c_suffix</name></cpp:macro> <cpp:value>__INT56_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int16_c_suffix</name></cpp:macro> <cpp:value>__INT56_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT56_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT56_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT56_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int32_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int16_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT48_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT48_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT48_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __INT48_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT48_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __INT48_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int32_c_suffix</name></cpp:macro> <cpp:value>__INT48_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int16_c_suffix</name></cpp:macro> <cpp:value>__INT48_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT48_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT48_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT48_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int32_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int16_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT40_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT40_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT40_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __INT40_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT40_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __INT40_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int32_c_suffix</name></cpp:macro> <cpp:value>__INT40_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int16_c_suffix</name></cpp:macro> <cpp:value>__INT40_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT40_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT40_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT40_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int32_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int16_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT32_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT32_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int32_c_suffix</name></cpp:macro> <cpp:value>__INT32_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int16_c_suffix</name></cpp:macro> <cpp:value>__INT32_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT32_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int32_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int16_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least32_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int32_c_suffix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __int32_c_suffix)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __int32_c_suffix)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT24_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT24_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT24_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __INT24_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT24_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __INT24_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int16_c_suffix</name></cpp:macro> <cpp:value>__INT24_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT24_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT24_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT24_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int16_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT16_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT16_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int16_c_suffix</name></cpp:macro> <cpp:value>__INT16_C_SUFFIX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT16_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int16_c_suffix</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least16_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int16_c_suffix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __int16_c_suffix)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT16_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __int16_c_suffix)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT16_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT8_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT8_C_SUFFIX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__int8_c_suffix</name></cpp:macro> <cpp:value>__INT8_C_SUFFIX__</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__int8_c_suffix</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int_least8_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__int8_c_suffix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __int8_c_suffix)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT8_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__uint_c(v, __int8_c_suffix)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT8_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v ##U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT64_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_MAX</name></cpp:macro> <cpp:value>INT64_C( 9223372036854775807)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT64_MIN</name></cpp:macro> <cpp:value>(-INT64_C( 9223372036854775807)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_MAX</name></cpp:macro> <cpp:value>UINT64_C(18446744073709551615)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST64_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST64_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST64_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST32_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT64_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT_LEAST64_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST64_MIN</name></cpp:macro> <cpp:value>__INT_LEAST64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST64_MAX</name></cpp:macro> <cpp:value>__INT_LEAST64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST64_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST64_MIN</name></cpp:macro> <cpp:value>__INT_LEAST64_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST64_MAX</name></cpp:macro> <cpp:value>__INT_LEAST64_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST64_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST64_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT56_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT56_MAX</name></cpp:macro> <cpp:value>INT56_C(36028797018963967)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT56_MIN</name></cpp:macro> <cpp:value>(-INT56_C(36028797018963967)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT56_MAX</name></cpp:macro> <cpp:value>UINT56_C(72057594037927935)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST56_MIN</name></cpp:macro> <cpp:value>INT56_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST56_MAX</name></cpp:macro> <cpp:value>INT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST56_MAX</name></cpp:macro> <cpp:value>UINT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST56_MIN</name></cpp:macro> <cpp:value>INT56_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST56_MAX</name></cpp:macro> <cpp:value>INT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST56_MAX</name></cpp:macro> <cpp:value>UINT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MIN</name></cpp:macro> <cpp:value>INT56_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MAX</name></cpp:macro> <cpp:value>INT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST32_MAX</name></cpp:macro> <cpp:value>UINT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT56_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT56_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT56_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT56_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT48_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT48_MAX</name></cpp:macro> <cpp:value>INT48_C(140737488355327)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT48_MIN</name></cpp:macro> <cpp:value>(-INT48_C(140737488355327)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT48_MAX</name></cpp:macro> <cpp:value>UINT48_C(281474976710655)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST48_MIN</name></cpp:macro> <cpp:value>INT48_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST48_MAX</name></cpp:macro> <cpp:value>INT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST48_MAX</name></cpp:macro> <cpp:value>UINT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST48_MIN</name></cpp:macro> <cpp:value>INT48_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST48_MAX</name></cpp:macro> <cpp:value>INT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST48_MAX</name></cpp:macro> <cpp:value>UINT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MIN</name></cpp:macro> <cpp:value>INT48_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MAX</name></cpp:macro> <cpp:value>INT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST32_MAX</name></cpp:macro> <cpp:value>UINT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT48_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT48_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT48_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT48_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT40_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT40_MAX</name></cpp:macro> <cpp:value>INT40_C(549755813887)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT40_MIN</name></cpp:macro> <cpp:value>(-INT40_C(549755813887)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT40_MAX</name></cpp:macro> <cpp:value>UINT40_C(1099511627775)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST40_MIN</name></cpp:macro> <cpp:value>INT40_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST40_MAX</name></cpp:macro> <cpp:value>INT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST40_MAX</name></cpp:macro> <cpp:value>UINT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST40_MIN</name></cpp:macro> <cpp:value>INT40_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST40_MAX</name></cpp:macro> <cpp:value>INT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST40_MAX</name></cpp:macro> <cpp:value>UINT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MIN</name></cpp:macro> <cpp:value>INT40_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MAX</name></cpp:macro> <cpp:value>INT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST32_MAX</name></cpp:macro> <cpp:value>UINT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT40_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT40_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT40_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT40_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT32_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MAX</name></cpp:macro> <cpp:value>INT32_C(2147483647)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT32_MIN</name></cpp:macro> <cpp:value>(-INT32_C(2147483647)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_MAX</name></cpp:macro> <cpp:value>UINT32_C(4294967295)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MIN</name></cpp:macro> <cpp:value>INT32_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST32_MAX</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST32_MAX</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT32_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT32_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT32_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT_LEAST32_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST32_MIN</name></cpp:macro> <cpp:value>__INT_LEAST32_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST32_MAX</name></cpp:macro> <cpp:value>__INT_LEAST32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST32_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST32_MIN</name></cpp:macro> <cpp:value>__INT_LEAST32_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST32_MAX</name></cpp:macro> <cpp:value>__INT_LEAST32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST32_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST32_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT24_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT24_MAX</name></cpp:macro> <cpp:value>INT24_C(8388607)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT24_MIN</name></cpp:macro> <cpp:value>(-INT24_C(8388607)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT24_MAX</name></cpp:macro> <cpp:value>UINT24_C(16777215)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST24_MIN</name></cpp:macro> <cpp:value>INT24_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST24_MAX</name></cpp:macro> <cpp:value>INT24_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST24_MAX</name></cpp:macro> <cpp:value>UINT24_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST24_MIN</name></cpp:macro> <cpp:value>INT24_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST24_MAX</name></cpp:macro> <cpp:value>INT24_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST24_MAX</name></cpp:macro> <cpp:value>UINT24_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT24_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT24_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT24_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT24_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT24_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT24_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT16_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_MAX</name></cpp:macro> <cpp:value>INT16_C(32767)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT16_MIN</name></cpp:macro> <cpp:value>(-INT16_C(32767)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT16_MAX</name></cpp:macro> <cpp:value>UINT16_C(65535)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MIN</name></cpp:macro> <cpp:value>INT16_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST16_MAX</name></cpp:macro> <cpp:value>INT16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>UINT16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT16_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT16_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT_LEAST16_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST16_MIN</name></cpp:macro> <cpp:value>__INT_LEAST16_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST16_MAX</name></cpp:macro> <cpp:value>__INT_LEAST16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST16_MIN</name></cpp:macro> <cpp:value>__INT_LEAST16_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST16_MAX</name></cpp:macro> <cpp:value>__INT_LEAST16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST16_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST16_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT8_TYPE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_MAX</name></cpp:macro> <cpp:value>INT8_C(127)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT8_MIN</name></cpp:macro> <cpp:value>(-INT8_C(127)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT8_MAX</name></cpp:macro> <cpp:value>UINT8_C(255)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MIN</name></cpp:macro> <cpp:value>INT8_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INT_LEAST8_MAX</name></cpp:macro> <cpp:value>INT8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>UINT8_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INT_LEAST8_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST8_MIN</name></cpp:macro> <cpp:value>__INT_LEAST8_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_LEAST8_MAX</name></cpp:macro> <cpp:value>__INT_LEAST8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST8_MIN</name></cpp:macro> <cpp:value>__INT_LEAST8_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_FAST8_MAX</name></cpp:macro> <cpp:value>__INT_LEAST8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_FAST8_MAX</name></cpp:macro> <cpp:value>__UINT_LEAST8_MAX</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INTN_MIN</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__stdint_join3( INT, n, _MIN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INTN_MAX</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__stdint_join3( INT, n, _MAX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINTN_MAX</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__stdint_join3(UINT, n, _MAX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INTN_C</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__stdint_join3( INT, n, _C(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__UINTN_C</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__stdint_join3(UINT, n, _C(v))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MIN</name></cpp:macro> <cpp:value>(-__INTPTR_MAX__-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTPTR_MAX</name></cpp:macro> <cpp:value>__INTPTR_MAX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTPTR_MAX</name></cpp:macro> <cpp:value>__UINTPTR_MAX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRDIFF_MIN</name></cpp:macro> <cpp:value>(-__PTRDIFF_MAX__-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTRDIFF_MAX</name></cpp:macro> <cpp:value>__PTRDIFF_MAX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>__SIZE_MAX__</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_WANT_LIB_EXT1__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_WANT_LIB_EXT1__</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSIZE_MAX</name></cpp:macro> <cpp:value>(SIZE_MAX &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_MIN</name></cpp:macro> <cpp:value>(-__INTMAX_MAX__-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_MAX</name></cpp:macro> <cpp:value>__INTMAX_MAX__</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTMAX_MAX</name></cpp:macro> <cpp:value>__UINTMAX_MAX__</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ATOMIC_MIN</name></cpp:macro> <cpp:value>__INTN_MIN(__SIG_ATOMIC_WIDTH__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ATOMIC_MAX</name></cpp:macro> <cpp:value>__INTN_MAX(__SIG_ATOMIC_WIDTH__)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WINT_UNSIGNED__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_MIN</name></cpp:macro> <cpp:value>__UINTN_C(__WINT_WIDTH__, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_MAX</name></cpp:macro> <cpp:value>__UINTN_MAX(__WINT_WIDTH__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_MIN</name></cpp:macro> <cpp:value>__INTN_MIN(__WINT_WIDTH__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_MAX</name></cpp:macro> <cpp:value>__INTN_MAX(__WINT_WIDTH__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WCHAR_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCHAR_MAX</name></cpp:macro> <cpp:value>__WCHAR_MAX__</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WCHAR_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__WCHAR_MAX__</name> <operator>==</operator> <call><name>__INTN_MAX</name><argument_list>(<argument><expr><name>__WCHAR_WIDTH__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCHAR_MIN</name></cpp:macro> <cpp:value>__INTN_MIN(__WCHAR_WIDTH__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WCHAR_MIN</name></cpp:macro> <cpp:value>__UINTN_C(__WCHAR_WIDTH__, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __INTMAX_C_SUFFIX__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTMAX_C</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__int_c(v, __UINTMAX_C_SUFFIX__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
