<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/Sparc.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_SPARC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_SPARC_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>SparcTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>GCCRegAliases</name><index>[]</index></name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name></expr>;
<expr><name>bool</name> <name>SoftFloat</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>SparcTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>TargetInfo</name><argument_list>(<argument><expr><name>Triple</name></expr></argument>)</argument_list></call></expr>, <macro><name>SoftFloat</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>int</name> <macro><name>getEHDataRegisterNumber</name><argument_list>(<argument>unsigned RegNo</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">24</literal></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">25</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>handleTargetFeatures</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>Feature</name> <init>= <expr><name>llvm</name><operator>::</operator><call><name>find</name><argument_list>(<argument><expr><name>Features</name></expr></argument>, <argument><expr><literal type="string">"+soft-float"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Feature</name> <operator>!=</operator> <call><name><name>Features</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>SoftFloat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>getTargetDefines</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name>MacroBuilder</name> <operator>&amp;</operator><name>Builder</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasFeature</name><argument_list>(<argument><expr><name>StringRef</name> <name>Feature</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasSjLjLowering</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>None</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>validateAsmConstraint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>&amp;</operator><name>Name</name></expr></argument>,
<argument><expr><name>TargetInfo</name><operator>::</operator><name>ConstraintInfo</name> <operator>&amp;</operator><name>info</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block></expr></expr_stmt>


<enum>enum <name>CPUKind</name> <block>{
<decl><name>CK_GENERIC</name></decl>,
<decl><name>CK_V8</name></decl>,
<decl><name>CK_SUPERSPARC</name></decl>,
<decl><name>CK_SPARCLITE</name></decl>,
<decl><name>CK_F934</name></decl>,
<decl><name>CK_HYPERSPARC</name></decl>,
<decl><name>CK_SPARCLITE86X</name></decl>,
<decl><name>CK_SPARCLET</name></decl>,
<decl><name>CK_TSC701</name></decl>,
<decl><name>CK_V9</name></decl>,
<decl><name>CK_ULTRASPARC</name></decl>,
<decl><name>CK_ULTRASPARC3</name></decl>,
<decl><name>CK_NIAGARA</name></decl>,
<decl><name>CK_NIAGARA2</name></decl>,
<decl><name>CK_NIAGARA3</name></decl>,
<decl><name>CK_NIAGARA4</name></decl>,
<decl><name>CK_MYRIAD2100</name></decl>,
<decl><name>CK_MYRIAD2150</name></decl>,
<decl><name>CK_MYRIAD2155</name></decl>,
<decl><name>CK_MYRIAD2450</name></decl>,
<decl><name>CK_MYRIAD2455</name></decl>,
<decl><name>CK_MYRIAD2x5x</name></decl>,
<decl><name>CK_MYRIAD2080</name></decl>,
<decl><name>CK_MYRIAD2085</name></decl>,
<decl><name>CK_MYRIAD2480</name></decl>,
<decl><name>CK_MYRIAD2485</name></decl>,
<decl><name>CK_MYRIAD2x8x</name></decl>,
<decl><name>CK_LEON2</name></decl>,
<decl><name>CK_LEON2_AT697E</name></decl>,
<decl><name>CK_LEON2_AT697F</name></decl>,
<decl><name>CK_LEON3</name></decl>,
<decl><name>CK_LEON3_UT699</name></decl>,
<decl><name>CK_LEON3_GR712RC</name></decl>,
<decl><name>CK_LEON4</name></decl>,
<decl><name>CK_LEON4_GR740</name></decl>
}</block> <decl><name>CPU</name> <init>= <expr><name>CK_GENERIC</name></expr></init></decl>;</enum>

<enum>enum <name>CPUGeneration</name> <block>{
<decl><name>CG_V8</name></decl>,
<decl><name>CG_V9</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><name>CPUGeneration</name></type> <name>getCPUGeneration</name><argument_list>(<argument><expr><name>CPUKind</name> <name>Kind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>CPUKind</name></type> <name>getCPUKind</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><call><name>getCPUKind</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CK_GENERIC</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>fillValidCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>setCPU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <call><name>getCPUKind</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CPU</name> <operator>!=</operator> <name>CK_GENERIC</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>SparcV8TargetInfo</name> <range>: <expr><name>public</name> <name>SparcTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SparcV8TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SparcTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:e-p:32:32-i64:64-f128:64-n32-S64"</literal></expr></argument>)</argument_list></call></expr>;

<switch>switch <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOS</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IntPtrType</name> <operator>=</operator> <name>SignedInt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>NetBSD</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>OpenBSD</name></expr>:</case>
<expr_stmt><expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>


MaxAtomicPromoteWidth = 64</block><empty_stmt>;</empty_stmt></switch>
<if_stmt><if>if <condition>(<expr><call><name>getCPUGeneration</name><argument_list>(<argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CG_V9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>


<expr_stmt><expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasSjLjLowering</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>SparcV8elTargetInfo</name> <operator>:</operator> <name>public</name> <name>SparcV8TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SparcV8elTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SparcV8TargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-i64:64-f128:64-n32-S64"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>SparcV9TargetInfo</name> <operator>:</operator> <name>public</name> <name>SparcTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SparcV9TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SparcTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{

<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"E-m:e-i64:64-n32:64-S128"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;


<if_stmt><if>if <condition>(<expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSOpenBSD</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLongLong</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLong</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<name>Int64Type</name> <operator>=</operator> <name>IntMaxType</name></block></expr>;



<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call></expr>;
<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>getCPUGeneration</name><argument_list>(<argument><expr><name>SparcTargetInfo</name><operator>::</operator><call><name>getCPUKind</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>CG_V9</name></expr>;</return>
}</block>

<name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>setCPU</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>SparcTargetInfo</name><operator>::</operator><call><name>setCPU</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>getCPUGeneration</name><argument_list>(<argument><expr><name>CPU</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CG_V9</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
};
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
