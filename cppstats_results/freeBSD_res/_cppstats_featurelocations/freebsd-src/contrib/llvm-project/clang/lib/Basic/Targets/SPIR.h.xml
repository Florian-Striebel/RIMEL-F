<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/SPIR.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_SPIR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_SPIR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>SPIRDefIsPrivMap</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>SPIRDefIsGenMap</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>SPIRTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SPIRTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOS</name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>UnknownOS</name> <operator>&amp;&amp;</operator>
<literal type="string">"SPIR target must use unknown OS"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnvironment</name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>UnknownEnvironment</name> <operator>&amp;&amp;</operator>
<literal type="string">"SPIR target must use unknown environment type"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>TLSSupported</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>VLASupported</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>AddrSpaceMap</name> <operator>=</operator> <operator>&amp;</operator><name>SPIRDefIsPrivMap</name></expr>;
<expr><name>UseAddrSpaceMapMangling</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>HasLegalHalfType</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>HasFloat16</name> <operator>=</operator> <name>true</name></expr>;


<expr><name>NoAsmVariants</name> <operator>=</operator> <name>true</name></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasFeature</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>Feature</name> <operator>==</operator> <literal type="string">"spir"</literal></expr>;</return>
}</block>



<name>bool</name> <macro><name>useFP16ConversionIntrinsics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>None</name></expr>;</return> }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>None</name></expr>;</return> }</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>None</name></expr>;</return>
}</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block>

<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDWARFAddressSpace</name><argument_list>(<argument>unsigned AddressSpace</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>AddressSpace</name></expr>;</return>
}</block>

<name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>(</operator><name>CC</name> <operator>==</operator> <name>CC_SpirFunction</name> <operator>||</operator> <name>CC</name> <operator>==</operator> <name>CC_OpenCLKernel</name><operator>)</operator> <operator>?</operator> <name>CCCR_OK</name>
<operator>:</operator> <name>CCCR_Warning</name></expr>;</return>
}</block>

<name>CallingConv</name> <macro><name>getDefaultCallingConv</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>CC_SpirFunction</name></expr>;</return>
}</block>

<name>void</name> <macro><name>setAddressSpaceMap</name><argument_list>(<argument>bool DefaultIsGeneric</argument>)</argument_list></macro> <block>{
<expr><name>AddrSpaceMap</name> <operator>=</operator> <ternary><condition><expr><name>DefaultIsGeneric</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>SPIRDefIsGenMap</name></expr> </then><else>: <expr><operator>&amp;</operator><name>SPIRDefIsPrivMap</name></expr></else></ternary></expr>;
}</block>

<name>void</name> <macro><name>adjust</name><argument_list>(<argument>DiagnosticsEngine &amp;Diags</argument>, <argument>LangOptions &amp;Opts</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>TargetInfo</name><operator>::</operator><call><name>adjust</name><argument_list>(<argument><expr><name>Diags</name></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;







<expr><call><name>setAddressSpaceMap</name><argument_list>(<argument><expr><name><name>Opts</name><operator>.</operator><name>SYCLIsDevice</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>setSupportedOpenCLOpts</name><argument_list>()</argument_list></macro> <name>override</name> <block>{


<expr><call><name>supportAllOpenCLOpts</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>bool</name> <macro><name>hasInt128Type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>SPIR32TargetInfo</name> <operator>:</operator> <name>public</name> <name>SPIRTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SPIR32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SPIRTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedInt</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>IntPtrType</name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedInt</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-"</literal>
<literal type="string">"v96:128-v192:256-v256:256-v512:512-v1024:1024"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>SPIR64TargetInfo</name> <operator>:</operator> <name>public</name> <name>SPIRTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SPIR64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SPIRTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>IntPtrType</name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLong</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-i64:64-v16:16-v24:32-v32:32-v48:64-"</literal>
<literal type="string">"v96:128-v192:256-v256:256-v512:512-v1024:1024"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
