<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/invpcidintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IMMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Never use &lt;invpcidintrin.h&gt; directly; include &lt;immintrin.h&gt; instead."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__INVPCIDINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__INVPCIDINTRIN_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator> <call><name>__target__</name><argument_list>(<argument><expr><literal type="string">"invpcid"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>_invpcid</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>__type</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>__descriptor</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_invpcid</name><argument_list>(<argument><expr><name>__type</name></expr></argument>, <argument><expr><name>__descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
