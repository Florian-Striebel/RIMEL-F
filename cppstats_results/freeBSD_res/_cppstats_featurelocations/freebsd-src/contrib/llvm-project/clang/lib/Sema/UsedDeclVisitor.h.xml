<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Sema/UsedDeclVisitor.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_SEMA_USEDDECLVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_SEMA_USEDDECLVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/EvaluatedExprVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/SemaInternal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Derived</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>UsedDeclVisitor</name> <range>: <expr><name>public</name> <name><name>EvaluatedExprVisitor</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>Sema</name> <operator>&amp;</operator><name>S</name></expr>;

<expr><name>public</name><operator>:</operator></expr>
<typedef>typedef <type><name><name>EvaluatedExprVisitor</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name></expr></argument>&gt;</argument_list></name></type> <name>Inherited</name>;</typedef>

<call><name>UsedDeclVisitor</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Inherited</name><argument_list>(<argument><expr><name><name>S</name><operator>.</operator><name>Context</name></name></expr></argument>)</argument_list></call>, <macro><name>S</name><argument_list>(<argument>S</argument>)</argument_list></macro> <block>{}</block></block>

<name>Derived</name> <operator>&amp;</operator><macro><name>asImpl</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></range></decl></decl_stmt>

<function><type><name>void</name></type> <name>VisitDeclRefExpr</name><parameter_list>(<parameter><decl><type><name>DeclRefExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>D</name> <operator>=</operator> <call><name><name>E</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VisitMemberExpr</name><parameter_list>(<parameter><decl><type><name>MemberExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>D</name> <operator>=</operator> <call><name><name>E</name><operator>-&gt;</operator><name>getMemberDecl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getMemberLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Visit</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VisitCapturedStmt</name><parameter_list>(<parameter><decl><type><name>CapturedStmt</name> <modifier>*</modifier></type><name>Node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>Node</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Node</name><operator>-&gt;</operator><name>getCapturedDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Inherited</name><operator>::</operator><call><name>VisitCapturedStmt</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VisitCXXBindTemporaryExpr</name><parameter_list>(<parameter><decl><type><name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(
<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getTemporary</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDestructor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Visit</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VisitCXXNewExpr</name><parameter_list>(<parameter><decl><type><name>CXXNewExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>E</name><operator>-&gt;</operator><name>getOperatorNew</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getOperatorNew</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>E</name><operator>-&gt;</operator><name>getOperatorDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getOperatorDelete</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Inherited</name><operator>::</operator><call><name>VisitCXXNewExpr</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VisitCXXDeleteExpr</name><parameter_list>(<parameter><decl><type><name>CXXDeleteExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>E</name><operator>-&gt;</operator><name>getOperatorDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getOperatorDelete</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>QualType</name></type> <name>DestroyedOrNull</name> <init>= <expr><call><name><name>E</name><operator>-&gt;</operator><name>getDestroyedType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DestroyedOrNull</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>QualType</name></type> <name>Destroyed</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>Context</name><operator>.</operator><name>getBaseElementType</name></name><argument_list>(<argument><expr><name>DestroyedOrNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>RecordType</name> <modifier>*</modifier></type><name>DestroyedRec</name> <init>= <expr><name><name>Destroyed</name><operator>-&gt;</operator><name>getAs</name></name><operator>&lt;</operator><name>RecordType</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Record</name> <init>= <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXRecordDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>DestroyedRec</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>S</name><operator>.</operator><name>LookupDestructor</name></name><argument_list>(<argument><expr><name>Record</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Inherited</name><operator>::</operator><call><name>VisitCXXDeleteExpr</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VisitCXXConstructExpr</name><parameter_list>(<parameter><decl><type><name>CXXConstructExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>visitUsedDecl</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getConstructor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Inherited</name><operator>::</operator><call><name>VisitCXXConstructExpr</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>VisitCXXDefaultArgExpr</name><parameter_list>(<parameter><decl><type><name>CXXDefaultArgExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Visit</name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getExpr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>visitUsedDecl</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>CD</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CapturedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>S</name> <operator>=</operator> <call><name><name>CD</name><operator>-&gt;</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Visit</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>auto</name> <operator>*</operator><name>CD</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>BlockDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>S</name> <operator>=</operator> <call><name><name>CD</name><operator>-&gt;</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Visit</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
