<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/ia32intrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__X86INTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Never use &lt;ia32intrin.h&gt; directly; include &lt;x86intrin.h&gt; instead."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IA32INTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__IA32INTRIN_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_SSE42</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("sse4.2")))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_CAST</name></cpp:macro> <cpp:value>__attribute__((__always_inline__)) constexpr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></cpp:macro> <cpp:value>__DEFAULT_FN_ATTRS constexpr</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_CAST</name></cpp:macro> <cpp:value>__attribute__((__always_inline__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></cpp:macro> <cpp:value>__DEFAULT_FN_ATTRS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__bsfd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ctz</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__bsrd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">31</literal> <operator>-</operator> <call><name>__builtin_clz</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__bswapd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>_bswap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bswap32</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_bit_scan_forward</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__bsfd((A))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_bit_scan_reverse</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__bsrd((A))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__bsfq</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ctzll</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__bsrq</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><literal type="number">63</literal> <operator>-</operator> <call><name>__builtin_clzll</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__bswapq</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bswap64</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_bswap64</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__bswapq((A))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>













<function><type><specifier>static</specifier> <name>__inline__</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__popcntd</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_popcount</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_popcnt32</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__popcntd((A))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function><type><specifier>static</specifier> <name>__inline__</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__popcntq</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__A</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_popcnt64</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__popcntq((A))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__readeflags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_readeflags_u64</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__writeeflags</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_writeeflags_u64</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__readeflags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_readeflags_u32</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__writeeflags</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_writeeflags_u32</name><argument_list>(<argument><expr><name>__f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CAST</name></type>
<name>_castf32_u32</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_bit_cast</name><argument_list>(<argument>unsigned int</argument>, <argument>__A</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS_CAST</name></type>
<name>_castf64_u64</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <macro><name>__builtin_bit_cast</name><argument_list>(<argument>unsigned long long</argument>, <argument>__A</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>float</name> <name>__DEFAULT_FN_ATTRS_CAST</name></type>
<name>_castu32_f32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bit_cast</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>__inline__</name> <name>double</name> <name>__DEFAULT_FN_ATTRS_CAST</name></type>
<name>_castu64_f64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_bit_cast</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_SSE42</name></type>
<name>__crc32b</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32qi</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_SSE42</name></type>
<name>__crc32w</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32hi</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_SSE42</name></type>
<name>__crc32d</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32si</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>















<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS_SSE42</name></type>
<name>__crc32q</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_crc32di</name><argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__rdpmc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdpmc</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>__rdtscp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>__A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_ia32_rdtscp</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rdtsc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__rdtsc()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rdpmc</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rdpmc(A)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <name>__DEFAULT_FN_ATTRS</name></type>
<name>_wbinvd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__builtin_ia32_wbinvd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>char</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rolb</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateleft8</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>char</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rorb</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateright8</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>short</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rolw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateleft16</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>short</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rorw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateright16</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rold</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateleft32</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>int</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rord</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateright32</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rolq</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateleft64</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline__</name> <name>unsigned</name> <name>long</name> <name>long</name> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></type>
<name>__rorq</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__builtin_rotateright64</name><argument_list>(<argument><expr><name>__X</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LP64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_lrotl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rolq((a), (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_lrotr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rorq((a), (b))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_lrotl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rold((a), (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_lrotr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rord((a), (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rotl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rold((a), (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rotr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rord((a), (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rotwl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rolw((a), (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_rotwr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__rorw((a), (b))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_CAST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_SSE42</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS_CONSTEXPR</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
