<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_hip_math.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_HIP_MATH_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_HIP_MATH_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HIP__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for HIP and OpenMP AMDGCN device compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HIPCC_RTC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;omp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static inline __attribute__((always_inline, nothrow))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static __device__ inline __attribute__((always_inline))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__RETURN_TYPE"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__RETURN_TYPE</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__RETURN_TYPE</name></cpp:macro> <cpp:value>bool</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__RETURN_TYPE</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__cplusplus</name> <operator>&lt;</operator> <literal type="number">201103L</literal></expr></cpp:if>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>bool</name><operator>&gt;</operator>
struct <name>__compare_result</name><block>{}</block></expr>;</expr_stmt>
<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>__compare_result</name><argument_list type="generic">&lt;<argument><expr><name>true</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>__device__</name> <name>bool</name> <name>valid</name></expr>;
}</block></expr>;</expr_stmt>

<function><type><name>__DEVICE__</name>
<name>void</name></type> <name>__suppress_unused_warning</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name> <name>S</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>void</name></type> <name>__static_assert_equal_size</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__suppress_unused_warning</name><argument_list>(<argument><expr><name><name>__compare_result</name><argument_list type="generic">&lt;<argument><expr><name>S</name> <operator>==</operator> <name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__static_assert_type_size_equal</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__static_assert_equal_size&lt;A,B&gt;()</cpp:value></cpp:define>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__static_assert_type_size_equal</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_assert((A) == (B), "")</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name>
<name>uint64_t</name></type> <name>__make_mantissa_base8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__tagp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__tagp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>__tmp</name> <init>= <expr><operator>*</operator><name>__tagp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__tmp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>__tmp</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <operator>(</operator><name>__r</name> <operator>*</operator> <literal type="number">8u</literal><operator>)</operator> <operator>+</operator> <name>__tmp</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>__tagp</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>uint64_t</name></type> <name>__make_mantissa_base10</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__tagp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__tagp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>__tmp</name> <init>= <expr><operator>*</operator><name>__tagp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__tmp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>__tmp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <operator>(</operator><name>__r</name> <operator>*</operator> <literal type="number">10u</literal><operator>)</operator> <operator>+</operator> <name>__tmp</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>__tagp</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>uint64_t</name></type> <name>__make_mantissa_base16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__tagp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__tagp</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>__tmp</name> <init>= <expr><operator>*</operator><name>__tagp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__tmp</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>__tmp</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <operator>(</operator><name>__r</name> <operator>*</operator> <literal type="number">16u</literal><operator>)</operator> <operator>+</operator> <name>__tmp</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__tmp</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>__tmp</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <operator>(</operator><name>__r</name> <operator>*</operator> <literal type="number">16u</literal><operator>)</operator> <operator>+</operator> <name>__tmp</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>__tmp</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>__tmp</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <operator>(</operator><name>__r</name> <operator>*</operator> <literal type="number">16u</literal><operator>)</operator> <operator>+</operator> <name>__tmp</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name>__tagp</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>uint64_t</name></type> <name>__make_mantissa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__tagp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__tagp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0u</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>__tagp</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>__tagp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>__tagp</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <operator>*</operator><name>__tagp</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>__make_mantissa_base16</name><argument_list>(<argument><expr><name>__tagp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>__make_mantissa_base8</name><argument_list>(<argument><expr><name>__tagp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>__make_mantissa_base10</name><argument_list>(<argument><expr><name>__tagp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>int</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__sgn</name> <init>= <expr><name>__x</name> <operator>&gt;&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__x</name> <operator>^</operator> <name>__sgn</name><operator>)</operator> <operator>-</operator> <name>__sgn</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>long</name></type> <name>labs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>__sgn</name> <init>= <expr><name>__x</name> <operator>&gt;&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__x</name> <operator>^</operator> <name>__sgn</name><operator>)</operator> <operator>-</operator> <name>__sgn</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>long</name> <name>long</name></type> <name>llabs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>__sgn</name> <init>= <expr><name>__x</name> <operator>&gt;&gt;</operator> <operator>(</operator>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__x</name> <operator>^</operator> <name>__sgn</name><operator>)</operator> <operator>-</operator> <name>__sgn</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>acosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_acos_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>acoshf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_acosh_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>asinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_asin_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>asinhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_asinh_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>atan2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_atan2_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>atanf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_atan_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>atanhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_atanh_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>cbrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cbrt_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>ceilf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ceil_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>copysignf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_copysign_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>cosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cos_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>coshf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cosh_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>cospif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cospi_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>cyl_bessel_i0f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_i0_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>cyl_bessel_i1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_i1_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>erfcf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfc_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>erfcinvf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfcinv_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>erfcxf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfcx_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>erff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erf_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>erfinvf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfinv_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>exp10f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_exp10_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>exp2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_exp2_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>expf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_exp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>expm1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_expm1_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>fabsf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fabs_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>fdimf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fdim_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>fdividef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>/</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>floorf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_floor_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>fmaf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>fmaxf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fmax_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>fminf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fmin_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>fmodf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fmod_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>frexpf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__nptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>float</name></type> <name>__r</name> <init>=
<expr><call><name>__ocml_frexp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__nptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>hypotf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_hypot_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>int</name></type> <name>ilogbf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ilogb_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__finitef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_isfinite_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__isinff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_isinf_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__isnanf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_isnan_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>j0f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_j0_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>j1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_j1_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>jnf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>j0f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>j1f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>__x0</name> <init>= <expr><call><name>j0f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>__x1</name> <init>= <expr><call><name>j1f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>__i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>&lt;</operator> <name>__n</name></expr>;</condition> <incr><expr><operator>++</operator><name>__i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__x2</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>__i</name><operator>)</operator> <operator>/</operator> <name>__x</name> <operator>*</operator> <name>__x1</name> <operator>-</operator> <name>__x0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__x0</name> <operator>=</operator> <name>__x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__x1</name> <operator>=</operator> <name>__x2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>__x1</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>ldexpf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__e</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ldexp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__e</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>lgammaf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_lgamma_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>long</name> <name>int</name></type> <name>llrintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rint_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>long</name> <name>int</name></type> <name>llroundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_round_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>log10f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log10_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>log1pf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log1p_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>log2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log2_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>logbf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_logb_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>logf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>int</name></type> <name>lrintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rint_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>int</name></type> <name>lroundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_round_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>modff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__iptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>float</name></type> <name>__r</name> <init>=
<expr><call><name>__ocml_modf_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__iptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>nanf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__tagp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>
<struct>struct <name>ieee_float</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mantissa</name> <range>: <expr><literal type="number">22</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>quiet</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>exponent</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sign</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>bits</name></decl>;</struct>
}</block> <decl><name>__tmp</name></decl>;</union>
<expr_stmt><expr><call><name>__static_assert_type_size_equal</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>__tmp</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>__tmp</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <literal type="number">0u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>exponent</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <literal type="number">1u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>mantissa</name></name> <operator>=</operator> <call><name>__make_mantissa</name><argument_list>(<argument><expr><name>__tagp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>__tmp</name><operator>.</operator><name>val</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>nearbyintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_nearbyint_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>nextafterf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_nextafter_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>norm3df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_len3_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>norm4df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_len4_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>normcdff</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ncdf_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>normcdfinvf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ncdfinv_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>normf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__dim</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__dim</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__r</name> <operator>+=</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__a</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>__ocml_sqrt_f32</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>powf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_pow_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>powif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_pown_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>rcbrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rcbrt_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>remainderf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_remainder_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>remquof</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__quo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>float</name></type> <name>__r</name> <init>= <expr><call><name>__ocml_remquo_f32</name><argument_list>(
<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__quo</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>rhypotf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rhypot_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>rintf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rint_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>rnorm3df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_rlen3_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>rnorm4df</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_rlen4_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>rnormf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__dim</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__dim</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__r</name> <operator>+=</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__a</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>__ocml_rsqrt_f32</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>roundf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_round_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>rsqrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rsqrt_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>scalblnf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>__n</name> <operator>&lt;</operator> <name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>__ocml_scalbn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>__ocml_scalb_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>scalbnf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_scalbn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__signbitf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_signbit_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>void</name></type> <name>sincosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__sinptr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__cosptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>__sinptr</name> <operator>=</operator>
<call><name>__ocml_sincos_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>__cosptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>void</name></type> <name>sincospif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__sinptr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__cosptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>__sinptr</name> <operator>=</operator> <call><name>__ocml_sincospi_f32</name><argument_list>(
<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>float</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>__cosptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>sinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sin_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>sinhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sinh_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>sinpif</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sinpi_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>sqrtf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>tanf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_tan_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>tanhf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_tanh_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>tgammaf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_tgamma_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>truncf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_trunc_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>y0f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_y0_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>y1f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_y1_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>ynf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>y0f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>y1f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>__x0</name> <init>= <expr><call><name>y0f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>__x1</name> <init>= <expr><call><name>y1f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>__i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>&lt;</operator> <name>__n</name></expr>;</condition> <incr><expr><operator>++</operator><name>__i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>__x2</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>__i</name><operator>)</operator> <operator>/</operator> <name>__x</name> <operator>*</operator> <name>__x1</name> <operator>-</operator> <name>__x0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__x0</name> <operator>=</operator> <name>__x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__x1</name> <operator>=</operator> <name>__x2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>__x1</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__cosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_cos_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__exp10f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_exp10_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__expf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_exp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fadd_rd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_add_rtn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fadd_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_add_rte_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fadd_ru</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_add_rtp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fadd_rz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_add_rtz_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fadd_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>+</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fdiv_rd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fdiv_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rte_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fdiv_ru</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fdiv_rz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtz_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fdiv_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>/</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fdividef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>/</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmaf_rd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rtn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmaf_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rte_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmaf_ru</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rtp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmaf_rz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rtz_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmaf_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmul_rd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_mul_rtn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmul_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_mul_rte_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmul_ru</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_mul_rtp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmul_rz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_mul_rtz_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fmul_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>*</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__frcp_rd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtn_f32</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__frcp_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rte_f32</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__frcp_ru</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtp_f32</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__frcp_rz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtz_f32</name><argument_list>(<argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__frcp_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>__x</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__frsqrt_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__llvm_amdgcn_rsq_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsqrt_rd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rtn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsqrt_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rte_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsqrt_ru</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rtp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsqrt_rz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rtz_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsqrt_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_sqrt_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsub_rd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sub_rtn_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsub_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sub_rte_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsub_ru</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sub_rtp_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsub_rz</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sub_rtz_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__fsub_rn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>-</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__log10f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_log10_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__log2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_log2_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__logf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_log_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__powf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_pow_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__saturatef</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name>__x</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>__x</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>__x</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>void</name></type> <name>__sincosf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__sinptr</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__cosptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__sinptr</name> <operator>=</operator> <call><name>__ocml_native_sin_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>__cosptr</name> <operator>=</operator> <call><name>__ocml_native_cos_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__sinf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_native_sin_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>__tanf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_tan_f32</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>




<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>acos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_acos_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>acosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_acosh_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>asin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_asin_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>asinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_asinh_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>atan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_atan_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>atan2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_atan2_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>atanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_atanh_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>cbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cbrt_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ceil_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>copysign</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_copysign_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cos_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>cosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cosh_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>cospi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_cospi_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>cyl_bessel_i0</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_i0_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>cyl_bessel_i1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_i1_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>erf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erf_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>erfc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfc_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>erfcinv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfcinv_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>erfcx</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfcx_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>erfinv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_erfinv_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_exp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>exp10</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_exp10_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>exp2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_exp2_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>expm1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_expm1_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>fabs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fabs_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>fdim</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fdim_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>floor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_floor_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>fma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>fmax</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fmax_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>fmin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fmin_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_fmod_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>frexp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__nptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>double</name></type> <name>__r</name> <init>=
<expr><call><name>__ocml_frexp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__nptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>hypot</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_hypot_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>int</name></type> <name>ilogb</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ilogb_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__finite</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_isfinite_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__isinf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_isinf_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__isnan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_isnan_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>j0</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_j0_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>j1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_j1_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>jn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>j0</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>j1</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>__x0</name> <init>= <expr><call><name>j0</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__x1</name> <init>= <expr><call><name>j1</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>__i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>&lt;</operator> <name>__n</name></expr>;</condition> <incr><expr><operator>++</operator><name>__i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__x2</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>__i</name><operator>)</operator> <operator>/</operator> <name>__x</name> <operator>*</operator> <name>__x1</name> <operator>-</operator> <name>__x0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__x0</name> <operator>=</operator> <name>__x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__x1</name> <operator>=</operator> <name>__x2</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>__x1</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>ldexp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__e</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ldexp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__e</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>lgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_lgamma_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>long</name> <name>int</name></type> <name>llrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rint_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>long</name> <name>int</name></type> <name>llround</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_round_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>log10</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log10_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>log1p</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log1p_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>log2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_log2_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>logb</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_logb_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>int</name></type> <name>lrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rint_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>long</name> <name>int</name></type> <name>lround</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_round_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>modf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__iptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>double</name></type> <name>__r</name> <init>=
<expr><call><name>__ocml_modf_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>double</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__iptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>nan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__tagp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>_WIN32</name></expr></cpp:if>
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
<struct>struct <name>ieee_double</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mantissa</name> <range>: <expr><literal type="number">51</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>quiet</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>exponent</name> <range>: <expr><literal type="number">11</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sign</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block> <decl><name>bits</name></decl>;</struct>
}</block> <decl><name>__tmp</name></decl>;</union>
<expr_stmt><expr><call><name>__static_assert_type_size_equal</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>__tmp</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>__tmp</name><operator>.</operator><name>bits</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <literal type="number">0u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>exponent</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <literal type="number">1u</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>__tmp</name><operator>.</operator><name>bits</name><operator>.</operator><name>mantissa</name></name> <operator>=</operator> <call><name>__make_mantissa</name><argument_list>(<argument><expr><name>__tagp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>__tmp</name><operator>.</operator><name>val</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>__static_assert_type_size_equal</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>__val</name> <init>= <expr><call><name>__make_mantissa</name><argument_list>(<argument><expr><name>__tagp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__val</name> <operator>|=</operator> <literal type="number">0xFFF</literal> <operator>&lt;&lt;</operator> <literal type="number">51</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>double</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>__val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>nearbyint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_nearbyint_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>nextafter</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_nextafter_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>norm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__dim</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__dim</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__r</name> <operator>+=</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__a</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>__ocml_sqrt_f64</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>norm3d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_len3_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>norm4d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_len4_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>normcdf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ncdf_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>normcdfinv</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_ncdfinv_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_pow_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>powi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_pown_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>rcbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rcbrt_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>remainder</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_remainder_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>remquo</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>__quo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>double</name></type> <name>__r</name> <init>= <expr><call><name>__ocml_remquo_f64</name><argument_list>(
<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>int</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>__quo</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>

<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>rhypot</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rhypot_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>rint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rint_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>rnorm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__dim</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>__dim</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>__r</name> <operator>+=</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>__a</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><call><name>__ocml_rsqrt_f64</name><argument_list>(<argument><expr><name>__r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>rnorm3d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_rlen3_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>rnorm4d</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_rlen4_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>, <argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_round_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>rsqrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_rsqrt_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>scalbln</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>__n</name> <operator>&lt;</operator> <name>INT_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>__ocml_scalbn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><call><name>__ocml_scalb_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>scalbn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_scalbn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>__RETURN_TYPE</name></type> <name>__signbit</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_signbit_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sin_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>void</name></type> <name>sincos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__sinptr</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__cosptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>__sinptr</name> <operator>=</operator> <call><name>__ocml_sincos_f64</name><argument_list>(
<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>double</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>__cosptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>void</name></type> <name>sincospi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__sinptr</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>__cosptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__tmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:clause><omp:name>allocate</omp:name><omp:argument_list>(<omp:argument><omp:expr>__tmp</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>allocator</omp:name><omp:argument_list>(<omp:argument><omp:expr>omp_thread_mem_alloc</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>__sinptr</name> <operator>=</operator> <call><name>__ocml_sincospi_f64</name><argument_list>(
<argument><expr><name>__x</name></expr></argument>, <argument><expr><operator>(</operator><macro><name>__attribute__</name><argument_list>(<argument>(address_space(<literal type="number">5</literal>))</argument>)</argument_list></macro> <name>double</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>__cosptr</name> <operator>=</operator> <name>__tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>sinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sinh_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>sinpi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sinpi_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>sqrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>tan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_tan_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>tanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_tanh_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>tgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_tgamma_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>trunc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_trunc_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>y0</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_y0_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>y1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_y1_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>yn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__n</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>y0</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>y1</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>__x0</name> <init>= <expr><call><name>y0</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>__x1</name> <init>= <expr><call><name>y1</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>__i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>__i</name> <operator>&lt;</operator> <name>__n</name></expr>;</condition> <incr><expr><operator>++</operator><name>__i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>__x2</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>__i</name><operator>)</operator> <operator>/</operator> <name>__x</name> <operator>*</operator> <name>__x1</name> <operator>-</operator> <name>__x0</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__x0</name> <operator>=</operator> <name>__x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>__x1</name> <operator>=</operator> <name>__x2</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>__x1</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dadd_rd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_add_rtn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dadd_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_add_rte_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dadd_ru</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_add_rtp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dadd_rz</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_add_rtz_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dadd_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>+</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__ddiv_rd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_div_rtn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__ddiv_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_div_rte_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__ddiv_ru</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_div_rtp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__ddiv_rz</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_div_rtz_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__ddiv_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>/</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dmul_rd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_mul_rtn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dmul_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_mul_rte_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dmul_ru</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_mul_rtp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dmul_rz</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_mul_rtz_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dmul_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>*</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__drcp_rd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtn_f64</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__drcp_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rte_f64</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__drcp_ru</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtp_f64</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__drcp_rz</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_div_rtz_f64</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__drcp_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">1.0</literal> <operator>/</operator> <name>__x</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsqrt_rd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rtn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsqrt_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rte_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsqrt_ru</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rtp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsqrt_rz</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_rtz_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsqrt_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__ocml_sqrt_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsub_rd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_sub_rtn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsub_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_sub_rte_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsub_ru</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_sub_rtp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsub_rz</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_sub_rtz_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__dsub_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>__x</name> <operator>-</operator> <name>__y</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>OCML_BASIC_ROUNDED_OPERATIONS</name></expr></cpp:if>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__fma_rd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rtn_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__fma_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rte_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__fma_ru</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rtp_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__fma_rz</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_rtz_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>__fma_rn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__ocml_fma_f64</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isfinite</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__x), float : __finitef, double : __finite)(__x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isinf</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__x), float : __isinff, double : __isinf)(__x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isnan</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__x), float : __isnanf, double : __isnan)(__x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signbit</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Generic((__x), float : __signbitf, double : __signbit)(__x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>__DEVICE__</name> <name>T</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>__arg1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>__arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>__arg1</name> <operator>&lt;</operator> <name>__arg2</name><operator>)</operator></expr> ?</condition><then> <expr><name>__arg1</name></expr> </then><else>: <expr><name>__arg2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>__DEVICE__</name> <name>T</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>__arg1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>__arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>__arg1</name> <operator>&gt;</operator> <name>__arg2</name><operator>)</operator></expr> ?</condition><then> <expr><name>__arg1</name></expr> </then><else>: <expr><name>__arg2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name> <name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>__arg1</name> <operator>&lt;</operator> <name>__arg2</name><operator>)</operator></expr> ?</condition><then> <expr><name>__arg1</name></expr> </then><else>: <expr><name>__arg2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><name>__DEVICE__</name> <name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>__arg1</name> <operator>&gt;</operator> <name>__arg2</name><operator>)</operator></expr> ?</condition><then> <expr><name>__arg1</name></expr> </then><else>: <expr><name>__arg2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fmaxf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fmax</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>float</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fminf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>__DEVICE__</name>
<name>double</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fmin</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HIPCC_RTC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENMP_AMDGCN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>__host__</name> <specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>__arg1</name></expr></argument>, <argument><expr><name>__arg2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>__host__</name> <specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__arg1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>max</name><argument_list>(<argument><expr><name>__arg1</name></expr></argument>, <argument><expr><name>__arg2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__DEVICE__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__RETURN_TYPE"</cpp:literal><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
