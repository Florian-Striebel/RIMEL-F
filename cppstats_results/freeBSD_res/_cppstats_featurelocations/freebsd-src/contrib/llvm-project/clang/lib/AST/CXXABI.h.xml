<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/CXXABI.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_AST_CXXABI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_AST_CXXABI_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXConstructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclaratorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MangleContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MangleNumberingContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemberPointerType</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CXXABI</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CXXABI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>MemberPointerInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Align</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasPadding</name></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>virtual</name> <name>MemberPointerInfo</name></type>
<name>getMemberPointerInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemberPointerType</name> <operator>*</operator><name>MPT</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>CallingConv</name></type> <name>getDefaultMethodCallConv</name><argument_list>(<argument><expr><name>bool</name> <name>isVariadic</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isNearlyEmpty</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MangleNumberingContext</name></expr></argument>&gt;</argument_list></name>
<macro><name>createMangleNumberingContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>addCopyConstructorForExceptionObject</name><parameter_list>(<parameter><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>CXXConstructorDecl</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<function_decl><type><name>virtual</name> <specifier>const</specifier> <name>CXXConstructorDecl</name> <modifier>*</modifier></type>
<name>getCopyConstructorForExceptionObject</name><parameter_list>(<parameter><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>addTypedefNameForUnnamedTagDecl</name><parameter_list>(<parameter><decl><type><name>TagDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>,
<parameter><decl><type><name>TypedefNameDecl</name> <modifier>*</modifier></type><name>DD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>TypedefNameDecl</name> <modifier>*</modifier></type>
<name>getTypedefNameForUnnamedTagDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TagDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>addDeclaratorForUnnamedTagDecl</name><parameter_list>(<parameter><decl><type><name>TagDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>,
<parameter><decl><type><name>DeclaratorDecl</name> <modifier>*</modifier></type><name>DD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>DeclaratorDecl</name> <modifier>*</modifier></type><name>getDeclaratorForUnnamedTagDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TagDecl</name> <modifier>*</modifier></type><name>TD</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>CXXABI</name> <modifier>*</modifier></type><name>CreateItaniumCXXABI</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CXXABI</name> <modifier>*</modifier></type><name>CreateMicrosoftCXXABI</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MangleNumberingContext</name></expr></argument>&gt;</argument_list></name>
<call><name>createItaniumNumberingContext</name><argument_list>(<argument><expr><name>MangleContext</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
