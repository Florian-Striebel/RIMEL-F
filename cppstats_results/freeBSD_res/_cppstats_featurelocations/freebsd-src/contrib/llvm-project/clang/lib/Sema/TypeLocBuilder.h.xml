<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Sema/TypeLocBuilder.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_SEMA_TYPELOCBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_SEMA_TYPELOCBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeLoc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TypeLocBuilder</name> <block>{<block_content>
<enum>enum <block>{ <decl><name>InlineCapacity</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> sizeof<operator>(</operator><name>SourceLocation</name><operator>)</operator></expr></init></decl> }</block>;</enum>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>Capacity</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>Index</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>QualType</name></type> <name>LastTy</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<enum>enum <block>{ <decl><name>BufferMaxAlignment</name> <init>= <macro><name>alignof</name><argument_list>(<argument>void *</argument>)</argument_list></macro></init></decl> }</block>;</enum>
<macro><name>alignas</name><argument_list>(<argument>BufferMaxAlignment</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name></type> <name><name>InlineBuffer</name><index>[<expr><name>InlineCapacity</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumBytesAtAlign4</name></decl>, <decl><type ref="prev"/><name>NumBytesAtAlign8</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TypeLocBuilder</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>Buffer</name><argument_list>(<argument><expr><name>InlineBuffer</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Capacity</name><argument_list>(<argument><expr><name>InlineCapacity</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Index</name><argument_list>(<argument><expr><name>InlineCapacity</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NumBytesAtAlign4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>NumBytesAtAlign8</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>TypeLocBuilder</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Buffer</name> <operator>!=</operator> <name>InlineBuffer</name></expr>)</condition><block type="pseudo"><block_content>
<decl_stmt><decl><type><name><name>delete</name><index>[]</index></name></type> <name>Buffer</name></decl>;</decl_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>reserve</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Requested</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Requested</name> <operator>&gt;</operator> <name>Capacity</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>grow</name><argument_list>(<argument><expr><name>Requested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>pushFullCopy</name><parameter_list>(<parameter><decl><type><name>TypeLoc</name></type> <name>L</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>TypeSpecTypeLoc</name></type> <name>pushTypeSpec</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>LocalSize</name> <init>= <expr><name>TypeSpecTypeLoc</name><operator>::</operator><name>LocalDataSize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalAlign</name> <init>= <expr><name>TypeSpecTypeLoc</name><operator>::</operator><name>LocalDataAlignment</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>pushImpl</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>LocalSize</name></expr></argument>, <argument><expr><name>LocalAlign</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>castAs</name><argument_list type="generic">&lt;<argument><expr><name>TypeSpecTypeLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>LastTy</name> <operator>=</operator> <call><name>QualType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>Index</name> <operator>=</operator> <name>Capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name>NumBytesAtAlign4</name> <operator>=</operator> <name>NumBytesAtAlign8</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>TypeWasModifiedSafely</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>LastTy</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>TyLocType</name></expr></argument>&gt;</argument_list></name> <name>TyLocType</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>TyLocType</name></type> <name>Loc</name> <init>= <expr><call><name>TypeLoc</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>castAs</name><argument_list type="generic">&lt;<argument><expr><name>TyLocType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>LocalSize</name> <init>= <expr><call><name><name>Loc</name><operator>.</operator><name>getLocalDataSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalAlign</name> <init>= <expr><call><name><name>Loc</name><operator>.</operator><name>getLocalDataAlignment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>pushImpl</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>LocalSize</name></expr></argument>, <argument><expr><name>LocalAlign</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>castAs</name><argument_list type="generic">&lt;<argument><expr><name>TyLocType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>TypeSourceInfo</name> <modifier>*</modifier></type><name>getTypeSourceInfo</name><parameter_list>(<parameter><decl><type><name>ASTContext</name><modifier>&amp;</modifier></type> <name>Context</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>LastTy</name> <operator>&amp;&amp;</operator> <literal type="string">"type doesn't match last type pushed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>FullDataSize</name> <init>= <expr><name>Capacity</name> <operator>-</operator> <name>Index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TypeSourceInfo</name> <modifier>*</modifier></type><name>DI</name> <init>= <expr><call><name><name>Context</name><operator>.</operator><name>CreateTypeSourceInfo</name></name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>FullDataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>DI</name><operator>-&gt;</operator><name>getTypeLoc</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOpaqueData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Buffer</name><index>[<expr><name>Index</name></expr>]</index></name></expr></argument>, <argument><expr><name>FullDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DI</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>TypeLoc</name></type> <name>getTypeLocInContext</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>T</name> <operator>==</operator> <name>LastTy</name> <operator>&amp;&amp;</operator> <literal type="string">"type doesn't match last type pushed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>FullDataSize</name> <init>= <expr><name>Capacity</name> <operator>-</operator> <name>Index</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Mem</name> <init>= <expr><call><name><name>Context</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><name>FullDataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Buffer</name><index>[<expr><name>Index</name></expr>]</index></name></expr></argument>, <argument><expr><name>FullDataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>TypeLoc</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Mem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>

<function_decl><type><name>TypeLoc</name></type> <name>pushImpl</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>LocalSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>LocalAlignment</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>grow</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>NewCapacity</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>TypeLoc</name></type> <name>getTemporaryTypeLoc</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>LastTy</name> <operator>==</operator> <name>T</name> <operator>&amp;&amp;</operator> <literal type="string">"type doesn't match last type pushed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>TypeLoc</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Buffer</name><index>[<expr><name>Index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
