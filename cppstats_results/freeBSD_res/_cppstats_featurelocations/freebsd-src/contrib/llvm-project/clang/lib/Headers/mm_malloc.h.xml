<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/mm_malloc.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MM_MALLOC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MM_MALLOC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>__memptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>int</name></type> <name>posix_memalign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>__memptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>__size</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_mm_malloc</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name> <modifier>*</modifier></type><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>,</operator>
<name>__malloc__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_malloc</name><argument_list>(<argument><expr><name>size_t</name> <name>__size</name></expr></argument>, <argument><expr><name>size_t</name> <name>__align</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>__size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>__align</name> <operator>&amp;</operator> <operator>(</operator><name>__align</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>__align</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__align</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>__mallocedMemory</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__mallocedMemory</name> <operator>=</operator> <call><name>__mingw_aligned_malloc</name><argument_list>(<argument><expr><name>__size</name></expr></argument>, <argument><expr><name>__align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>__mallocedMemory</name> <operator>=</operator> <call><name>_aligned_malloc</name><argument_list>(<argument><expr><name>__size</name></expr></argument>, <argument><expr><name>__align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>posix_memalign</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__mallocedMemory</name></expr></argument>, <argument><expr><name>__align</name></expr></argument>, <argument><expr><name>__size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>__mallocedMemory</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline__</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_free</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__p</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__mingw_aligned_free</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>_aligned_free</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>__p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
