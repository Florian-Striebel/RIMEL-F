<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGOPENCLRUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGOPENCLRUNTIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Value.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BlockExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CGOpenCLRuntime</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>PipeROTy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>PipeWOTy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>SamplerTy</name></expr>;</expr_stmt>


<struct>struct <name>EnqueuedBlockInfo</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><name>InvokeFunc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><name>Kernel</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>BlockArg</name></expr>;</expr_stmt>
}</block>;</struct>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>EnqueuedBlockInfo</name></expr></argument>&gt;</argument_list></name> <name>EnqueuedBlockMap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>getPipeType</name><argument_list>(<argument>const PipeType *T</argument>, <argument>StringRef Name</argument>,
<argument>llvm::Type *&amp;PipeTy</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CGOpenCLRuntime</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>CGM</name><argument_list>(<argument><expr><name>CGM</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>PipeROTy</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>PipeWOTy</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SamplerTy</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>CGOpenCLRuntime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<function_decl><type><name>virtual</name> <name>void</name></type> <name>EmitWorkGroupLocalVarDecl</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>&amp;</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><call><name>convertOpenCLSpecificType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><call><name>getPipeType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PipeType</name> <operator>*</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><call><name>getSamplerType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>getPipeElemSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>PipeArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>getPipeElemAlign</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>PipeArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><call><name>getGenericVoidPointerType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>EnqueuedBlockInfo</name></type> <name>emitOpenCLEnqueuedBlock</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>void</name></type> <name>recordBlockInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BlockExpr</name> <operator>*</operator><name>E</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><name>InvokeF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Block</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><call><name>getInvokeFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
