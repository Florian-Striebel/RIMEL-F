<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/AArch64.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_AARCH64_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_AARCH64_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OSTargets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetBuiltins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TargetParser.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>AArch64TargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>setDataLayout</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>GCCRegAliases</name><index>[]</index></name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name></expr>;

enum <expr><name>FPUModeEnum</name> <block>{ <expr><name>FPUMode</name></expr>, <expr><name>NeonMode</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>, <expr><name>SveMode</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> }</block></expr>;

<expr><name>unsigned</name> <name>FPU</name></expr>;
<expr><name>bool</name> <name>HasCRC</name></expr>;
<expr><name>bool</name> <name>HasCrypto</name></expr>;
<expr><name>bool</name> <name>HasAES</name></expr>;
<expr><name>bool</name> <name>HasSHA2</name></expr>;
<expr><name>bool</name> <name>HasSHA3</name></expr>;
<expr><name>bool</name> <name>HasSM4</name></expr>;
<expr><name>bool</name> <name>HasUnaligned</name></expr>;
<expr><name>bool</name> <name>HasFullFP16</name></expr>;
<expr><name>bool</name> <name>HasDotProd</name></expr>;
<expr><name>bool</name> <name>HasFP16FML</name></expr>;
<expr><name>bool</name> <name>HasMTE</name></expr>;
<expr><name>bool</name> <name>HasTME</name></expr>;
<expr><name>bool</name> <name>HasPAuth</name></expr>;
<expr><name>bool</name> <name>HasLS64</name></expr>;
<expr><name>bool</name> <name>HasRandGen</name></expr>;
<expr><name>bool</name> <name>HasMatMul</name></expr>;
<expr><name>bool</name> <name>HasSVE2</name></expr>;
<expr><name>bool</name> <name>HasSVE2AES</name></expr>;
<expr><name>bool</name> <name>HasSVE2SHA3</name></expr>;
<expr><name>bool</name> <name>HasSVE2SM4</name></expr>;
<expr><name>bool</name> <name>HasSVE2BitPerm</name></expr>;
<expr><name>bool</name> <name>HasMatmulFP64</name></expr>;
<expr><name>bool</name> <name>HasMatmulFP32</name></expr>;
<expr><name>bool</name> <name>HasLSE</name></expr>;
<expr><name>bool</name> <name>HasFlagM</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>AArch64</name><operator>::</operator><name>ArchKind</name> <name>ArchKind</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>ABI</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>AArch64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StringRef</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>setABI</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>validateBranchProtection</name><argument_list>(<argument>StringRef</argument>, <argument>BranchProtectionInfo &amp;</argument>,
<argument>StringRef &amp;</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>setCPU</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>useFP16ConversionIntrinsics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>void</name> <macro><name>getTargetDefinesARMV81A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV82A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV83A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV84A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV85A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV86A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV87A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasFeature</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>handleTargetFeatures</name><argument_list>(<argument>std::vector&lt;std::string&gt; &amp;Features</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isCLZForZeroUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>convertConstraint</name><argument_list>(<argument>const char *&amp;Constraint</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>R</name></expr>;
<switch>switch <condition>(<expr><operator>*</operator><name>Constraint</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<expr_stmt><expr><name>R</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><literal type="string">"@3"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Constraint</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>R</name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><call><name>convertConstraint</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
return R</block><empty_stmt>;</empty_stmt></switch>
}</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;Info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name>
<macro><name>validateConstraintModifier</name><argument_list>(<argument>StringRef Constraint</argument>, <argument>char Modifier</argument>, <argument>unsigned Size</argument>,
<argument>std::string &amp;SuggestedModifier</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>StringRef</name> <macro><name>getConstraintRegister</name><argument_list>(<argument>StringRef Constraint</argument>,
<argument>StringRef Expression</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>Expression</name></expr>;</return>
}</block>

<name>int</name> <macro><name>getEHDataRegisterNumber</name><argument_list>(<argument>unsigned RegNo</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getBFloat16Mangling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"u6__bf16"</literal></expr>;</return> }</block></expr>;
<expr><name>bool</name> <macro><name>hasInt128Type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>AArch64leTargetInfo</name> <operator>:</operator> <name>public</name> <name>AArch64TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>AArch64leTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>setDataLayout</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>WindowsARM64TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>WindowsTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>AArch64leTargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <name>Triple</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>WindowsARM64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>setDataLayout</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>MicrosoftARM64TargetInfo</name>
<operator>:</operator> <name>public</name> <name>WindowsARM64TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MicrosoftARM64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>TargetInfo</name><operator>::</operator><name>CallingConvKind</name>
<macro><name>getCallingConvKind</name><argument_list>(<argument>bool ClangABICompat4</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>unsigned</name> <macro><name>getMinGlobalAlign</name><argument_list>(<argument>uint64_t TypeSize</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>MinGWARM64TargetInfo</name>
<operator>:</operator> <name>public</name> <name>WindowsARM64TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MinGWARM64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>AArch64beTargetInfo</name> <operator>:</operator> <name>public</name> <name>AArch64TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>AArch64beTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>setDataLayout</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>DarwinAArch64TargetInfo</name>
<operator>:</operator> <name>public</name> <name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>AArch64leTargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DarwinAArch64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>RenderScript64TargetInfo</name>
<operator>:</operator> <name>public</name> <name>AArch64leTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RenderScript64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
