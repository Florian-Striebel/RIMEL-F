<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/ARCMigrate/Internals.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_ARCMIGRATE_INTERNALS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_ARCMIGRATE_INTERNALS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/MigratorOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>arcmt</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CapturedDiagList</name> <block>{<block_content>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>StoredDiagnostic</name></expr></argument>&gt;</argument_list></name> <name>ListTy</name></expr>;</expr_stmt></typedef>
<decl_stmt><decl><type><name>ListTy</name></type> <name>List</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StoredDiagnostic</name> <modifier>&amp;</modifier></type><name>diag</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>List</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>diag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>clearDiagnostic</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></type> <name>IDs</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>hasDiagnostic</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>IDs</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>range</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>reportDiagnostics</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>diags</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<typedef>typedef <expr_stmt><expr><name>ListTy</name><operator>::</operator><name>const_iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>List</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>List</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>writeARCDiagsToPlist</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>outPath</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StoredDiagnostic</name></expr></argument>&gt;</argument_list></name> <name>diags</name></expr></argument>,
<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TransformActions</name> <block>{<block_content>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CapturedDiagList</name> <modifier>&amp;</modifier></type><name>CapturedDiags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Impl</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TransformActions</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>diag</name></expr></argument>, <argument><expr><name>CapturedDiagList</name> <operator>&amp;</operator><name>capturedDiags</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>TransformActions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>startTransaction</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>commitTransaction</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>abortTransaction</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>insertAfterToken</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>removeStmt</name><parameter_list>(<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>replacementRange</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replaceStmt</name><parameter_list>(<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>replaceText</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>replacementText</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>increaseIndentation</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>parentIndent</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>clearDiagnostic</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></type> <name>IDs</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>bool</name></type> <name>clearAllDiagnostics</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>clearDiagnostic</name><argument_list>(<argument><expr><name>None</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>clearDiagnostic</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ID2</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>IDs</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ID1</name></expr>, <expr><name>ID2</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>clearDiagnostic</name><argument_list>(<argument><expr><name>IDs</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>clearDiagnostic</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ID2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ID3</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>IDs</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ID1</name></expr>, <expr><name>ID2</name></expr>, <expr><name>ID3</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>clearDiagnostic</name><argument_list>(<argument><expr><name>IDs</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasDiagnostic</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>CapturedDiags</name><operator>.</operator><name>hasDiagnostic</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasDiagnostic</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ID2</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>IDs</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ID1</name></expr>, <expr><name>ID2</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>CapturedDiags</name><operator>.</operator><name>hasDiagnostic</name></name><argument_list>(<argument><expr><name>IDs</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>DiagnosticBuilder</name></type> <name>report</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>diagId</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>range</name> <init>= <expr><call><name>SourceRange</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>reportError</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>range</name> <init>= <expr><call><name>SourceRange</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>reportWarning</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>warning</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>range</name> <init>= <expr><call><name>SourceRange</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>reportNote</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>note</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>range</name> <init>= <expr><call><name>SourceRange</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>hasReportedErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Diags</name><operator>.</operator><name>hasUnrecoverableErrorOccurred</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RewriteReceiver</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>RewriteReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>increaseIndentation</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>parentIndent</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>applyRewrites</name><parameter_list>(<parameter><decl><type><name>RewriteReceiver</name> <modifier>&amp;</modifier></type><name>receiver</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Transaction</name> <block>{<block_content>
<decl_stmt><decl><type><name>TransformActions</name> <modifier>&amp;</modifier></type><name>TA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Aborted</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Transaction</name><argument_list>(<argument><expr><name>TransformActions</name> <operator>&amp;</operator><name>TA</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>TA</name><argument_list>(<argument><expr><name>TA</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Aborted</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>TA</name><operator>.</operator><name>startTransaction</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>Transaction</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isAborted</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>TA</name><operator>.</operator><name>commitTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>abort</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>TA</name><operator>.</operator><name>abortTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Aborted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isAborted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Aborted</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MigrationPass</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>LangOptions</name><operator>::</operator><name>GCMode</name> <name>OrigGCMode</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MigratorOptions</name></type> <name>MigOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>SemaRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TransformActions</name> <modifier>&amp;</modifier></type><name>TA</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CapturedDiagList</name> <modifier>&amp;</modifier></type><name>CapturedDiags</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ARCMTMacroLocs</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>EnableCFBridgeFns</name></decl>;</decl_stmt>

<macro><name>MigrationPass</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>LangOptions::GCMode OrigGCMode</argument>,
<argument>Sema &amp;sema</argument>, <argument>TransformActions &amp;TA</argument>,
<argument>const CapturedDiagList &amp;capturedDiags</argument>,
<argument>std::vector&lt;SourceLocation&gt; &amp;ARCMTMacroLocs</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Ctx</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OrigGCMode</name><argument_list>(<argument><expr><name>OrigGCMode</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MigOptions</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>SemaRef</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>TA</name><argument_list>(<argument><expr><name>TA</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CapturedDiags</name><argument_list>(<argument><expr><name>capturedDiags</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ARCMTMacroLocs</name><argument_list>(<argument>ARCMTMacroLocs</argument>)</argument_list></macro> <expr><block>{ }</block>

<specifier>const</specifier> <name>CapturedDiagList</name> <operator>&amp;</operator><macro><name>getDiags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CapturedDiags</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isGCMigration</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>OrigGCMode</name> <operator>!=</operator> <name>LangOptions</name><operator>::</operator><name>NonGC</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>noFinalizeRemoval</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>MigOptions</name><operator>.</operator><name>NoFinalizeRemoval</name></name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setNoFinalizeRemoval</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content><expr_stmt><expr><name><name>MigOptions</name><operator>.</operator><name>NoFinalizeRemoval</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>CFBridgingFunctionsDefined</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>StringRef</name></type> <name>getARCMTMacroName</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><literal type="string">"__IMPL_ARCMT_REMOVED_EXPR__"</literal></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
