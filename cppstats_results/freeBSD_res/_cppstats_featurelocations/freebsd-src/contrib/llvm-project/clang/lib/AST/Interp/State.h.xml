<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/State.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_STATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_STATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/OptionalDiagnostic.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>





<enum>enum <name>AccessKinds</name> <block>{
<decl><name>AK_Read</name></decl>,
<decl><name>AK_ReadObjectRepresentation</name></decl>,
<decl><name>AK_Assign</name></decl>,
<decl><name>AK_Increment</name></decl>,
<decl><name>AK_Decrement</name></decl>,
<decl><name>AK_MemberCall</name></decl>,
<decl><name>AK_DynamicCast</name></decl>,
<decl><name>AK_TypeId</name></decl>,
<decl><name>AK_Construct</name></decl>,
<decl><name>AK_Destroy</name></decl>,
}</block>;</enum>


<enum>enum <name>CheckSubobjectKind</name> <block>{
<decl><name>CSK_Base</name></decl>,
<decl><name>CSK_Derived</name></decl>,
<decl><name>CSK_Field</name></decl>,
<decl><name>CSK_ArrayToPointer</name></decl>,
<decl><name>CSK_ArrayIndex</name></decl>,
<decl><name>CSK_Real</name></decl>,
<decl><name>CSK_Imag</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceInfo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>State</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>State</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>checkingForUndefinedBehavior</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>checkingPotentialConstantExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>noteUndefinedBehavior</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>keepEvaluatingAfterFailure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>Frame</name> <modifier>*</modifier></type><name>getCurrentFrame</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>Frame</name> <operator>*</operator><macro><name>getBottomFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>hasActiveDiagnostic</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>setActiveDiagnostic</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Flag</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>setFoldFailureDiagnostic</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Flag</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <name>Expr</name><operator>::</operator><name>EvalStatus</name> <operator>&amp;</operator><macro><name>getEvalStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>ASTContext</name> <operator>&amp;</operator><macro><name>getCtx</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>hasPriorDiagnostic</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>unsigned</name></type> <name>getCallStackDepth</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>OptionalDiagnostic</name></type>
<name>FFDiag</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name> <operator>=</operator> <name>diag</name><operator>::</operator><name>note_invalid_subexpr_in_const_expr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExtraNotes</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionalDiagnostic</name></type>
<name>FFDiag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>,
<argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name> <operator>=</operator> <name>diag</name><operator>::</operator><name>note_invalid_subexpr_in_const_expr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExtraNotes</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionalDiagnostic</name></type>
<name>FFDiag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceInfo</name> <operator>&amp;</operator><name>SI</name></expr></argument>,
<argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name> <operator>=</operator> <name>diag</name><operator>::</operator><name>note_invalid_subexpr_in_const_expr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExtraNotes</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>






<decl_stmt><decl><type><name>OptionalDiagnostic</name></type>
<name>CCEDiag</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>,
<argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name> <operator>=</operator> <name>diag</name><operator>::</operator><name>note_invalid_subexpr_in_const_expr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExtraNotes</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionalDiagnostic</name></type>
<name>CCEDiag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>,
<argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name> <operator>=</operator> <name>diag</name><operator>::</operator><name>note_invalid_subexpr_in_const_expr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExtraNotes</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionalDiagnostic</name></type>
<name>CCEDiag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceInfo</name> <operator>&amp;</operator><name>SI</name></expr></argument>,
<argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name> <operator>=</operator> <name>diag</name><operator>::</operator><name>note_invalid_subexpr_in_const_expr</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExtraNotes</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>OptionalDiagnostic</name></type> <name>Note</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>addNotes</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnosticAt</name></expr></argument>&gt;</argument_list></name></type> <name>Diags</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>DiagnosticBuilder</name></type> <name>report</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>addCallStack</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Limit</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>PartialDiagnostic</name> <modifier>&amp;</modifier></type><name>addDiag</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OptionalDiagnostic</name></type> <name>diag</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>Loc</name></expr></argument>, <argument><expr><name>diag</name><operator>::</operator><name>kind</name> <name>DiagId</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ExtraNotes</name></expr></argument>, <argument><expr><name>bool</name> <name>IsCCEDiag</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
