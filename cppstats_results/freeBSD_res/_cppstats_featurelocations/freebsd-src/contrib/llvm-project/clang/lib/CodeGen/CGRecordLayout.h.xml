<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGRecordLayout.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGRECORDLAYOUT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGRECORDLAYOUT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/DerivedTypes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StructType</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>









































<struct>struct <name>CGBitFieldInfo</name> <block>{


<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Size</name> <range>: <expr><literal type="number">15</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsSigned</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>StorageSize</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>StorageOffset</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>VolatileOffset</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>VolatileStorageSize</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>VolatileStorageOffset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CGBitFieldInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>Offset</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>Size</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>IsSigned</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>StorageSize</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>StorageOffset</name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><call><name>VolatileOffset</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>VolatileStorageSize</name><argument_list>()</argument_list></call></expr><operator>,</operator> <macro><name>VolatileStorageOffset</name><argument_list>()</argument_list></macro> <expr><block>{}</block>

<macro><name>CGBitFieldInfo</name><argument_list>(<argument>unsigned Offset</argument>, <argument>unsigned Size</argument>, <argument>bool IsSigned</argument>,
<argument>unsigned StorageSize</argument>, <argument>CharUnits StorageOffset</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Offset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Size</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsSigned</name><argument_list>(<argument><expr><name>IsSigned</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>StorageSize</name><argument_list>(<argument><expr><name>StorageSize</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>StorageOffset</name><argument_list>(<argument>StorageOffset</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>print</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<function_decl><type><specifier>static</specifier> <name>CGBitFieldInfo</name></type> <name>MakeInfo</name><parameter_list>(<parameter><decl><type><name>class</name> <name>CodeGenTypes</name> <modifier>&amp;</modifier></type><name>Types</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>StorageSize</name></decl></parameter>,
<parameter><decl><type><name>CharUnits</name></type> <name>StorageOffset</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>





<decl_stmt><decl><type><name>class</name></type> <name>CGRecordLayout</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CodeGenTypes</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CGRecordLayout</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CGRecordLayout</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CGRecordLayout</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>CompleteObjectType</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>BaseSubobjectType</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>FieldInfo</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>CGBitFieldInfo</name></expr></argument>&gt;</argument_list></name> <name>BitFields</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>NonVirtualBases</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>CompleteObjectVirtualBases</name></expr>;</expr_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>IsZeroInitializable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>IsZeroInitializableAsBase</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>CGRecordLayout</name><argument_list>(<argument>llvm::StructType *CompleteObjectType</argument>,
<argument>llvm::StructType *BaseSubobjectType</argument>,
<argument>bool IsZeroInitializable</argument>,
<argument>bool IsZeroInitializableAsBase</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>CompleteObjectType</name><argument_list>(<argument><expr><name>CompleteObjectType</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>BaseSubobjectType</name><argument_list>(<argument><expr><name>BaseSubobjectType</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsZeroInitializable</name><argument_list>(<argument><expr><name>IsZeroInitializable</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>IsZeroInitializableAsBase</name><argument_list>(<argument>IsZeroInitializableAsBase</argument>)</argument_list></macro> <expr><block>{}</block>



<name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><macro><name>getLLVMType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CompleteObjectType</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><macro><name>getBaseSubobjectLLVMType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>BaseSubobjectType</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isZeroInitializable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IsZeroInitializable</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isZeroInitializableAsBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IsZeroInitializableAsBase</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getLLVMFieldNo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator><name>FD</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>FD</name> <operator>=</operator> <call><name><name>FD</name><operator>-&gt;</operator><name>getCanonicalDecl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>FieldInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>FD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid field for record!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>FieldInfo</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>FD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>getNonVirtualBaseLLVMFieldNo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>NonVirtualBases</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid non-virtual base!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>NonVirtualBases</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getVirtualBaseIndex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>base</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>CompleteObjectVirtualBases</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid virtual base!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>CompleteObjectVirtualBases</name><operator>.</operator><name>lookup</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>CGBitFieldInfo</name> <modifier>&amp;</modifier></type><name>getBitFieldInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator><name>FD</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>FD</name> <operator>=</operator> <call><name><name>FD</name><operator>-&gt;</operator><name>getCanonicalDecl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>FD</name><operator>-&gt;</operator><name>isBitField</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid call for non-bit-field decl!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>CGBitFieldInfo</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name>
<name>it</name> <operator>=</operator> <call><name><name>BitFields</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>it</name> <operator>!=</operator> <call><name><name>BitFields</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Unable to find bitfield info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
