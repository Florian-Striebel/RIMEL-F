<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIChecker.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPICHECKER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPICHECKER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MPIBugReporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MPITypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Checkers/MPIFunctionClassifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mpi</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MPIChecker</name> <range>: <expr><name>public</name> <name><name>Checker</name><argument_list type="generic">&lt;<argument><expr><name>check</name><operator>::</operator><name>PreCall</name></expr></argument>, <argument><expr><name>check</name><operator>::</operator><name>DeadSymbols</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MPIChecker</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>BReporter</name><argument_list>(<argument>*this</argument>)</argument_list></macro> <block>{}</block>


<name>void</name> <macro><name>checkPreCall</name><argument_list>(<argument>const CallEvent &amp;CE</argument>, <argument>CheckerContext &amp;Ctx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>dynamicInit</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>checkUnmatchedWaits</name><argument_list>(<argument><expr><name>CE</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>checkDoubleNonblocking</name><argument_list>(<argument><expr><name>CE</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>checkDeadSymbols</name><argument_list>(<argument>SymbolReaper &amp;SymReaper</argument>, <argument>CheckerContext &amp;Ctx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>dynamicInit</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>checkMissingWaits</name><argument_list>(<argument><expr><name>SymReaper</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>dynamicInit</name><argument_list>(<argument>CheckerContext &amp;Ctx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>FuncClassifier</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MPIFunctionClassifier</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>FuncClassifier</name></expr></argument>)</argument_list></call>
<operator>.</operator><macro><name>reset</name><argument_list>(<argument>new MPIFunctionClassifier{Ctx.getASTContext()}</argument>)</argument_list></macro></block></expr>;
}</block>






<name>void</name> <macro><name>checkDoubleNonblocking</name><argument_list>(<argument>const clang::ento::CallEvent &amp;PreCallEvent</argument>,
<argument>clang::ento::CheckerContext &amp;Ctx</argument>)</argument_list></macro> <specifier>const</specifier></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name></type> <name>checkUnmatchedWaits</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>CallEvent</name> <operator>&amp;</operator><name>PreCallEvent</name></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>CheckerContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>checkMissingWaits</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>SymbolReaper</name> <operator>&amp;</operator><name>SymReaper</name></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>CheckerContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>








<decl_stmt><decl><type><name>void</name></type> <name>allRegionsUsedByWait</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>MemRegion</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ReqRegions</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>MemRegion</name> <operator>*</operator><specifier>const</specifier> <name>MR</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>CallEvent</name> <operator>&amp;</operator><name>CE</name></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>CheckerContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<expr_stmt><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>MemRegion</name> <operator>*</operator>
<macro><name>topRegionUsedByWait</name><argument_list>(<argument>const clang::ento::CallEvent &amp;CE</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MPIFunctionClassifier</name></expr></argument>&gt;</argument_list></name> <name>FuncClassifier</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MPIBugReporter</name></type> <name>BReporter</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
