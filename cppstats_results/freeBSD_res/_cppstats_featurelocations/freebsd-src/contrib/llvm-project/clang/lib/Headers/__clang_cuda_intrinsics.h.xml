<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_cuda_intrinsics.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_CUDA_INTRINSICS_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_CUDA_INTRINSICS_H__</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for CUDA compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SM_30_INTRINSICS_H__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SM_30_INTRINSICS_HPP__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA_ARCH__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__CUDA_ARCH__</name> <operator>&gt;=</operator> <literal type="number">300</literal></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__MAKE_SHUFFLES"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MAKE_SHUFFLES</name><parameter_list>(<parameter><type><name>__FnName</name></type></parameter>, <parameter><type><name>__IntIntrinsic</name></type></parameter>, <parameter><type><name>__FloatIntrinsic</name></type></parameter>, <parameter><type><name>__Mask</name></type></parameter>, <parameter><type><name>__Type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inline __device__ int __FnName(int __val, __Type __offset, int __width = warpSize) { return __IntIntrinsic(__val, __offset, ((warpSize - __width) &lt;&lt; 8) | (__Mask)); } inline __device__ float __FnName(float __val, __Type __offset, int __width = warpSize) { return __FloatIntrinsic(__val, __offset, ((warpSize - __width) &lt;&lt; 8) | (__Mask)); } inline __device__ unsigned int __FnName(unsigned int __val, __Type __offset, int __width = warpSize) { return static_cast&lt;unsigned int&gt;( ::__FnName(static_cast&lt;int&gt;(__val), __offset, __width)); } inline __device__ long long __FnName(long long __val, __Type __offset, int __width = warpSize) { struct __Bits { int __a, __b; }; _Static_assert(sizeof(__val) == sizeof(__Bits)); _Static_assert(sizeof(__Bits) == 2 * sizeof(int)); __Bits __tmp; memcpy(&amp;__tmp, &amp;__val, sizeof(__val)); __tmp.__a = ::__FnName(__tmp.__a, __offset, __width); __tmp.__b = ::__FnName(__tmp.__b, __offset, __width); long long __ret; memcpy(&amp;__ret, &amp;__tmp, sizeof(__tmp)); return __ret; } inline __device__ long __FnName(long __val, __Type __offset, int __width = warpSize) { _Static_assert(sizeof(long) == sizeof(long long) || sizeof(long) == sizeof(int)); if (sizeof(long) == sizeof(long long)) { return static_cast&lt;long&gt;( ::__FnName(static_cast&lt;long long&gt;(__val), __offset, __width)); } else if (sizeof(long) == sizeof(int)) { return static_cast&lt;long&gt;( ::__FnName(static_cast&lt;int&gt;(__val), __offset, __width)); } } inline __device__ unsigned long __FnName( unsigned long __val, __Type __offset, int __width = warpSize) { return static_cast&lt;unsigned long&gt;( ::__FnName(static_cast&lt;long&gt;(__val), __offset, __width)); } inline __device__ unsigned long long __FnName( unsigned long long __val, __Type __offset, int __width = warpSize) { return static_cast&lt;unsigned long long&gt;(::__FnName( static_cast&lt;unsigned long long&gt;(__val), __offset, __width)); } inline __device__ double __FnName(double __val, __Type __offset, int __width = warpSize) { long long __tmp; _Static_assert(sizeof(__tmp) == sizeof(__val)); memcpy(&amp;__tmp, &amp;__val, sizeof(__val)); __tmp = ::__FnName(__tmp, __offset, __width); double __ret; memcpy(&amp;__ret, &amp;__tmp, sizeof(__ret)); return __ret; }</cpp:value></cpp:define>
































































<expr_stmt><expr><call><name>__MAKE_SHUFFLES</name><argument_list>(<argument><expr><name>__shfl</name></expr></argument>, <argument><expr><name>__nvvm_shfl_idx_i32</name></expr></argument>, <argument><expr><name>__nvvm_shfl_idx_f32</name></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>__MAKE_SHUFFLES</name><argument_list>(<argument>__shfl_up</argument>, <argument>__nvvm_shfl_up_i32</argument>, <argument>__nvvm_shfl_up_f32</argument>, <argument><literal type="number">0</literal></argument>,
<argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>__MAKE_SHUFFLES</name><argument_list>(<argument>__shfl_down</argument>, <argument>__nvvm_shfl_down_i32</argument>, <argument>__nvvm_shfl_down_f32</argument>, <argument><literal type="number">0x1f</literal></argument>,
<argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>__MAKE_SHUFFLES</name><argument_list>(<argument><expr><name>__shfl_xor</name></expr></argument>, <argument><expr><name>__nvvm_shfl_bfly_i32</name></expr></argument>, <argument><expr><name>__nvvm_shfl_bfly_f32</name></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>,
<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__MAKE_SHUFFLES"</cpp:literal><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA_ARCH__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__CUDA_ARCH__</name> <operator>&gt;=</operator> <literal type="number">300</literal><operator>)</operator></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__MAKE_SYNC_SHUFFLES"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MAKE_SYNC_SHUFFLES</name><parameter_list>(<parameter><type><name>__FnName</name></type></parameter>, <parameter><type><name>__IntIntrinsic</name></type></parameter>, <parameter><type><name>__FloatIntrinsic</name></type></parameter>, <parameter><type><name>__Mask</name></type></parameter>, <parameter><type><name>__Type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>inline __device__ int __FnName(unsigned int __mask, int __val, __Type __offset, int __width = warpSize) { return __IntIntrinsic(__mask, __val, __offset, ((warpSize - __width) &lt;&lt; 8) | (__Mask)); } inline __device__ float __FnName(unsigned int __mask, float __val, __Type __offset, int __width = warpSize) { return __FloatIntrinsic(__mask, __val, __offset, ((warpSize - __width) &lt;&lt; 8) | (__Mask)); } inline __device__ unsigned int __FnName(unsigned int __mask, unsigned int __val, __Type __offset, int __width = warpSize) { return static_cast&lt;unsigned int&gt;( ::__FnName(__mask, static_cast&lt;int&gt;(__val), __offset, __width)); } inline __device__ long long __FnName(unsigned int __mask, long long __val, __Type __offset, int __width = warpSize) { struct __Bits { int __a, __b; }; _Static_assert(sizeof(__val) == sizeof(__Bits)); _Static_assert(sizeof(__Bits) == 2 * sizeof(int)); __Bits __tmp; memcpy(&amp;__tmp, &amp;__val, sizeof(__val)); __tmp.__a = ::__FnName(__mask, __tmp.__a, __offset, __width); __tmp.__b = ::__FnName(__mask, __tmp.__b, __offset, __width); long long __ret; memcpy(&amp;__ret, &amp;__tmp, sizeof(__tmp)); return __ret; } inline __device__ unsigned long long __FnName( unsigned int __mask, unsigned long long __val, __Type __offset, int __width = warpSize) { return static_cast&lt;unsigned long long&gt;(::__FnName( __mask, static_cast&lt;unsigned long long&gt;(__val), __offset, __width)); } inline __device__ long __FnName(unsigned int __mask, long __val, __Type __offset, int __width = warpSize) { _Static_assert(sizeof(long) == sizeof(long long) || sizeof(long) == sizeof(int)); if (sizeof(long) == sizeof(long long)) { return static_cast&lt;long&gt;(::__FnName( __mask, static_cast&lt;long long&gt;(__val), __offset, __width)); } else if (sizeof(long) == sizeof(int)) { return static_cast&lt;long&gt;( ::__FnName(__mask, static_cast&lt;int&gt;(__val), __offset, __width)); } } inline __device__ unsigned long __FnName( unsigned int __mask, unsigned long __val, __Type __offset, int __width = warpSize) { return static_cast&lt;unsigned long&gt;( ::__FnName(__mask, static_cast&lt;long&gt;(__val), __offset, __width)); } inline __device__ double __FnName(unsigned int __mask, double __val, __Type __offset, int __width = warpSize) { long long __tmp; _Static_assert(sizeof(__tmp) == sizeof(__val)); memcpy(&amp;__tmp, &amp;__val, sizeof(__val)); __tmp = ::__FnName(__mask, __tmp, __offset, __width); double __ret; memcpy(&amp;__ret, &amp;__tmp, sizeof(__ret)); return __ret; }</cpp:value></cpp:define>



































































<expr_stmt><expr><call><name>__MAKE_SYNC_SHUFFLES</name><argument_list>(<argument><expr><name>__shfl_sync</name></expr></argument>, <argument><expr><name>__nvvm_shfl_sync_idx_i32</name></expr></argument>,
<argument><expr><name>__nvvm_shfl_sync_idx_f32</name></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>__MAKE_SYNC_SHUFFLES</name><argument_list>(<argument>__shfl_up_sync</argument>, <argument>__nvvm_shfl_sync_up_i32</argument>,
<argument>__nvvm_shfl_sync_up_f32</argument>, <argument><literal type="number">0</literal></argument>, <argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>__MAKE_SYNC_SHUFFLES</name><argument_list>(<argument>__shfl_down_sync</argument>, <argument>__nvvm_shfl_sync_down_i32</argument>,
<argument>__nvvm_shfl_sync_down_f32</argument>, <argument><literal type="number">0x1f</literal></argument>, <argument>unsigned int</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>__MAKE_SYNC_SHUFFLES</name><argument_list>(<argument><expr><name>__shfl_xor_sync</name></expr></argument>, <argument><expr><name>__nvvm_shfl_sync_bfly_i32</name></expr></argument>,
<argument><expr><name>__nvvm_shfl_sync_bfly_f32</name></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__MAKE_SYNC_SHUFFLES"</cpp:literal><name>)</name></cpp:pragma>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>void</name></type> <name>__syncwarp</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_bar_warp_sync</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>void</name></type> <name>__barrier_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__nvvm_barrier_sync</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>void</name></type> <name>__barrier_sync_count</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__nvvm_barrier_sync_cnt</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>int</name></type> <name>__all_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_vote_all_sync</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>int</name></type> <name>__any_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_vote_any_sync</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>int</name></type> <name>__uni_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_vote_uni_sync</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>int</name></type> <name>__ballot_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_vote_ballot_sync</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>int</name></type> <name>__activemask</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9020</literal></expr></cpp:if>
<return>return <expr><call><name>__nvvm_vote_ballot</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>
<asm>asm <specifier>volatile</specifier>("activemask.b32 %0;" : "=r"(mask));</asm>
<return>return <expr><name>mask</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>int</name></type> <name>__fns</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_fns</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA_ARCH__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__CUDA_ARCH__</name> <operator>&gt;=</operator> <literal type="number">700</literal></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>int</name></type> <name>__match32_any_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_match_any_sync_i32</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>__match64_any_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_match_any_sync_i64</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>int</name></type>
<name>__match32_all_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_match_all_sync_i32p</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>__match64_all_sync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pred</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_match_all_sync_i64p</name><argument_list>(<argument><expr><name>mask</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crt/sm_70_rt.hpp"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SM_32_INTRINSICS_H__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__SM_32_INTRINSICS_HPP__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA_ARCH__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__CUDA_ARCH__</name> <operator>&gt;=</operator> <literal type="number">320</literal></expr></cpp:if>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>char</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nvvm_ldg_c</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>short</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nvvm_ldg_s</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>int</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nvvm_ldg_i</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>long</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>long</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nvvm_ldg_l</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>long</name> <name>long</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_ldg_ll</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>char</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_ldg_uc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>signed</name> <name>char</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_ldg_uc</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>short</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_ldg_us</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>int</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_ldg_ui</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>long</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_ldg_ul</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>__nvvm_ldg_ull</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>float</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nvvm_ldg_f</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>double</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>__nvvm_ldg_d</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>char2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>char</name> <name>c2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>



<decl_stmt><decl><type><name>c2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_c2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>c2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>char4</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char4</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>char</name> <name>c4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<decl_stmt><decl><type><name>c4</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_c4</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>c4</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char4</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>short2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>short2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>short</name> <name>s2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>s2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_s2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>s2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>short4</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>short4</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>short</name> <name>s4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<decl_stmt><decl><type><name>s4</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_s4</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>s4</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short4</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>int2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>int</name> <name>i2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>i2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_i2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>i2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>int4</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int4</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>int</name> <name>i4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<decl_stmt><decl><type><name>i4</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_i4</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>i4</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int4</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>longlong2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>longlong2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>long</name> <name>long</name> <name>ll2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>ll2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_ll2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ll2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>longlong2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>uchar2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uchar2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>unsigned</name> <name>char</name> <name>uc2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>uc2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_uc2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uc2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>uchar4</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uchar4</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>unsigned</name> <name>char</name> <name>uc4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<decl_stmt><decl><type><name>uc4</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_uc4</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uc4</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uchar4</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>ushort2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ushort2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>us2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>us2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_us2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>us2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>ushort4</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ushort4</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>us4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<decl_stmt><decl><type><name>us4</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_us4</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>us4</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort4</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>uint2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>ui2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>ui2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_ui2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ui2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>uint4</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint4</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>unsigned</name> <name>int</name> <name>ui4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<decl_stmt><decl><type><name>ui4</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_ui4</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ui4</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint4</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>ulonglong2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ulonglong2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>ull2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>ull2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_ull2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ull2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulonglong2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>__device__</name> <name>float2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>float</name> <name>f2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>f2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_f2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>f2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>float4</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float4</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>float</name> <name>f4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<decl_stmt><decl><type><name>f4</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_f4</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>f4</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float4</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>double2</name></type> <name>__ldg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double2</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<typedef>typedef <type><name>double</name> <name>d2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<decl_stmt><decl><type><name>d2</name></type> <name>rv</name> <init>= <expr><call><name>__nvvm_ldg_d2</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>d2</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double2</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name></type> <name>__funnelshift_l</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>low32</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>high32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>shiftWidth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>result</name></decl>;</decl_stmt>
<asm>asm("shf.l.wrap.b32 %0, %1, %2, %3;"
: "=r"(result)
: "r"(low32), "r"(high32), "r"(shiftWidth));</asm>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name></type> <name>__funnelshift_lc</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>low32</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>high32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>shiftWidth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>result</name></decl>;</decl_stmt>
<asm>asm("shf.l.clamp.b32 %0, %1, %2, %3;"
: "=r"(result)
: "r"(low32), "r"(high32), "r"(shiftWidth));</asm>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name></type> <name>__funnelshift_r</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>low32</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>high32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>shiftWidth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>result</name></decl>;</decl_stmt>
<asm>asm("shf.r.wrap.b32 %0, %1, %2, %3;"
: "=r"(result)
: "r"(low32), "r"(high32), "r"(shiftWidth));</asm>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>__device__</name> <name>unsigned</name></type> <name>__funnelshift_rc</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>low32</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>high32</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>shiftWidth</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ret</name></decl>;</decl_stmt>
<asm>asm("shf.r.clamp.b32 %0, %1, %2, %3;"
: "=r"(ret)
: "r"(low32), "r"(high32), "r"(shiftWidth));</asm>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
