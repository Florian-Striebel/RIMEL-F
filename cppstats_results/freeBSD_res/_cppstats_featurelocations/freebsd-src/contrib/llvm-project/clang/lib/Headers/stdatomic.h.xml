<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/stdatomic.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_STDATOMIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_STDATOMIC_H</name></cpp:macro></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_HOSTED__</name> <operator>&amp;&amp;</operator> <call><name>__has_include_next</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>stdatomic</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#include_next &lt;stdatomic.h&gt;</cpp:empty>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_BOOL_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_BOOL_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CHAR_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_CHAR_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CHAR16_T_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_CHAR16_T_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CHAR32_T_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_CHAR32_T_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_WCHAR_T_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_WCHAR_T_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SHORT_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_SHORT_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INT_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_INT_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_LONG_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_LONG_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_LLONG_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_LLONG_LOCK_FREE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_POINTER_LOCK_FREE</name></cpp:macro> <cpp:value>__CLANG_ATOMIC_POINTER_LOCK_FREE</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VAR_INIT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(value)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_init</name></cpp:macro> <cpp:value>__c11_atomic_init</cpp:value></cpp:define>



<typedef>typedef <type><enum>enum <name>memory_order</name> <block>{
<decl><name>memory_order_relaxed</name> <init>= <expr><name>__ATOMIC_RELAXED</name></expr></init></decl>,
<decl><name>memory_order_consume</name> <init>= <expr><name>__ATOMIC_CONSUME</name></expr></init></decl>,
<decl><name>memory_order_acquire</name> <init>= <expr><name>__ATOMIC_ACQUIRE</name></expr></init></decl>,
<decl><name>memory_order_release</name> <init>= <expr><name>__ATOMIC_RELEASE</name></expr></init></decl>,
<decl><name>memory_order_acq_rel</name> <init>= <expr><name>__ATOMIC_ACQ_REL</name></expr></init></decl>,
<decl><name>memory_order_seq_cst</name> <init>= <expr><name>__ATOMIC_SEQ_CST</name></expr></init></decl>
}</block></enum></type> <name>memory_order</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kill_dependency</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y)</cpp:value></cpp:define>




<function_decl><type><name>void</name></type> <name>atomic_thread_fence</name><parameter_list>(<parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atomic_signal_fence</name><parameter_list>(<parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_thread_fence</name><parameter_list>(<parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_thread_fence(order)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_signal_fence</name><parameter_list>(<parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_signal_fence(order)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_is_lock_free</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_is_lock_free(sizeof(*(obj)))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></atomic></type> <name>atomic_bool</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>_Bool</name></expr></argument>)</argument_list></atomic></type> <name>atomic_bool</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></atomic></type> <name>atomic_char</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>signed</name> <name>char</name></expr></argument>)</argument_list></atomic></type> <name>atomic_schar</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>unsigned</name> <name>char</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uchar</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></atomic></type> <name>atomic_short</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>unsigned</name> <name>short</name></expr></argument>)</argument_list></atomic></type> <name>atomic_ushort</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>unsigned</name> <name>int</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></atomic></type> <name>atomic_long</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>unsigned</name> <name>long</name></expr></argument>)</argument_list></atomic></type> <name>atomic_ulong</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>long</name> <name>long</name></expr></argument>)</argument_list></atomic></type> <name>atomic_llong</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>unsigned</name> <name>long</name> <name>long</name></expr></argument>)</argument_list></atomic></type> <name>atomic_ullong</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_least16_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_char16_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_least32_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_char32_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_wchar_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_least8_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_least8_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_least8_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_least8_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_least16_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_least16_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_least16_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_least16_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_least32_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_least32_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_least32_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_least32_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_least64_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_least64_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_least64_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_least64_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_fast8_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_fast8_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_fast8_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_fast8_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_fast16_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_fast16_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_fast16_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_fast16_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_fast32_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_fast32_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_fast32_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_fast32_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>int_fast64_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_int_fast64_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uint_fast64_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uint_fast64_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>intptr_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_intptr_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uintptr_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_size_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_ptrdiff_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>intmax_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_intmax_t</name>;</typedef>
<typedef>typedef <type><atomic>_Atomic<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></atomic></type> <name>atomic_uintmax_t</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_store</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_store(object, desired, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_store_explicit</name></cpp:macro> <cpp:value>__c11_atomic_store</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_load</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_load(object, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_load_explicit</name></cpp:macro> <cpp:value>__c11_atomic_load</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_exchange</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_exchange_explicit</name></cpp:macro> <cpp:value>__c11_atomic_exchange</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_compare_exchange_strong</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_compare_exchange_strong(object, expected, desired, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_compare_exchange_strong_explicit</name></cpp:macro> <cpp:value>__c11_atomic_compare_exchange_strong</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_compare_exchange_weak</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>, <parameter><type><name>desired</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_compare_exchange_weak(object, expected, desired, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_compare_exchange_weak_explicit</name></cpp:macro> <cpp:value>__c11_atomic_compare_exchange_weak</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_add</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_fetch_add(object, operand, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_add_explicit</name></cpp:macro> <cpp:value>__c11_atomic_fetch_add</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_sub</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_fetch_sub(object, operand, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_sub_explicit</name></cpp:macro> <cpp:value>__c11_atomic_fetch_sub</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_or</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_fetch_or(object, operand, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_or_explicit</name></cpp:macro> <cpp:value>__c11_atomic_fetch_or</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_xor</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_fetch_xor(object, operand, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_xor_explicit</name></cpp:macro> <cpp:value>__c11_atomic_fetch_xor</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_and</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>operand</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_fetch_and(object, operand, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_fetch_and_explicit</name></cpp:macro> <cpp:value>__c11_atomic_fetch_and</cpp:value></cpp:define>



<typedef>typedef <type><struct>struct <name>atomic_flag</name> <block>{ <decl_stmt><decl><type><name>atomic_bool</name></type> <name>_Value</name></decl>;</decl_stmt> }</block></struct></type> <name>atomic_flag</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_FLAG_INIT</name></cpp:macro> <cpp:value>{ 0 }</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>bool</name></type> <name>atomic_flag_test_and_set</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_flag</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>atomic_flag_test_and_set_explicit</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_flag</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>_Bool</name></type> <name>atomic_flag_test_and_set</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_flag</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>_Bool</name></type> <name>atomic_flag_test_and_set_explicit</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_flag</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>atomic_flag_clear</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_flag</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>atomic_flag_clear_explicit</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>atomic_flag</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>memory_order</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_test_and_set</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_exchange(&amp;(object)-&gt;_Value, 1, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_test_and_set_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_exchange(&amp;(object)-&gt;_Value, 1, order)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_clear</name><parameter_list>(<parameter><type><name>object</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_store(&amp;(object)-&gt;_Value, 0, __ATOMIC_SEQ_CST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atomic_flag_clear_explicit</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>order</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__c11_atomic_store(&amp;(object)-&gt;_Value, 0, order)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
