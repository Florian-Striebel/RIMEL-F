<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h">































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_UNINITIALIZEDOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_UNINITIALIZEDOBJECT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<struct>struct <name>UninitObjCheckerOptions</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>IsPedantic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ShouldConvertNotesToWarnings</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CheckPointeeInitialization</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>IgnoredRecordsWithFieldPattern</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IgnoreGuardedFields</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>





<decl_stmt><decl><type><name>class</name></type> <name>FieldNode</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>FieldRegion</name> <modifier>*</modifier></type><name>FR</name></decl>;</decl_stmt>



<expr_stmt><expr><operator>~</operator><call><name>FieldNode</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FieldNode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldRegion</name> <operator>*</operator><name>FR</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>FR</name><argument_list>(<argument>FR</argument>)</argument_list></macro> <block>{}</block>



<call><name>FieldNode</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FieldNode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldNode</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FieldNode</name><argument_list>(<argument><expr><name>FieldNode</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FieldNode</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FieldNode</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FieldNode</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FieldNode</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isSameRegion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldRegion</name> <operator>*</operator><name>OtherFR</name></expr></argument>)</argument_list> const <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>FR</name> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>FR</name> <operator>==</operator> <name>OtherFR</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FieldRegion</name> <operator>*</operator><macro><name>getRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FR</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>FR</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>FR</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>











<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>printNoteMsg</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>printPrefix</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>printNode</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>printSeparator</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>getVariableName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator><name>Field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>FieldChainInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>FieldChain</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldNode</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>FieldChain</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator><name>ChainFactory</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FieldChain</name></type> <name>Chain</name></decl>;</decl_stmt>

<macro><name>FieldChainInfo</name><argument_list>(<argument>FieldChain::Factory &amp;F</argument>, <argument>FieldChain NewChain</argument>)</argument_list></macro>
: <macro><name>FieldChainInfo</name><argument_list>(<argument>F</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>Chain</name> <operator>=</operator> <name>NewChain</name></expr>;</expr_stmt>
</block_content>}</block>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FieldChainInfo</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FieldChainInfo</name><argument_list>(<argument><expr><name>FieldChain</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator><name>F</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ChainFactory</name><argument_list>(<argument>F</argument>)</argument_list></macro> <block>{}</block>
<call><name>FieldChainInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldChainInfo</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FieldNodeT</name></expr></argument>&gt;</argument_list></name> <name>FieldChainInfo</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldNodeT</name> <modifier>&amp;</modifier></type><name>FN</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FieldNodeT</name></expr></argument>&gt;</argument_list></name> <name>FieldChainInfo</name></type> <name>replaceHead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldNodeT</name> <modifier>&amp;</modifier></type><name>FN</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>contains</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldRegion</name> <operator>*</operator><name>FR</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FieldNode</name> <operator>&amp;</operator><macro><name>getHead</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Chain</name><operator>.</operator><name>getHead</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>FieldRegion</name> <operator>*</operator><macro><name>getUninitRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getHead</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRegion</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>printNoteMsg</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>UninitFieldMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldRegion</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">50</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FindUninitializedFields</name> <block>{<block_content>
<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TypedValueRegion</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ObjectR</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>UninitObjCheckerOptions</name></type> <name>Opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsAnyFieldInitialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FieldChainInfo</name><operator>::</operator><name>FieldChain</name><operator>::</operator><name>Factory</name> <name>ChainFactory</name></expr>;</expr_stmt>











<decl_stmt><decl><type><name>UninitFieldMap</name></type> <name>UninitFields</name></decl>;</decl_stmt>

<label><name>public</name>:</label>


<macro><name>FindUninitializedFields</name><argument_list>(<argument>ProgramStateRef State</argument>,
<argument>const TypedValueRegion *const R</argument>,
<argument>const UninitObjCheckerOptions &amp;Opts</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ProgramStateRef</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UninitFieldMap</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <macro><name>getResults</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><block>{<expr><name>State</name></expr>, <expr><name>UninitFields</name></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>





<function><type><name>bool</name></type> <name>isAnyFieldInitialized</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>IsAnyFieldInitialized</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>




















































<function_decl><type><name>bool</name></type> <name>isUnionUninit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypedValueRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>isNonUnionUninit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypedValueRegion</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>FieldChainInfo</name></type> <name>LocalChain</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>isDereferencableUninit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldRegion</name> <modifier>*</modifier></type><name>FR</name></decl></parameter>, <parameter><decl><type><name>FieldChainInfo</name></type> <name>LocalChain</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isPrimitiveUninit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVal</name> <modifier>&amp;</modifier></type><name>V</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>bool</name></type> <name>addFieldToUninits</name><parameter_list>(<parameter><decl><type><name>FieldChainInfo</name></type> <name>LocalChain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>PointeeR</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isPrimitiveType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QualType</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>isBuiltinType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isEnumeralType</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name><name>T</name><operator>-&gt;</operator><name>isFunctionType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isAtomicType</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name><name>T</name><operator>-&gt;</operator><name>isVectorType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isScalarType</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isDereferencableType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QualType</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>isAnyPointerType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isReferenceType</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FieldNodeT</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>FieldChainInfo</name> <name>FieldChainInfo</name><operator>::</operator><macro><name>add</name><argument_list>(<argument>const FieldNodeT &amp;FN</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>FN</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Can't add a field that is already a part of the "</literal>
<literal type="string">"fieldchain! Is this a cyclic reference?"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>FieldChainInfo</name> <name>NewChain</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name><name>NewChain</name><operator>.</operator><name>Chain</name></name> <operator>=</operator> <call><name><name>ChainFactory</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>FN</name></expr></argument>, <argument><expr><name>Chain</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>NewChain</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>FieldNodeT</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>FieldChainInfo</name> <name>FieldChainInfo</name><operator>::</operator><macro><name>replaceHead</name><argument_list>(<argument>const FieldNodeT &amp;FN</argument>)</argument_list></macro> <block>{
<expr><name>FieldChainInfo</name> <call><name>NewChain</name><argument_list>(<argument><expr><name>ChainFactory</name></expr></argument>, <argument><expr><call><name><name>Chain</name><operator>.</operator><name>getTail</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>NewChain</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>FN</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
