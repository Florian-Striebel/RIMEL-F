<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_CUDA_RUNTIME_WRAPPER_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_CUDA_RUNTIME_WRAPPER_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_math_forward_declares.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDACC__</name></cpp:macro></cpp:define>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDACC__</name></cpp:undef>



<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__THROW"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__CUDA_ARCH__"</cpp:literal><name>)</name></cpp:pragma>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cuda.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CUDA_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"cuda.h did not define CUDA_VERSION"</cpp:literal></cpp:error>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">7000</literal></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unsupported CUDA version!"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA_ARCH__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_ARCH__</name></cpp:macro> <cpp:value>350</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"__clang_cuda_builtin_vars.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE_LAUNCH_PARAMETERS_H__</name></cpp:macro></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE_FUNCTIONS_H__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MATH_FUNCTIONS_H__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__COMMON_FUNCTIONS_H__</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE_FUNCTIONS_DECLS_H__</name></cpp:macro></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDACC__</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDABE__</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDACC__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_LIBDEVICE__</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"host_defines.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDACC__</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"driver_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"host_config.h"</cpp:file></cpp:include>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"nv_weak"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nv_weak</name></cpp:macro> <cpp:value>weak</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDABE__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA_LIBDEVICE__</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDACC__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cuda_runtime.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"nv_weak"</cpp:literal><name>)</name></cpp:pragma>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDACC__</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDABE__</name></cpp:macro></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__nvvm_memcpy</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_memcpy(s, d, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__nvvm_memset</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_memset(d, c, n)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crt/device_runtime.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crt/host_runtime.h"</cpp:file></cpp:include>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_ctor</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_cctor</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_dtor</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_new</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_new2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_new3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_delete2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_delete</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_vec_delete3</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__cxa_pure_virtual</name></cpp:undef>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <name>__host__</name> <name>double</name></type> <name>__signbitd</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>signbit</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_libdevice_declares.h&gt;</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_device_functions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__THROW</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__THROW</name></cpp:macro></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CU_DEVICE_INVALID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__USE_FAST_MATH__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_FAST_MATH__</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA_PREC_DIV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_PREC_DIV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__host__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__host__</name></cpp:macro> <cpp:value>UNEXPECTED_HOST_ATTRIBUTE</cpp:value></cpp:define>





<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__forceinline__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__forceinline__</name></cpp:macro> <cpp:value>__device__ __inline__ __attribute__((always_inline))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"device_functions.hpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__USE_FAST_MATH__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_CUDA_APPROX_TRANSCENDENTALS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_FAST_MATH__</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr></cpp:if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9020</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crt/math_functions.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_functions.hpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__USE_FAST_MATH__"</cpp:literal><name>)</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_functions_dbl_ptx3.hpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__forceinline__"</cpp:literal><name>)</name></cpp:pragma>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__MATH_FUNCTIONS_HPP__</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDABE__</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_functions.hpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>rsqrt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>rsqrtf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>rcbrt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>rcbrtf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>sinpi</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>sinpif</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>cospi</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cospif</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sincospi</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__b</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>sincospif</name><argument_list>(<argument><expr><name>__a</name></expr></argument>, <argument><expr><name>__b</name></expr></argument>, <argument><expr><name>__c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>erfcinv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>erfcinvf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>normcdfinv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>normcdfinvf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>normcdf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>normcdff</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>erfcx</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>erfcxf</name><argument_list>(<argument><expr><name>__a</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&lt;</operator> <literal type="number">9000</literal></expr></cpp:if>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>__device__</name> <name>void</name></type> <name>__brkpt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__c</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>__brkpt</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__host__</name></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDABE__</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDACC__</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr></cpp:if>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"device_atomic_functions.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEVICE_FUNCTIONS_HPP__</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"device_atomic_functions.hpp"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crt/device_functions.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crt/device_double_functions.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"device_functions.hpp"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDABE__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"device_double_functions.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDABE__</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sm_20_atomic_functions.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sm_20_intrinsics.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sm_32_atomic_functions.hpp"</cpp:file></cpp:include>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">8000</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__CUDA_ARCH__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA_ARCH__</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sm_60_atomic_functions.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sm_61_intrinsics.hpp"</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__CUDA_ARCH__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__MATH_FUNCTIONS_HPP__</name></cpp:undef>





<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"signbit"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"__GNUC__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__GNUC__</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signbit</name></cpp:macro> <cpp:value>__ignored_cuda_signbit</cpp:value></cpp:define>




<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"_GLIBCXX_MATH_H"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"_LIBCPP_VERSION"</cpp:literal><name>)</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_GLIBCXX_MATH_H</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_VERSION</name></cpp:macro> <cpp:value>3700</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crt/math_functions.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math_functions.hpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"_GLIBCXX_MATH_H"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"_LIBCPP_VERSION"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__GNUC__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"signbit"</cpp:literal><name>)</name></cpp:pragma>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__host__"</cpp:literal><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texture_indirect_functions.h"</cpp:file></cpp:include>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__CUDA_ARCH__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__THROW"</cpp:literal><name>)</name></cpp:pragma>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDABE__</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDACC__</name></cpp:macro></cpp:define>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>





<function_decl><type><name>__device__</name> <name>int</name></type> <name>vprintf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>__device__</name> <name>void</name></type> <name>free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> __attribute<parameter_list>(<parameter/></parameter_list>(nothrow</function_decl>)</block_content></block></extern>)<empty_stmt>;</empty_stmt>
<function_decl><type><name>__device__</name> <name>void</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list> __attribute<parameter_list>(<parameter/></parameter_list>(nothrow</function_decl>)) <expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>__device__</name> <name>void</name></type> <name>__assertfail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__file</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>__line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__function</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>__charSize</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__assert_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__message</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>__line</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__function</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>__assertfail</name><argument_list>(<argument><expr><name>__message</name></expr></argument>, <argument><expr><name>__file</name></expr></argument>, <argument><expr><name>__line</name></expr></argument>, <argument><expr><name>__function</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>__device__</name> <name>int</name></type> <name>printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}


namespace <macro><name>std</name></macro> <block>{<block_content>
<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>__ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>::</operator><call><name>free</name><argument_list>(<argument><expr><name>__ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>__size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>::</operator><call><name>malloc</name><argument_list>(<argument><expr><name>__size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block>




<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_threadIdx_t</name><operator>::</operator><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>dim3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_threadIdx_t</name><operator>::</operator><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_blockIdx_t</name><operator>::</operator><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>dim3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_blockIdx_t</name><operator>::</operator><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_blockDim_t</name><operator>::</operator><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>dim3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_blockDim_t</name><operator>::</operator><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_gridDim_t</name><operator>::</operator><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>dim3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>__device__</name> <specifier>inline</specifier> <name>__cuda_builtin_gridDim_t</name><operator>::</operator><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_cmath.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_intrinsics.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;__clang_cuda_complex_builtins.h&gt;</cpp:file></cpp:include>







<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"dim3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>push_macro</name><name>(</name><cpp:literal>"uint3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dim3</name></cpp:macro> <cpp:value>__cuda_builtin_blockDim_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uint3</name></cpp:macro> <cpp:value>__cuda_builtin_threadIdx_t</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"curand_mtgp32_kernel.h"</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"dim3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"uint3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__USE_FAST_MATH__"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop_macro</name><name>(</name><cpp:literal>"__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__"</cpp:literal><name>)</name></cpp:pragma>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CUDA_VERSION</name> <operator>&gt;=</operator> <literal type="number">9020</literal></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>unsigned</name></type> <name>__cudaPushCallConfiguration</name><parameter_list>(<parameter><decl><type><name>dim3</name></type> <name>gridDim</name></decl></parameter>, <parameter><decl><type><name>dim3</name></type> <name>blockDim</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>sharedMem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
