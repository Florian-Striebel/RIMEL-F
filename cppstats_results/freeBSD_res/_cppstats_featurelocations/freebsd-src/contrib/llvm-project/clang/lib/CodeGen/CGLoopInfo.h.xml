<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGLoopInfo.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGLOOPINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGLOOPINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/DebugLoc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BasicBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Instruction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MDNode</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>


<struct>struct <name>LoopAttributes</name> <block>{
<function_decl><type><name>explicit</name></type> <name>LoopAttributes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsParallel</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>bool</name></type> <name>IsParallel</name></decl>;</decl_stmt>


<enum>enum <name>LVEnableState</name> <block>{ <decl><name>Unspecified</name></decl>, <decl><name>Enable</name></decl>, <decl><name>Disable</name></decl>, <decl><name>Full</name></decl> }</block>;</enum>


<decl_stmt><decl><type><name>LVEnableState</name></type> <name>VectorizeEnable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LVEnableState</name></type> <name>UnrollEnable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LVEnableState</name></type> <name>UnrollAndJamEnable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LVEnableState</name></type> <name>VectorizePredicateEnable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>VectorizeWidth</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LVEnableState</name></type> <name>VectorizeScalable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>InterleaveCount</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UnrollCount</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UnrollAndJamCount</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>LVEnableState</name></type> <name>DistributeEnable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>PipelineDisabled</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>PipelineInitiationInterval</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>MustProgress</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>LoopInfo</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>LoopInfo</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Header</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DebugLoc</name> <operator>&amp;</operator><name>StartLoc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DebugLoc</name> <operator>&amp;</operator><name>EndLoc</name></expr></argument>,
<argument><expr><name>LoopInfo</name> <operator>*</operator><name>Parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getLoopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>TempLoopID</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><macro><name>getHeader</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Header</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><macro><name>getAttributes</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Attrs</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getAccessGroup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AccGroup</name></expr>;</return> }</block></expr></expr_stmt>



<function_decl><type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>TempMDTuple</name> <name>TempLoopID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Header</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LoopAttributes</name></type> <name>Attrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><name>AccGroup</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>DebugLoc</name> <name>StartLoc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>DebugLoc</name> <name>EndLoc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LoopInfo</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><name>UnrollAndJamInnerFollowup</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator>
<call><name>createLoopPropertiesMetadata</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


















<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator>
<call><name>createPipeliningMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>HasUserTransforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator>
<call><name>createPartialUnrollMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>HasUserTransforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator>
<call><name>createUnrollAndJamMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>HasUserTransforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator>
<call><name>createLoopVectorizeMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>HasUserTransforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator>
<call><name>createLoopDistributeMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>HasUserTransforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator>
<call><name>createFullUnrollMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>HasUserTransforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>














<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><call><name>createMetadata</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Metadata</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>LoopProperties</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>HasUserTransforms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>LoopInfoStack</name> <block>{<block_content>
<expr_stmt><expr><call><name>LoopInfoStack</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopInfoStack</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>LoopInfoStack</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>LoopInfoStack</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>



<decl_stmt><decl><type><name>void</name></type> <name>push</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Header</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DebugLoc</name> <operator>&amp;</operator><name>StartLoc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DebugLoc</name> <operator>&amp;</operator><name>EndLoc</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>push</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Header</name></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CodeGenOptions</name> <operator>&amp;</operator><name>CGOpts</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Attr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Attrs</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DebugLoc</name> <operator>&amp;</operator><name>StartLoc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>DebugLoc</name> <operator>&amp;</operator><name>EndLoc</name></expr></argument>, <argument><expr><name>bool</name> <name>MustProgress</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>pop</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MDNode</name> <operator>*</operator><macro><name>getCurLoopID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getInfo</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLoopID</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>getCurLoopParallel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasInfo</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getInfo</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttributes</name><argument_list>()</argument_list></call><operator>.</operator><name>IsParallel</name> <operator>:</operator> <name>false</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>InsertHelper</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Instruction</name> <operator>*</operator><name>I</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function><type><name>void</name></type> <name>setParallel</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>IsParallel</name></name> <operator>=</operator> <name>Enable</name></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>setVectorizeEnable</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>VectorizeEnable</name></name> <operator>=</operator>
<ternary><condition><expr><name>Enable</name></expr> ?</condition><then> <expr><name>LoopAttributes</name><operator>::</operator><name>Enable</name></expr> </then><else>: <expr><name>LoopAttributes</name><operator>::</operator><name>Disable</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>setDistributeState</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Enable</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>DistributeEnable</name></name> <operator>=</operator>
<ternary><condition><expr><name>Enable</name></expr> ?</condition><then> <expr><name>LoopAttributes</name><operator>::</operator><name>Enable</name></expr> </then><else>: <expr><name>LoopAttributes</name><operator>::</operator><name>Disable</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>setUnrollState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name><operator>::</operator><name>LVEnableState</name> <operator>&amp;</operator><name>State</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>UnrollEnable</name></name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setVectorizePredicateState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name><operator>::</operator><name>LVEnableState</name> <operator>&amp;</operator><name>State</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>VectorizePredicateEnable</name></name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>setUnrollAndJamState</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name><operator>::</operator><name>LVEnableState</name> <operator>&amp;</operator><name>State</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>UnrollAndJamEnable</name></name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>setVectorizeWidth</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>W</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>VectorizeWidth</name></name> <operator>=</operator> <name>W</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>setVectorizeScalable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LoopAttributes</name><operator>::</operator><name>LVEnableState</name> <operator>&amp;</operator><name>State</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>VectorizeScalable</name></name> <operator>=</operator> <name>State</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>setInterleaveCount</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>InterleaveCount</name></name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>setUnrollCount</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>UnrollCount</name></name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>setUnrollAndJamCount</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>UnrollAndJamCount</name></name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>setPipelineDisabled</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>PipelineDisabled</name></name> <operator>=</operator> <name>S</name></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>setPipelineInitiationInterval</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>PipelineInitiationInterval</name></name> <operator>=</operator> <name>C</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>setMustProgress</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>P</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>StagedAttrs</name><operator>.</operator><name>MustProgress</name></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>

<expr_stmt><expr><name>bool</name> <macro><name>hasInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Active</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>LoopInfo</name> <operator>&amp;</operator><macro><name>getInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name><name>Active</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>LoopAttributes</name></type> <name>StagedAttrs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LoopInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Active</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
