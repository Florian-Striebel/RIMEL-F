<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/OSTargets.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_OSTARGETS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_OSTARGETS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Targets.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>TgtInfo</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>OSTargetInfo</name> <range>: <expr><name>public</name> <name>TgtInfo</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>virtual</name> <name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>OSTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TgtInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>TgtInfo</name><operator>::</operator><call><name>getTargetDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getOSDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>TgtInfo</name><operator>::</operator><call><name>getTriple</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>CloudABITargetInfo</name> <range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__CloudABI__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;


<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_ISO_10646__"</literal></expr></argument>, <argument><expr><literal type="string">"201206L"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_UTF_16__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_UTF_32__"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>CloudABITargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>AnanasTargetInfo</name> <range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__Ananas__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>AnanasTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>getDarwinDefines</name><argument_list>(<argument><expr><name>MacroBuilder</name> <operator>&amp;</operator><name>Builder</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><name>StringRef</name> <operator>&amp;</operator><name>PlatformName</name></expr></argument>,
<argument><expr><name>VersionTuple</name> <operator>&amp;</operator><name>PlatformMinVersion</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>DarwinTargetInfo</name> <range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>getDarwinDefines</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Triple</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>PlatformName</name></name></expr></argument>,
<argument><expr><name><name>this</name><operator>-&gt;</operator><name>PlatformMinVersion</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>DarwinTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{


<expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <name>false</name></expr>;

<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isMacOSX</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isMacOSXVersionLT</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isiOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isArch64Bit</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isOSVersionLT</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isArch32Bit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isSimulatorEnvironment</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isOSVersionLT</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isOSVersionLT</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt/>}</block_content>
} else if (Triple.isWatchOS(</block></if></if_stmt>)</block_content></block></if></if_stmt>) <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isSimulatorEnvironment</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isOSVersionLT</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <operator>!</operator><call><name><name>Triple</name><operator>.</operator><name>isOSVersionLT</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
}</block></block>

<name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"\01mcount"</literal></expr>;
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getStaticInitSectionSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><literal type="string">"__TEXT,__StaticInit,regular,pure_instructions"</literal></expr>;</return>
}</block></expr></range></decl></decl_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>hasProtectedVisibility</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getExnObjectAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{



<expr><name>llvm</name><operator>::</operator><name>VersionTuple</name> <name>MinVersion</name></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name> <operator>=</operator> <call><name><name>this</name><operator>-&gt;</operator><name>getTriple</name></name><argument_list>()</argument_list></call></expr>;


<switch>switch <condition>(<expr><call><name><name>T</name><operator>.</operator><name>getOS</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>Darwin</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>MacOSX</name></expr>:</case>
<expr_stmt><expr><name>MinVersion</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10U</literal></expr></argument>, <argument><expr><literal type="number">14U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>IOS</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>TvOS</name></expr>:</case>
<expr_stmt><expr><name>MinVersion</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">12U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>WatchOS</name></expr>:</case>
<expr_stmt><expr><name>MinVersion</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">5U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<return>return <expr><literal type="number">64</literal></expr>;</return>
<expr_stmt/>}</block_content>

unsigned Major</block><operator>,</operator> <expr_stmt><expr><name>Minor</name></expr><operator>,</operator> <expr><name>Micro</name></expr>;</expr_stmt></switch>
<expr><call><name><name>T</name><operator>.</operator><name>getOSVersion</name></name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Micro</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Micro</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>MinVersion</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">64</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getExnObjectAlignment</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>TargetInfo</name><operator>::</operator><name>IntType</name> <macro><name>getLeastIntTypeByWidth</name><argument_list>(<argument>unsigned BitWidth</argument>,
<argument>bool IsSigned</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{

<return>return <expr><name>BitWidth</name> <operator>==</operator> <literal type="number">64</literal>
<operator>?</operator> <operator>(</operator><name>IsSigned</name> <operator>?</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLongLong</name>
<operator>:</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedLongLong</name><operator>)</operator>
<operator>:</operator> <name>TargetInfo</name><operator>::</operator><call><name>getLeastIntTypeByWidth</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsSigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>DragonFlyBSDTargetInfo</name>
<range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__DragonFly__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__DragonFly_cc_version"</literal></expr></argument>, <argument><expr><literal type="string">"100001"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__KPRINTF_ATTRIBUTE__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__tune_i386__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>DragonFlyBSDTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<switch>switch <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">".mcount"</literal></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
}
}</block><empty_stmt>;</empty_stmt></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FREEBSD_CC_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREEBSD_CC_VERSION</name></cpp:macro> <cpp:value>0U</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>FreeBSDTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<expr><name>unsigned</name> <name>Release</name> <operator>=</operator> <call><name><name>Triple</name><operator>.</operator><name>getOSMajorVersion</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Release</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Release</name> <operator>=</operator> <literal type="number">8U</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>unsigned</name> <name>CCVersion</name> <operator>=</operator> <name>FREEBSD_CC_VERSION</name></block></expr>;
<if_stmt><if>if <condition>(<expr><name>CCVersion</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>CCVersion</name> <operator>=</operator> <name>Release</name> <operator>*</operator> <literal type="number">100000U</literal> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FreeBSD__"</literal></expr></argument>, <argument><expr><call><name>Twine</name><argument_list>(<argument><expr><name>Release</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FreeBSD_cc_version"</literal></expr></argument>, <argument><expr><call><name>Twine</name><argument_list>(<argument><expr><name>CCVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__KPRINTF_ATTRIBUTE__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;










<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_MB_MIGHT_NEQ_WC__"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>FreeBSDTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<switch>switch <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">".mcount"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mips</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mipsel</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppcle</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64le</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"_mcount"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>arm</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"__mcount"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>riscv32</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>riscv64</name></expr>:</case>
<break>break;</break>
<expr_stmt/>}</block_content>
}
}</block><empty_stmt>;</empty_stmt></switch>


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>KFreeBSDTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FreeBSD_kernel__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__GLIBC__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<call><name>KFreeBSDTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>HaikuTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__HAIKU__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FLOAT128__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<call><name>HaikuTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>SizeType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>IntPtrType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>PtrDiffType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>ProcessIDType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>TLSSupported</name></name> <operator>=</operator> <name>false</name></expr>;
<switch>switch <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
}
}</block><empty_stmt>;</empty_stmt></switch>


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>HurdTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__GNU__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__gnu_hurd__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__MACH__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__GLIBC__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>
<name>public</name><operator>:</operator>
<call><name>HurdTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>MinixTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__minix"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_EM_WSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_EM_PSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_EM_SSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_EM_LSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_EM_FSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_EM_DSIZE"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>MinixTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block></expr>
}</block></expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>LinuxTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"linux"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>isAndroid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ANDROID__"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Maj</name></decl>, <decl><type ref="prev"/><name>Min</name></decl>, <decl><type ref="prev"/><name>Rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Triple</name><operator>.</operator><name>getEnvironmentVersion</name></name><argument_list>(<argument><expr><name>Maj</name></expr></argument>, <argument><expr><name>Min</name></expr></argument>, <argument><expr><name>Rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>PlatformName</name></name> <operator>=</operator> <literal type="string">"android"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>PlatformMinVersion</name></name> <operator>=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><name>Maj</name></expr></argument>, <argument><expr><name>Min</name></expr></argument>, <argument><expr><name>Rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Maj</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ANDROID_MIN_SDK_VERSION__"</literal></expr></argument>, <argument><expr><call><name>Twine</name><argument_list>(<argument><expr><name>Maj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ANDROID_API__"</literal></expr></argument>, <argument><expr><literal type="string">"__ANDROID_MIN_SDK_VERSION__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
} else <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__gnu_linux__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
if (Opts.POSIXThreads</block></block></if></if_stmt>)</block_content>
Builder.defineMacro("_REENTRANT"</block></if></if_stmt>)</block></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FLOAT128__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<call><name>LinuxTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>WIntType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedInt</name></expr>;

<switch>switch <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mips</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mipsel</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mips64</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mips64el</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppcle</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64le</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"_mcount"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
}

const char *getStaticInitSectionSpecifier(</block></switch>) <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><literal type="string">".text.startup"</literal></expr>;</return>
}</block></block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>NetBSDTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__NetBSD__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__unix__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<call><name>NetBSDTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"__mcount"</literal></expr>;
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>OpenBSDTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__OpenBSD__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FLOAT128__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>C11</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_NO_ATOMICS__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_NO_THREADS__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

public:
OpenBSDTargetInfo(const llvm::Triple &amp;Triple</block><operator>,</operator> <expr_stmt><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></expr_stmt></if></if_stmt>)
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>WIntType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>SignedInt</name></name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>IntMaxType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLongLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>Int64Type</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLongLong</name></expr>;
<switch>switch <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>LLVM_FALLTHROUGH</name></expr>;</expr_stmt>
<default>default:</default>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"__mcount"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mips64</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mips64el</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64le</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>sparcv9</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"_mcount"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>riscv32</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>riscv64</name></expr>:</case>
<break>break;</break>
<expr_stmt/>}</block_content>
}
}</block><empty_stmt>;</empty_stmt></switch>


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>PSPTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"PSP"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_PSP"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__psp__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>PSPTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name><operator>)</operator> <block>{}</block></expr>
}</block></expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>PS3PPUTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__PPC__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__PPU__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__CELLOS_LV2__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__LP32__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_ARCH_PPC64"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__powerpc64__"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>PS3PPUTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>LongWidth</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>LongAlign</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>PointerWidth</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>PointerAlign</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>IntMaxType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLongLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>Int64Type</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLongLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>SizeType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedInt</name></expr>;
<expr><call><name><name>this</name><operator>-&gt;</operator><name>resetDataLayout</name></name><argument_list>(<argument><expr><literal type="string">"E-m:e-p:32:32-i64:64-n32:64"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>PS4OSTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FreeBSD__"</literal></expr></argument>, <argument><expr><literal type="string">"9"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FreeBSD_cc_version"</literal></expr></argument>, <argument><expr><literal type="string">"900001"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__KPRINTF_ATTRIBUTE__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__SCE__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ORBIS__"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>PS4OSTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedShort</name></expr>;


<expr><name><name>this</name><operator>-&gt;</operator><name>MaxTLSAlign</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;



<expr><name><name>this</name><operator>-&gt;</operator><name>UseExplicitBitFieldAlignment</name></name> <operator>=</operator> <name>false</name></expr>;

<switch>switch <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>:</case>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">".mcount"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>NewAlign</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
}
TargetInfo::CallingConvCheckResult
checkCallingConvention(CallingConv CC</block></switch>) <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>(</operator><name>CC</name> <operator>==</operator> <name>CC_C</name><operator>)</operator> <operator>?</operator> <name>TargetInfo</name><operator>::</operator><name>CCCR_OK</name> <operator>:</operator> <name>TargetInfo</name><operator>::</operator><name>CCCR_Error</name></expr>;</return>
}</block></block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>RTEMSTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__rtems__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<call><name>RTEMSTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<switch>switch <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mips</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mipsel</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ppc64le</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>arm</name></expr>:</case>

<break>break;</break>
<expr_stmt/>}</block_content>
}
}</block><empty_stmt>;</empty_stmt></switch>


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>SolarisTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"sun"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__svr4__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__SVR4"</literal></expr></argument>)</argument_list></call></expr>;




<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>C99</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_XOPEN_SOURCE"</literal></expr></argument>, <argument><expr><literal type="string">"600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_XOPEN_SOURCE"</literal></expr></argument>, <argument><expr><literal type="string">"500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__C99FEATURES__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_FILE_OFFSET_BITS"</literal></expr></argument>, <argument><expr><literal type="string">"64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

Builder.defineMacro("_LARGEFILE_SOURCE"</block></if></if_stmt>)</block></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_LARGEFILE64_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__EXTENSIONS__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FLOAT128__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<call><name>SolarisTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>PointerWidth</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>WIntType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>SignedInt</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>WIntType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>SignedLong</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
switch (Triple.getArch(</block></block></if></if_stmt>))</block> <block>{
<expr>default<operator>:</operator></expr>
<break>break;</break></block></expr>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>:</case>
<expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name> <operator>=</operator> <name>true</name></expr>;
<break>break;</break>
}</block>
}
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>AIXTargetInfo</name> <operator>:</operator> <name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_IBMR2"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_POWER"</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__TOS_AIX__"</literal></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>C11</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_NO_ATOMICS__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__STDC_NO_THREADS__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

if (Opts.EnableAIXExtendedAltivecABI</block></if></if_stmt>)
<call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__EXTABI__"</literal></expr></argument>)</argument_list></call></block></expr>;

<expr><name>unsigned</name> <name>Major</name></expr>, <expr><name>Minor</name></expr>, <expr><name>Micro</name></expr>;
<expr><call><name><name>Triple</name><operator>.</operator><name>getOSVersion</name></name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Micro</name></expr></argument>)</argument_list></call></expr>;



<expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>OsVersion</name> <operator>=</operator> <block>{<expr><name>Major</name></expr>, <expr><name>Minor</name></expr>}</block></expr>;
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX41"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></block></expr>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX43"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX50"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX51"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX52"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX53"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX61"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX71"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX72"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>OsVersion</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_AIX73"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_LONG_LONG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_THREAD_SAFE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>PointerWidth</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__64BIT__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name> <operator>&amp;&amp;</operator> <name><name>Opts</name><operator>.</operator><name>WChar</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_WCHAR_T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
}

public:
<expr_stmt><expr><call><name>AIXTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name><operator>,</operator> <name>Opts</name><operator>)</operator> <block>{
<expr><call><name><name>this</name><operator>-&gt;</operator><name>TheCXXABI</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>TargetCXXABI</name><operator>::</operator><name>XL</name></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>PointerWidth</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>UnsignedInt</name></name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>UnsignedShort</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>UseZeroLengthBitfieldAlignment</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
}


unsigned <macro><name>getFloatEvalMethod</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasInt128Type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>defaultsToAIXPowerAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
};


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>ZOSTargetInfo</name> <range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_LONG_LONG"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_OPEN_DEFAULT"</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_UNIX03_WITHDRAWN"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__370__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__BFP__"</literal></expr></argument>)</argument_list></call></expr>;

<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__BOOL__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__LONGNAME__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__MVS__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__THW_370__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__THW_BIG_ENDIAN__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__TOS_390__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__TOS_MVS__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__XPLINK__"</literal></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>PointerWidth</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__64BIT__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__DLL__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_XOPEN_SOURCE"</literal></expr></argument>, <argument><expr><literal type="string">"600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

if (Opts.GNUMode</block></if></if_stmt>) <block>{
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_MI_BUILTIN"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_EXT"</literal></expr></argument>)</argument_list></call></expr>;
}</block></block></expr></range></decl></decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name> <operator>&amp;&amp;</operator> <name><name>Opts</name><operator>.</operator><name>WChar</name></name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__wchar_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>PlatformName</name></name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><call><name>getOSTypeName</name><argument_list>(<argument><expr><call><name><name>Triple</name><operator>.</operator><name>getOS</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

public:
<expr_stmt><expr><call><name>ZOSTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name><operator>,</operator> <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedInt</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>MaxAlignedAttribute</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>UseBitFieldTypeAlignment</name></name> <operator>=</operator> <name>false</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>UseZeroLengthBitfieldAlignment</name></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>UseLeadingZeroLengthBitfield</name></name> <operator>=</operator> <name>false</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>ZeroLengthBitfieldBoundary</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>DefaultAlignForAttributeAligned</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;
}</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name>void</name></type> <name>addWindowsDefines</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name>MacroBuilder</name> <operator>&amp;</operator><name>Builder</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WindowsTargetInfo</name> <range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>addWindowsDefines</name><argument_list>(<argument><expr><name>Triple</name></expr></argument>, <argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<call><name>WindowsTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>WCharType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedShort</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>WIntType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedShort</name></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>NaClTargetInfo</name> <range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<call><name>DefineStd</name><argument_list>(<argument><expr><name>Builder</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call></block></expr></range></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__native_client__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

public:
<expr_stmt><expr><call><name>NaClTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name><operator>,</operator> <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>LongAlign</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>LongWidth</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>PointerAlign</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>PointerWidth</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>IntMaxType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLongLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>Int64Type</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedLongLong</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>DoubleAlign</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>LongDoubleWidth</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>LongDoubleAlign</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>LongLongWidth</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>LongLongAlign</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>SizeType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>UnsignedInt</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>PtrDiffType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedInt</name></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>IntPtrType</name></name> <operator>=</operator> <name>TargetInfo</name><operator>::</operator><name>SignedInt</name></expr>;

<expr><name><name>this</name><operator>-&gt;</operator><name>LongDoubleFormat</name></name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEdouble</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>arm</name></expr>)</condition> <block>{<block_content>

<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>resetDataLayout</name></name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-"</literal>
<literal type="string">"i64:64-n8:16:32-S128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>resetDataLayout</name></name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-"</literal>
<literal type="string">"i64:64-n8:16:32:64-S128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>mipsel</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Triple</name><operator>.</operator><name>getArch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>le32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>resetDataLayout</name></name><argument_list>(<argument><expr><literal type="string">"e-p:32:32-i64:64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
}
}<empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>FuchsiaTargetInfo</name> <range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__Fuchsia__"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__ELF__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></range></decl></decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FuchsiaTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>OSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name><operator>,</operator> <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"__mcount"</literal></expr>;
<expr><call><name><name>this</name><operator>-&gt;</operator><name>TheCXXABI</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>TargetCXXABI</name><operator>::</operator><name>Fuchsia</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
};


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WebAssemblyOSTargetInfo</name>
<range>: <expr><name>public</name> <name><name>OSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_REENTRANT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>CPlusPlus</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"_GNU_SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__FLOAT128__"</literal></expr></argument>)</argument_list></call></block></expr></range></decl>;</decl_stmt>
}

public:
<decl_stmt><decl><type><name>explicit</name></type> <name>WebAssemblyOSTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list>
<range>: <macro><name>OSTargetInfo</name></macro><expr><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>MCountName</name></name> <operator>=</operator> <literal type="string">"__mcount"</literal></expr>;
<expr><call><name><name>this</name><operator>-&gt;</operator><name>TheCXXABI</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>TargetCXXABI</name><operator>::</operator><name>WebAssembly</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>HasFloat128</name></name> <operator>=</operator> <name>true</name></expr>;
}</block></expr></range></decl></decl_stmt>
};


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WASITargetInfo</name>
<range>: <expr><name>public</name> <name><name>WebAssemblyOSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{
<expr><name><name>WebAssemblyOSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getOSDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Triple</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__wasi__"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<name>explicit</name> <call><name>WASITargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WebAssemblyOSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Target</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>EmscriptenTargetInfo</name>
<range>: <expr><name>public</name> <name><name>WebAssemblyOSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{
<expr><name><name>WebAssemblyOSTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>Target</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getOSDefines</name><argument_list>(<argument><expr><name>Opts</name></expr></argument>, <argument><expr><name>Triple</name></expr></argument>, <argument><expr><name>Builder</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__EMSCRIPTEN__"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Opts</name><operator>.</operator><name>POSIXThreads</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>defineMacro</name></name><argument_list>(<argument><expr><literal type="string">"__EMSCRIPTEN_PTHREADS__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<name>explicit</name> <call><name>EmscriptenTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>WebAssemblyOSTargetInfo</name></macro><operator>&lt;</operator><name>Target</name><operator>&gt;</operator><operator>(</operator><name>Triple</name>, <name>Opts</name><operator>)</operator> <block>{





<expr><name><name>this</name><operator>-&gt;</operator><name>LongDoubleAlign</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
