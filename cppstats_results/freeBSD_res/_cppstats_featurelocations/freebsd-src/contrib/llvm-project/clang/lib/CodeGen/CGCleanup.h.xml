<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGCleanup.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGCLEANUP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGCLEANUP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EHScopeStack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BasicBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstantInt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AllocaInst</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>



<struct>struct <name>CatchTypeInfo</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>RTTI</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Flags</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>class</name></type> <name>EHScope</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>CachedLandingPad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>CachedEHDispatchBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <name>EnclosingEHScope</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CommonBitFields</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>EHScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<enum>enum <block>{ <decl><name>NumCommonBits</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> }</block>;</enum>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>CatchBitFields</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>EHCatchScope</name></decl>;</decl_stmt>
<label><name>unsigned</name> :</label> <expr_stmt><expr><name>NumCommonBits</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>NumHandlers</name> <range>: <expr><literal type="number">32</literal> <operator>-</operator> <name>NumCommonBits</name></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CleanupBitFields</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>EHCleanupScope</name></decl>;</decl_stmt>
<label><name>unsigned</name> :</label> <expr_stmt><expr><name>NumCommonBits</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsNormalCleanup</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsEHCleanup</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsActive</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsLifetimeMarker</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TestFlagInNormalCleanup</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TestFlagInEHCleanup</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>CleanupSize</name> <range>: <expr><literal type="number">12</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FilterBitFields</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>EHFilterScope</name></decl>;</decl_stmt>
<label><name>unsigned</name> :</label> <expr_stmt><expr><name>NumCommonBits</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>NumFilters</name> <range>: <expr><literal type="number">32</literal> <operator>-</operator> <name>NumCommonBits</name></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<union>union <block>{
<decl_stmt><decl><type><name>CommonBitFields</name></type> <name>CommonBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CatchBitFields</name></type> <name>CatchBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CleanupBitFields</name></type> <name>CleanupBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FilterBitFields</name></type> <name>FilterBits</name></decl>;</decl_stmt>
}</block>;</union>

<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{ <decl><name>Cleanup</name></decl>, <decl><name>Catch</name></decl>, <decl><name>Terminate</name></decl>, <decl><name>Filter</name></decl> }</block>;</enum>

<macro><name>EHScope</name><argument_list>(<argument>Kind kind</argument>, <argument>EHScopeStack::stable_iterator enclosingEHScope</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>CachedLandingPad</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CachedEHDispatchBlock</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>EnclosingEHScope</name><argument_list>(<argument>enclosingEHScope</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>CommonBits</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>kind</name></expr>;
}</block>

<name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>CommonBits</name><operator>.</operator><name>Kind</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><macro><name>getCachedLandingPad</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CachedLandingPad</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setCachedLandingPad</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>block</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>CachedLandingPad</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><macro><name>getCachedEHDispatchBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CachedEHDispatchBlock</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setCachedEHDispatchBlock</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>block</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>CachedEHDispatchBlock</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasEHBranches</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>block</name> <operator>=</operator> <call><name>getCachedEHDispatchBlock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name><name>block</name><operator>-&gt;</operator><name>use_empty</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <macro><name>getEnclosingEHScope</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>EnclosingEHScope</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>EHCatchScope</name> <range>: <expr><name>public</name> <name>EHScope</name> <block>{





<expr><name>public</name><operator>:</operator>
struct <name>Handler</name> <block>{


<expr><name>CatchTypeInfo</name> <name>Type</name></expr>;


<expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Block</name></expr>;

<expr><name>bool</name> <macro><name>isCatchAll</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Type</name><operator>.</operator><name>RTTI</name></name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block>
}</expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>EHScopeStack</name></expr>;

<expr><name>Handler</name> <operator>*</operator><macro><name>getHandlers</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>Handler</name> <operator>*</operator><macro><name>getHandlers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Handler</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>size_t</name> <macro><name>getSizeForNumHandlers</name><argument_list>(<argument>unsigned N</argument>)</argument_list></macro> <block>{
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>EHCatchScope</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>N</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Handler</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block>

<macro><name>EHCatchScope</name><argument_list>(<argument>unsigned numHandlers</argument>,
<argument>EHScopeStack::stable_iterator enclosingEHScope</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>EHScope</name><argument_list>(<argument>Catch</argument>, <argument>enclosingEHScope</argument>)</argument_list></macro> <block>{
<expr><name><name>CatchBits</name><operator>.</operator><name>NumHandlers</name></name> <operator>=</operator> <name>numHandlers</name></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>CatchBits</name><operator>.</operator><name>NumHandlers</name></name> <operator>==</operator> <name>numHandlers</name> <operator>&amp;&amp;</operator> <literal type="string">"NumHandlers overflow?"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>unsigned</name> <macro><name>getNumHandlers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>CatchBits</name><operator>.</operator><name>NumHandlers</name></name></expr>;</return>
}</block>

<name>void</name> <macro><name>setCatchAllHandler</name><argument_list>(<argument>unsigned I</argument>, <argument>llvm::BasicBlock *Block</argument>)</argument_list></macro> <block>{
<macro><name>setHandler</name><argument_list>(<argument>I</argument>, <argument>CatchTypeInfo{nullptr</argument>, <argument><literal type="number">0</literal>}</argument>, <argument>Block</argument>)</argument_list></macro>;
}</block>

<name>void</name> <macro><name>setHandler</name><argument_list>(<argument>unsigned I</argument>, <argument>llvm::Constant *Type</argument>, <argument>llvm::BasicBlock *Block</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <call><name>getNumHandlers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getHandlers</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index><operator>.</operator><name>Type</name> <operator>=</operator> <name>CatchTypeInfo</name><block>{<expr><name>Type</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;
<expr><call><name>getHandlers</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index><operator>.</operator><name>Block</name> <operator>=</operator> <name>Block</name></expr>;
}</block>

<name>void</name> <macro><name>setHandler</name><argument_list>(<argument>unsigned I</argument>, <argument>CatchTypeInfo Type</argument>, <argument>llvm::BasicBlock *Block</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <call><name>getNumHandlers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getHandlers</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index><operator>.</operator><name>Type</name> <operator>=</operator> <name>Type</name></expr>;
<expr><call><name>getHandlers</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index><operator>.</operator><name>Block</name> <operator>=</operator> <name>Block</name></expr>;
}</block>

<specifier>const</specifier> <name>Handler</name> <operator>&amp;</operator><macro><name>getHandler</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <call><name>getNumHandlers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getHandlers</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index></expr>;</return>
}</block>





<name>void</name> <macro><name>clearHandlerBlocks</name><argument_list>()</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><call><name>getNumHandlers</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>getHandler</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list>.<name>Block</name></decl>;</decl_stmt></block_content></block></for>
}</block></expr>

<typedef>typedef <type><specifier>const</specifier> <name>Handler</name> <modifier>*</modifier></type><name>iterator</name>;</typedef>
<name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getHandlers</name><argument_list>()</argument_list></call></expr>;</return> }</block></block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getHandlers</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getNumHandlers</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const EHScope *Scope</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Scope</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Catch</name></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <macro><name>alignas</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <name>EHCleanupScope</name> <operator>:</operator> <name>public</name> <name>EHScope</name> <block>{

<expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <name>EnclosingNormal</name></expr>;


<expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <name>EnclosingEH</name></expr>;



<expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>NormalBlock</name></expr>;



<expr><name>llvm</name><operator>::</operator><name>AllocaInst</name> <operator>*</operator><name>ActiveFlag</name></expr>;





struct <expr><name>ExtInfo</name> <block>{

<expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Branches</name></expr>;


<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name><operator>*</operator></expr></argument>,<argument><expr><name>llvm</name><operator>::</operator><name>ConstantInt</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name>
<name>BranchAfters</name></expr>;
}</block></expr>;
<expr><name>mutable</name> struct <name>ExtInfo</name> <operator>*</operator><name>ExtInfo</name></expr>;




<expr><name>unsigned</name> <name>FixupDepth</name></expr>;

struct <expr><name>ExtInfo</name> <operator>&amp;</operator><macro><name>getExtInfo</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ExtInfo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ExtInfo</name> <operator>=</operator> <name>new</name> struct <call><name>ExtInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><operator>*</operator><name>ExtInfo</name></expr>;</return>
}</block>

<specifier>const</specifier> struct <name>ExtInfo</name> <operator>&amp;</operator><macro><name>getExtInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ExtInfo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ExtInfo</name> <operator>=</operator> <name>new</name> struct <call><name>ExtInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
<return>return <expr><operator>*</operator><name>ExtInfo</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<label><name>public</name>:</label>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>getSizeForCleanupSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>EHCleanupScope</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>Size</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>size_t</name> <macro><name>getAllocatedSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>EHCleanupScope</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>CleanupBits</name><operator>.</operator><name>CleanupSize</name></name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name>EHCleanupScope</name><argument_list>(<argument>bool isNormal</argument>, <argument>bool isEH</argument>, <argument>unsigned cleanupSize</argument>,
<argument>unsigned fixupDepth</argument>,
<argument>EHScopeStack::stable_iterator enclosingNormal</argument>,
<argument>EHScopeStack::stable_iterator enclosingEH</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>EHScope</name><argument_list>(<argument><expr><name>EHScope</name><operator>::</operator><name>Cleanup</name></expr></argument>, <argument><expr><name>enclosingEH</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>EnclosingNormal</name><argument_list>(<argument><expr><name>enclosingNormal</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NormalBlock</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ActiveFlag</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ExtInfo</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>FixupDepth</name><argument_list>(<argument>fixupDepth</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>CleanupBits</name><operator>.</operator><name>IsNormalCleanup</name></name> <operator>=</operator> <name>isNormal</name></expr>;
<expr><name><name>CleanupBits</name><operator>.</operator><name>IsEHCleanup</name></name> <operator>=</operator> <name>isEH</name></expr>;
<expr><name><name>CleanupBits</name><operator>.</operator><name>IsActive</name></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>CleanupBits</name><operator>.</operator><name>IsLifetimeMarker</name></name> <operator>=</operator> <name>false</name></expr>;
<expr><name><name>CleanupBits</name><operator>.</operator><name>TestFlagInNormalCleanup</name></name> <operator>=</operator> <name>false</name></expr>;
<expr><name><name>CleanupBits</name><operator>.</operator><name>TestFlagInEHCleanup</name></name> <operator>=</operator> <name>false</name></expr>;
<expr><name><name>CleanupBits</name><operator>.</operator><name>CleanupSize</name></name> <operator>=</operator> <name>cleanupSize</name></expr>;

<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>CleanupBits</name><operator>.</operator><name>CleanupSize</name></name> <operator>==</operator> <name>cleanupSize</name> <operator>&amp;&amp;</operator> <literal type="string">"cleanup size overflow"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Destroy</name><argument_list>()</argument_list></macro> <block>{
<expr><name>delete</name> <name>ExtInfo</name></expr>;
}</block>

<operator>~</operator><call><name>EHCleanupScope</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isNormalCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>CleanupBits</name><operator>.</operator><name>IsNormalCleanup</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><macro><name>getNormalBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NormalBlock</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setNormalBlock</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>BB</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>NormalBlock</name> <operator>=</operator> <name>BB</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isEHCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>CleanupBits</name><operator>.</operator><name>IsEHCleanup</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>CleanupBits</name><operator>.</operator><name>IsActive</name></name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setActive</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>CleanupBits</name><operator>.</operator><name>IsActive</name></name> <operator>=</operator> <name>A</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isLifetimeMarker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>CleanupBits</name><operator>.</operator><name>IsLifetimeMarker</name></name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setLifetimeMarker</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>CleanupBits</name><operator>.</operator><name>IsLifetimeMarker</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasActiveFlag</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ActiveFlag</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Address</name> <macro><name>getActiveFlag</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><name>ActiveFlag</name></expr></argument>, <argument><expr><name>CharUnits</name><operator>::</operator><call><name>One</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setActiveFlag</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>Var</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Var</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOne</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ActiveFlag</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>AllocaInst</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Var</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setTestFlagInNormalCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>CleanupBits</name><operator>.</operator><name>TestFlagInNormalCleanup</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>shouldTestFlagInNormalCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>CleanupBits</name><operator>.</operator><name>TestFlagInNormalCleanup</name></name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setTestFlagInEHCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>CleanupBits</name><operator>.</operator><name>TestFlagInEHCleanup</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>shouldTestFlagInEHCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>CleanupBits</name><operator>.</operator><name>TestFlagInEHCleanup</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getFixupDepth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FixupDepth</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name> <macro><name>getEnclosingNormalCleanup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>EnclosingNormal</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>getCleanupSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>CleanupBits</name><operator>.</operator><name>CleanupSize</name></name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name> <modifier>*</modifier></type><name>getCleanupBuffer</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>EHScopeStack</name><operator>::</operator><name>Cleanup</name> <operator>*</operator><macro><name>getCleanup</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>EHScopeStack</name><operator>::</operator><name>Cleanup</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getCleanupBuffer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasBranches</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ExtInfo</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ExtInfo</name><operator>-&gt;</operator><name>Branches</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>












<decl_stmt><decl><type><name>void</name></type> <name>addBranchAfter</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>ConstantInt</name> <operator>*</operator><name>Index</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Block</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ExtInfo</name></name> <modifier>&amp;</modifier><name>ExtInfo</name></type> <init>= <expr><call><name>getExtInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>ExtInfo</name><operator>.</operator><name>Branches</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>ExtInfo</name><operator>.</operator><name>BranchAfters</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>Block</name></expr></argument>, <argument><expr><name>Index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getNumBranchAfters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExtInfo</name> <operator>?</operator> <call><name><name>ExtInfo</name><operator>-&gt;</operator><name>BranchAfters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><macro><name>getBranchAfterBlock</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <call><name>getNumBranchAfters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ExtInfo</name><operator>-&gt;</operator><name>BranchAfters</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>ConstantInt</name> <operator>*</operator><macro><name>getBranchAfterIndex</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <call><name>getNumBranchAfters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ExtInfo</name><operator>-&gt;</operator><name>BranchAfters</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</return>
}</block></expr></expr_stmt>
















<decl_stmt><decl><type><name>bool</name></type> <name>addBranchThrough</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BasicBlock</name> <operator>*</operator><name>Block</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getExtInfo</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>Branches</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasBranchThroughs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ExtInfo</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>(</operator><call><name><name>ExtInfo</name><operator>-&gt;</operator><name>BranchAfters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>ExtInfo</name><operator>-&gt;</operator><name>Branches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EHScope</name> <modifier>*</modifier></type><name>Scope</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name><name>Scope</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Cleanup</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
};






<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>EHCleanupScope</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EHScopeStack</name><operator>::</operator><name>ScopeStackAlignment</name></expr></argument>,
<argument><expr><literal type="string">"EHCleanupScope expected alignment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>EHFilterScope</name> <range>: <expr><name>public</name> <name>EHScope</name> <block>{



<expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><operator>*</operator><macro><name>getFilters</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name><operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><macro><name>getFilters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name><operator>*</operator> <specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<macro><name>EHFilterScope</name><argument_list>(<argument>unsigned numFilters</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>EHScope</name><argument_list>(<argument>Filter</argument>, <argument>EHScopeStack::stable_end()</argument>)</argument_list></macro> <block>{
<expr><name><name>FilterBits</name><operator>.</operator><name>NumFilters</name></name> <operator>=</operator> <name>numFilters</name></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>FilterBits</name><operator>.</operator><name>NumFilters</name></name> <operator>==</operator> <name>numFilters</name> <operator>&amp;&amp;</operator> <literal type="string">"NumFilters overflow"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>size_t</name> <macro><name>getSizeForNumFilters</name><argument_list>(<argument>unsigned numFilters</argument>)</argument_list></macro> <block>{
<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>EHFilterScope</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>numFilters</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Value</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block>

<name>unsigned</name> <macro><name>getNumFilters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>FilterBits</name><operator>.</operator><name>NumFilters</name></name></expr>;</return> }</block>

<name>void</name> <macro><name>setFilter</name><argument_list>(<argument>unsigned i</argument>, <argument>llvm::Value *filterValue</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <call><name>getNumFilters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getFilters</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name>filterValue</name></expr>;
}</block>

<name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getFilter</name><argument_list>(<argument>unsigned i</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <call><name>getNumFilters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getFilters</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const EHScope *scope</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>scope</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Filter</name></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>EHTerminateScope</name> <operator>:</operator> <name>public</name> <name>EHScope</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>EHTerminateScope</name><argument_list>(<argument>EHScopeStack::stable_iterator enclosingEHScope</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>EHScope</name><argument_list>(<argument>Terminate</argument>, <argument>enclosingEHScope</argument>)</argument_list></macro> <block>{}</block>
<specifier>static</specifier> <name>size_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>EHTerminateScope</name></expr></argument>)</argument_list></sizeof></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const EHScope *scope</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>scope</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Terminate</name></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>EHScopeStack</name><operator>::</operator><name>iterator</name> <block>{
<expr><name>char</name> <operator>*</operator><name>Ptr</name></expr>;

<expr><name>friend</name> <name>class</name> <name>EHScopeStack</name></expr>;
<expr><name>explicit</name> <call><name>iterator</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>Ptr</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<call><name>iterator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<name>EHScope</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>EHScope</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>EHScope</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr>) <specifier>const</specifier> <block>{ <return>return <expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</return> }</block></block>
<name>EHScope</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><name>size_t</name> <name>Size</name></expr>;
<switch>switch <condition>(<expr><call><name>get</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EHScope</name><operator>::</operator><name>Catch</name></expr>:</case>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name>EHCatchScope</name><operator>::</operator><call><name>getSizeForNumHandlers</name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>EHCatchScope</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getNumHandlers</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EHScope</name><operator>::</operator><name>Filter</name></expr>:</case>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name>EHFilterScope</name><operator>::</operator><call><name>getSizeForNumFilters</name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>EHFilterScope</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getNumFilters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EHScope</name><operator>::</operator><name>Cleanup</name></expr>:</case>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>EHCleanupScope</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getAllocatedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>EHScope</name><operator>::</operator><name>Terminate</name></expr>:</case>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name>EHTerminateScope</name><operator>::</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
Ptr += llvm::alignTo(Size</block><operator>,</operator> <expr_stmt><expr><name>ScopeStackAlignment</name></expr></expr_stmt></switch>)</block></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>iterator</name> <macro><name>next</name><argument_list>()</argument_list></macro> <block>{
<expr><name>iterator</name> <name>copy</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>++</operator><name>copy</name></expr>;
<return>return <expr><name>copy</name></expr>;</return>
}</block>

<name>iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>iterator</name> <name>copy</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator></expr>;
<return>return <expr><name>copy</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>encloses</name><argument_list>(<argument>iterator other</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>&gt;=</operator> <name><name>other</name><operator>.</operator><name>Ptr</name></name></expr>;</return> }</block>
<name>bool</name> <macro><name>strictlyEncloses</name><argument_list>(<argument>iterator other</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>Ptr</name></name></expr>;</return> }</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>iterator</name> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>Ptr</name></name></expr>;</return> }</block>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>iterator</name> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>Ptr</name></name></expr>;</return> }</block>
}</expr>;

<expr><specifier>inline</specifier> <name>EHScopeStack</name><operator>::</operator><name>iterator</name> <name>EHScopeStack</name><operator>::</operator><macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>StartOfData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>EHScopeStack</name><operator>::</operator><name>iterator</name> <name>EHScopeStack</name><operator>::</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>EndOfBuffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>void</name> <name>EHScopeStack</name><operator>::</operator><macro><name>popCatch</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"popping exception stack when not empty"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>EHCatchScope</name> <operator>&amp;</operator><name>scope</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>EHCatchScope</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>InnermostEHScope</name> <operator>=</operator> <call><name><name>scope</name><operator>.</operator><name>getEnclosingEHScope</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name>deallocate</name><argument_list>(<argument><expr><name>EHCatchScope</name><operator>::</operator><call><name>getSizeForNumHandlers</name><argument_list>(<argument><expr><call><name><name>scope</name><operator>.</operator><name>getNumHandlers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>inline</specifier> <name>void</name> <name>EHScopeStack</name><operator>::</operator><macro><name>popTerminate</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"popping exception stack when not empty"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>EHTerminateScope</name> <operator>&amp;</operator><name>scope</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>EHTerminateScope</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>InnermostEHScope</name> <operator>=</operator> <call><name><name>scope</name><operator>.</operator><name>getEnclosingEHScope</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name>deallocate</name><argument_list>(<argument><expr><name>EHTerminateScope</name><operator>::</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>inline</specifier> <name>EHScopeStack</name><operator>::</operator><name>iterator</name> <name>EHScopeStack</name><operator>::</operator><macro><name>find</name><argument_list>(<argument>stable_iterator sp</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>sp</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"finding invalid savepoint"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sp</name><operator>.</operator><name>Size</name></name> <operator>&lt;=</operator> <call><name>stable_begin</name><argument_list>()</argument_list></call><operator>.</operator><name>Size</name> <operator>&amp;&amp;</operator> <literal type="string">"finding savepoint after pop"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>EndOfBuffer</name> <operator>-</operator> <name><name>sp</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>EHScopeStack</name><operator>::</operator><name>stable_iterator</name>
<name>EHScopeStack</name><operator>::</operator><macro><name>stabilize</name><argument_list>(<argument>iterator ir</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>StartOfData</name> <operator>&lt;=</operator> <name><name>ir</name><operator>.</operator><name>Ptr</name></name> <operator>&amp;&amp;</operator> <name><name>ir</name><operator>.</operator><name>Ptr</name></name> <operator>&lt;=</operator> <name>EndOfBuffer</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>stable_iterator</name><argument_list>(<argument><expr><name>EndOfBuffer</name> <operator>-</operator> <name><name>ir</name><operator>.</operator><name>Ptr</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


struct <name>EHPersonality</name> <block>{
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>PersonalityFn</name></expr>;




<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>CatchallRethrowFn</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <operator>&amp;</operator><call><name>get</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>FD</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <operator>&amp;</operator><call><name>get</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_C</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_C_SJLJ</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_C_SEH</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_ObjC</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_ObjC_SJLJ</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_ObjC_SEH</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNUstep_ObjC</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_ObjCXX</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>NeXT_ObjC</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_CPlusPlus</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_CPlusPlus_SJLJ</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_CPlusPlus_SEH</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>MSVC_except_handler</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>MSVC_C_specific_handler</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>MSVC_CxxFrameHandler3</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>GNU_Wasm_CPlusPlus</name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>EHPersonality</name> <name>XL_CPlusPlus</name></expr>;



<expr><name>bool</name> <macro><name>usesFuncletPads</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isMSVCPersonality</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isWasmPersonality</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isMSVCPersonality</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>this</name> <operator>==</operator> <operator>&amp;</operator><name>MSVC_except_handler</name> <operator>||</operator> <name>this</name> <operator>==</operator> <operator>&amp;</operator><name>MSVC_C_specific_handler</name> <operator>||</operator>
<name>this</name> <operator>==</operator> <operator>&amp;</operator><name>MSVC_CxxFrameHandler3</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isWasmPersonality</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>this</name> <operator>==</operator> <operator>&amp;</operator><name>GNU_Wasm_CPlusPlus</name></expr>;</return> }</block>

<name>bool</name> <macro><name>isMSVCXXPersonality</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>this</name> <operator>==</operator> <operator>&amp;</operator><name>MSVC_CxxFrameHandler3</name></expr>;</return> }</block>
}</expr>;
}</block>
}</expr></block></expr></range></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
