<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/openmp_wrappers/complex_cmath.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OPENMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for OpenMP compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This file is for C++ compilation only."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_LIBCPP_COMPLEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LIBCPP_COMPLEX</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEVICE__</name></cpp:macro> <cpp:value>static constexpr __attribute__((nothrow))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>std</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__DEVICE__</name> <name>_Tp</name></type> <name>abs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>hypot</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__DEVICE__</name> <name>_Tp</name></type> <name>arg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>atan2</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name> <operator>||</operator> <name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>,
<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name>
<macro><name>arg</name><argument_list>(<argument>_Tp __re</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>atan2</name><argument_list>(<argument><expr><literal type="number">0.</literal></expr></argument>, <argument><expr><name>__re</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>typename</name> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>, <argument><expr><name>float</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>float</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name> <macro><name>arg</name><argument_list>(<argument>_Tp __re</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>atan2f</name><argument_list>(<argument><expr><literal type="number">0.F</literal></expr></argument>, <argument><expr><name>__re</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__DEVICE__</name> <name>_Tp</name></type> <name>norm</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>__c</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>conj</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__c</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>proj</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__c</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__r</name> <operator>=</operator> <name>__c</name></expr>;
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__r</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__c</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>__r</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name></type> <name>polar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>_Tp</name> <modifier>&amp;</modifier></type><name>__rho</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_Tp</name> <modifier>&amp;</modifier></type><name>__theta</name> <init>= <expr><call><name>_Tp</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><name>__rho</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>signbit</name><argument_list>(<argument><expr><name>__rho</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><name>__theta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><name>__rho</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__rho</name></expr></argument>, <argument><expr><name>__theta</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__theta</name></expr></argument>, <argument><expr><name>__theta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><name>__theta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><name>__rho</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__rho</name></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__x</name> <init>= <expr><name>__rho</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>__theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__y</name> <init>= <expr><name>__rho</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>__theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>log</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>arg</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>log10</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>sqrt</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
?</condition><then> <expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><ternary><condition><expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>polar</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>arg</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>exp</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><name>_Tp</name> <name>__i</name> <operator>=</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__i</name> <operator>=</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name>__i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>__i</name> <operator>=</operator> <call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
} else <if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__x</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__e</name> <init>= <expr><call><name>exp</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__e</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__e</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>pow</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>,
<argument>const std::complex&lt;_Tp&gt; &amp;__y</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>exp</name><argument_list>(<argument><expr><name>__y</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>__sqr</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>*</operator>
<operator>(</operator><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>,
<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>asinh</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>_Tp</name> <call><name>__pi</name><argument_list>(<argument><expr><call><name>atan2</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">0.</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__x</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name> <operator>*</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>__x</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>__sqr</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>acosh</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>_Tp</name> <call><name>__pi</name><argument_list>(<argument><expr><call><name>atan2</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">0.</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name> <operator>*</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name> <operator>*</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0.75</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}
if <expr_stmt><expr><operator>(</operator><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}
if <expr_stmt><expr><operator>(</operator><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>__x</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>__sqr</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>atanh</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>_Tp</name> <call><name>__pi</name><argument_list>(<argument><expr><call><name>atan2</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">0.</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><name>__pi</name> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><operator>(</operator><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>__x</name><operator>)</operator> <operator>/</operator> <operator>(</operator><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>__x</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>sinh</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__x</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>sinh</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cosh</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>cosh</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>cosh</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>sinh</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>tanh</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>std</name><operator>::</operator><call><name>isfinite</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>copysign</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sin</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__x</name></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__2r</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__2i</name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__d</name><argument_list>(<argument><expr><call><name>cosh</name><argument_list>(<argument><expr><name>__2r</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>cos</name><argument_list>(<argument><expr><name>__2i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Tp</name></type> <name>__2rsh</name><argument_list>(<argument><expr><call><name>sinh</name><argument_list>(<argument><expr><name>__2r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><name>__2rsh</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><name>__d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><ternary><condition><expr><name>__2rsh</name> <operator>&gt;</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_Tp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name>__2i</name> <operator>&gt;</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_Tp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__2rsh</name> <operator>/</operator> <name>__d</name></expr></argument>, <argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>__2i</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>__d</name></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>asin</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>asinh</name><argument_list>(<argument><expr><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>acos</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>_Tp</name> <call><name>__pi</name><argument_list>(<argument><expr><call><name>atan2</name><argument_list>(<argument><expr><operator>+</operator><literal type="number">0.</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0.75</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>__pi</name></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>__pi</name></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__pi</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>signbit</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>signbit</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
}
if <expr_stmt><expr><operator>(</operator><name>std</name><operator>::</operator><call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}
if <expr_stmt><expr><operator>(</operator><name>std</name><operator>::</operator><call><name>isinf</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__pi</name> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<if_stmt><if>if <condition>(<expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>__pi</name> <operator>/</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>__x</name> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>__sqr</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>_Tp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>signbit</name><argument_list>(<argument><expr><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name>abs</name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}



template <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>_Tp</name><operator>&gt;</operator>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>atan</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>atanh</name><argument_list>(<argument><expr><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>sin</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>sinh</name><argument_list>(<argument><expr><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>cos</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>cosh</name><argument_list>(<argument><expr><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>_Tp</name></expr></argument>&gt;</argument_list></name>
<name>__DEVICE__</name> <name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <macro><name>tan</name><argument_list>(<argument>const std::complex&lt;_Tp&gt; &amp;__x</argument>)</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name> <name>__z</name> <operator>=</operator> <call><name>tanh</name><argument_list>(<argument><expr><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>__x</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>__x</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>_Tp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>__z</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><call><name><name>__z</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
