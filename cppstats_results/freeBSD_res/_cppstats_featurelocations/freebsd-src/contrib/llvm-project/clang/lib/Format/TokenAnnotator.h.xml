<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/TokenAnnotator.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_TOKENANNOTATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_TOKENANNOTATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"UnwrappedLineParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>

<enum>enum <name>LineType</name> <block>{
<decl><name>LT_Invalid</name></decl>,
<decl><name>LT_ImportStatement</name></decl>,
<decl><name>LT_ObjCDecl</name></decl>,
<decl><name>LT_ObjCMethodDecl</name></decl>,
<decl><name>LT_ObjCProperty</name></decl>,
<decl><name>LT_Other</name></decl>,
<decl><name>LT_PreprocessorDirective</name></decl>,
<decl><name>LT_VirtualFunctionDecl</name></decl>,
<decl><name>LT_ArrayOfStructInitializer</name></decl>,
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>AnnotatedLine</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>AnnotatedLine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnwrappedLine</name> <operator>&amp;</operator><name>Line</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>First</name><argument_list>(<argument><expr><call><name><name>Line</name><operator>.</operator><name>Tokens</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>Tok</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Level</name><argument_list>(<argument><expr><name><name>Line</name><operator>.</operator><name>Level</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MatchingOpeningBlockLineIndex</name><argument_list>(<argument><expr><name><name>Line</name><operator>.</operator><name>MatchingOpeningBlockLineIndex</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MatchingClosingBlockLineIndex</name><argument_list>(<argument><expr><name><name>Line</name><operator>.</operator><name>MatchingClosingBlockLineIndex</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>InPPDirective</name><argument_list>(<argument><expr><name><name>Line</name><operator>.</operator><name>InPPDirective</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MustBeDeclaration</name><argument_list>(<argument><expr><name><name>Line</name><operator>.</operator><name>MustBeDeclaration</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MightBeFunctionDecl</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsMultiVariableDeclStmt</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Affected</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>LeadingEmptyLinesAffected</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ChildrenAffected</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>FirstStartColumn</name><argument_list>(<argument>Line.FirstStartColumn</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Line</name><operator>.</operator><name>Tokens</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;




<expr><name><name>First</name><operator>-&gt;</operator><name>Previous</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>FormatToken</name> <operator>*</operator><name>Current</name> <operator>=</operator> <name>First</name></expr>;
<for>for <control>(<init><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>UnwrappedLineNode</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <operator>++</operator><call><name><name>Line</name><operator>.</operator><name>Tokens</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><name>E</name> <operator>=</operator> <call><name><name>Line</name><operator>.</operator><name>Tokens</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init>
<condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>UnwrappedLineNode</name> <modifier>&amp;</modifier></type><name>Node</name> <init>= <expr><operator>*</operator><name>I</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Current</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name><name>I</name><operator>-&gt;</operator><name>Tok</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>Tok</name><operator>-&gt;</operator><name>Previous</name></name> <operator>=</operator> <name>Current</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Current</name> <operator>=</operator> <name><name>Current</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Current</name><operator>-&gt;</operator><name>Children</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>Child</name> <range>: <expr><name><name>Node</name><operator>.</operator><name>Children</name></name></expr></range></decl></init>)</control> <block>{<block_content>
<macro><name>Children</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>new AnnotatedLine(Child)</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Current</name><operator>-&gt;</operator><name>Children</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>Children</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
Last = Current</block><empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name><name>Last</name><operator>-&gt;</operator><name>Next</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

~AnnotatedLine(</block></for>) <block>{
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><call><name><name>Children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>e</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>delete</name></type> <name><name>Children</name><index>[<expr><name>i</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt/>}</block_content>
FormatToken *Current = First</block><empty_stmt>;</empty_stmt></for></block></block></expr></expr_stmt>
<while>while <condition>(<expr><name>Current</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Current</name><operator>-&gt;</operator><name>Children</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Current</name><operator>-&gt;</operator><name>Role</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Current</name> <operator>=</operator> <name><name>Current</name><operator>-&gt;</operator><name>Next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>startsWith</name><argument_list>(<argument><expr><name>Ts</name><operator>...</operator> <name>Tokens</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>First</name> <operator>&amp;&amp;</operator> <call><name><name>First</name><operator>-&gt;</operator><name>startsSequence</name></name><argument_list>(<argument><expr><name>Tokens</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>endsWith</name><argument_list>(<argument><expr><name>Ts</name><operator>...</operator> <name>Tokens</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Last</name> <operator>&amp;&amp;</operator> <call><name><name>Last</name><operator>-&gt;</operator><name>endsSequence</name></name><argument_list>(<argument><expr><name>Tokens</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>mightBeFunctionDefinition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>MightBeFunctionDecl</name></expr></argument>)</argument_list></call></expr>;










<return>return <expr><operator>!</operator><call><name>endsWith</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>semi</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>startsWithNamespace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>startsWith</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>kw_namespace</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>startsWith</name><argument_list>(<argument><expr><name>TT_NamespaceMacro</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>startsWith</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>kw_inline</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>kw_namespace</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>startsWith</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>kw_export</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>kw_namespace</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>First</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>Last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>Children</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LineType</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>MatchingOpeningBlockLineIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>MatchingClosingBlockLineIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>InPPDirective</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>MustBeDeclaration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>MightBeFunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsMultiVariableDeclStmt</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>Affected</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>LeadingEmptyLinesAffected</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ChildrenAffected</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>FirstStartColumn</name></decl>;</decl_stmt>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>AnnotatedLine</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AnnotatedLine</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>AnnotatedLine</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>TokenAnnotator</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TokenAnnotator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormatStyle</name> <operator>&amp;</operator><name>Style</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>AdditionalKeywords</name> <operator>&amp;</operator><name>Keywords</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Style</name><argument_list>(<argument><expr><name>Style</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Keywords</name><argument_list>(<argument>Keywords</argument>)</argument_list></macro> <expr><block>{}</block>




<name>void</name> <call><name>setCommentLineLevels</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>AnnotatedLine</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>annotate</name><parameter_list>(<parameter><decl><type><name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>calculateFormattingInformation</name><parameter_list>(<parameter><decl><type><name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<function_decl><type><name>unsigned</name></type> <name>splitPenalty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>InFunctionDecl</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>spaceRequiredBeforeParens</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormatToken</name> <operator>&amp;</operator><name>Right</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>spaceRequiredBetween</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Left</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Right</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>spaceRequiredBefore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Right</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>mustBreakBefore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Right</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>canBreakBefore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Right</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>mustBreakForReturnType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AnnotatedLine</name> <operator>&amp;</operator><name>Line</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>printDebugInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>calculateUnbreakableTailLengths</name><parameter_list>(<parameter><decl><type><name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>calculateArrayInitializerColumnList</name><parameter_list>(<parameter><decl><type><name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>calculateInitializerColumnList</name><parameter_list>(<parameter><decl><type><name>AnnotatedLine</name> <modifier>&amp;</modifier></type><name>Line</name></decl></parameter>,
<parameter><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>CurrentToken</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Depth</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>FormatStyle</name><operator>::</operator><name>PointerAlignmentStyle</name>
<call><name>getTokenReferenceAlignment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormatToken</name> <operator>&amp;</operator><name>PointerOrReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>FormatStyle</name><operator>::</operator><name>PointerAlignmentStyle</name>
<call><name>getTokenPointerOrReferenceAlignment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormatToken</name> <operator>&amp;</operator><name>PointerOrReference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FormatStyle</name> <modifier>&amp;</modifier></type><name>Style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AdditionalKeywords</name> <modifier>&amp;</modifier></type><name>Keywords</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
