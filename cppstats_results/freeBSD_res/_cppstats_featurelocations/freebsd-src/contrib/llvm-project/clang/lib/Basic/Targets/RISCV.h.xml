<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/RISCV.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_RISCV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_RISCV_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>RISCVTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>ABI</name></expr>, <expr><name>CPU</name></expr>;
<expr><name>bool</name> <name>HasM</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasA</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasF</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasD</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasC</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasB</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasV</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZba</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbb</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbc</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbe</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbf</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbm</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbp</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbproposedc</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbr</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbs</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZbt</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZfh</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZvamo</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>HasZvlsseg</name> <operator>=</operator> <name>false</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>RISCVTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>WCharType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>WIntType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>HasRISCVVTypes</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>MCountName</name> <operator>=</operator> <literal type="string">"_mcount"</literal></expr>;
<expr><name>HasFloat16</name> <operator>=</operator> <name>true</name></expr>;
}</block>

<name>bool</name> <macro><name>setCPU</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidCPUName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<name>CPU</name> <operator>=</operator> <name>Name</name></block></expr>;
<return>return <expr><name>true</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>ABI</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>getTargetDefines</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name>MacroBuilder</name> <operator>&amp;</operator><name>Builder</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>getEHDataRegisterNumber</name><argument_list>(<argument><expr><name>unsigned</name> <name>RegNo</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">10</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>RegNo</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">11</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>validateAsmConstraint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>&amp;</operator><name>Name</name></expr></argument>,
<argument><expr><name>TargetInfo</name><operator>::</operator><name>ConstraintInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>convertConstraint</name><argument_list>(<argument>const char *&amp;Constraint</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type>
<name>initFeatureMap</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>CPU</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FeaturesVec</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasFeature</name><argument_list>(<argument><expr><name>StringRef</name> <name>Feature</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>handleTargetFeatures</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>RISCV32TargetInfo</name> <range>: <expr><name>public</name> <name>RISCVTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RISCV32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>RISCVTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:32:32-i64:64-n32-S128"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>setABI</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"ilp32"</literal> <operator>||</operator> <name>Name</name> <operator>==</operator> <literal type="string">"ilp32f"</literal> <operator>||</operator> <name>Name</name> <operator>==</operator> <literal type="string">"ilp32d"</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ABI</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isValidTuneCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>fillValidTuneCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>setMaxAtomicWidth</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;

<if_stmt><if>if <condition>(<expr><name>HasA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>
}</expr>;
<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>RISCV64TargetInfo</name> <operator>:</operator> <name>public</name> <name>RISCVTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RISCV64TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>RISCVTargetInfo</name><argument_list>(<argument>Triple</argument>, <argument>Opts</argument>)</argument_list></macro> <block>{
<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>IntMaxType</name> <operator>=</operator> <name>Int64Type</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:64:64-i64:64-i128:128-n64-S128"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>setABI</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>Name</name> <operator>==</operator> <literal type="string">"lp64"</literal> <operator>||</operator> <name>Name</name> <operator>==</operator> <literal type="string">"lp64f"</literal> <operator>||</operator> <name>Name</name> <operator>==</operator> <literal type="string">"lp64d"</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ABI</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>

<name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isValidTuneCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>fillValidTuneCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>setMaxAtomicWidth</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;

<if_stmt><if>if <condition>(<expr><name>HasA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>
}</expr>;
}</block></expr>
}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
