<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Boolean.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_BOOLEAN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_BOOLEAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Integral.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/APValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ComparisonCategories.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>Boolean</name> <block>{<block_content>
<label><name>private</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>V</name></decl>;</decl_stmt>


<macro><name>explicit</name></macro> <macro><name>Boolean</name><argument_list>(<argument>bool V</argument>)</argument_list></macro> : <macro><name>V</name><argument_list>(<argument>V</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Boolean</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>V</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>Boolean</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>Boolean</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&gt;</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><name>Boolean</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&lt;=</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><name>Boolean</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>&gt;=</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>Boolean</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>Boolean</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>V</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>unsigned</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>RHS</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>Boolean</name> <name>operator</name><operator>-</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Boolean</name> <name>operator</name><operator>~</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>unsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>int64_t</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>uint64_t</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>APSInt</name> <macro><name>toAPSInt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>APSInt</name><argument_list>(<argument><expr><call><name>APInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>APSInt</name></type> <name>toAPSInt</name><argument_list>(<argument><expr><name>unsigned</name> <name>NumBits</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>APSInt</name><argument_list>(<argument><expr><call><name>toAPSInt</name><argument_list>()</argument_list></call><operator>.</operator><call><name>zextOrTrunc</name><argument_list>(<argument><expr><name>NumBits</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>APValue</name> <macro><name>toAPValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>APValue</name><argument_list>(<argument><expr><call><name>toAPSInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>Boolean</name> <macro><name>toUnsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>unsigned</name></type> <name>bitWidth</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>isZero</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>V</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isMin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isZero</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>bool</name></type> <name>isMinusOne</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>bool</name></type> <name>isSigned</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><name>constexpr</name> <specifier>static</specifier> <name>bool</name></type> <name>isNegative</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>
<function><type><name>constexpr</name> <specifier>static</specifier> <name>bool</name></type> <name>isPositive</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><call><name>isNegative</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>ComparisonCategoryResult</name></type> <name>compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Boolean</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>Compare</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name><name>RHS</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>countLeadingZeros</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>V</name> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <literal type="number">1</literal></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Boolean</name></type> <name>truncate</name><argument_list>(<argument><expr><name>unsigned</name> <name>TruncBits</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const <block>{<block_content> <expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>V</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>Boolean</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>Boolean</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_integral</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>Boolean</name></expr></argument>&gt;</argument_list></name> <macro><name>from</name><argument_list>(<argument>T Value</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><name>Value</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>SrcBits</name></expr></argument>, <argument><expr><name>bool</name> <name>SrcSign</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>SrcBits</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>Boolean</name></expr></argument>&gt;</argument_list></name>
<macro><name>from</name><argument_list>(<argument>Integral&lt;SrcBits</argument>, <argument>SrcSign&gt; Value</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Value</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name> <name>SrcSign</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Boolean</name></type> <name>from</name><parameter_list>(<parameter><decl><type><name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SrcSign</name></expr></argument>&gt;</argument_list></name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>Value</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Boolean</name></type> <name>zero</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>from</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>Boolean</name></type> <name>from</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>Value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Boolean</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>inRange</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>Value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumBits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Value</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>Value</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>increment</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>R</name> <operator>=</operator> <call><name>Boolean</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>decrement</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Cannot decrement booleans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OpBits</name></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>R</name> <operator>=</operator> <call><name>Boolean</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>V</name></name> <operator>||</operator> <name><name>B</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OpBits</name></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>R</name> <operator>=</operator> <call><name>Boolean</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>V</name></name> <operator>^</operator> <name><name>B</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>OpBits</name></decl></parameter>, <parameter><decl><type><name>Boolean</name> <modifier>*</modifier></type><name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>R</name> <operator>=</operator> <call><name>Boolean</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>V</name></name> <operator>&amp;&amp;</operator> <name><name>B</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <specifier>const</specifier> <name>Boolean</name> <operator>&amp;</operator><name>B</name><operator>)</operator> <block>{
<expr><call><name><name>B</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>OS</name></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
