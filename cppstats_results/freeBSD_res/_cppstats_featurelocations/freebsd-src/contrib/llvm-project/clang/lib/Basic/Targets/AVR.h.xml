<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/AVR.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_AVR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_AVR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>AVRTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>AVRTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{
<expr><name>TLSSupported</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>PointerWidth</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>PointerAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>IntWidth</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>IntAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>LongWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>LongAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>LongLongWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongLongAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>DefaultAlignForAttributeAligned</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>HalfWidth</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>HalfAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>FloatWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>FloatAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>DoubleWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>DoubleAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>DoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEsingle</name><argument_list>()</argument_list></call></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEsingle</name><argument_list>()</argument_list></call></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>Char16Type</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>WIntType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>Int16Type</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>Char32Type</name> <operator>=</operator> <name>UnsignedLong</name></expr>;
<expr><name>SigAtomicType</name> <operator>=</operator> <name>SignedChar</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>None</name></expr>;</return> }</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><literal type="string">"r0"</literal></expr>, <expr><literal type="string">"r1"</literal></expr>, <expr><literal type="string">"r2"</literal></expr>, <expr><literal type="string">"r3"</literal></expr>, <expr><literal type="string">"r4"</literal></expr>, <expr><literal type="string">"r5"</literal></expr>, <expr><literal type="string">"r6"</literal></expr>, <expr><literal type="string">"r7"</literal></expr>, <expr><literal type="string">"r8"</literal></expr>, <expr><literal type="string">"r9"</literal></expr>,
<expr><literal type="string">"r10"</literal></expr>, <expr><literal type="string">"r11"</literal></expr>, <expr><literal type="string">"r12"</literal></expr>, <expr><literal type="string">"r13"</literal></expr>, <expr><literal type="string">"r14"</literal></expr>, <expr><literal type="string">"r15"</literal></expr>, <expr><literal type="string">"r16"</literal></expr>, <expr><literal type="string">"r17"</literal></expr>, <expr><literal type="string">"r18"</literal></expr>, <expr><literal type="string">"r19"</literal></expr>,
<expr><literal type="string">"r20"</literal></expr>, <expr><literal type="string">"r21"</literal></expr>, <expr><literal type="string">"r22"</literal></expr>, <expr><literal type="string">"r23"</literal></expr>, <expr><literal type="string">"r24"</literal></expr>, <expr><literal type="string">"r25"</literal></expr>, <expr><literal type="string">"X"</literal></expr>, <expr><literal type="string">"Y"</literal></expr>, <expr><literal type="string">"Z"</literal></expr>, <expr><literal type="string">"SP"</literal></expr>
}</block></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>GCCRegNames</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>None</name></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>AddlRegName</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCAddlRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>AddlRegName</name> <name><name>AddlRegNames</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><block>{<expr><block>{<expr><literal type="string">"r26"</literal></expr>, <expr><literal type="string">"r27"</literal></expr>}</block></expr>, <expr><literal type="number">26</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"r28"</literal></expr>, <expr><literal type="string">"r29"</literal></expr>}</block></expr>, <expr><literal type="number">27</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"r30"</literal></expr>, <expr><literal type="string">"r31"</literal></expr>}</block></expr>, <expr><literal type="number">28</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"SPL"</literal></expr>, <expr><literal type="string">"SPH"</literal></expr>}</block></expr>, <expr><literal type="number">29</literal></expr>}</block></expr>,
}</block></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>AddlRegNames</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;Info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<if_stmt><if>if <condition>(<expr><call><name>StringRef</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<case>case <expr><literal type="char">'y'</literal></expr>:</case>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'J'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">63</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'O'</literal></expr>:</case>
<macro><name>Info</name></macro><expr_stmt><expr><operator>.</operator><macro><name>setRequiresImmediate</name><argument_list>(<argument>{<literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">24</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'R'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setRequiresImmediate</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>

return false</block><empty_stmt>;</empty_stmt></switch>
}</block>

<name>IntType</name> <macro><name>getIntTypeByWidth</name><argument_list>(<argument>unsigned BitWidth</argument>, <argument>bool IsSigned</argument>)</argument_list></macro> <specifier>const</specifier> <name>final</name> <block>{

<return>return <expr><name>BitWidth</name> <operator>==</operator> <literal type="number">16</literal> <operator>?</operator> <operator>(</operator><name>IsSigned</name> <operator>?</operator> <name>SignedInt</name> <operator>:</operator> <name>UnsignedInt</name><operator>)</operator>
<operator>:</operator> <name>TargetInfo</name><operator>::</operator><call><name>getIntTypeByWidth</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsSigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>IntType</name></type> <name>getLeastIntTypeByWidth</name><argument_list>(<argument><expr><name>unsigned</name> <name>BitWidth</name></expr></argument>, <argument><expr><name>bool</name> <name>IsSigned</name></expr></argument>)</argument_list> const <name>final</name> <block>{<block_content>

<return>return <expr><ternary><condition><expr><name>BitWidth</name> <operator>==</operator> <literal type="number">16</literal></expr>
?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>IsSigned</name></expr> ?</condition><then> <expr><name>SignedInt</name></expr> </then><else>: <expr><name>UnsignedInt</name></expr></else></ternary><operator>)</operator></expr>
</then><else>: <expr><name>TargetInfo</name><operator>::</operator><call><name>getLeastIntTypeByWidth</name><argument_list>(<argument><expr><name>BitWidth</name></expr></argument>, <argument><expr><name>IsSigned</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isValidCPUName</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>fillValidCPUList</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Values</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>setCPU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Name</name></expr></argument>)</argument_list> <name>override</name> <block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>isValid</name> <init>= <expr><call><name>isValidCPUName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>isValid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>CPU</name> <operator>=</operator> <name>Name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>isValid</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CPU</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
