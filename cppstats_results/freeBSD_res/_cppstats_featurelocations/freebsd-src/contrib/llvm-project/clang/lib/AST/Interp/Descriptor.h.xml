<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Descriptor.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_DESCRIPTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_DESCRIPTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Record</name></decl>;</decl_stmt>
<struct_decl>struct <name>Descriptor</name>;</struct_decl>
<enum_decl>enum <name>PrimType</name> : <type><name>unsigned</name></type>;</enum_decl>

<decl_stmt><decl><type><name>using</name></type> <name>DeclTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>using</name></type> <name>BlockCtorFn</name> <init>= <macro><name>void</name> <argument_list>(<argument>*</argument>)</argument_list></macro><expr><operator>(</operator><name>Block</name> <operator>*</operator><name>Storage</name>, <name>char</name> <operator>*</operator><name>FieldPtr</name>, <name>bool</name> <name>IsConst</name>,
<name>bool</name> <name>IsMutable</name>, <name>bool</name> <name>IsActive</name>,
<name>Descriptor</name> <operator>*</operator><name>FieldDesc</name><operator>)</operator></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>BlockDtorFn</name> <init>= <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>Block</name> <operator>*</operator><name>Storage</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>FieldPtr</name></expr></argument>,
<argument><expr><name>Descriptor</name> <operator>*</operator><name>FieldDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>BlockMoveFn</name> <init>= <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>Block</name> <operator>*</operator><name>Storage</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>SrcFieldPtr</name></expr></argument>,
<argument><expr><name>char</name> <operator>*</operator><name>DstFieldPtr</name></expr></argument>, <argument><expr><name>Descriptor</name> <operator>*</operator><name>FieldDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>InterpSize</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>


<struct>struct <name>Descriptor</name> <block>{
<label><name>private</name>:</label>

<decl_stmt><decl><type><specifier>const</specifier> <name>DeclTy</name></type> <name>Source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>InterpSize</name></type> <name>ElemSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>InterpSize</name></type> <name>Size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>InterpSize</name></type> <name>AllocSize</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>UnknownSizeMark</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<struct>struct <name>UnknownSize</name> <block>{}</block>;</struct>


<decl_stmt><decl><type><name>Record</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ElemRecord</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Descriptor</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ElemDesc</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>IsConst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>IsMutable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>IsTemporary</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>IsArray</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>BlockCtorFn</name></type> <name>CtorFn</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BlockDtorFn</name></type> <name>DtorFn</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BlockMoveFn</name></type> <name>MoveFn</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<macro><name>Descriptor</name><argument_list>(<argument>const DeclTy &amp;D</argument>, <argument>PrimType Type</argument>, <argument>bool IsConst</argument>, <argument>bool IsTemporary</argument>,
<argument>bool IsMutable</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>Descriptor</name><argument_list>(<argument>const DeclTy &amp;D</argument>, <argument>PrimType Type</argument>, <argument>size_t NumElems</argument>, <argument>bool IsConst</argument>,
<argument>bool IsTemporary</argument>, <argument>bool IsMutable</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>Descriptor</name><argument_list>(<argument>const DeclTy &amp;D</argument>, <argument>PrimType Type</argument>, <argument>bool IsTemporary</argument>, <argument>UnknownSize</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>Descriptor</name><argument_list>(<argument>const DeclTy &amp;D</argument>, <argument>Descriptor *Elem</argument>, <argument>unsigned NumElems</argument>, <argument>bool IsConst</argument>,
<argument>bool IsTemporary</argument>, <argument>bool IsMutable</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>Descriptor</name><argument_list>(<argument>const DeclTy &amp;D</argument>, <argument>Descriptor *Elem</argument>, <argument>bool IsTemporary</argument>, <argument>UnknownSize</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<macro><name>Descriptor</name><argument_list>(<argument>const DeclTy &amp;D</argument>, <argument>Record *R</argument>, <argument>bool IsConst</argument>, <argument>bool IsTemporary</argument>,
<argument>bool IsMutable</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>asDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Source</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><specifier>const</specifier> <name>Decl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>asExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Source</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><specifier>const</specifier> <name>Expr</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ValueDecl</name> <operator>*</operator><macro><name>asValueDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>ValueDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>asDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator><macro><name>asFieldDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>FieldDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>asDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><macro><name>asRecordDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>RecordDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>asDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isUnknownSizeArray</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Array of unknown size"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Size</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getAllocSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AllocSize</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getElemSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ElemSize</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getNumElems</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Size</name> <operator>==</operator> <name>UnknownSizeMark</name> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <operator>(</operator><call><name>getSize</name><argument_list>()</argument_list></call> <operator>/</operator> <call><name>getElemSize</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isPrimitiveArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsArray</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ElemDesc</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isZeroSizeArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUnknownSizeArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name> <operator>==</operator> <name>UnknownSizeMark</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isPrimitive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>IsArray</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ElemRecord</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsArray</name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>







<struct>struct <name>InlineDescriptor</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsConst</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>IsInitialized</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsBase</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsActive</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>IsMutable</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>Desc</name></decl>;</decl_stmt>
}</block>;</struct>





<struct>struct <name>InitMap</name> <block>{
<label><name>private</name>:</label>

<decl_stmt><decl><type><name>using</name></type> <name>T</name> <init>= <expr><name>uint64_t</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>uint64_t</name></type> <name>PER_FIELD</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></init></decl>;</decl_stmt>


<macro><name>InitMap</name><argument_list>(<argument>unsigned N</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<function_decl><type><name>T</name> <modifier>*</modifier></type><name>data</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>

<function_decl><type><name>bool</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isInitialized</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>InitMap</name> <modifier>*</modifier></type><name>allocate</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>N</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>unsigned</name></type> <name>UninitFields</name></decl>;</decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
