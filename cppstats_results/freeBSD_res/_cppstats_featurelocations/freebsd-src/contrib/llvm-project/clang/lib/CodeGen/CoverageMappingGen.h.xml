<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_COVERAGEMAPPINGGEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_COVERAGEMAPPINGGEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PPCallbacks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/GlobalValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<struct>struct <name>SkippedRange</name> <block>{
<decl_stmt><decl><type><name>SourceRange</name></type> <name>Range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>PrevTokLoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>NextTokLoc</name></decl>;</decl_stmt>

<macro><name>SkippedRange</name><argument_list>(<argument>SourceRange Range</argument>, <argument>SourceLocation PrevTokLoc = SourceLocation()</argument>,
<argument>SourceLocation NextTokLoc = SourceLocation()</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Range</name><argument_list>(<argument><expr><name>Range</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>PrevTokLoc</name><argument_list>(<argument><expr><name>PrevTokLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>NextTokLoc</name><argument_list>(<argument>NextTokLoc</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name>class</name></type> <name>CoverageSourceInfo</name> <range>: <expr><name>public</name> <name>PPCallbacks</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>CommentHandler</name></decl>,
<decl><type ref="prev"/><name>public</name> <name>EmptylineHandler</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SkippedRange</name></expr></argument>&gt;</argument_list></name> <name>SkippedRanges</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>

<label><name>public</name>:</label>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>PrevTokLoc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CoverageSourceInfo</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SourceMgr</name><argument_list>(<argument>SourceMgr</argument>)</argument_list></macro> <block>{}</block>

<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SkippedRange</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getSkippedRanges</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>SkippedRanges</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>void</name></type> <name>AddSkippedRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>Range</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>SourceRangeSkipped</name><argument_list>(<argument><expr><name>SourceRange</name> <name>Range</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>EndifLoc</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleEmptyline</name><argument_list>(<argument><expr><name>SourceRange</name> <name>Range</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>HandleComment</name><argument_list>(<argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>Range</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>updateNextTokLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CoverageMappingModuleGen</name> <block>{<block_content>

<struct>struct <name>FunctionInfo</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>NameHash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>FuncHash</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CoverageMapping</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsUsed</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CoverageSourceInfo</name> <modifier>&amp;</modifier></type><name>SourceInfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>FileEntries</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>FunctionNames</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FunctionInfo</name></expr></argument>&gt;</argument_list></name> <name>FunctionRecords</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CoveragePrefixMap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>getCurrentDirname</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>normalizeFilename</name><argument_list>(<argument>StringRef Filename</argument>)</argument_list></macro></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>emitFunctionMappingRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionInfo</name> <modifier>&amp;</modifier></type><name>Info</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type> <name>FilenamesRef</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>CoverageSourceInfo</name> <modifier>*</modifier></type><name>setUpCoverageCallbacks</name><parameter_list>(<parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>CoverageMappingModuleGen</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>CoverageSourceInfo</name> <operator>&amp;</operator><name>SourceInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>CoverageSourceInfo</name> <operator>&amp;</operator><macro><name>getSourceInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceInfo</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>addFunctionMappingRecord</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>FunctionName</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>FunctionNameValue</name></expr></argument>,
<argument><expr><name>uint64_t</name> <name>FunctionHash</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>CoverageMapping</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsUsed</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>emit</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name></type> <name>getFileID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileEntry</name> <modifier>*</modifier></type><name>File</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>getCodeGenModule</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>CGM</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CoverageMappingGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>CoverageMappingModuleGen</name> <modifier>&amp;</modifier></type><name>CVM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>CounterMap</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CoverageMappingGen</name><argument_list>(<argument><expr><name>CoverageMappingModuleGen</name> <operator>&amp;</operator><name>CVM</name></expr></argument>, <argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CVM</name><argument_list>(<argument><expr><name>CVM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SM</name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LangOpts</name><argument_list>(<argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CounterMap</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>CoverageMappingGen</name><argument_list>(<argument><expr><name>CoverageMappingModuleGen</name> <operator>&amp;</operator><name>CVM</name></expr></argument>, <argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>CounterMap</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CVM</name><argument_list>(<argument><expr><name>CVM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SM</name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LangOpts</name><argument_list>(<argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CounterMap</name><argument_list>(<argument>CounterMap</argument>)</argument_list></macro> <expr><block>{}</block>




<name>void</name> <call><name>emitCounterMapping</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>emitEmptyMapping</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
