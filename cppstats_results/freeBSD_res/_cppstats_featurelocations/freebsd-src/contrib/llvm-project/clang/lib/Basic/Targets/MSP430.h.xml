<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/MSP430.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_MSP430_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_MSP430_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MSP430TargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>MSP430TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{
<expr><name>TLSSupported</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>IntWidth</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>IntAlign</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>LongWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>LongLongWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongAlign</name> <operator>=</operator> <name>LongLongAlign</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>FloatWidth</name> <operator>=</operator> <literal type="number">32</literal></expr>;
<expr><name>FloatAlign</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>DoubleWidth</name> <operator>=</operator> <name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>DoubleAlign</name> <operator>=</operator> <name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>PointerWidth</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>PointerAlign</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">16</literal></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLongLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedInt</name></expr>;
<expr><name>SigAtomicType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(<argument><expr><literal type="string">"e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16"</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>None</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>allowsLargerPreferedTypeAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>hasFeature</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>Feature</name> <operator>==</operator> <literal type="string">"msp430"</literal></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>GCCRegAliases</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><block>{<expr><block>{<expr><literal type="string">"r0"</literal></expr>}</block></expr>, <expr><literal type="string">"pc"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"r1"</literal></expr>}</block></expr>, <expr><literal type="string">"sp"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"r2"</literal></expr>}</block></expr>, <expr><literal type="string">"sr"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"r3"</literal></expr>}</block></expr>, <expr><literal type="string">"cg"</literal></expr>}</block></expr>,
}</block></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>GCCRegAliases</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'K'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>

return false</block><empty_stmt>;</empty_stmt></switch>
}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
