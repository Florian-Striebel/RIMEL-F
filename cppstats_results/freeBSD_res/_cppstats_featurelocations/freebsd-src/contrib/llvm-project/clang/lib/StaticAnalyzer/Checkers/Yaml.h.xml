<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/Yaml.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKER_YAML_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKER_YAML_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/CheckerManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/YAMLTraits.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>, <argument><expr><name>class</name> <name>Checker</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>getConfiguration</name><argument_list>(<argument>CheckerManager &amp;Mgr</argument>, <argument>Checker *Chk</argument>,
<argument>StringRef Option</argument>, <argument>StringRef ConfigFile</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>ConfigFile</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt>

<name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>*</operator><name>FS</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><call><name>getRealFileSystem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Buffer</name> <operator>=</operator>
<call><name><name>FS</name><operator>-&gt;</operator><name>getBufferForFile</name></name><argument_list>(<argument><expr><call><name><name>ConfigFile</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><name>error_code</name> <name>ec</name> <operator>=</operator> <call><name><name>Buffer</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Mgr</name><operator>.</operator><name>reportInvalidCheckerOptionValue</name></name><argument_list>(<argument><expr><name>Chk</name></expr></argument>, <argument><expr><name>Option</name></expr></argument>,
<argument><expr><literal type="string">"a valid filename instead of '"</literal> <operator>+</operator>
<name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>ConfigFile</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>Input</name> <call><name>Input</name><argument_list>(<argument><expr><call><name><name>Buffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getBuffer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>T</name></type> <name>Config</name></decl>;</decl_stmt>
<expr_stmt><expr><name>Input</name> <operator>&gt;&gt;</operator> <name>Config</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><name>error_code</name> <name>ec</name> <operator>=</operator> <call><name><name>Input</name><operator>.</operator><name>error</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Mgr</name><operator>.</operator><name>reportInvalidCheckerOptionValue</name></name><argument_list>(<argument><expr><name>Chk</name></expr></argument>, <argument><expr><name>Option</name></expr></argument>,
<argument><expr><literal type="string">"a valid yaml file: "</literal> <operator>+</operator> <call><name><name>ec</name><operator>.</operator><name>message</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>Config</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
