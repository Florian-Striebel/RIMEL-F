<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/VE.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_VE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_VE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>VETargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>VETargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TargetInfo</name><argument_list>(<argument>Triple</argument>)</argument_list></macro> <block>{
<expr><name>NoAsmVariants</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>LongDoubleWidth</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleAlign</name> <operator>=</operator> <literal type="number">128</literal></expr>;
<expr><name>LongDoubleFormat</name> <operator>=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><name>APFloat</name><operator>::</operator><call><name>IEEEquad</name><argument_list>()</argument_list></call></expr>;
<expr><name>DoubleAlign</name> <operator>=</operator> <name>LongLongAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>SuitableAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>LongWidth</name> <operator>=</operator> <name>LongAlign</name> <operator>=</operator> <name>PointerWidth</name> <operator>=</operator> <name>PointerAlign</name> <operator>=</operator> <literal type="number">64</literal></expr>;
<expr><name>SizeType</name> <operator>=</operator> <name>UnsignedLong</name></expr>;
<expr><name>PtrDiffType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>IntPtrType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>IntMaxType</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>Int64Type</name> <operator>=</operator> <name>SignedLong</name></expr>;
<expr><name>RegParmMax</name> <operator>=</operator> <literal type="number">8</literal></expr>;
<expr><name>MaxAtomicPromoteWidth</name> <operator>=</operator> <name>MaxAtomicInlineWidth</name> <operator>=</operator> <literal type="number">64</literal></expr>;

<expr><name>WCharType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>WIntType</name> <operator>=</operator> <name>UnsignedInt</name></expr>;
<expr><name>UseZeroLengthBitfieldAlignment</name> <operator>=</operator> <name>true</name></expr>;
<expr><call><name>resetDataLayout</name><argument_list>(
<argument><expr><literal type="string">"e-m:e-i64:64-n32:64-S128-v64:64:64-v128:64:64-v256:64:64-v512:64:64-"</literal>
<literal type="string">"v1024:64:64-v2048:64:64-v4096:64:64-v8192:64:64-v16384:64:64"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasSjLjLowering</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>TargetInfo</name><operator>::</operator><name>VoidPtrBuiltinVaList</name></expr>;</return>
}</block>

<name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><name>CC</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
<case>case <expr><name>CC_C</name></expr>:</case>
<return>return <expr><name>CCCR_OK</name></expr>;</return>
<expr_stmt/>}</block_content>
}

const char *getClobbers(</block></switch>) <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name> <operator>=</operator> <block>{

<expr><literal type="string">"sx0"</literal></expr>, <expr><literal type="string">"sx1"</literal></expr>, <expr><literal type="string">"sx2"</literal></expr>, <expr><literal type="string">"sx3"</literal></expr>, <expr><literal type="string">"sx4"</literal></expr>, <expr><literal type="string">"sx5"</literal></expr>, <expr><literal type="string">"sx6"</literal></expr>, <expr><literal type="string">"sx7"</literal></expr>,
<expr><literal type="string">"sx8"</literal></expr>, <expr><literal type="string">"sx9"</literal></expr>, <expr><literal type="string">"sx10"</literal></expr>, <expr><literal type="string">"sx11"</literal></expr>, <expr><literal type="string">"sx12"</literal></expr>, <expr><literal type="string">"sx13"</literal></expr>, <expr><literal type="string">"sx14"</literal></expr>, <expr><literal type="string">"sx15"</literal></expr>,
<expr><literal type="string">"sx16"</literal></expr>, <expr><literal type="string">"sx17"</literal></expr>, <expr><literal type="string">"sx18"</literal></expr>, <expr><literal type="string">"sx19"</literal></expr>, <expr><literal type="string">"sx20"</literal></expr>, <expr><literal type="string">"sx21"</literal></expr>, <expr><literal type="string">"sx22"</literal></expr>, <expr><literal type="string">"sx23"</literal></expr>,
<expr><literal type="string">"sx24"</literal></expr>, <expr><literal type="string">"sx25"</literal></expr>, <expr><literal type="string">"sx26"</literal></expr>, <expr><literal type="string">"sx27"</literal></expr>, <expr><literal type="string">"sx28"</literal></expr>, <expr><literal type="string">"sx29"</literal></expr>, <expr><literal type="string">"sx30"</literal></expr>, <expr><literal type="string">"sx31"</literal></expr>,
<expr><literal type="string">"sx32"</literal></expr>, <expr><literal type="string">"sx33"</literal></expr>, <expr><literal type="string">"sx34"</literal></expr>, <expr><literal type="string">"sx35"</literal></expr>, <expr><literal type="string">"sx36"</literal></expr>, <expr><literal type="string">"sx37"</literal></expr>, <expr><literal type="string">"sx38"</literal></expr>, <expr><literal type="string">"sx39"</literal></expr>,
<expr><literal type="string">"sx40"</literal></expr>, <expr><literal type="string">"sx41"</literal></expr>, <expr><literal type="string">"sx42"</literal></expr>, <expr><literal type="string">"sx43"</literal></expr>, <expr><literal type="string">"sx44"</literal></expr>, <expr><literal type="string">"sx45"</literal></expr>, <expr><literal type="string">"sx46"</literal></expr>, <expr><literal type="string">"sx47"</literal></expr>,
<expr><literal type="string">"sx48"</literal></expr>, <expr><literal type="string">"sx49"</literal></expr>, <expr><literal type="string">"sx50"</literal></expr>, <expr><literal type="string">"sx51"</literal></expr>, <expr><literal type="string">"sx52"</literal></expr>, <expr><literal type="string">"sx53"</literal></expr>, <expr><literal type="string">"sx54"</literal></expr>, <expr><literal type="string">"sx55"</literal></expr>,
<expr><literal type="string">"sx56"</literal></expr>, <expr><literal type="string">"sx57"</literal></expr>, <expr><literal type="string">"sx58"</literal></expr>, <expr><literal type="string">"sx59"</literal></expr>, <expr><literal type="string">"sx60"</literal></expr>, <expr><literal type="string">"sx61"</literal></expr>, <expr><literal type="string">"sx62"</literal></expr>, <expr><literal type="string">"sx63"</literal></expr>,
}</block></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>GCCRegNames</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>GCCRegAliases</name><index>[]</index></name> <operator>=</operator> <block>{
<expr><block>{<expr><block>{<expr><literal type="string">"s0"</literal></expr>}</block></expr>, <expr><literal type="string">"sx0"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s1"</literal></expr>}</block></expr>, <expr><literal type="string">"sx1"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s2"</literal></expr>}</block></expr>, <expr><literal type="string">"sx2"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s3"</literal></expr>}</block></expr>, <expr><literal type="string">"sx3"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s4"</literal></expr>}</block></expr>, <expr><literal type="string">"sx4"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s5"</literal></expr>}</block></expr>, <expr><literal type="string">"sx5"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s6"</literal></expr>}</block></expr>, <expr><literal type="string">"sx6"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s7"</literal></expr>}</block></expr>, <expr><literal type="string">"sx7"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s8"</literal></expr>, <expr><literal type="string">"sl"</literal></expr>}</block></expr>, <expr><literal type="string">"sx8"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s9"</literal></expr>, <expr><literal type="string">"fp"</literal></expr>}</block></expr>, <expr><literal type="string">"sx9"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s10"</literal></expr>, <expr><literal type="string">"lr"</literal></expr>}</block></expr>, <expr><literal type="string">"sx10"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s11"</literal></expr>, <expr><literal type="string">"sp"</literal></expr>}</block></expr>, <expr><literal type="string">"sx11"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s12"</literal></expr>, <expr><literal type="string">"outer"</literal></expr>}</block></expr>, <expr><literal type="string">"sx12"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s13"</literal></expr>}</block></expr>, <expr><literal type="string">"sx13"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s14"</literal></expr>, <expr><literal type="string">"tp"</literal></expr>}</block></expr>, <expr><literal type="string">"sx14"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s15"</literal></expr>, <expr><literal type="string">"got"</literal></expr>}</block></expr>, <expr><literal type="string">"sx15"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s16"</literal></expr>, <expr><literal type="string">"plt"</literal></expr>}</block></expr>, <expr><literal type="string">"sx16"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s17"</literal></expr>, <expr><literal type="string">"info"</literal></expr>}</block></expr>, <expr><literal type="string">"sx17"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s18"</literal></expr>}</block></expr>, <expr><literal type="string">"sx18"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s19"</literal></expr>}</block></expr>, <expr><literal type="string">"sx19"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s20"</literal></expr>}</block></expr>, <expr><literal type="string">"sx20"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s21"</literal></expr>}</block></expr>, <expr><literal type="string">"sx21"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s22"</literal></expr>}</block></expr>, <expr><literal type="string">"sx22"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s23"</literal></expr>}</block></expr>, <expr><literal type="string">"sx23"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s24"</literal></expr>}</block></expr>, <expr><literal type="string">"sx24"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s25"</literal></expr>}</block></expr>, <expr><literal type="string">"sx25"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s26"</literal></expr>}</block></expr>, <expr><literal type="string">"sx26"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s27"</literal></expr>}</block></expr>, <expr><literal type="string">"sx27"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s28"</literal></expr>}</block></expr>, <expr><literal type="string">"sx28"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s29"</literal></expr>}</block></expr>, <expr><literal type="string">"sx29"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s30"</literal></expr>}</block></expr>, <expr><literal type="string">"sx30"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s31"</literal></expr>}</block></expr>, <expr><literal type="string">"sx31"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s32"</literal></expr>}</block></expr>, <expr><literal type="string">"sx32"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s33"</literal></expr>}</block></expr>, <expr><literal type="string">"sx33"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s34"</literal></expr>}</block></expr>, <expr><literal type="string">"sx34"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s35"</literal></expr>}</block></expr>, <expr><literal type="string">"sx35"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s36"</literal></expr>}</block></expr>, <expr><literal type="string">"sx36"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s37"</literal></expr>}</block></expr>, <expr><literal type="string">"sx37"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s38"</literal></expr>}</block></expr>, <expr><literal type="string">"sx38"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s39"</literal></expr>}</block></expr>, <expr><literal type="string">"sx39"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s40"</literal></expr>}</block></expr>, <expr><literal type="string">"sx40"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s41"</literal></expr>}</block></expr>, <expr><literal type="string">"sx41"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s42"</literal></expr>}</block></expr>, <expr><literal type="string">"sx42"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s43"</literal></expr>}</block></expr>, <expr><literal type="string">"sx43"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s44"</literal></expr>}</block></expr>, <expr><literal type="string">"sx44"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s45"</literal></expr>}</block></expr>, <expr><literal type="string">"sx45"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s46"</literal></expr>}</block></expr>, <expr><literal type="string">"sx46"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s47"</literal></expr>}</block></expr>, <expr><literal type="string">"sx47"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s48"</literal></expr>}</block></expr>, <expr><literal type="string">"sx48"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s49"</literal></expr>}</block></expr>, <expr><literal type="string">"sx49"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s50"</literal></expr>}</block></expr>, <expr><literal type="string">"sx50"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s51"</literal></expr>}</block></expr>, <expr><literal type="string">"sx51"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s52"</literal></expr>}</block></expr>, <expr><literal type="string">"sx52"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s53"</literal></expr>}</block></expr>, <expr><literal type="string">"sx53"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s54"</literal></expr>}</block></expr>, <expr><literal type="string">"sx54"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s55"</literal></expr>}</block></expr>, <expr><literal type="string">"sx55"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s56"</literal></expr>}</block></expr>, <expr><literal type="string">"sx56"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s57"</literal></expr>}</block></expr>, <expr><literal type="string">"sx57"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s58"</literal></expr>}</block></expr>, <expr><literal type="string">"sx58"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s59"</literal></expr>}</block></expr>, <expr><literal type="string">"sx59"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s60"</literal></expr>}</block></expr>, <expr><literal type="string">"sx60"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s61"</literal></expr>}</block></expr>, <expr><literal type="string">"sx61"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s62"</literal></expr>}</block></expr>, <expr><literal type="string">"sx62"</literal></expr>}</block></expr>,
<expr><block>{<expr><block>{<expr><literal type="string">"s63"</literal></expr>}</block></expr>, <expr><literal type="string">"sx63"</literal></expr>}</block></expr>,
}</block></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>GCCRegAliases</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;Info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
return false</block><empty_stmt>;</empty_stmt></switch>
}</block>

<name>bool</name> <macro><name>allowsLargerPreferedTypeAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
