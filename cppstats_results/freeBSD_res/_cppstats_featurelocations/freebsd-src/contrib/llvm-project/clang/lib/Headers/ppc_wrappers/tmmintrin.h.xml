<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/ppc_wrappers/tmmintrin.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_WARN_X86_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>









<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TMMINTRIN_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMMINTRIN_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;altivec.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pmmintrin.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_abs_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_abs_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_abs_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_abs_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__B</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_abs_pi32</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__B</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_abs_pi8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__B</name> <init>= <expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_alignr_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>int</name> <name>__count</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_constant_p</name> <argument_list>(<argument><expr><name>__count</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__count</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__A</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_reve</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__B</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_reve</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>__A</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_sld</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__A</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_reve</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>__A</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>__B</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>zero</name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__shift</name> <init>=
<expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__count</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_sro</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>__shift</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_slo</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>__shift</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__shiftA</name> <init>=
<expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>__count</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__shiftB</name> <init>= <expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>__count</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__A</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_slo</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>__shiftA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__B</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_sro</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__shiftB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>__A</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_sro</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>__shiftA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__B</name> <operator>=</operator> <operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_slo</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__shiftB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_or</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_alignr_pi8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>__count</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>__v2du</name></type> <name>__C</name> <init>= <expr><block>{ <expr><name>__B</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>__shift</name> <init>= <expr><block>{ <expr><name>__count</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_sro</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>__shift</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>__count</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <call><name>vec_slo</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <name><name>__C</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__m64</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__zero</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadd_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadd_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadd_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__C</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadd_pi32</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__C</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadds_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>__D</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sum4s</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_sum4s</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_packs</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__C</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hadds_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><call><name>vec_sum4s</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_packs</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__C</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsub_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsub_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsub_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__C</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsub_pi32</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__C</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsubs_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_subs</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_hsubs_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__P</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__Q</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__E</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_subs</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <name>__C</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_shuffle_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qi</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>char</name></type> <name>__select</name> <init>= <expr><call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__C</name> <init>= <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>, <argument><expr><name>__select</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_shuffle_pi8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qi</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__D</name> <init>= <expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__B</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>char</name></type> <name>__select</name> <init>= <expr><call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__D</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qu</name><operator>)</operator> <name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>, <argument><expr><name>__select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <operator>(</operator><name>__C</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sign_epi8</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qi</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__selectneg</name> <init>= <expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__selectpos</name> <init>=
<expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <call><name>vec_neg</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__conv</name> <init>= <expr><call><name>vec_add</name> <argument_list>(<argument><expr><name>__selectneg</name></expr></argument>, <argument><expr><name>__selectpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__conv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sign_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v8hi</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__selectneg</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__selectpos</name> <init>=
<expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <call><name>vec_neg</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__conv</name> <init>= <expr><call><name>vec_add</name> <argument_list>(<argument><expr><name>__selectneg</name></expr></argument>, <argument><expr><name>__selectpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__conv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sign_epi32</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__selectneg</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__selectpos</name> <init>=
<expr><operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_neg</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__conv</name> <init>= <expr><call><name>vec_add</name> <argument_list>(<argument><expr><name>__selectneg</name></expr></argument>, <argument><expr><name>__selectpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4si</name><operator>)</operator> <name>__conv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sign_pi8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qi</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v16qi</name></type> <name>__D</name> <init>= <expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__B</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <operator>(</operator><name>__v16qi</name><operator>)</operator> <call><name>_mm_sign_epi8</name> <argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <operator>(</operator><name>__C</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sign_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v8hi</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__B</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <operator>(</operator><name>__v8hi</name><operator>)</operator> <call><name>_mm_sign_epi16</name> <argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <operator>(</operator><name>__C</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sign_pi32</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>__zero</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__B</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <operator>(</operator><name>__v4si</name><operator>)</operator> <call><name>_mm_sign_epi32</name> <argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__m128i</name><operator>)</operator> <name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <operator>(</operator><name>__C</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_maddubs_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__unsigned</name> <init>= <expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>short</name><operator>)</operator> <literal type="number">0x00ff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><call><name>vec_and</name> <argument_list>(<argument><expr><call><name>vec_unpackh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__unsigned</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><call><name>vec_and</name> <argument_list>(<argument><expr><call><name>vec_unpackl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__unsigned</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__E</name> <init>= <expr><call><name>vec_unpackh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__F</name> <init>= <expr><call><name>vec_unpackl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__odds</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__evens</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__E</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__odds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__F</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__evens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_adds</name> <argument_list>(<argument><expr><name>__E</name></expr></argument>, <argument><expr><name>__F</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_maddubs_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_unpackl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v8hi</name></type> <name>__unsigned</name> <init>= <expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>short</name><operator>)</operator> <literal type="number">0x00ff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_and</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__unsigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__D</name> <init>= <expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__B</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_unpackl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v16qi</name><operator>)</operator> <name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__odds</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v16qu</name></type> <name>__evens</name> <init>=
<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__odds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__evens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_adds</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <operator>(</operator><name>__C</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128i</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mulhrs_epi16</name> <argument_list>(<argument><expr><name>__m128i</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128i</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><call><name>vec_unpackh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><call><name>vec_unpackh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_unpackl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__E</name> <init>= <expr><call><name>vec_unpackl</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>__shift</name> <init>= <expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>__ones</name> <init>= <expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>int</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><name>__D</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128i</name><operator>)</operator> <call><name>vec_pack</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mulhrs_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__C</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_unpackh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__v4si</name></type> <name>__D</name> <init>= <expr><operator>(</operator><name>__v4si</name><operator>)</operator> <operator>(</operator><name>__v2du</name><operator>)</operator> <block>{ <expr><name>__B</name></expr>, <expr><name>__B</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__D</name> <operator>=</operator> <call><name>vec_unpackh</name> <argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator> <name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_mul</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4su</name></type> <name>__shift</name> <init>= <expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__v4si</name></type> <name>__ones</name> <init>= <expr><call><name>vec_splats</name> <argument_list>(<argument><expr><operator>(</operator><name>signed</name> <name>int</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_add</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>__C</name> <operator>=</operator> <call><name>vec_sr</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4su</name><operator>)</operator> <name>__ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__E</name> <init>= <expr><call><name>vec_pack</name> <argument_list>(<argument><expr><name>__C</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v2du</name><operator>)</operator> <operator>(</operator><name>__E</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:empty>#include_next &lt;tmmintrin.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
