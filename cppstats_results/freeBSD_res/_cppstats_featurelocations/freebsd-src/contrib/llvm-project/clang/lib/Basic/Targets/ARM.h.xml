<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/ARM.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_ARM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_ARM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OSTargets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TargetParser.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>ARMTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{

enum <expr><name>FPUMode</name> <block>{
<expr><name>VFP2FPU</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>VFP3FPU</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>VFP4FPU</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>NeonFPU</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,
<expr><name>FPARMV8</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>
}</block></expr>;

enum <expr><name>MVEMode</name> <block>{
<expr><name>MVE_INT</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>MVE_FP</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>
}</block></expr>;


enum <expr><name>HWDivMode</name> <block>{ <expr><name>HWDivThumb</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>, <expr><name>HWDivARM</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> }</block></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>FPUModeIsVFP</name><argument_list>(<argument>FPUMode Mode</argument>)</argument_list></macro> <block>{
<return>return <expr><name>Mode</name> <operator>&amp;</operator> <operator>(</operator><name>VFP2FPU</name> <operator>|</operator> <name>VFP3FPU</name> <operator>|</operator> <name>VFP4FPU</name> <operator>|</operator> <name>NeonFPU</name> <operator>|</operator> <name>FPARMV8</name><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>const</specifier> <name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name> <name><name>GCCRegAliases</name><index>[]</index></name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>ABI</name></expr>, <expr><name>CPU</name></expr>;

<expr><name>StringRef</name> <name>CPUProfile</name></expr>;
<expr><name>StringRef</name> <name>CPUAttr</name></expr>;

enum <expr><block>{ <expr><name>FP_Default</name></expr>, <expr><name>FP_VFP</name></expr>, <expr><name>FP_Neon</name></expr> }</block> <name>FPMath</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>ARM</name><operator>::</operator><name>ISAKind</name> <name>ArchISA</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>ARM</name><operator>::</operator><name>ArchKind</name> <name>ArchKind</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>ARM</name><operator>::</operator><name>ArchKind</name><operator>::</operator><name>ARMV4T</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>ARM</name><operator>::</operator><name>ProfileKind</name> <name>ArchProfile</name></expr>;
<expr><name>unsigned</name> <name>ArchVersion</name></expr>;

<expr><name>unsigned</name> <name>FPU</name> <operator>:</operator> <literal type="number">5</literal></expr>;
<expr><name>unsigned</name> <name>MVE</name> <operator>:</operator> <literal type="number">2</literal></expr>;

<expr><name>unsigned</name> <name>IsAAPCS</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>HWDiv</name> <operator>:</operator> <literal type="number">2</literal></expr>;


<expr><name>unsigned</name> <name>SoftFloat</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>SoftFloatABI</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>CRC</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>Crypto</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>SHA2</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>AES</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>DSP</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>Unaligned</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>DotProd</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>HasMatMul</name> <operator>:</operator> <literal type="number">1</literal></expr>;

enum <expr><block>{
<expr><name>LDREX_B</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>,
<expr><name>LDREX_H</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>LDREX_W</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>LDREX_D</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,
}</block></expr>;

<expr><name>uint32_t</name> <name>LDREX</name></expr>;


enum <expr><block>{
<expr><name>HW_FP_HP</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>,
<expr><name>HW_FP_SP</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>,
<expr><name>HW_FP_DP</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>,
}</block></expr>;
<expr><name>uint32_t</name> <name>HW_FP</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;

<expr><name>void</name> <call><name>setABIAAPCS</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>setABIAPCS</name><argument_list>(<argument>bool IsAAPCS16</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>setArchInfo</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <macro><name>setArchInfo</name><argument_list>(<argument>llvm::ARM::ArchKind Kind</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>setAtomic</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>isThumb</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>supportsThumb</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>supportsThumb2</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasMVE</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasMVEFloat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasCDE</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>StringRef</name> <macro><name>getCPUAttr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>StringRef</name> <macro><name>getCPUProfile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ARMTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>StringRef</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>setABI</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>bool</name>
<macro><name>initFeatureMap</name><argument_list>(<argument>llvm::StringMap&lt;bool&gt; &amp;Features</argument>, <argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>StringRef CPU</argument>,
<argument>const std::vector&lt;std::string&gt; &amp;FeaturesVec</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isValidFeatureName</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<return>return <expr><name>Feature</name> <operator>!=</operator> <literal type="string">"soft-float-abi"</literal></expr>;</return>
}</block>

<name>bool</name> <macro><name>handleTargetFeatures</name><argument_list>(<argument>std::vector&lt;std::string&gt; &amp;Features</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasFeature</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasBFloat16Type</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>setCPU</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>setFPMath</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>useFP16ConversionIntrinsics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>false</name></expr>;</return>
}</block>

<name>void</name> <macro><name>getTargetDefinesARMV81A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV82A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefinesARMV83A</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isCLZForZeroUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;Info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>convertConstraint</name><argument_list>(<argument>const char *&amp;Constraint</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name>
<macro><name>validateConstraintModifier</name><argument_list>(<argument>StringRef Constraint</argument>, <argument>char Modifier</argument>, <argument>unsigned Size</argument>,
<argument>std::string &amp;SuggestedModifier</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getClobbers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>StringRef</name> <macro><name>getConstraintRegister</name><argument_list>(<argument>StringRef Constraint</argument>,
<argument>StringRef Expression</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>Expression</name></expr>;</return>
}</block>

<name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>int</name> <macro><name>getEHDataRegisterNumber</name><argument_list>(<argument>unsigned RegNo</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasSjLjLowering</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getBFloat16Mangling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"u6__bf16"</literal></expr>;</return> }</block></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>ARMleTargetInfo</name> <range>: <expr><name>public</name> <name>ARMTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ARMleTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>ARMbeTargetInfo</name> <range>: <expr><name>public</name> <name>ARMTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ARMbeTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>WindowsARMTargetInfo</name>
<range>: <expr><name>public</name> <name><name>WindowsTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>ARMleTargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <name>Triple</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>WindowsARMTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getVisualStudioDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>CallingConvCheckResult</name> <macro><name>checkCallingConvention</name><argument_list>(<argument>CallingConv CC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>ItaniumWindowsARMleTargetInfo</name>
<range>: <expr><name>public</name> <name>WindowsARMTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ItaniumWindowsARMleTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MicrosoftARMleTargetInfo</name>
<range>: <expr><name>public</name> <name>WindowsARMTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MicrosoftARMleTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MinGWARMTargetInfo</name> <range>: <expr><name>public</name> <name>WindowsARMTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MinGWARMTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>CygwinARMTargetInfo</name> <range>: <expr><name>public</name> <name>ARMleTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>CygwinARMTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>DarwinARMTargetInfo</name>
<range>: <expr><name>public</name> <name><name>DarwinTargetInfo</name><argument_list type="generic">&lt;<argument><expr><name>ARMleTargetInfo</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>getOSDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>, <argument>const llvm::Triple &amp;Triple</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>DarwinARMTargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>RenderScript32TargetInfo</name>
<range>: <expr><name>public</name> <name>ARMleTargetInfo</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RenderScript32TargetInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
