<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/ContinuationIndenter.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_CONTINUATIONINDENTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_CONTINUATIONINDENTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FormatToken.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnnotatedLine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BreakableToken</name></decl>;</decl_stmt>
<struct_decl>struct <name>FormatToken</name>;</struct_decl>
<struct_decl>struct <name>LineState</name>;</struct_decl>
<struct_decl>struct <name>ParenState</name>;</struct_decl>
<struct_decl>struct <name>RawStringFormatStyleManager</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>WhitespaceManager</name></decl>;</decl_stmt>

<struct>struct <name>RawStringFormatStyleManager</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>FormatStyle</name></expr></argument>&gt;</argument_list></name> <name>DelimiterStyle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>FormatStyle</name></expr></argument>&gt;</argument_list></name> <name>EnclosingFunctionStyle</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RawStringFormatStyleManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormatStyle</name> <operator>&amp;</operator><name>CodeStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FormatStyle</name></expr></argument>&gt;</argument_list></name> <macro><name>getDelimiterStyle</name><argument_list>(<argument>StringRef Delimiter</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FormatStyle</name></expr></argument>&gt;</argument_list></name>
<macro><name>getEnclosingFunctionStyle</name><argument_list>(<argument>StringRef EnclosingFunction</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ContinuationIndenter</name> <block>{<block_content>
<label><name>public</name>:</label>


<macro><name>ContinuationIndenter</name><argument_list>(<argument>const FormatStyle &amp;Style</argument>,
<argument>const AdditionalKeywords &amp;Keywords</argument>,
<argument>const SourceManager &amp;SourceMgr</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>,
<argument>encoding::Encoding Encoding</argument>,
<argument>bool BinPackInconclusiveFunctions</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<function_decl><type><name>LineState</name></type> <name>getInitialState</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>FirstIndent</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>FirstStartColumn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>*</modifier></type><name>Line</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>DryRun</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>canBreak</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>mustBreak</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>unsigned</name></type> <name>addTokenToState</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Newline</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>DryRun</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ExtraSpaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getColumnLimit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LineState</name> <operator>&amp;</operator><name>State</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>


<function_decl><type><name>unsigned</name></type> <name>moveStateToNextToken</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>DryRun</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Newline</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>moveStatePastFakeLParens</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Newline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>moveStatePastFakeRParens</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>moveStatePastScopeOpener</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Newline</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>moveStatePastScopeCloser</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>moveStateToNewBlock</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>unsigned</name></type> <name>reformatRawStringLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Current</name></decl></parameter>,
<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FormatStyle</name> <modifier>&amp;</modifier></type><name>RawStringStyle</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>DryRun</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Newline</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name></type> <name>handleEndOfLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Current</name></decl></parameter>, <parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>DryRun</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>AllowBreak</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Newline</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FormatStyle</name></expr></argument>&gt;</argument_list></name> <call><name>getRawStringStyle</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FormatToken</name> <operator>&amp;</operator><name>Current</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LineState</name> <operator>&amp;</operator><name>State</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



















<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>breakProtrudingToken</name><argument_list>(<argument>const FormatToken &amp;Current</argument>,
<argument>LineState &amp;State</argument>,
<argument>bool AllowBreak</argument>, <argument>bool DryRun</argument>,
<argument>bool Strict</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BreakableToken</name></expr></argument>&gt;</argument_list></name>
<macro><name>createBreakableToken</name><argument_list>(<argument>const FormatToken &amp;Current</argument>, <argument>LineState &amp;State</argument>,
<argument>bool AllowBreak</argument>)</argument_list></macro></expr>;</expr_stmt>








<function_decl><type><name>void</name></type> <name>addTokenOnCurrentLine</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>DryRun</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ExtraSpaces</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>unsigned</name></type> <name>addTokenOnNewLine</name><parameter_list>(<parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>DryRun</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name></type> <name>getNewLineColumn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>unsigned</name></type> <name>addMultilineToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Current</name></decl></parameter>, <parameter><decl><type><name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>nextIsMultilineString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineState</name> <modifier>&amp;</modifier></type><name>State</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>FormatStyle</name></type> <name>Style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>AdditionalKeywords</name> <modifier>&amp;</modifier></type><name>Keywords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WhitespaceManager</name> <modifier>&amp;</modifier></type><name>Whitespaces</name></decl>;</decl_stmt>
<expr_stmt><expr><name>encoding</name><operator>::</operator><name>Encoding</name> <name>Encoding</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>BinPackInconclusiveFunctions</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Regex</name> <name>CommentPragmasRegex</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>RawStringFormatStyleManager</name></type> <name>RawStringFormats</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>ParenState</name> <block>{
<macro><name>ParenState</name><argument_list>(<argument>const FormatToken *Tok</argument>, <argument>unsigned Indent</argument>, <argument>unsigned LastSpace</argument>,
<argument>bool AvoidBinPacking</argument>, <argument>bool NoLineBreak</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Tok</name><argument_list>(<argument><expr><name>Tok</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Indent</name><argument_list>(<argument><expr><name>Indent</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LastSpace</name><argument_list>(<argument><expr><name>LastSpace</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NestedBlockIndent</name><argument_list>(<argument><expr><name>Indent</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsAligned</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>BreakBeforeClosingBrace</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AvoidBinPacking</name><argument_list>(<argument><expr><name>AvoidBinPacking</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>BreakBeforeParameter</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NoLineBreak</name><argument_list>(<argument><expr><name>NoLineBreak</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NoLineBreakInOperand</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LastOperatorWrapped</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ContainsLineBreak</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ContainsUnwrappedBuilder</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>AlignColons</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ObjCSelectorNameFound</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HasMultipleNestedBlocks</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NestedBlockInlined</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsInsideObjCArrayLiteral</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsCSharpGenericTypeConstraint</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsChainedConditional</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsWrappedConditional</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>UnindentOperator</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>






<specifier>const</specifier> <name>FormatToken</name> <operator>*</operator><name>Tok</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Indent</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>LastSpace</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NestedBlockIndent</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>FirstLessLess</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>QuestionColumn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ColonPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>StartOfFunctionCall</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>StartOfArraySubscripts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NestedNameSpecifierContinuation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>CallContinuation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>VariablePos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsAligned</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>BreakBeforeClosingBrace</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>AvoidBinPacking</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>BreakBeforeParameter</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>NoLineBreak</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>NoLineBreakInOperand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>LastOperatorWrapped</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>ContainsLineBreak</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ContainsUnwrappedBuilder</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>AlignColons</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>ObjCSelectorNameFound</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>HasMultipleNestedBlocks</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>NestedBlockInlined</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsInsideObjCArrayLiteral</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsCSharpGenericTypeConstraint</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsChainedConditional</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsWrappedConditional</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>UnindentOperator</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ParenState</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Indent</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>Indent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Indent</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>Indent</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>LastSpace</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>LastSpace</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LastSpace</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>LastSpace</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NestedBlockIndent</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>NestedBlockIndent</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NestedBlockIndent</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>NestedBlockIndent</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>FirstLessLess</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>FirstLessLess</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FirstLessLess</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>FirstLessLess</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IsAligned</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>IsAligned</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IsAligned</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>BreakBeforeClosingBrace</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>BreakBeforeClosingBrace</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BreakBeforeClosingBrace</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>QuestionColumn</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>QuestionColumn</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>QuestionColumn</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>QuestionColumn</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>AvoidBinPacking</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>AvoidBinPacking</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AvoidBinPacking</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>BreakBeforeParameter</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>BreakBeforeParameter</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BreakBeforeParameter</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NoLineBreak</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>NoLineBreak</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NoLineBreak</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>LastOperatorWrapped</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>LastOperatorWrapped</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LastOperatorWrapped</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ColonPos</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>ColonPos</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ColonPos</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>ColonPos</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>StartOfFunctionCall</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>StartOfFunctionCall</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>StartOfFunctionCall</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>StartOfFunctionCall</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>StartOfArraySubscripts</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>StartOfArraySubscripts</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>StartOfArraySubscripts</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>StartOfArraySubscripts</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>CallContinuation</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>CallContinuation</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CallContinuation</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>CallContinuation</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>VariablePos</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>VariablePos</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>VariablePos</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>VariablePos</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ContainsLineBreak</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>ContainsLineBreak</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ContainsLineBreak</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ContainsUnwrappedBuilder</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>ContainsUnwrappedBuilder</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ContainsUnwrappedBuilder</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NestedBlockInlined</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>NestedBlockInlined</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NestedBlockInlined</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IsCSharpGenericTypeConstraint</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>IsCSharpGenericTypeConstraint</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IsCSharpGenericTypeConstraint</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IsChainedConditional</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>IsChainedConditional</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IsChainedConditional</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IsWrappedConditional</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>IsWrappedConditional</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>IsWrappedConditional</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>UnindentOperator</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>UnindentOperator</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>UnindentOperator</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
}</block>
<decl/></struct></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<struct>struct <name>LineState</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>Column</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FormatToken</name> <modifier>*</modifier></type><name>NextToken</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>LineContainsContinuedForLoopSection</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>NoContinuation</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>StartOfLineLevel</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>LowestLevelOnLine</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>StartOfStringLiteral</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ParenState</name></expr></argument>&gt;</argument_list></name> <name>Stack</name></expr>;</expr_stmt>














<decl_stmt><decl><type><name>bool</name></type> <name>IgnoreStackForComparison</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>FirstIndent</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>AnnotatedLine</name> <modifier>*</modifier></type><name>Line</name></decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>LineState</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>NextToken</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>NextToken</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NextToken</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>NextToken</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Column</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>Column</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Column</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>Column</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>LineContainsContinuedForLoopSection</name> <operator>!=</operator>
<name><name>Other</name><operator>.</operator><name>LineContainsContinuedForLoopSection</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LineContainsContinuedForLoopSection</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>NoContinuation</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>NoContinuation</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NoContinuation</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>StartOfLineLevel</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>StartOfLineLevel</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>StartOfLineLevel</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>StartOfLineLevel</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>LowestLevelOnLine</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>LowestLevelOnLine</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LowestLevelOnLine</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>LowestLevelOnLine</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>StartOfStringLiteral</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>StartOfStringLiteral</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>StartOfStringLiteral</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>StartOfStringLiteral</name></name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>IgnoreStackForComparison</name> <operator>||</operator> <name><name>Other</name><operator>.</operator><name>IgnoreStackForComparison</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Stack</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>Stack</name></name></expr>;</return>
}</block>
<decl/></struct></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
