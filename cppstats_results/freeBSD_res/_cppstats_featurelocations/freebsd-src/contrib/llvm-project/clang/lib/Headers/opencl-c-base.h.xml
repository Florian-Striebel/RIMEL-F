<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/opencl-c-base.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OPENCL_BASE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_OPENCL_BASE_H_</name></cpp:macro></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENCL_CPP_VERSION__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__OPENCL_C_VERSION__</name> <operator>&gt;=</operator> <literal type="number">200</literal><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SPIR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_subgroup_extended_types</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_subgroup_non_uniform_vote</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_subgroup_ballot</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_subgroup_non_uniform_arithmetic</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_subgroup_shuffle</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_subgroup_shuffle_relative</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_subgroup_clustered_reduce</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_extended_bit_ops</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cl_khr_integer_dot_product</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_integer_dot_product_input_4x8bit</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_integer_dot_product_input_4x8bit_packed</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OPENCL_CPP_VERSION__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__OPENCL_C_VERSION__</name> <operator>==</operator> <literal type="number">200</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_pipes</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_generic_address_space</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_work_group_collective_functions</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_atomic_order_acq_rel</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_atomic_order_seq_cst</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_atomic_scope_device</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_atomic_scope_all_devices</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_device_enqueue</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_read_write_images</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_program_scope_global_variables</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_images</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__OPENCL_C_VERSION__</name> <operator>==</operator> <literal type="number">300</literal><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SPIR__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__opencl_c_atomic_scope_all_devices</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uchar</name>;</typedef>




<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>ushort</name>;</typedef>




<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>




<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ulong</name>;</typedef>







<typedef>typedef <type><name>__SIZE_TYPE__</name></type> <name>size_t</name>;</typedef>







<typedef>typedef <type><name>__PTRDIFF_TYPE__</name></type> <name>ptrdiff_t</name>;</typedef>






<typedef>typedef <type><name>__INTPTR_TYPE__</name></type> <name>intptr_t</name>;</typedef>






<typedef>typedef <type><name>__UINTPTR_TYPE__</name></type> <name>uintptr_t</name>;</typedef>


<typedef>typedef <type><name>char</name> <name>char2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>char</name> <name>char3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>char</name> <name>char4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>char</name> <name>char8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>char</name> <name>char16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>uchar</name> <name>uchar2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>uchar</name> <name>uchar3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>uchar</name> <name>uchar4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>uchar</name> <name>uchar8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>uchar</name> <name>uchar16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>short</name> <name>short2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>short</name> <name>short3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>short</name> <name>short4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>short</name> <name>short8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>short</name> <name>short16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>ushort</name> <name>ushort2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>ushort</name> <name>ushort3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>ushort</name> <name>ushort4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>ushort</name> <name>ushort8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>ushort</name> <name>ushort16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>int</name> <name>int2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>int</name> <name>int3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>int</name> <name>int4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>int</name> <name>int8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>int</name> <name>int16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>uint</name> <name>uint2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>uint</name> <name>uint3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>uint</name> <name>uint4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>uint</name> <name>uint8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>uint</name> <name>uint16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>long</name> <name>long2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>long</name> <name>long3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>long</name> <name>long4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>long</name> <name>long8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>long</name> <name>long16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>ulong</name> <name>ulong2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>ulong</name> <name>ulong3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>ulong</name> <name>ulong4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>ulong</name> <name>ulong8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>ulong</name> <name>ulong16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<typedef>typedef <type><name>float</name> <name>float2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>float</name> <name>float3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>float</name> <name>float4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>float</name> <name>float8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>float</name> <name>float16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_khr_fp16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>OPENCL</name> <name>EXTENSION</name> <name>cl_khr_fp16</name> <name>:</name> <name>enable</name></cpp:pragma>
<typedef>typedef <type><name>half</name> <name>half2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>half</name> <name>half3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>half</name> <name>half4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>half</name> <name>half8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>half</name> <name>half16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_khr_fp64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__OPENCL_C_VERSION__</name> <operator>&lt;</operator> <name>CL_VERSION_1_2</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>OPENCL</name> <name>EXTENSION</name> <name>cl_khr_fp64</name> <name>:</name> <name>enable</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>double</name> <name>double2</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(2)));</typedef>
<typedef>typedef <type><name>double</name> <name>double3</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(3)));</typedef>
<typedef>typedef <type><name>double</name> <name>double4</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(4)));</typedef>
<typedef>typedef <type><name>double</name> <name>double8</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(8)));</typedef>
<typedef>typedef <type><name>double</name> <name>double16</name></type> <name>__attribute__</name>((<name>ext_vector_type</name>(16)));</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENCL_CPP_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>nullptr</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENCL_C_VERSION__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL</name></cpp:macro> <cpp:value>((void*)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXFLOAT</name></cpp:macro> <cpp:value>0x1.fffffep127f</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUGE_VALF</name></cpp:macro> <cpp:value>(__builtin_huge_valf())</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUGE_VAL</name></cpp:macro> <cpp:value>(__builtin_huge_val())</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFINITY</name></cpp:macro> <cpp:value>(__builtin_inff())</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN</name></cpp:macro> <cpp:value>as_float(INT_MAX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FP_ILOGB0</name></cpp:macro> <cpp:value>INT_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FP_ILOGBNAN</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_DIG</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MANT_DIG</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MAX_10_EXP</name></cpp:macro> <cpp:value>+38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MAX_EXP</name></cpp:macro> <cpp:value>+128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MIN_10_EXP</name></cpp:macro> <cpp:value>-37</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MIN_EXP</name></cpp:macro> <cpp:value>-125</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MAX</name></cpp:macro> <cpp:value>0x1.fffffep127f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_MIN</name></cpp:macro> <cpp:value>0x1.0p-126f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_EPSILON</name></cpp:macro> <cpp:value>0x1.0p-23f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_E_F</name></cpp:macro> <cpp:value>2.71828182845904523536028747135266250f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOG2E_F</name></cpp:macro> <cpp:value>1.44269504088896340735992468100189214f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOG10E_F</name></cpp:macro> <cpp:value>0.434294481903251827651128918916605082f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN2_F</name></cpp:macro> <cpp:value>0.693147180559945309417232121458176568f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN10_F</name></cpp:macro> <cpp:value>2.30258509299404568401799145468436421f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_F</name></cpp:macro> <cpp:value>3.14159265358979323846264338327950288f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_2_F</name></cpp:macro> <cpp:value>1.57079632679489661923132169163975144f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_4_F</name></cpp:macro> <cpp:value>0.785398163397448309615660845819875721f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_1_PI_F</name></cpp:macro> <cpp:value>0.318309886183790671537767526745028724f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_2_PI_F</name></cpp:macro> <cpp:value>0.636619772367581343075535053490057448f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_2_SQRTPI_F</name></cpp:macro> <cpp:value>1.12837916709551257389615890312154517f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT2_F</name></cpp:macro> <cpp:value>1.41421356237309504880168872420969808f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT1_2_F</name></cpp:macro> <cpp:value>0.707106781186547524400844362104849039f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MANT_DIG</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>+308</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>+1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MIN_10_EXP</name></cpp:macro> <cpp:value>-307</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MIN_EXP</name></cpp:macro> <cpp:value>-1021</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX</name></cpp:macro> <cpp:value>0x1.fffffffffffffp1023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MIN</name></cpp:macro> <cpp:value>0x1.0p-1022</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_EPSILON</name></cpp:macro> <cpp:value>0x1.0p-52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_E</name></cpp:macro> <cpp:value>0x1.5bf0a8b145769p+1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOG2E</name></cpp:macro> <cpp:value>0x1.71547652b82fep+0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOG10E</name></cpp:macro> <cpp:value>0x1.bcb7b1526e50ep-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN2</name></cpp:macro> <cpp:value>0x1.62e42fefa39efp-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN10</name></cpp:macro> <cpp:value>0x1.26bb1bbb55516p+1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>0x1.921fb54442d18p+1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_2</name></cpp:macro> <cpp:value>0x1.921fb54442d18p+0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_4</name></cpp:macro> <cpp:value>0x1.921fb54442d18p-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_1_PI</name></cpp:macro> <cpp:value>0x1.45f306dc9c883p-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_2_PI</name></cpp:macro> <cpp:value>0x1.45f306dc9c883p-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_2_SQRTPI</name></cpp:macro> <cpp:value>0x1.20dd750429b6dp+0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT2</name></cpp:macro> <cpp:value>0x1.6a09e667f3bcdp+0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT1_2</name></cpp:macro> <cpp:value>0x1.6a09e667f3bcdp-1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_khr_fp16</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_DIG</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_MANT_DIG</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_MAX_10_EXP</name></cpp:macro> <cpp:value>+4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_MAX_EXP</name></cpp:macro> <cpp:value>+16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_MIN_10_EXP</name></cpp:macro> <cpp:value>-4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_MIN_EXP</name></cpp:macro> <cpp:value>-13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_MAX</name></cpp:macro> <cpp:value>((0x1.ffcp15h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_MIN</name></cpp:macro> <cpp:value>((0x1.0p-14h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_EPSILON</name></cpp:macro> <cpp:value>((0x1.0p-10h))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_E_H</name></cpp:macro> <cpp:value>2.71828182845904523536028747135266250h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOG2E_H</name></cpp:macro> <cpp:value>1.44269504088896340735992468100189214h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOG10E_H</name></cpp:macro> <cpp:value>0.434294481903251827651128918916605082h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN2_H</name></cpp:macro> <cpp:value>0.693147180559945309417232121458176568h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN10_H</name></cpp:macro> <cpp:value>2.30258509299404568401799145468436421h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_H</name></cpp:macro> <cpp:value>3.14159265358979323846264338327950288h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_2_H</name></cpp:macro> <cpp:value>1.57079632679489661923132169163975144h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_4_H</name></cpp:macro> <cpp:value>0.785398163397448309615660845819875721h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_1_PI_H</name></cpp:macro> <cpp:value>0.318309886183790671537767526745028724h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_2_PI_H</name></cpp:macro> <cpp:value>0.636619772367581343075535053490057448h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_2_SQRTPI_H</name></cpp:macro> <cpp:value>1.12837916709551257389615890312154517h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT2_H</name></cpp:macro> <cpp:value>1.41421356237309504880168872420969808h</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT1_2_H</name></cpp:macro> <cpp:value>0.707106781186547524400844362104849039h</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_BIT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHAR_MAX</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHAR_MIN</name></cpp:macro> <cpp:value>(-128)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHAR_MAX</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_MAX</name></cpp:macro> <cpp:value>SCHAR_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHAR_MIN</name></cpp:macro> <cpp:value>SCHAR_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USHRT_MAX</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHRT_MAX</name></cpp:macro> <cpp:value>32767</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHRT_MIN</name></cpp:macro> <cpp:value>(-32768)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_MAX</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MAX</name></cpp:macro> <cpp:value>2147483647</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MIN</name></cpp:macro> <cpp:value>(-2147483647-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULONG_MAX</name></cpp:macro> <cpp:value>0xffffffffffffffffUL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MAX</name></cpp:macro> <cpp:value>0x7fffffffffffffffL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MIN</name></cpp:macro> <cpp:value>(-0x7fffffffffffffffL-1)</cpp:value></cpp:define>




<typedef>typedef <type><name>uint</name></type> <name>cl_mem_fence_flags</name>;</typedef>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_LOCAL_MEM_FENCE</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_GLOBAL_MEM_FENCE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENCL_CPP_VERSION__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__OPENCL_C_VERSION__</name> <operator>&gt;=</operator> <name>CL_VERSION_2_0</name><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><enum>enum <name>memory_scope</name> <block>{
<decl><name>memory_scope_work_item</name> <init>= <expr><name>__OPENCL_MEMORY_SCOPE_WORK_ITEM</name></expr></init></decl>,
<decl><name>memory_scope_work_group</name> <init>= <expr><name>__OPENCL_MEMORY_SCOPE_WORK_GROUP</name></expr></init></decl>,
<decl><name>memory_scope_device</name> <init>= <expr><name>__OPENCL_MEMORY_SCOPE_DEVICE</name></expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__opencl_c_atomic_scope_all_devices</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>memory_scope_all_svm_devices</name> <init>= <expr><name>__OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES</name></expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__OPENCL_C_VERSION__</name> <operator>&gt;=</operator> <name>CL_VERSION_3_0</name><operator>)</operator></expr></cpp:if>
<decl><name>memory_scope_all_devices</name> <init>= <expr><name>memory_scope_all_svm_devices</name></expr></init></decl>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_intel_subgroups</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>cl_khr_subgroups</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>memory_scope_sub_group</name> <init>= <expr><name>__OPENCL_MEMORY_SCOPE_SUB_GROUP</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></enum></type> <name>memory_scope</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_IMAGE_MEM_FENCE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ATOMIC_VAR_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_VAR_INIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_FLAG_INIT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>


<typedef>typedef <type><enum>enum <name>memory_order</name>
<block>{
<decl><name>memory_order_relaxed</name> <init>= <expr><name>__ATOMIC_RELAXED</name></expr></init></decl>,
<decl><name>memory_order_acquire</name> <init>= <expr><name>__ATOMIC_ACQUIRE</name></expr></init></decl>,
<decl><name>memory_order_release</name> <init>= <expr><name>__ATOMIC_RELEASE</name></expr></init></decl>,
<decl><name>memory_order_acq_rel</name> <init>= <expr><name>__ATOMIC_ACQ_REL</name></expr></init></decl>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__opencl_c_atomic_order_seq_cst</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl><name>memory_order_seq_cst</name> <init>= <expr><name>__ATOMIC_SEQ_CST</name></expr></init></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></enum></type> <name>memory_order</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ADDRESS_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ADDRESS_CLAMP_TO_EDGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ADDRESS_CLAMP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ADDRESS_REPEAT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ADDRESS_MIRRORED_REPEAT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_NORMALIZED_COORDS_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_NORMALIZED_COORDS_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_FILTER_NEAREST</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_FILTER_LINEAR</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_khr_gl_msaa_sharing</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>OPENCL</name> <name>EXTENSION</name> <name>cl_khr_gl_msaa_sharing</name> <name>:</name> <name>enable</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_SNORM_INT8</name></cpp:macro> <cpp:value>0x10D0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_SNORM_INT16</name></cpp:macro> <cpp:value>0x10D1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNORM_INT8</name></cpp:macro> <cpp:value>0x10D2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNORM_INT16</name></cpp:macro> <cpp:value>0x10D3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNORM_SHORT_565</name></cpp:macro> <cpp:value>0x10D4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNORM_SHORT_555</name></cpp:macro> <cpp:value>0x10D5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNORM_INT_101010</name></cpp:macro> <cpp:value>0x10D6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_SIGNED_INT8</name></cpp:macro> <cpp:value>0x10D7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_SIGNED_INT16</name></cpp:macro> <cpp:value>0x10D8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_SIGNED_INT32</name></cpp:macro> <cpp:value>0x10D9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNSIGNED_INT8</name></cpp:macro> <cpp:value>0x10DA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNSIGNED_INT16</name></cpp:macro> <cpp:value>0x10DB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNSIGNED_INT32</name></cpp:macro> <cpp:value>0x10DC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_HALF_FLOAT</name></cpp:macro> <cpp:value>0x10DD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_FLOAT</name></cpp:macro> <cpp:value>0x10DE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_UNORM_INT24</name></cpp:macro> <cpp:value>0x10DF</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_R</name></cpp:macro> <cpp:value>0x10B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_A</name></cpp:macro> <cpp:value>0x10B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_RG</name></cpp:macro> <cpp:value>0x10B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_RA</name></cpp:macro> <cpp:value>0x10B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_RGB</name></cpp:macro> <cpp:value>0x10B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_RGBA</name></cpp:macro> <cpp:value>0x10B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_BGRA</name></cpp:macro> <cpp:value>0x10B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ARGB</name></cpp:macro> <cpp:value>0x10B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_INTENSITY</name></cpp:macro> <cpp:value>0x10B8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_LUMINANCE</name></cpp:macro> <cpp:value>0x10B9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_Rx</name></cpp:macro> <cpp:value>0x10BA</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_RGx</name></cpp:macro> <cpp:value>0x10BB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_RGBx</name></cpp:macro> <cpp:value>0x10BC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_DEPTH</name></cpp:macro> <cpp:value>0x10BD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_DEPTH_STENCIL</name></cpp:macro> <cpp:value>0x10BE</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__OPENCL_C_VERSION__</name> <operator>&gt;=</operator> <name>CL_VERSION_2_0</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_sRGB</name></cpp:macro> <cpp:value>0x10BF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_sRGBx</name></cpp:macro> <cpp:value>0x10C0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_sRGBA</name></cpp:macro> <cpp:value>0x10C1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_sBGRA</name></cpp:macro> <cpp:value>0x10C2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ABGR</name></cpp:macro> <cpp:value>0x10C3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENCL_CPP_VERSION__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__OPENCL_C_VERSION__</name> <operator>&gt;=</operator> <name>CL_VERSION_2_0</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_NULL_RESERVE_ID</name></cpp:macro> <cpp:value>(__builtin_astype(((void*)(__SIZE_MAX__)), reserve_id_t))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_COMPLETE</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_RUNNING</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_SUBMITTED</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CL_QUEUED</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ENQUEUE_FAILURE</name></cpp:macro> <cpp:value>-101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_INVALID_QUEUE</name></cpp:macro> <cpp:value>-102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_INVALID_NDRANGE</name></cpp:macro> <cpp:value>-160</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_INVALID_EVENT_WAIT_LIST</name></cpp:macro> <cpp:value>-57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_DEVICE_QUEUE_FULL</name></cpp:macro> <cpp:value>-161</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_INVALID_ARG_SIZE</name></cpp:macro> <cpp:value>-51</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_EVENT_ALLOCATION_FAILURE</name></cpp:macro> <cpp:value>-100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_OUT_OF_RESOURCES</name></cpp:macro> <cpp:value>-5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_NULL_QUEUE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_NULL_EVENT</name></cpp:macro> <cpp:value>(__builtin_astype(((__SIZE_MAX__)), clk_event_t))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ENQUEUE_FLAGS_NO_WAIT</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ENQUEUE_FLAGS_WAIT_KERNEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_ENQUEUE_FLAGS_WAIT_WORK_GROUP</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>kernel_enqueue_flags_t</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>clk_profiling_info</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_PROFILING_COMMAND_EXEC_TIME</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_WORK_DIM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>workDimension</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>globalWorkOffset</name><index>[<expr><name>MAX_WORK_DIM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>globalWorkSize</name><index>[<expr><name>MAX_WORK_DIM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>localWorkSize</name><index>[<expr><name>MAX_WORK_DIM</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ndrange_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_char</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), char)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_char2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), char2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_char3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), char3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_char4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), char4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_char8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), char8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_char16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), char16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uchar</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uchar)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uchar2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uchar2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uchar3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uchar3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uchar4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uchar4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uchar8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uchar8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uchar16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uchar16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_short</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), short)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_short2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), short2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_short3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), short3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_short4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), short4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_short8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), short8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_short16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), short16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ushort</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ushort)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ushort2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ushort2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ushort3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ushort3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ushort4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ushort4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ushort8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ushort8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ushort16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ushort16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_int</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_int2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), int2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_int3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), int3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_int4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), int4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_int8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), int8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_int16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), int16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uint</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uint)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uint2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uint2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uint3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uint3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uint4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uint4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uint8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uint8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uint16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uint16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_long</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), long)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_long2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), long2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_long3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), long3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_long4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), long4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_long8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), long8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_long16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), long16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ulong</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ulong)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ulong2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ulong2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ulong3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ulong3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ulong4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ulong4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ulong8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ulong8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ulong16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ulong16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_float</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), float)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_float2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), float2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_float3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), float3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_float4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), float4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_float8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), float8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_float16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), float16)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_khr_fp64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_double</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), double)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_double2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), double2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_double3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), double3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_double4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), double4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_double8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), double8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_double16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), double16)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_khr_fp16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_half</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), half)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_half2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), half2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_half3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), half3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_half4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), half4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_half8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), half8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_half16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), half16)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_size_t</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), size_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_ptrdiff_t</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), ptrdiff_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_intptr_t</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), intptr_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>as_uintptr_t</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_astype((x), uintptr_t)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__kernel_exec</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>typen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__kernel __attribute__((work_group_size_hint(X, 1, 1))) __attribute__((vec_type_hint(typen)))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kernel_exec</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>typen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__kernel __attribute__((work_group_size_hint(X, 1, 1))) __attribute__((vec_type_hint(typen)))</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OPENCL_CPP_VERSION__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__OPENCL_C_VERSION__</name> <operator>&gt;=</operator> <name>CL_VERSION_1_2</name><operator>)</operator></expr></cpp:if>


<function_decl><type><name>int</name></type> <name>printf</name><parameter_list>(<parameter><decl><type><name>__constant</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> __attribute__<parameter_list>(<parameter/></parameter_list>(format<parameter_list>(<parameter><decl><type><name>printf</name></type></decl></parameter>, <parameter/></parameter_list>1<operator>,</operator> 2</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>cl_intel_device_side_avc_motion_estimation</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MAJOR_16x16_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MAJOR_16x8_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MAJOR_8x16_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MAJOR_8x8_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MINOR_8x8_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MINOR_8x4_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MINOR_4x8_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MINOR_4x4_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MAJOR_FORWARD_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MAJOR_BACKWARD_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_MAJOR_BIDIRECTIONAL_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_ALL_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_16x16_INTEL</name></cpp:macro> <cpp:value>0x7E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_16x8_INTEL</name></cpp:macro> <cpp:value>0x7D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_8x16_INTEL</name></cpp:macro> <cpp:value>0x7B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_8x8_INTEL</name></cpp:macro> <cpp:value>0x77</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_8x4_INTEL</name></cpp:macro> <cpp:value>0x6F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_4x8_INTEL</name></cpp:macro> <cpp:value>0x5F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_PARTITION_MASK_4x4_INTEL</name></cpp:macro> <cpp:value>0x3F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SLICE_TYPE_PRED_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SLICE_TYPE_BPRED_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SLICE_TYPE_INTRA_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_EXHAUSTIVE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_SMALL_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_TINY_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_EXTRA_TINY_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_DIAMOND_INTEL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_LARGE_DIAMOND_INTEL</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_RESERVED0_INTEL</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_RESERVED1_INTEL</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SEARCH_WINDOW_CUSTOM_INTEL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SAD_ADJUST_MODE_NONE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SAD_ADJUST_MODE_HAAR_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SUBPIXEL_MODE_INTEGER_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SUBPIXEL_MODE_HPEL_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SUBPIXEL_MODE_QPEL_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_COST_PRECISION_QPEL_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_COST_PRECISION_HPEL_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_COST_PRECISION_PEL_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_COST_PRECISION_DPEL_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BIDIR_WEIGHT_QUARTER_INTEL</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BIDIR_WEIGHT_THIRD_INTEL</name></cpp:macro> <cpp:value>0x15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BIDIR_WEIGHT_HALF_INTEL</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BIDIR_WEIGHT_TWO_THIRD_INTEL</name></cpp:macro> <cpp:value>0x2B</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BIDIR_WEIGHT_THREE_QUARTER_INTEL</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BORDER_REACHED_LEFT_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BORDER_REACHED_RIGHT_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BORDER_REACHED_TOP_INTEL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BORDER_REACHED_BOTTOM_INTEL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_16x16_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_8x8_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_4x4_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_PARTITION_16x16_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_PARTITION_8x8_INTEL</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_16x16_FORWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x1 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_16x16_BACKWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x2 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_16x16_DUAL_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x3 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_FORWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x55 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_BACKWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0xAA &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_DUAL_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0xFF &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_0_FORWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x1 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_0_BACKWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x2 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_1_FORWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x1 &lt;&lt; 26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_1_BACKWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x2 &lt;&lt; 26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_2_FORWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x1 &lt;&lt; 28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_2_BACKWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x2 &lt;&lt; 28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_3_FORWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x1 &lt;&lt; 30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_SKIP_BLOCK_8x8_3_BACKWARD_ENABLE_INTEL</name></cpp:macro> <cpp:value>(0x2 &lt;&lt; 30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BLOCK_BASED_SKIP_4x4_INTEL</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_BLOCK_BASED_SKIP_8x8_INTEL</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_LUMA_PARTITION_MASK_ALL_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_LUMA_PARTITION_MASK_16x16_INTEL</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_LUMA_PARTITION_MASK_8x8_INTEL</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_LUMA_PARTITION_MASK_4x4_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_NEIGHBOR_LEFT_MASK_ENABLE_INTEL</name></cpp:macro> <cpp:value>0x60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_NEIGHBOR_UPPER_MASK_ENABLE_INTEL</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_NEIGHBOR_UPPER_RIGHT_MASK_ENABLE_INTEL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTRA_NEIGHBOR_UPPER_LEFT_MASK_ENABLE_INTEL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_DC_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_LEFT_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_RIGHT_INTEL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_PLANE_INTEL</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_RIGHT_INTEL</name></cpp:macro> <cpp:value>0x5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_DOWN_INTEL</name></cpp:macro> <cpp:value>0x6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_LEFT_INTEL</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_UP_INTEL</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_CHROMA_PREDICTOR_MODE_DC_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_CHROMA_PREDICTOR_MODE_HORIZONTAL_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_CHROMA_PREDICTOR_MODE_VERTICAL_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_CHROMA_PREDICTOR_MODE_PLANE_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_FRAME_FORWARD_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_FRAME_BACKWARD_INTEL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_FRAME_DUAL_INTEL</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTERLACED_SCAN_TOP_FIELD_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INTERLACED_SCAN_BOTTOM_FIELD_INTEL</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_ME_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_IME_PAYLOAD_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_REF_PAYLOAD_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_SIC_PAYLOAD_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_IME_RESULT_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_REF_RESULT_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_SIC_RESULT_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_IME_RESULT_SINGLE_REFERENCE_STREAMOUT_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_IME_RESULT_SINGLE_REFERENCE_STREAMIN_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_IME_RESULT_DUAL_REFERENCE_STREAMOUT_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLK_AVC_IME_RESULT_DUAL_REFERENCE_STREAMIN_INITIALIZE_INTEL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>OPENCL</name> <name>EXTENSION</name> <name>all</name> <name>:</name> <name>disable</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
