<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Serialization/ASTReaderInternals.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_SERIALIZATION_ASTREADERINTERNALS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_SERIALIZATION_ASTREADERINTERNALS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MultiOnDiskHashTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTBitCodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/OnDiskHashTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<struct_decl>struct <name>HeaderFileInfo</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>reader</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>ASTDeclContextNameLookupTrait</name> <block>{<block_content>
<decl_stmt><decl><type><name>ASTReader</name> <modifier>&amp;</modifier></type><name>Reader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ModuleFile</name> <modifier>&amp;</modifier></type><name>F</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MaxTables</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>data_type</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DeclID</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<struct>struct <name>data_type_builder</name> <block>{
<decl_stmt><decl><type><name>data_type</name> <modifier>&amp;</modifier></type><name>Data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>DeclID</name></expr></argument>&gt;</argument_list></name> <name>Found</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>data_type_builder</name><argument_list>(<argument><expr><name>data_type</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Data</name><argument_list>(<argument>D</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>insert</name><argument_list>(<argument>DeclID ID</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><call><name><name>Found</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Data</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>I</name> <range>: <expr><name>Found</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>ID</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
<expr_stmt/>}</block_content>


Found.insert(Data.begin(</block></if></if_stmt>)</block_content></block><operator>,</operator> <expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></expr_stmt></if></if_stmt>)</block></expr>;</expr_stmt>
}</block>

<decl>if <argument_list>(<argument><expr><call><name><name>Found</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list>
<name><name>Data</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></decl>;</struct>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>hash_value_type</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>offset_type</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>file_type</name> <init>= <expr><name>ModuleFile</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>external_key_type</name> <init>= <expr><name>DeclarationName</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>internal_key_type</name> <init>= <expr><name>DeclarationNameKey</name></expr></init></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>ASTDeclContextNameLookupTrait</name><argument_list>(<argument><expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr></argument>, <argument><expr><name>ModuleFile</name> <operator>&amp;</operator><name>F</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>Reader</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>F</name><argument_list>(<argument>F</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>EqualKey</name><argument_list>(<argument>const internal_key_type &amp;a</argument>, <argument>const internal_key_type &amp;b</argument>)</argument_list></macro> <block>{
<return>return <expr><name>a</name> <operator>==</operator> <name>b</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>hash_value_type</name></type> <name>ComputeHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>internal_key_type</name> <modifier>&amp;</modifier></type><name>Key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Key</name><operator>.</operator><name>getHash</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>internal_key_type</name></type> <name>GetInternalKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>external_key_type</name> <modifier>&amp;</modifier></type><name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Name</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>ReadKeyDataLength</name><argument_list>(<argument>const unsigned char *&amp;d</argument>)</argument_list></macro></expr>;</expr_stmt>

<function_decl><type><name>internal_key_type</name></type> <name>ReadKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ReadDataInto</name><parameter_list>(<parameter><decl><type><name>internal_key_type</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>DataLen</name></decl></parameter>, <parameter><decl><type><name>data_type_builder</name> <modifier>&amp;</modifier></type><name>Val</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MergeDataInto</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>data_type</name> <modifier>&amp;</modifier></type><name>From</name></decl></parameter>, <parameter><decl><type><name>data_type_builder</name> <modifier>&amp;</modifier></type><name>To</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>To</name><operator>.</operator><name>Data</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>To</name><operator>.</operator><name>Data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>From</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>DeclID</name></type> <name>ID</name> <range>: <expr><name>From</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>To</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function_decl><type><name>file_type</name></type> <name>ReadFileRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>DeclContextLookupTable</name> <block>{
<decl_stmt><decl><type><name><name>MultiOnDiskHashTable</name><argument_list type="generic">&lt;<argument><expr><name>ASTDeclContextNameLookupTrait</name></expr></argument>&gt;</argument_list></name></type> <name>Table</name></decl>;</decl_stmt>
}</block>;</struct>









<decl_stmt><decl><type><name>class</name></type> <name>ASTIdentifierLookupTraitBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>external_key_type</name> <init>= <expr><name>StringRef</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>internal_key_type</name> <init>= <expr><name>StringRef</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>hash_value_type</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>offset_type</name> <init>= <expr><name>unsigned</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>EqualKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>internal_key_type</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>internal_key_type</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>a</name> <operator>==</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>hash_value_type</name></type> <name>ComputeHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>internal_key_type</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>ReadKeyDataLength</name><argument_list>(<argument>const unsigned char*&amp; d</argument>)</argument_list></macro></expr>;</expr_stmt>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>internal_key_type</name><modifier>&amp;</modifier></type>
<name>GetInternalKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>external_key_type</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>x</name></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>external_key_type</name><modifier>&amp;</modifier></type>
<name>GetExternalKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>internal_key_type</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>x</name></expr>;</return> </block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>internal_key_type</name></type> <name>ReadKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ASTIdentifierLookupTrait</name> <range>: <expr><name>public</name> <name>ASTIdentifierLookupTraitBase</name> <block>{
<expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr>;
<expr><name>ModuleFile</name> <operator>&amp;</operator><name>F</name></expr>;




<expr><name>IdentifierInfo</name> <operator>*</operator><name>KnownII</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>data_type</name> <operator>=</operator> <name>IdentifierInfo</name> <operator>*</operator></expr>;

<expr><call><name>ASTIdentifierLookupTrait</name><argument_list>(<argument><expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr></argument>, <argument><expr><name>ModuleFile</name> <operator>&amp;</operator><name>F</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>II</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>Reader</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>F</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>, <macro><name>KnownII</name><argument_list>(<argument>II</argument>)</argument_list></macro> <expr><block>{}</block>

<name>data_type</name> <macro><name>ReadData</name><argument_list>(<argument>const internal_key_type&amp; k</argument>,
<argument>const unsigned char* d</argument>,
<argument>unsigned DataLen</argument>)</argument_list></macro></expr>;

<expr><name>IdentID</name> <macro><name>ReadIdentifierID</name><argument_list>(<argument>const unsigned char *d</argument>)</argument_list></macro></expr>;

<expr><name>ASTReader</name> <operator>&amp;</operator><macro><name>getReader</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Reader</name></expr>;</return> }</block>
}</expr>;



<expr><name>using</name> <name>ASTIdentifierLookupTable</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>OnDiskIterableChainedHashTable</name><argument_list type="generic">&lt;<argument><expr><name>ASTIdentifierLookupTrait</name></expr></argument>&gt;</argument_list></name></expr>;



<expr><name>class</name> <name>ASTSelectorLookupTrait</name> <block>{
<expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr>;
<expr><name>ModuleFile</name> <operator>&amp;</operator><name>F</name></expr>;

<expr><name>public</name><operator>:</operator>
struct <name>data_type</name> <block>{
<expr><name>SelectorID</name> <name>ID</name></expr>;
<expr><name>unsigned</name> <name>InstanceBits</name></expr>;
<expr><name>unsigned</name> <name>FactoryBits</name></expr>;
<expr><name>bool</name> <name>InstanceHasMoreThanOneDecl</name></expr>;
<expr><name>bool</name> <name>FactoryHasMoreThanOneDecl</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>Instance</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMethodDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name> <name>Factory</name></expr>;
}</block></expr>;

<expr><name>using</name> <name>external_key_type</name> <operator>=</operator> <name>Selector</name></expr>;
<expr><name>using</name> <name>internal_key_type</name> <operator>=</operator> <name>external_key_type</name></expr>;
<expr><name>using</name> <name>hash_value_type</name> <operator>=</operator> <name>unsigned</name></expr>;
<expr><name>using</name> <name>offset_type</name> <operator>=</operator> <name>unsigned</name></expr>;

<expr><call><name>ASTSelectorLookupTrait</name><argument_list>(<argument><expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr></argument>, <argument><expr><name>ModuleFile</name> <operator>&amp;</operator><name>F</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>Reader</name></expr></argument>)</argument_list></call></expr>, <macro><name>F</name><argument_list>(<argument>F</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>EqualKey</name><argument_list>(<argument>const internal_key_type&amp; a</argument>,
<argument>const internal_key_type&amp; b</argument>)</argument_list></macro> <block>{
<return>return <expr><name>a</name> <operator>==</operator> <name>b</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>hash_value_type</name> <macro><name>ComputeHash</name><argument_list>(<argument>Selector Sel</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>internal_key_type</name><operator>&amp;</operator>
<macro><name>GetInternalKey</name><argument_list>(<argument>const external_key_type&amp; x</argument>)</argument_list></macro> <block>{ <return>return <expr><name>x</name></expr>;</return> }</block>

<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>ReadKeyDataLength</name><argument_list>(<argument>const unsigned char*&amp; d</argument>)</argument_list></macro></expr>;

<expr><name>internal_key_type</name> <macro><name>ReadKey</name><argument_list>(<argument>const unsigned char* d</argument>, <argument>unsigned</argument>)</argument_list></macro></expr>;
<expr><name>data_type</name> <macro><name>ReadData</name><argument_list>(<argument>Selector</argument>, <argument>const unsigned char* d</argument>, <argument>unsigned DataLen</argument>)</argument_list></macro></expr>;
}</block></expr>;


<expr><name>using</name> <name>ASTSelectorLookupTable</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>OnDiskChainedHashTable</name><argument_list type="generic">&lt;<argument><expr><name>ASTSelectorLookupTrait</name></expr></argument>&gt;</argument_list></name></expr>;










<expr><name>class</name> <name>HeaderFileInfoTrait</name> <block>{
<expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr>;
<expr><name>ModuleFile</name> <operator>&amp;</operator><name>M</name></expr>;
<expr><name>HeaderSearch</name> <operator>*</operator><name>HS</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>FrameworkStrings</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>external_key_type</name> <operator>=</operator> <specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr>;

struct <expr><name>internal_key_type</name> <block>{
<expr><name>off_t</name> <name>Size</name></expr>;
<expr><name>time_t</name> <name>ModTime</name></expr>;
<expr><name>StringRef</name> <name>Filename</name></expr>;
<expr><name>bool</name> <name>Imported</name></expr>;
}</block></expr>;

<expr><name>using</name> <name>internal_key_ref</name> <operator>=</operator> <specifier>const</specifier> <name>internal_key_type</name> <operator>&amp;</operator></expr>;

<expr><name>using</name> <name>data_type</name> <operator>=</operator> <name>HeaderFileInfo</name></expr>;
<expr><name>using</name> <name>hash_value_type</name> <operator>=</operator> <name>unsigned</name></expr>;
<expr><name>using</name> <name>offset_type</name> <operator>=</operator> <name>unsigned</name></expr>;

<expr><call><name>HeaderFileInfoTrait</name><argument_list>(<argument><expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr></argument>, <argument><expr><name>ModuleFile</name> <operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>HeaderSearch</name> <operator>*</operator><name>HS</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>FrameworkStrings</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>Reader</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>M</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>HS</name><argument_list>(<argument><expr><name>HS</name></expr></argument>)</argument_list></call></expr>, <macro><name>FrameworkStrings</name><argument_list>(<argument>FrameworkStrings</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>hash_value_type</name> <macro><name>ComputeHash</name><argument_list>(<argument>internal_key_ref ikey</argument>)</argument_list></macro></expr>;
<expr><name>internal_key_type</name> <call><name>GetInternalKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>FE</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <macro><name>EqualKey</name><argument_list>(<argument>internal_key_ref a</argument>, <argument>internal_key_ref b</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>ReadKeyDataLength</name><argument_list>(<argument>const unsigned char*&amp; d</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>internal_key_type</name> <macro><name>ReadKey</name><argument_list>(<argument>const unsigned char *d</argument>, <argument>unsigned</argument>)</argument_list></macro></expr>;

<expr><name>data_type</name> <macro><name>ReadData</name><argument_list>(<argument>internal_key_ref</argument>,<argument>const unsigned char *d</argument>, <argument>unsigned DataLen</argument>)</argument_list></macro></expr>;
}</block></expr>;


<expr><name>using</name> <name>HeaderFileInfoLookupTable</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>OnDiskChainedHashTable</name><argument_list type="generic">&lt;<argument><expr><name>HeaderFileInfoTrait</name></expr></argument>&gt;</argument_list></name></expr>;

}</block></expr></range></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
