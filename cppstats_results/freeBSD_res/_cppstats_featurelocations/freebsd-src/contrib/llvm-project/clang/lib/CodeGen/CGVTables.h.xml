<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGVTables.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGVTABLES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGVTABLES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/BaseSubobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/GlobalDecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/VTableBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/ABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/GlobalVariable.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstantArrayBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstantStructBuilder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenVTables</name> <block>{<block_content>
<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTableContextBase</name> <modifier>*</modifier></type><name>VTContext</name></decl>;</decl_stmt>


<typedef>typedef <expr_stmt><expr><name>VTableLayout</name><operator>::</operator><name>AddressPointsMapTy</name> <name>VTableAddressPointsMapTy</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>BaseSubobject</name></expr></argument>&gt;</argument_list></name> <name>BaseSubobjectPairTy</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobjectPairTy</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>SubVTTIndiciesMapTy</name></expr>;</expr_stmt></typedef>


<decl_stmt><decl><type><name>SubVTTIndiciesMapTy</name></type> <name>SubVTTIndicies</name></decl>;</decl_stmt>

<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>BaseSubobjectPairTy</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name>
<name>SecondaryVirtualPointerIndicesMapTy</name></expr>;</expr_stmt></typedef>



<decl_stmt><decl><type><name>SecondaryVirtualPointerIndicesMapTy</name></type> <name>SecondaryVirtualPointerIndices</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>PureVirtualFn</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>DeletedVirtualFn</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>maybeEmitThunk</name><argument_list>(<argument>GlobalDecl GD</argument>,
<argument>const ThunkInfo &amp;ThunkAdjustments</argument>,
<argument>bool ForVTable</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>addVTableComponent</name><argument_list>(<argument><expr><name>ConstantArrayBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>VTableLayout</name> <operator>&amp;</operator><name>layout</name></expr></argument>, <argument><expr><name>unsigned</name> <name>componentIndex</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>rtti</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>&amp;</operator><name>nextVTableThunkIndex</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>vtableAddressPoint</name></expr></argument>,
<argument><expr><name>bool</name> <name>vtableHasLocalLinkage</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>addRelativeComponent</name><argument_list>(<argument><expr><name>ConstantArrayBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>component</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>vtableAddressPoint</name></expr></argument>,
<argument><expr><name>bool</name> <name>vtableHasLocalLinkage</name></expr></argument>,
<argument><expr><name>bool</name> <name>isCompleteDtor</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator>
<macro><name>getOrCreateRelativeStub</name><argument_list>(<argument>llvm::Function *func</argument>,
<argument>llvm::GlobalValue::LinkageTypes stubLinkage</argument>,
<argument>bool isCompleteDtor</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>useRelativeLayout</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>getVTableComponentType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>public</name>:</label>


<decl_stmt><decl><type><name>void</name></type> <name>createVTableInitializer</name><argument_list>(<argument><expr><name>ConstantStructBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>VTableLayout</name> <operator>&amp;</operator><name>layout</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>rtti</name></expr></argument>,
<argument><expr><name>bool</name> <name>vtableHasLocalLinkage</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CodeGenVTables</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>ItaniumVTableContext</name> <modifier>&amp;</modifier></type><name>getItaniumVTableContext</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ItaniumVTableContext</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MicrosoftVTableContext</name> <modifier>&amp;</modifier></type><name>getMicrosoftVTableContext</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>MicrosoftVTableContext</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>VTContext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name>uint64_t</name></type> <name>getSubVTTIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>, <parameter><decl><type><name>BaseSubobject</name></type> <name>Base</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>uint64_t</name></type> <name>getSecondaryVirtualPointerIndex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><name>BaseSubobject</name></type> <name>Base</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator>
<macro><name>GenerateConstructionVTable</name><argument_list>(<argument>const CXXRecordDecl *RD</argument>, <argument>const BaseSubobject &amp;Base</argument>,
<argument>bool BaseIsVirtual</argument>,
<argument>llvm::GlobalVariable::LinkageTypes Linkage</argument>,
<argument>VTableAddressPointsMapTy&amp; AddressPoints</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><call><name>GetAddrOfVTT</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>EmitVTTDefinition</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>VTT</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name><operator>::</operator><name>LinkageTypes</name> <name>Linkage</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>EmitThunks</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>GenerateClassData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isVTableExternal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><call><name>getVTableType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VTableLayout</name> <operator>&amp;</operator><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>GenerateRelativeVTableAlias</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>VTable</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>AliasNameRef</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
