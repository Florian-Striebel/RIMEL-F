<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/Arch/ARM.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_ARCH_ARM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_ARCH_ARM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TargetParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>arm</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getARMTargetCPU</name><argument_list>(<argument>StringRef CPU</argument>, <argument>llvm::StringRef Arch</argument>,
<argument>const llvm::Triple &amp;Triple</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>getARMArch</name><argument_list>(<argument>llvm::StringRef Arch</argument>, <argument>const llvm::Triple &amp;Triple</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>getARMCPUForMArch</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Arch</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>ARM</name><operator>::</operator><name>ArchKind</name> <macro><name>getLLVMArchKindForARM</name><argument_list>(<argument>StringRef CPU</argument>, <argument>StringRef Arch</argument>,
<argument>const llvm::Triple &amp;Triple</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>getLLVMArchSuffixForARM</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>CPU</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Arch</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>appendBE8LinkFlag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ReadTPMode</name> <block>{<block_content>
<expr_stmt><expr><name>Invalid</name></expr><operator>,</operator>
<expr><name>Soft</name></expr><operator>,</operator>
<expr><name>Cp15</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>FloatABI</name> <block>{<block_content>
<expr_stmt><expr><name>Invalid</name></expr><operator>,</operator>
<expr><name>Soft</name></expr><operator>,</operator>
<expr><name>SoftFP</name></expr><operator>,</operator>
<expr><name>Hard</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>FloatABI</name></type> <name>getDefaultFloatABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FloatABI</name></type> <name>getARMFloatABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FloatABI</name></type> <name>getARMFloatABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setFloatABIInTriple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReadTPMode</name></type> <name>getReadTPMode</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setArchNameInTriple</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>types</name><operator>::</operator><name>ID</name> <name>InputType</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>useAAPCSForMachO</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>getARMArchCPUFromArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>Arch</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <operator>&amp;</operator><name>CPU</name></expr></argument>,
<argument><expr><name>bool</name> <name>FromAs</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>getARMTargetFeatures</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Features</name></expr></argument>, <argument><expr><name>bool</name> <name>ForAS</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getARMSubArchVersionNumber</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isARMMProfile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isARMAProfile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
