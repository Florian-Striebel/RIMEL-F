<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/MSVC.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_MSVC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_MSVC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"AMDGPU.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Cuda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DebugInfoOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Compilation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>


<decl_stmt><decl><type><name>namespace</name></type> <name>visualstudio</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Linker</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Linker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"visualstudio::Linker"</literal></argument>, <argument><literal type="string">"linker"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isLinkJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MSVCToolChain</name> <range>: <expr><name>public</name> <name>ToolChain</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>MSVCToolChain</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;

<expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsIntegratedAssemblerDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>IsUnwindTablesDefault</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPICDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPICDefaultForced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;




<expr><name>codegenoptions</name><operator>::</operator><name>DebugInfoFormat</name> <macro><name>getDefaultDebugFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOSBinFormatMachO</name><argument_list>()</argument_list></call> <operator>?</operator> <name>codegenoptions</name><operator>::</operator><name>DIF_DWARF</name>
<operator>:</operator> <name>codegenoptions</name><operator>::</operator><name>DIF_CodeView</name></expr>;</return>
}</block>



<name>llvm</name><operator>::</operator><name>DebuggerKind</name> <macro><name>getDefaultDebuggerTuning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>DebuggerKind</name><operator>::</operator><name>Default</name></expr>;</return>
}</block>

enum <name>class</name> <name>SubDirectoryType</name> <block>{
<expr><name>Bin</name></expr>,
<expr><name>Include</name></expr>,
<expr><name>Lib</name></expr>,
}</block></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getSubDirectoryPath</name><argument_list>(<argument>SubDirectoryType Type</argument>,
<argument>llvm::StringRef SubdirParent</argument>,
<argument>llvm::Triple::ArchType TargetArch</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getSubDirectoryPath</name><argument_list>(<argument>SubDirectoryType Type</argument>,
<argument>llvm::StringRef SubdirParent = <literal type="string">""</literal></argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getSubDirectoryPath</name><argument_list>(<argument><expr><name>Type</name></expr></argument>, <argument><expr><name>SubdirParent</name></expr></argument>, <argument><expr><call><name>getArch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

enum <name>class</name> <name>ToolsetLayout</name> <block>{
<expr><name>OlderVS</name></expr>,
<expr><name>VS2017OrNewer</name></expr>,
<expr><name>DevDivInternal</name></expr>,
}</block></expr>;
<expr><name>bool</name> <macro><name>getIsVS2017OrNewer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>VSLayout</name> <operator>==</operator> <name>ToolsetLayout</name><operator>::</operator><name>VS2017OrNewer</name></expr>;</return> }</block>

<name>void</name>
<macro><name>AddClangSystemIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddClangCXXStdlibIncludeArgs</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddCudaIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddHIPIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>getWindowsSDKLibraryPath</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;Args</argument>, <argument>std::string &amp;path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>getUniversalCRTLibraryPath</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>std::string &amp;path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>useUniversalCRT</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>VersionTuple</name>
<macro><name>computeMSVCVersion</name><argument_list>(<argument>const Driver *D</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ComputeEffectiveClangTriple</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>types::ID InputType</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>SanitizerMask</name> <macro><name>getSupportedSanitizers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>printVerboseInfo</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>FoundMSVCInstall</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>VCToolChainPath</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name>
<macro><name>addClangTargetOptions</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>AddSystemIncludeWithSubfolder</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>const std::string &amp;folder</argument>,
<argument>const Twine &amp;subfolder1</argument>,
<argument>const Twine &amp;subfolder2 = <literal type="string">""</literal></argument>,
<argument>const Twine &amp;subfolder3 = <literal type="string">""</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name>string</name> <name>VCToolChainPath</name></expr>;
<expr><name>ToolsetLayout</name> <name>VSLayout</name> <operator>=</operator> <name>ToolsetLayout</name><operator>::</operator><name>OlderVS</name></expr>;
<expr><name>CudaInstallationDetector</name> <name>CudaInstallation</name></expr>;
<expr><name>RocmInstallationDetector</name> <name>RocmInstallation</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
