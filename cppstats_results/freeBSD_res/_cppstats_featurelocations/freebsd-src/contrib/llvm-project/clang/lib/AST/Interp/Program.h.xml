<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Program.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_PROGRAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_PROGRAM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Pointer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"PrimType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Record.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Source.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>RecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringLiteral</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>State</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Record</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Scope</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Program</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Program</name><argument_list>(<argument><expr><name>Context</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ctx</name><argument_list>(<argument>Ctx</argument>)</argument_list></macro> <block>{}</block>


<name>unsigned</name> <call><name>createGlobalString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StringLiteral</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>Pointer</name></type> <name>getPtrGlobal</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Idx</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>Block</name> <modifier>*</modifier></type><name>getGlobal</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name><name>Globals</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Globals</name><index>[<expr><name>Idx</name></expr>]</index></name><operator>-&gt;</operator><call><name>block</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>getGlobal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>getOrCreateGlobal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>getOrCreateDummy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <operator>*</operator><name>PD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>createGlobal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ValueDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <call><name>createGlobal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>Function</name> <modifier>*</modifier></type><name>createFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>Def</name></expr></argument>, <argument><expr><name>Ts</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Func</name> <operator>=</operator> <name>new</name> <call><name>Function</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>Def</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>Funcs</name></macro><expr_stmt><expr><operator>.</operator><macro><name>insert</name><argument_list>(<argument>{Def</argument>, <argument>std::unique_ptr&lt;Function&gt;(Func)}</argument>)</argument_list></macro></expr>;</expr_stmt>
<return>return <expr><name>Func</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>Function</name> <modifier>*</modifier></type><name>createFunction</name><argument_list>(<argument><expr><name>Ts</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Args</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>Func</name> <operator>=</operator> <name>new</name> <call><name>Function</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>AnonFuncs</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>Func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Func</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function_decl><type><name>Function</name> <modifier>*</modifier></type><name>getFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>F</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>Function</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getOrCreateFunction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>Record</name> <modifier>*</modifier></type><name>getOrCreateRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>Descriptor</name> <modifier>*</modifier></type><name>createDescriptor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclTy</name> <modifier>&amp;</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>PrimType</name></type> <name>Type</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsConst</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsTemporary</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsMutable</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>allocateDescriptor</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name>IsConst</name></expr></argument>, <argument><expr><name>IsTemporary</name></expr></argument>, <argument><expr><name>IsMutable</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>createDescriptor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclTy</name> <modifier>&amp;</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>*</modifier></type><name>Ty</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsConst</name> <init>= <expr><name>false</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsTemporary</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsMutable</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>class</name></type> <name>DeclScope</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DeclScope</name><argument_list>(<argument><expr><name>Program</name> <operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>P</name><argument_list>(<argument>P</argument>)</argument_list></macro> <block>{ <expr><call><name><name>P</name><operator>.</operator><name>startDeclaration</name></name><argument_list>(<argument><expr><name>VD</name></expr></argument>)</argument_list></call></expr>; }</block>
<operator>~</operator><macro><name>DeclScope</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>P</name><operator>.</operator><name>endDeclaration</name></name><argument_list>()</argument_list></call></expr>; }</block>

<name>private</name><operator>:</operator>
<name>Program</name> <operator>&amp;</operator><name>P</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getCurrentDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>CurrentDeclaration</name> <operator>==</operator> <name>NoDeclaration</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><block>{}</block></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>LastDeclaration</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DeclScope</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>createGlobal</name><argument_list>(<argument>const DeclTy &amp;D</argument>, <argument>QualType Ty</argument>,
<argument>bool IsStatic</argument>, <argument>bool IsExtern</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Context</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Function</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Funcs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Function</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>AnonFuncs</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Relocs</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>PoolAllocTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>BumpPtrAllocatorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MallocAllocator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Global</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name><operator>...</operator> <name>Tys</name><operator>&gt;</operator>
<call><name>Global</name><argument_list>(<argument><expr><name>Tys</name><operator>...</operator> <name>Args</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>B</name><argument_list>(<argument>std::forward&lt;Tys&gt;(Args)...</argument>)</argument_list></macro> <block>{}</block>


<name>void</name> <operator>*</operator><name>operator</name> <macro><name>new</name><argument_list>(<argument>size_t Meta</argument>, <argument>PoolAllocTy &amp;Alloc</argument>, <argument>size_t Data</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Alloc</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><name>Meta</name> <operator>+</operator> <name>Data</name></expr></argument>, <argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>char</name> <modifier>*</modifier></type><name>data</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>B</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>Block</name> <modifier>*</modifier></type><name>block</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>B</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>Block</name></type> <name>B</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>PoolAllocTy</name></type> <name>Allocator</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Global</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Globals</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>GlobalIndices</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Record</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Records</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>DummyParams</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>Descriptor</name> <modifier>*</modifier></type><name>allocateDescriptor</name><argument_list>(<argument><expr><name>Ts</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <macro><name>new</name> <argument_list>(<argument>Allocator</argument>)</argument_list></macro> <expr><call><name>Descriptor</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>NoDeclaration</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>LastDeclaration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>CurrentDeclaration</name> <init>= <expr><name>NoDeclaration</name></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>startDeclaration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>Decl</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>LastDeclaration</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>CurrentDeclaration</name> <operator>=</operator> <name>LastDeclaration</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>endDeclaration</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>CurrentDeclaration</name> <operator>=</operator> <name>NoDeclaration</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>

<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
