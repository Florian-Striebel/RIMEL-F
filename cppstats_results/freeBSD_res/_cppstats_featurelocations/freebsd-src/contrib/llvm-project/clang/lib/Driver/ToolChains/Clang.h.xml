<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/Clang.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_Clang_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_Clang_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MSVC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DebugInfoOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCRuntime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>Clang</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>getBaseInputName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>InputInfo</name> <operator>&amp;</operator><name>Input</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>getBaseInputStem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>InputInfoList</name> <operator>&amp;</operator><name>Inputs</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>getDependencyFileName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>InputInfoList</name> <operator>&amp;</operator><name>Inputs</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>AddPreprocessingOptions</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const Driver &amp;D</argument>, <argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>,
<argument>const InputInfo &amp;Output</argument>,
<argument>const InputInfoList &amp;Inputs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>RenderTargetOptions</name><argument_list>(<argument>const llvm::Triple &amp;EffectiveTriple</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>, <argument>bool KernelOrKext</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>AddAArch64TargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddARMTargetArgs</name><argument_list>(<argument>const llvm::Triple &amp;Triple</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>,
<argument>bool KernelOrKext</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddARM64TargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddMIPSTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddPPCTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddR600TargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddRISCVTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddSparcTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddSystemZTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddX86TargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddHexagonTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddLanaiTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddWebAssemblyTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddVETargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

enum <expr><name>RewriteKind</name> <block>{ <expr><name>RK_None</name></expr>, <expr><name>RK_Fragile</name></expr>, <expr><name>RK_NonFragile</name></expr> }</block></expr>;

<expr><name>ObjCRuntime</name> <macro><name>AddObjCRuntimeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;args</argument>,
<argument>const InputInfoList &amp;inputs</argument>,
<argument>llvm::opt::ArgStringList &amp;cmdArgs</argument>,
<argument>RewriteKind rewrite</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>AddClangCLArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>, <argument>types::ID InputType</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>,
<argument>codegenoptions::DebugInfoKind *DebugInfoKind</argument>,
<argument>bool *EmitCodeView</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>raw_fd_ostream</name></expr></argument>&gt;</argument_list></name> <name>CompilationDatabase</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>void</name> <macro><name>DumpCompilationDatabase</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>StringRef Filename</argument>,
<argument>StringRef Target</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfo &amp;Input</argument>,
<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>DumpCompilationDatabaseFragmentToDir</name><argument_list>(
<argument>StringRef Dir</argument>, <argument>Compilation &amp;C</argument>, <argument>StringRef Target</argument>, <argument>const InputInfo &amp;Output</argument>,
<argument>const InputInfo &amp;Input</argument>, <argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>Clang</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>Clang</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasGoodDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIntegratedAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>canEmitIR</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>ClangAs</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ClangAs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"clang::as"</literal></argument>, <argument><literal type="string">"clang integrated assembler"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <macro><name>AddMIPSTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddX86TargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddRISCVTargetArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasGoodDiagnostics</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIntegratedAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>OffloadBundler</name></type> <name>final</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OffloadBundler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"offload bundler"</literal></argument>, <argument><literal type="string">"clang-offload-bundler"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>ConstructJobMultipleOutputs</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfoList &amp;Outputs</argument>,
<argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>OffloadWrapper</name></type> <name>final</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>OffloadWrapper</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Tool</name><argument_list>(<argument><literal type="string">"offload wrapper"</literal></argument>, <argument><literal type="string">"clang-offload-wrapper"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
