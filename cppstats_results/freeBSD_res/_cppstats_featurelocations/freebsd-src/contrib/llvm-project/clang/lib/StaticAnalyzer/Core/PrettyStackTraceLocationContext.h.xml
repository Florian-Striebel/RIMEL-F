<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Core/PrettyStackTraceLocationContext.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CORE_PRETTYSTACKTRACELOCATIONCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CORE_PRETTYSTACKTRACELOCATIONCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnalysisDeclContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>












<decl_stmt><decl><type><name>class</name></type> <name>PrettyStackTraceLocationContext</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>PrettyStackTraceEntry</name> <block>{
<expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><name>LCtx</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>PrettyStackTraceLocationContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><name>LC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>LCtx</name><argument_list>(<argument>LC</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>LCtx</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>print</name><argument_list>(<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"While analyzing stack: \n"</literal></expr>;
<expr><call><name><name>LCtx</name><operator>-&gt;</operator><name>dumpStack</name></name><argument_list>(<argument><expr><name>Out</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
