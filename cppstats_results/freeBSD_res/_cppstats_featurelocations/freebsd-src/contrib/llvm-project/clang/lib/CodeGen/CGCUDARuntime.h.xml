<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGCUDARUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGCUDARUNTIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/GlobalDecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/GlobalValue.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalVariable</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CUDAKernelCallExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionArgList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ReturnValueSlot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RValue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CGCUDARuntime</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>class</name></type> <name>DeviceVarFlags</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>DeviceVarKind</name> <block>{
<decl><name>Variable</name></decl>,
<decl><name>Surface</name></decl>,
<decl><name>Texture</name></decl>,
}</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Extern</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Constant</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Managed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Normalized</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>SurfTexType</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>DeviceVarFlags</name><argument_list>(<argument>DeviceVarKind K</argument>, <argument>bool E</argument>, <argument>bool C</argument>, <argument>bool M</argument>, <argument>bool N</argument>, <argument>int T</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Kind</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Extern</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Constant</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Managed</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Normalized</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>SurfTexType</name><argument_list>(<argument>T</argument>)</argument_list></macro> <expr><block>{}</block>

<name>DeviceVarKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeviceVarKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isExtern</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Extern</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isConstant</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Constant</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isManaged</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Managed</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isNormalized</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Normalized</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>int</name> <macro><name>getSurfTexType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SurfTexType</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>CGCUDARuntime</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>CGM</name><argument_list>(<argument>CGM</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>CGCUDARuntime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>RValue</name></type> <name>EmitCUDAKernelCallExpr</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CUDAKernelCallExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><name>ReturnValueSlot</name></type> <name>ReturnValue</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>emitDeviceStub</name><parameter_list>(<parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>, <parameter><decl><type><name>FunctionArgList</name> <modifier>&amp;</modifier></type><name>Args</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>handleVarRegistration</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>&amp;</operator><name>Var</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><call><name>finalizeModule</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>getDeviceSideName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ND</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>GlobalValue</name> <operator>*</operator><macro><name>getKernelHandle</name><argument_list>(<argument>llvm::Function *Stub</argument>,
<argument>GlobalDecl GD</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><call><name>getKernelStub</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalValue</name> <operator>*</operator><name>Handle</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type>
<name>internalizeDeviceSideVar</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>GlobalValue</name><operator>::</operator><name>LinkageTypes</name> <operator>&amp;</operator><name>Linkage</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<function_decl><type><name>CGCUDARuntime</name> <modifier>*</modifier></type><name>CreateNVCUDARuntime</name><parameter_list>(<parameter><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
