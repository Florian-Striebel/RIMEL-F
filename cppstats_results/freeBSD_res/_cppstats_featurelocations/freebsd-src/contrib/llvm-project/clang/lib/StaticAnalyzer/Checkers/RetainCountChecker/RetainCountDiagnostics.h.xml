<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountDiagnostics.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_RETAINCOUNTCHECKER_DIAGNOSTICS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_RETAINCOUNTCHECKER_DIAGNOSTICS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/PathDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/RetainSummaryManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>retaincountchecker</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RefCountBug</name> <range>: <expr><name>public</name> <name>BugType</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>RefCountBugKind</name> <block>{
<expr><name>UseAfterRelease</name></expr>,
<expr><name>ReleaseNotOwned</name></expr>,
<expr><name>DeallocNotOwned</name></expr>,
<expr><name>FreeNotOwned</name></expr>,
<expr><name>OverAutorelease</name></expr>,
<expr><name>ReturnNotOwnedForOwned</name></expr>,
<expr><name>LeakWithinFunction</name></expr>,
<expr><name>LeakAtReturn</name></expr>,
}</block></expr>;
<macro><name>RefCountBug</name><argument_list>(<argument>CheckerNameRef Checker</argument>, <argument>RefCountBugKind BT</argument>)</argument_list></macro>;
<expr><name>StringRef</name> <macro><name>getDescription</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>RefCountBugKind</name> <macro><name>getBugType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BT</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>RefCountBugKind</name> <name>BT</name></expr>;
<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>bugTypeToName</name><argument_list>(<argument>RefCountBugKind BT</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RefCountReport</name> <range>: <expr><name>public</name> <name>PathSensitiveBugReport</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>SymbolRef</name> <name>Sym</name></expr>;
<expr><name>bool</name> <name>isLeak</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>RefCountReport</name><argument_list>(<argument>const RefCountBug &amp;D</argument>, <argument>const LangOptions &amp;LOpts</argument>,
<argument>ExplodedNode *n</argument>, <argument>SymbolRef sym</argument>,
<argument>bool isLeak=false</argument>)</argument_list></macro></expr>;

<macro><name>RefCountReport</name><argument_list>(<argument>const RefCountBug &amp;D</argument>, <argument>const LangOptions &amp;LOpts</argument>,
<argument>ExplodedNode *n</argument>, <argument>SymbolRef sym</argument>,
<argument>StringRef endText</argument>)</argument_list></macro>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>getRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isLeak</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PathSensitiveBugReport</name><operator>::</operator><call><name>getRanges</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><block>{}</block></expr>;</return>
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RefLeakReport</name> <range>: <expr><name>public</name> <name>RefCountReport</name> <block>{
<expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>AllocFirstBinding</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><name>AllocBindingToReport</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>AllocStmt</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>PathDiagnosticLocation</name> <name>Location</name></expr>;



<expr><name>void</name> <call><name>deriveParamLocation</name><argument_list>(<argument><expr><name>CheckerContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>deriveAllocLocation</name><argument_list>(<argument><expr><name>CheckerContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>createDescription</name><argument_list>(<argument><expr><name>CheckerContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>findBindingToReport</name><argument_list>(<argument><expr><name>CheckerContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><name>ExplodedNode</name> <operator>*</operator><name>Node</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>RefLeakReport</name><argument_list>(<argument>const RefCountBug &amp;D</argument>, <argument>const LangOptions &amp;LOpts</argument>, <argument>ExplodedNode *n</argument>,
<argument>SymbolRef sym</argument>, <argument>CheckerContext &amp;Ctx</argument>)</argument_list></macro></expr>;
<expr><name>PathDiagnosticLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Location</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Location</name></expr>;</return>
}</block>

<name>PathDiagnosticLocation</name> <macro><name>getEndOfPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>PathSensitiveBugReport</name><operator>::</operator><call><name>getLocation</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
