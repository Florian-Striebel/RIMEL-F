<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/InterpFrame.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_INTERPFRAME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_INTERPFRAME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Pointer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Program.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"State.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InterpState</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>InterpFrame</name></type> <name>final</name> <range>: <expr><name>public</name> <name>Frame</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>InterpFrame</name> <operator>*</operator><name>Caller</name></expr>;


<macro><name>InterpFrame</name><argument_list>(<argument>InterpState &amp;S</argument>, <argument>Function *Func</argument>, <argument>InterpFrame *Caller</argument>,
<argument>CodePtr RetPC</argument>, <argument>Pointer &amp;&amp;This</argument>)</argument_list></macro>;


<expr><operator>~</operator><call><name>InterpFrame</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <macro><name>destroy</name><argument_list>(<argument>unsigned Idx</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <call><name>popArgs</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <macro><name>describe</name><argument_list>(<argument>llvm::raw_ostream &amp;OS</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>Frame</name> <operator>*</operator><macro><name>getCaller</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><name>SourceLocation</name> <macro><name>getCallLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><macro><name>getCallee</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><name>Function</name> <operator>*</operator><macro><name>getFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Func</name></expr>;</return> }</block>


<name>size_t</name> <macro><name>getFrameOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FrameOffset</name></expr>;</return> }</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>T</name> <operator>&amp;</operator><macro><name>getLocal</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>localRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name> <macro><name>setLocal</name><argument_list>(<argument>unsigned Offset</argument>, <argument>const T &amp;Value</argument>)</argument_list></macro> <block>{
<expr><call><name><name>localRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Value</name></expr>;
}</block>


<name>Pointer</name> <macro><name>getLocalPointer</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro></expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>T</name> <operator>&amp;</operator><macro><name>getParam</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>Pt</name> <operator>=</operator> <call><name><name>Params</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Pt</name> <operator>==</operator> <call><name><name>Params</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name><name>stackRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content> else <block>{<block_content>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Block</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Pt</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>deref</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
}


template &lt;typename T&gt; void setParam(unsigned Offset</block></block><operator>,</operator> <expr_stmt><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>Value</name></expr></expr_stmt></if></if_stmt>) <block>{
<expr><call><name>getParamPointer</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>deref</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>=</operator> <name>Value</name></expr>;
}</block></block>


<name>Pointer</name> <macro><name>getParamPointer</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro></expr>;


<expr><specifier>const</specifier> <name>Pointer</name> <operator>&amp;</operator><macro><name>getThis</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>This</name></expr>;</return> }</block>


<name>bool</name> <macro><name>isRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>Func</name></expr>;</return> }</block>


<name>CodePtr</name> <macro><name>getPC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Func</name><operator>-&gt;</operator><name>getCodeBegin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>CodePtr</name> <macro><name>getRetPC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RetPC</name></expr>;</return> }</block>


<name>virtual</name> <name>SourceInfo</name> <macro><name>getSource</name><argument_list>(<argument>CodePtr PC</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getExpr</name><argument_list>(<argument>CodePtr PC</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>(<argument>CodePtr PC</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>T</name> <operator>&amp;</operator><macro><name>stackRef</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name> <operator>-</operator> <name>ArgSize</name> <operator>+</operator> <name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <operator>&amp;</operator><macro><name>localRef</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Locals</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>void</name> <operator>*</operator><macro><name>localBlock</name><argument_list>(<argument>unsigned Offset</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Locals</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>Offset</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Block</name></expr></argument>)</argument_list></sizeof></expr>;</return>
}</block>

<name>private</name><operator>:</operator>

<name>InterpState</name> <operator>&amp;</operator><name>S</name></expr>;

<expr><name>Function</name> <operator>*</operator><name>Func</name></expr>;

<expr><name>Pointer</name> <name>This</name></expr>;

<expr><name>CodePtr</name> <name>RetPC</name></expr>;

<expr><specifier>const</specifier> <name>unsigned</name> <name>ArgSize</name></expr>;

<expr><name>char</name> <operator>*</operator><name>Args</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>char</name><index>[]</index></name></expr></argument>&gt;</argument_list></name> <name>Locals</name></expr>;

<expr><specifier>const</specifier> <name>size_t</name> <name>FrameOffset</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>char</name><index>[]</index></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Params</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
