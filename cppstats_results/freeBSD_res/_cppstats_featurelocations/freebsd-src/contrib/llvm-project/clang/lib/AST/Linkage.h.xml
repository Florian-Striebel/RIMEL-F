<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Linkage.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_AST_LINKAGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_AST_LINKAGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTFwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<struct>struct <name>LVComputationKind</name> <block>{


<decl_stmt><decl><type><name>unsigned</name></type> <name>ExplicitKind</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IgnoreExplicitVisibility</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IgnoreAllVisibility</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>NumLVComputationKindBits</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><name>explicit</name></type> <name>LVComputationKind</name><argument_list>(<argument><expr><name>NamedDecl</name><operator>::</operator><name>ExplicitVisibilityKind</name> <name>EK</name></expr></argument>)</argument_list>
<range>: <expr><call><name>ExplicitKind</name><argument_list>(<argument><expr><name>EK</name></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>IgnoreExplicitVisibility</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></decl>,
<decl><type ref="prev"/><name>IgnoreAllVisibility</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<expr_stmt><expr><name>NamedDecl</name><operator>::</operator><name>ExplicitVisibilityKind</name> <macro><name>getExplicitVisibilityKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name><operator>::</operator><name>ExplicitVisibilityKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ExplicitKind</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isTypeVisibility</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getExplicitVisibilityKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NamedDecl</name><operator>::</operator><name>VisibilityForType</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isValueVisibility</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getExplicitVisibilityKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NamedDecl</name><operator>::</operator><name>VisibilityForValue</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><specifier>static</specifier> <name>LVComputationKind</name></type> <name>forLinkageOnly</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LVComputationKind</name></type> <name>Result</name><argument_list>(<argument><expr><name>NamedDecl</name><operator>::</operator><name>VisibilityForValue</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>IgnoreExplicitVisibility</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>IgnoreAllVisibility</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>toBits</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Bits</name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>ExplicitKind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Bits</name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>IgnoreExplicitVisibility</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Bits</name> <operator>=</operator> <operator>(</operator><name>Bits</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <name>IgnoreAllVisibility</name></expr>;</expr_stmt>
<return>return <expr><name>Bits</name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>LinkageComputer</name> <block>{<block_content>










<decl_stmt><decl><type><name>using</name></type> <name>QueryType</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator></expr></argument>,
<argument><expr><name>LVComputationKind</name><operator>::</operator><name>NumLVComputationKindBits</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><name>QueryType</name></expr></argument>, <argument><expr><name>LinkageInfo</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>CachedLinkageInfo</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>QueryType</name></type> <name>makeCacheKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>, <parameter><decl><type><name>LVComputationKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>QueryType</name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><call><name><name>Kind</name><operator>.</operator><name>toBits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>LinkageInfo</name></expr></argument>&gt;</argument_list></name> <macro><name>lookup</name><argument_list>(<argument>const NamedDecl *ND</argument>,
<argument>LVComputationKind Kind</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>Iter</name> <operator>=</operator> <call><name><name>CachedLinkageInfo</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>makeCacheKey</name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Iter</name> <operator>==</operator> <call><name><name>CachedLinkageInfo</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name><name>Iter</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>cache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>, <parameter><decl><type><name>LVComputationKind</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>LinkageInfo</name></type> <name>Info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>CachedLinkageInfo</name><index>[<expr><call><name>makeCacheKey</name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>Info</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForTemplateArgumentList</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForTemplateArgumentList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentList</name> <modifier>&amp;</modifier></type><name>TArgs</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mergeTemplateLV</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name> <modifier>&amp;</modifier></type><name>LV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>FunctionTemplateSpecializationInfo</name> <modifier>*</modifier></type><name>specInfo</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mergeTemplateLV</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name> <modifier>&amp;</modifier></type><name>LV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ClassTemplateSpecializationDecl</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mergeTemplateLV</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name> <modifier>&amp;</modifier></type><name>LV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>VarTemplateSpecializationDecl</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForNamespaceScopeDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IgnoreVarTypeLinkage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForClassMember</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IgnoreVarTypeLinkage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForClosure</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>ContextDecl</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForLocalDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForTemplateParameterList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateParameterList</name> <modifier>*</modifier></type><name>Params</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>APValue</name> <modifier>&amp;</modifier></type><name>V</name></decl></parameter>, <parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<function_decl><type><name>LinkageInfo</name></type> <name>computeLVForDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IgnoreVarTypeLinkage</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getLVForDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>LVComputationKind</name></type> <name>computation</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>computeTypeLinkageInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>LinkageInfo</name></type> <name>computeTypeLinkageInfo</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>computeTypeLinkageInfo</name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>getTypePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>LinkageInfo</name></type> <name>getDeclLinkageAndVisibility</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LinkageInfo</name></type> <name>getTypeLinkageAndVisibility</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>LinkageInfo</name></type> <name>getTypeLinkageAndVisibility</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getTypeLinkageAndVisibility</name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>getTypePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
