<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/ByteCodeStmtGen.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_BYTECODESTMTGEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_BYTECODESTMTGEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ByteCodeEmitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ByteCodeExprGen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EvalEmitter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Pointer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"PrimType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Record.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>State</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>LoopScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SwitchScope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>LabelScope</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Emitter</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ByteCodeStmtGen</name> <range>: <expr><name>public</name> <name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>LabelTy</name> <operator>=</operator> <name>typename</name> <name>Emitter</name><operator>::</operator><name>LabelTy</name></expr>;
<expr><name>using</name> <name>AddrTy</name> <operator>=</operator> <name>typename</name> <name>Emitter</name><operator>::</operator><name>AddrTy</name></expr>;
<expr><name>using</name> <name>OptLabelTy</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>LabelTy</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>CaseMap</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>SwitchCase</name> <operator>*</operator></expr></argument>, <argument><expr><name>LabelTy</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Tys</name></expr></argument>&gt;</argument_list></name>
<call><name>ByteCodeStmtGen</name><argument_list>(<argument><expr><name>Tys</name><operator>&amp;&amp;</operator><operator>...</operator> <name>Args</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ByteCodeExprGen</name></macro><operator>&lt;</operator><name>Emitter</name><operator>&gt;</operator><operator>(</operator><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Tys</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Args</name></expr></argument>)</argument_list></call><operator>...</operator><operator>)</operator> <block>{}</block>

<name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>visitFunc</name><argument_list>(<argument>const FunctionDecl *F</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name><name>LabelScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>friend</name> <name>class</name> <name><name>LoopScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>friend</name> <name>class</name> <name><name>SwitchScope</name><argument_list type="generic">&lt;<argument><expr><name>Emitter</name></expr></argument>&gt;</argument_list></name></expr>;


<expr><name>bool</name> <call><name>visitStmt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>visitCompoundStmt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompoundStmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>visitDeclStmt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><name>DS</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>visitReturnStmt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReturnStmt</name> <operator>*</operator><name>RS</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bool</name> <call><name>visitIfStmt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IfStmt</name> <operator>*</operator><name>IS</name></expr></argument>)</argument_list></call></expr>;


<expr><name>bool</name> <call><name>visitVarDecl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>PrimType</name></expr></argument>&gt;</argument_list></name> <name>ReturnType</name></expr>;


<expr><name>CaseMap</name> <name>CaseLabels</name></expr>;


<expr><name>OptLabelTy</name> <name>BreakLabel</name></expr>;

<expr><name>OptLabelTy</name> <name>ContinueLabel</name></expr>;

<expr><name>OptLabelTy</name> <name>DefaultLabel</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>template</name> <name>class</name></type> <name><name>ByteCodeExprGen</name><argument_list type="generic">&lt;<argument><expr><name>EvalEmitter</name></expr></argument>&gt;</argument_list></name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
