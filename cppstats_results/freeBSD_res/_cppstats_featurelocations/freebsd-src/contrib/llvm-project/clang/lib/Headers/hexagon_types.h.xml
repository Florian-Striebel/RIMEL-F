<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/hexagon_types.h">



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HEXAGON_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_TYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hexagon_protos.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_Vect</name></cpp:macro> <cpp:value>HEXAGON_Vect64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_D</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UD</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_W0</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_W0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_W1</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_W1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UW0</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UW0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UW1</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UW1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_H0</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_H0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_H1</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_H1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_H2</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_H2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_H3</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_H3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UH0</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UH0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UH1</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UH1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UH2</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UH2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UH3</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UH3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B0</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B1</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B2</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B3</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B4</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B5</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B6</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_B7</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB0</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB1</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB2</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB3</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB4</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB5</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB6</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_GET_UB7</name></cpp:macro> <cpp:value>HEXAGON_V64_GET_UB7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_D</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_W0</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_W0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_W1</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_W1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_H0</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_H0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_H1</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_H1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_H2</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_H2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_H3</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_H3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B0</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B1</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B2</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B3</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B4</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B5</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B6</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_PUT_B7</name></cpp:macro> <cpp:value>HEXAGON_V64_PUT_B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_CREATE_D</name></cpp:macro> <cpp:value>HEXAGON_V64_CREATE_D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_CREATE_W</name></cpp:macro> <cpp:value>HEXAGON_V64_CREATE_W</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_CREATE_H</name></cpp:macro> <cpp:value>HEXAGON_V64_CREATE_H</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V_CREATE_B</name></cpp:macro> <cpp:value>HEXAGON_V64_CREATE_B</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_VectC</name></cpp:macro> <cpp:value>HEXAGON_Vect64C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>long</name> <name>long</name></type> <name>__attribute__</name>((<name>__may_alias__</name>)) <name>HEXAGON_Vect64</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_D</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UD</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned long long)(v))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_W0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.w[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_W1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.w[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UW0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned int uw[2]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.uw[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UW1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned int uw[2]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.uw[1]; })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_H2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_H3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UH0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.uh[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UH1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.uh[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UH2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.uh[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UH3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.uh[3]; })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[4]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[5]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[6]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_B7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[7]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[4]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[5]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[6]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_GET_UB7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.ub[7]; })</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_D</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(new)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_W0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.w[0] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_W1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.w[1] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_W0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffff00000000LL) | ((HEXAGON_Vect64)((unsigned int)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_W1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x00000000ffffffffLL) | (((HEXAGON_Vect64)(new)) &lt;&lt; 32LL))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[0] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[1] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[2] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.h[3] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffffff0000LL) | ((HEXAGON_Vect64)((unsigned short)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffff0000ffffLL) | (((HEXAGON_Vect64)((unsigned short)(new))) &lt;&lt; 16LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff0000ffffffffLL) | (((HEXAGON_Vect64)((unsigned short)(new))) &lt;&lt; 32LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_H3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x0000ffffffffffffLL) | (((HEXAGON_Vect64)(new)) &lt;&lt; 48LL))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[0] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[1] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[2] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[3] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[4] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[5] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[6] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.d = (v); _HEXAGON_V64_internal_union.b[7] = (new); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffffffff00LL) | ((HEXAGON_Vect64)((unsigned char)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffffff00ffLL) | (((HEXAGON_Vect64)((unsigned char)(new))) &lt;&lt; 8LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffff00ffffLL) | (((HEXAGON_Vect64)((unsigned char)(new))) &lt;&lt; 16LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffff00ffffffLL) | (((HEXAGON_Vect64)((unsigned char)(new))) &lt;&lt; 24LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffff00ffffffffLL) | (((HEXAGON_Vect64)((unsigned char)(new))) &lt;&lt; 32LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff00ffffffffffLL) | (((HEXAGON_Vect64)((unsigned char)(new))) &lt;&lt; 40LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xff00ffffffffffffLL) | (((HEXAGON_Vect64)((unsigned char)(new))) &lt;&lt; 48LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_PUT_B7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x00ffffffffffffffLL) | (((HEXAGON_Vect64)(new)) &lt;&lt; 56LL))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_CREATE_D</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_CREATE_W</name><parameter_list>(<parameter><type><name>w1</name></type></parameter>, <parameter><type><name>w0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.w[0] = (w0); _HEXAGON_V64_internal_union.w[1] = (w1); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_CREATE_W</name><parameter_list>(<parameter><type><name>w1</name></type></parameter>, <parameter><type><name>w0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((HEXAGON_Vect64)(w1)) &lt;&lt; 32LL) | ((HEXAGON_Vect64)((w0) &amp; 0xffffffff)))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_CREATE_H</name><parameter_list>(<parameter><type><name>h3</name></type></parameter>, <parameter><type><name>h2</name></type></parameter>, <parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.h[0] = (h0); _HEXAGON_V64_internal_union.h[1] = (h1); _HEXAGON_V64_internal_union.h[2] = (h2); _HEXAGON_V64_internal_union.h[3] = (h3); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>












<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_CREATE_H</name><parameter_list>(<parameter><type><name>h3</name></type></parameter>, <parameter><type><name>h2</name></type></parameter>, <parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((HEXAGON_Vect64)(h3)) &lt;&lt; 48LL) | (((HEXAGON_Vect64)((h2) &amp; 0xffff)) &lt;&lt; 32LL) | (((HEXAGON_Vect64)((h1) &amp; 0xffff)) &lt;&lt; 16LL) | ((HEXAGON_Vect64)((h0) &amp; 0xffff)))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_CREATE_B</name><parameter_list>(<parameter><type><name>b7</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _HEXAGON_V64_internal_union; _HEXAGON_V64_internal_union.b[0] = (b0); _HEXAGON_V64_internal_union.b[1] = (b1); _HEXAGON_V64_internal_union.b[2] = (b2); _HEXAGON_V64_internal_union.b[3] = (b3); _HEXAGON_V64_internal_union.b[4] = (b4); _HEXAGON_V64_internal_union.b[5] = (b5); _HEXAGON_V64_internal_union.b[6] = (b6); _HEXAGON_V64_internal_union.b[7] = (b7); _HEXAGON_V64_internal_union.d; })</cpp:value></cpp:define>
















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V64_CREATE_B</name><parameter_list>(<parameter><type><name>b7</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((HEXAGON_Vect64)(b7)) &lt;&lt; 56LL) | (((HEXAGON_Vect64)((b6) &amp; 0xff)) &lt;&lt; 48LL) | (((HEXAGON_Vect64)((b5) &amp; 0xff)) &lt;&lt; 40LL) | (((HEXAGON_Vect64)((b4) &amp; 0xff)) &lt;&lt; 32LL) | (((HEXAGON_Vect64)((b3) &amp; 0xff)) &lt;&lt; 24LL) | (((HEXAGON_Vect64)((b2) &amp; 0xff)) &lt;&lt; 16LL) | (((HEXAGON_Vect64)((b1) &amp; 0xff)) &lt;&lt; 8LL) | ((HEXAGON_Vect64)((b0) &amp; 0xff)))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>HEXAGON_Vect64C</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>HEXAGON_Vect64C</name><argument_list>(<argument>long long d = <literal type="number">0</literal></argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>d</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>HEXAGON_Vect64C</name><argument_list>(<argument>int w1</argument>, <argument>int w0</argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>HEXAGON_V64_CREATE_W(w1, w0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>HEXAGON_Vect64C</name><argument_list>(<argument>short h3</argument>, <argument>short h2</argument>, <argument>short h1</argument>, <argument>short h0</argument>)</argument_list></macro>
: <macro><name>data</name><argument_list>(<argument>HEXAGON_V64_CREATE_H(h3, h2, h1, h0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>HEXAGON_Vect64C</name><argument_list>(<argument>signed char b7</argument>, <argument>signed char b6</argument>, <argument>signed char b5</argument>, <argument>signed char b4</argument>,
<argument>signed char b3</argument>, <argument>signed char b2</argument>, <argument>signed char b1</argument>, <argument>signed char b0</argument>)</argument_list></macro>
: <macro><name>data</name><argument_list>(<argument>HEXAGON_V64_CREATE_B(b7, b6, b5, b4, b3, b2, b1, b0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><specifier>const</specifier> <name>HEXAGON_Vect64C</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>data</name><argument_list>(<argument>v.data</argument>)</argument_list></macro> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HEXAGON_Vect64C</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>HEXAGON_Vect64C</name> <operator>&amp;</operator><name>v</name><operator>)</operator> <block>{
<expr><name>data</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>data</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>operator</name> <name>long</name></type> <name>long</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>long</name> <name>long</name></type> <name>D</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_D</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>UD</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UD</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>int</name></type> <name>W0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_W0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>int</name></type> <name>W1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_W1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>int</name></type> <name>UW0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UW0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>int</name></type> <name>UW1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UW1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>short</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_H2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_H3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UH0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UH1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UH2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UH3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>signed</name> <name>char</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B4</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B5</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B6</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B6</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B7</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_B7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB4</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB5</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB6</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB6</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB7</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V64_GET_UB7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>




<function><type><name>HEXAGON_Vect64C</name></type> <name>D</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_D</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HEXAGON_Vect64C</name></type> <name>W0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_W0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>W1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_W1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HEXAGON_Vect64C</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>H2</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_H2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>H3</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_H3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HEXAGON_Vect64C</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>B4</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>B5</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B5</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>B6</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B6</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect64C</name></type> <name>B7</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect64C</name><argument_list>(<argument><expr><call><name>HEXAGON_V64_PUT_B7</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>data</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>int</name></type> <name>HEXAGON_Vect32</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_W</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_UW</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)(v))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.h[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.h[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_UH0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned short uh[2]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.uh[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_UH1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned short uh[2]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.uh[1]; })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_UB0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.ub[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_UB1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.ub[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_UB2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.ub[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_GET_UB3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.ub[3]; })</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_W</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(new)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.h[0] = (new); _HEXAGON_V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.h[1] = (new); _HEXAGON_V32_internal_union.w; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff0000) | ((HEXAGON_Vect32)((unsigned short)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x0000ffff) | (((HEXAGON_Vect32)(new)) &lt;&lt; 16))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[0] = (new); _HEXAGON_V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[1] = (new); _HEXAGON_V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[2] = (new); _HEXAGON_V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.w = (v); _HEXAGON_V32_internal_union.b[3] = (new); _HEXAGON_V32_internal_union.w; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffff00) | ((HEXAGON_Vect32)((unsigned char)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff00ff) | (((HEXAGON_Vect32)((unsigned char)(new))) &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xff00ffff) | (((HEXAGON_Vect32)((unsigned char)(new))) &lt;&lt; 16))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x00ffffff) | (((HEXAGON_Vect32)(new)) &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_CREATE_W</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(w)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_CREATE_H</name><parameter_list>(<parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[2]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.h[0] = (h0); _HEXAGON_V32_internal_union.h[1] = (h1); _HEXAGON_V32_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_CREATE_H</name><parameter_list>(<parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((HEXAGON_Vect32)(h1)) &lt;&lt; 16) | ((HEXAGON_Vect32)((h0) &amp; 0xffff)))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hexagon__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_CREATE_B</name><parameter_list>(<parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[4]; } _HEXAGON_V32_internal_union; _HEXAGON_V32_internal_union.b[0] = (b0); _HEXAGON_V32_internal_union.b[1] = (b1); _HEXAGON_V32_internal_union.b[2] = (b2); _HEXAGON_V32_internal_union.b[3] = (b3); _HEXAGON_V32_internal_union.d; })</cpp:value></cpp:define>












<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_V32_CREATE_B</name><parameter_list>(<parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((HEXAGON_Vect32)(b3)) &lt;&lt; 24) | (((HEXAGON_Vect32)((b2) &amp; 0xff)) &lt;&lt; 16) | (((HEXAGON_Vect32)((b1) &amp; 0xff)) &lt;&lt; 8) | ((HEXAGON_Vect32)((b0) &amp; 0xff)))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>HEXAGON_Vect32C</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>HEXAGON_Vect32C</name><argument_list>(<argument>int w = <literal type="number">0</literal></argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>w</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>HEXAGON_Vect32C</name><argument_list>(<argument>short h1</argument>, <argument>short h0</argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>HEXAGON_V32_CREATE_H(h1, h0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>HEXAGON_Vect32C</name><argument_list>(<argument>signed char b3</argument>, <argument>signed char b2</argument>, <argument>signed char b1</argument>, <argument>signed char b0</argument>)</argument_list></macro>
: <macro><name>data</name><argument_list>(<argument>HEXAGON_V32_CREATE_B(b3, b2, b1, b0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><specifier>const</specifier> <name>HEXAGON_Vect32C</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>data</name><argument_list>(<argument>v.data</argument>)</argument_list></macro> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HEXAGON_Vect32C</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>HEXAGON_Vect32C</name> <operator>&amp;</operator><name>v</name><operator>)</operator> <block>{
<expr><name>data</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>data</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>operator</name></type> <name>int</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>int</name></type> <name>W</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_W</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>int</name></type> <name>UW</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_UW</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>short</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_UH0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_UH1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>signed</name> <name>char</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_UB0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_UB1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_UB2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_V32_GET_UB3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>




<function><type><name>HEXAGON_Vect32C</name></type> <name>W</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><call><name>HEXAGON_V32_PUT_W</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HEXAGON_Vect32C</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><call><name>HEXAGON_V32_PUT_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect32C</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><call><name>HEXAGON_V32_PUT_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HEXAGON_Vect32C</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><call><name>HEXAGON_V32_PUT_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect32C</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><call><name>HEXAGON_V32_PUT_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect32C</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><call><name>HEXAGON_V32_PUT_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HEXAGON_Vect32C</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>HEXAGON_Vect32C</name><argument_list>(<argument><expr><call><name>HEXAGON_V32_PUT_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__Q6S_ARCH__</name> <operator>&gt;=</operator> <literal type="number">65</literal></expr></cpp:if>


<typedef>typedef <type><name>long</name> <name>HEXAGON_VecPred128</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(16)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_VecPred256</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(32)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_Vect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_Vect2048</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(256)))
<name>__attribute__</name>((<name>aligned</name>(256)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_UVect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(4)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_UVect2048</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(256)))
<name>__attribute__</name>((<name>aligned</name>(4)));</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6S_VectorPredPair</name></cpp:macro> <cpp:value>HEXAGON_VecPred256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6S_VectorPred</name></cpp:macro> <cpp:value>HEXAGON_VecPred128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6S_Vector</name></cpp:macro> <cpp:value>HEXAGON_Vect1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6S_VectorPair</name></cpp:macro> <cpp:value>HEXAGON_Vect2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6S_UVector</name></cpp:macro> <cpp:value>HEXAGON_UVect1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6S_UVectorPair</name></cpp:macro> <cpp:value>HEXAGON_UVect2048</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__HVX_ARCH__</name> <operator>&gt;=</operator> <literal type="number">65</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__HVX__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__HVX_LENGTH__</name> <operator>==</operator> <literal type="number">128</literal><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>HEXAGON_VecPred128</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_Vect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_Vect2048</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(256)))
<name>__attribute__</name>((<name>aligned</name>(256)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_UVect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(4)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_UVect2048</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(256)))
<name>__attribute__</name>((<name>aligned</name>(4)));</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_VectorPred</name></cpp:macro> <cpp:value>HEXAGON_VecPred128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_Vector</name></cpp:macro> <cpp:value>HEXAGON_Vect1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_VectorPair</name></cpp:macro> <cpp:value>HEXAGON_Vect2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_UVector</name></cpp:macro> <cpp:value>HEXAGON_UVect1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_UVectorPair</name></cpp:macro> <cpp:value>HEXAGON_UVect2048</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__HVX__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__HVX_LENGTH__</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>HEXAGON_VecPred64</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(64)))
<name>__attribute__</name>((<name>aligned</name>(64)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_Vect512</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(64)))
<name>__attribute__</name>((<name>aligned</name>(64)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_Vect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_UVect512</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(64)))
<name>__attribute__</name>((<name>aligned</name>(4)));</typedef>

<typedef>typedef <type><name>long</name> <name>HEXAGON_UVect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(4)));</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_VectorPred</name></cpp:macro> <cpp:value>HEXAGON_VecPred64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_Vector</name></cpp:macro> <cpp:value>HEXAGON_Vect512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_VectorPair</name></cpp:macro> <cpp:value>HEXAGON_Vect1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_UVector</name></cpp:macro> <cpp:value>HEXAGON_UVect512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HVX_UVectorPair</name></cpp:macro> <cpp:value>HEXAGON_UVect1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>int</name></type> <name>HEXAGON_Pred</name>;</typedef>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6Vect</name></cpp:macro> <cpp:value>Q6Vect64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_D</name></cpp:macro> <cpp:value>Q6V64_GET_D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UD</name></cpp:macro> <cpp:value>Q6V64_GET_UD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_W0</name></cpp:macro> <cpp:value>Q6V64_GET_W0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_W1</name></cpp:macro> <cpp:value>Q6V64_GET_W1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UW0</name></cpp:macro> <cpp:value>Q6V64_GET_UW0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UW1</name></cpp:macro> <cpp:value>Q6V64_GET_UW1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_H0</name></cpp:macro> <cpp:value>Q6V64_GET_H0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_H1</name></cpp:macro> <cpp:value>Q6V64_GET_H1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_H2</name></cpp:macro> <cpp:value>Q6V64_GET_H2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_H3</name></cpp:macro> <cpp:value>Q6V64_GET_H3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UH0</name></cpp:macro> <cpp:value>Q6V64_GET_UH0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UH1</name></cpp:macro> <cpp:value>Q6V64_GET_UH1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UH2</name></cpp:macro> <cpp:value>Q6V64_GET_UH2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UH3</name></cpp:macro> <cpp:value>Q6V64_GET_UH3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B0</name></cpp:macro> <cpp:value>Q6V64_GET_B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B1</name></cpp:macro> <cpp:value>Q6V64_GET_B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B2</name></cpp:macro> <cpp:value>Q6V64_GET_B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B3</name></cpp:macro> <cpp:value>Q6V64_GET_B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B4</name></cpp:macro> <cpp:value>Q6V64_GET_B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B5</name></cpp:macro> <cpp:value>Q6V64_GET_B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B6</name></cpp:macro> <cpp:value>Q6V64_GET_B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_B7</name></cpp:macro> <cpp:value>Q6V64_GET_B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB0</name></cpp:macro> <cpp:value>Q6V64_GET_UB0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB1</name></cpp:macro> <cpp:value>Q6V64_GET_UB1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB2</name></cpp:macro> <cpp:value>Q6V64_GET_UB2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB3</name></cpp:macro> <cpp:value>Q6V64_GET_UB3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB4</name></cpp:macro> <cpp:value>Q6V64_GET_UB4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB5</name></cpp:macro> <cpp:value>Q6V64_GET_UB5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB6</name></cpp:macro> <cpp:value>Q6V64_GET_UB6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_GET_UB7</name></cpp:macro> <cpp:value>Q6V64_GET_UB7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_D</name></cpp:macro> <cpp:value>Q6V64_PUT_D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_W0</name></cpp:macro> <cpp:value>Q6V64_PUT_W0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_W1</name></cpp:macro> <cpp:value>Q6V64_PUT_W1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_H0</name></cpp:macro> <cpp:value>Q6V64_PUT_H0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_H1</name></cpp:macro> <cpp:value>Q6V64_PUT_H1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_H2</name></cpp:macro> <cpp:value>Q6V64_PUT_H2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_H3</name></cpp:macro> <cpp:value>Q6V64_PUT_H3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B0</name></cpp:macro> <cpp:value>Q6V64_PUT_B0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B1</name></cpp:macro> <cpp:value>Q6V64_PUT_B1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B2</name></cpp:macro> <cpp:value>Q6V64_PUT_B2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B3</name></cpp:macro> <cpp:value>Q6V64_PUT_B3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B4</name></cpp:macro> <cpp:value>Q6V64_PUT_B4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B5</name></cpp:macro> <cpp:value>Q6V64_PUT_B5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B6</name></cpp:macro> <cpp:value>Q6V64_PUT_B6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_PUT_B7</name></cpp:macro> <cpp:value>Q6V64_PUT_B7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_CREATE_D</name></cpp:macro> <cpp:value>Q6V64_CREATE_D</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_CREATE_W</name></cpp:macro> <cpp:value>Q6V64_CREATE_W</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_CREATE_H</name></cpp:macro> <cpp:value>Q6V64_CREATE_H</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V_CREATE_B</name></cpp:macro> <cpp:value>Q6V64_CREATE_B</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6VectC</name></cpp:macro> <cpp:value>Q6Vect64C</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>long</name> <name>long</name></type> <name>__attribute__</name>((<name>__may_alias__</name>)) <name>Q6Vect64</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_D</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UD</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned long long)(v))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_W0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.w[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_W1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.w[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UW0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned int uw[2]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.uw[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UW1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned int uw[2]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.uw[1]; })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_H2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_H3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UH0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.uh[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UH1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.uh[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UH2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.uh[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UH3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned short uh[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.uh[3]; })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[4]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[5]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[6]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_B7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; signed char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[7]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[4]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[5]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[6]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_GET_UB7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; unsigned char ub[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.ub[7]; })</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_D</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(new)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_W0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.w[0] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_W1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.w[1] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_W0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffff00000000LL) | ((Q6Vect64)((unsigned int)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_W1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x00000000ffffffffLL) | (((Q6Vect64)(new)) &lt;&lt; 32LL))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[0] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[1] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[2] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.h[3] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffffff0000LL) | ((Q6Vect64)((unsigned short)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffff0000ffffLL) | (((Q6Vect64)((unsigned short)(new))) &lt;&lt; 16LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff0000ffffffffLL) | (((Q6Vect64)((unsigned short)(new))) &lt;&lt; 32LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_H3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x0000ffffffffffffLL) | (((Q6Vect64)(new)) &lt;&lt; 48LL))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[0] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[1] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[2] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[3] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[4] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[5] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[6] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.d = (v); _Q6V64_internal_union.b[7] = (new); _Q6V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffffffff00LL) | ((Q6Vect64)((unsigned char)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffffff00ffLL) | (((Q6Vect64)((unsigned char)(new))) &lt;&lt; 8LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffffff00ffffLL) | (((Q6Vect64)((unsigned char)(new))) &lt;&lt; 16LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffffff00ffffffLL) | (((Q6Vect64)((unsigned char)(new))) &lt;&lt; 24LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffff00ffffffffLL) | (((Q6Vect64)((unsigned char)(new))) &lt;&lt; 32LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B5</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff00ffffffffffLL) | (((Q6Vect64)((unsigned char)(new))) &lt;&lt; 40LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B6</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xff00ffffffffffffLL) | (((Q6Vect64)((unsigned char)(new))) &lt;&lt; 48LL))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_PUT_B7</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x00ffffffffffffffLL) | (((Q6Vect64)(new)) &lt;&lt; 56LL))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_CREATE_D</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(d)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_CREATE_W</name><parameter_list>(<parameter><type><name>w1</name></type></parameter>, <parameter><type><name>w0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; int w[2]; } _Q6V64_internal_union; _Q6V64_internal_union.w[0] = (w0); _Q6V64_internal_union.w[1] = (w1); _Q6V64_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_CREATE_W</name><parameter_list>(<parameter><type><name>w1</name></type></parameter>, <parameter><type><name>w0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((Q6Vect64)(w1)) &lt;&lt; 32LL) | ((Q6Vect64)((w0) &amp; 0xffffffff)))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_CREATE_H</name><parameter_list>(<parameter><type><name>h3</name></type></parameter>, <parameter><type><name>h2</name></type></parameter>, <parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[4]; } _Q6V64_internal_union; _Q6V64_internal_union.h[0] = (h0); _Q6V64_internal_union.h[1] = (h1); _Q6V64_internal_union.h[2] = (h2); _Q6V64_internal_union.h[3] = (h3); _Q6V64_internal_union.d; })</cpp:value></cpp:define>












<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_CREATE_H</name><parameter_list>(<parameter><type><name>h3</name></type></parameter>, <parameter><type><name>h2</name></type></parameter>, <parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((Q6Vect64)(h3)) &lt;&lt; 48LL) | (((Q6Vect64)((h2) &amp; 0xffff)) &lt;&lt; 32LL) | (((Q6Vect64)((h1) &amp; 0xffff)) &lt;&lt; 16LL) | ((Q6Vect64)((h0) &amp; 0xffff)))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_CREATE_B</name><parameter_list>(<parameter><type><name>b7</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[8]; } _Q6V64_internal_union; _Q6V64_internal_union.b[0] = (b0); _Q6V64_internal_union.b[1] = (b1); _Q6V64_internal_union.b[2] = (b2); _Q6V64_internal_union.b[3] = (b3); _Q6V64_internal_union.b[4] = (b4); _Q6V64_internal_union.b[5] = (b5); _Q6V64_internal_union.b[6] = (b6); _Q6V64_internal_union.b[7] = (b7); _Q6V64_internal_union.d; })</cpp:value></cpp:define>
















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V64_CREATE_B</name><parameter_list>(<parameter><type><name>b7</name></type></parameter>, <parameter><type><name>b6</name></type></parameter>, <parameter><type><name>b5</name></type></parameter>, <parameter><type><name>b4</name></type></parameter>, <parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((Q6Vect64)(b7)) &lt;&lt; 56LL) | (((Q6Vect64)((b6) &amp; 0xff)) &lt;&lt; 48LL) | (((Q6Vect64)((b5) &amp; 0xff)) &lt;&lt; 40LL) | (((Q6Vect64)((b4) &amp; 0xff)) &lt;&lt; 32LL) | (((Q6Vect64)((b3) &amp; 0xff)) &lt;&lt; 24LL) | (((Q6Vect64)((b2) &amp; 0xff)) &lt;&lt; 16LL) | (((Q6Vect64)((b1) &amp; 0xff)) &lt;&lt; 8LL) | ((Q6Vect64)((b0) &amp; 0xff)))</cpp:value></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>Q6Vect64C</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>Q6Vect64C</name><argument_list>(<argument>long long d = <literal type="number">0</literal></argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>d</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>Q6Vect64C</name><argument_list>(<argument>int w1</argument>, <argument>int w0</argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>Q6V64_CREATE_W(w1, w0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>Q6Vect64C</name><argument_list>(<argument>short h3</argument>, <argument>short h2</argument>, <argument>short h1</argument>, <argument>short h0</argument>)</argument_list></macro>
: <macro><name>data</name><argument_list>(<argument>Q6V64_CREATE_H(h3, h2, h1, h0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>Q6Vect64C</name><argument_list>(<argument>signed char b7</argument>, <argument>signed char b6</argument>, <argument>signed char b5</argument>, <argument>signed char b4</argument>,
<argument>signed char b3</argument>, <argument>signed char b2</argument>, <argument>signed char b1</argument>, <argument>signed char b0</argument>)</argument_list></macro>
: <macro><name>data</name><argument_list>(<argument>Q6V64_CREATE_B(b7, b6, b5, b4, b3, b2, b1, b0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Q6Vect64C</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>data</name><argument_list>(<argument>v.data</argument>)</argument_list></macro> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Q6Vect64C</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Q6Vect64C</name> <operator>&amp;</operator><name>v</name><operator>)</operator> <block>{
<expr><name>data</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>data</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>operator</name> <name>long</name></type> <name>long</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>long</name> <name>long</name></type> <name>D</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_D</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>UD</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UD</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>int</name></type> <name>W0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_W0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>int</name></type> <name>W1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_W1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>int</name></type> <name>UW0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UW0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>int</name></type> <name>UW1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UW1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>short</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_H2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_H3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UH0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UH1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UH2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UH3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>signed</name> <name>char</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B4</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B5</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B6</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B6</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B7</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_B7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB4</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB5</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB6</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB6</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB7</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V64_GET_UB7</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>




<function><type><name>Q6Vect64C</name></type> <name>D</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_D</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>Q6Vect64C</name></type> <name>W0</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_W0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>W1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_W1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>Q6Vect64C</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>H2</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_H2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>H3</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_H3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>Q6Vect64C</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>B4</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B4</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>B5</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B5</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>B6</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B6</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect64C</name></type> <name>B7</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect64C</name><argument_list>(<argument><expr><call><name>Q6V64_PUT_B7</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>data</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>int</name></type> <name>Q6Vect32</name>;</typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_W</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_UW</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned int)(v))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.h[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.h[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_UH0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned short uh[2]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.uh[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_UH1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned short uh[2]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.uh[1]; })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; signed char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[3]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_UB0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.ub[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_UB1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.ub[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_UB2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.ub[2]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_GET_UB3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; unsigned char ub[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.ub[3]; })</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_W</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(new)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.h[0] = (new); _Q6V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; short h[2]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.h[1] = (new); _Q6V32_internal_union.w; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_H0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff0000) | ((Q6Vect32)((unsigned short)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_H1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x0000ffff) | (((Q6Vect32)(new)) &lt;&lt; 16))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[0] = (new); _Q6V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[1] = (new); _Q6V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[2] = (new); _Q6V32_internal_union.w; })</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { int w; char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.w = (v); _Q6V32_internal_union.b[3] = (new); _Q6V32_internal_union.w; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffffff00) | ((Q6Vect32)((unsigned char)(new))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xffff00ff) | (((Q6Vect32)((unsigned char)(new))) &lt;&lt; 8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0xff00ffff) | (((Q6Vect32)((unsigned char)(new))) &lt;&lt; 16))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_PUT_B3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &amp; 0x00ffffff) | (((Q6Vect32)(new)) &lt;&lt; 24))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_CREATE_W</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(w)</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_CREATE_H</name><parameter_list>(<parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; short h[2]; } _Q6V32_internal_union; _Q6V32_internal_union.h[0] = (h0); _Q6V32_internal_union.h[1] = (h1); _Q6V32_internal_union.d; })</cpp:value></cpp:define>










<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_CREATE_H</name><parameter_list>(<parameter><type><name>h1</name></type></parameter>, <parameter><type><name>h0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((Q6Vect32)(h1)) &lt;&lt; 16) | ((Q6Vect32)((h0) &amp; 0xffff)))</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__qdsp6__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_CREATE_B</name><parameter_list>(<parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { long long d; char b[4]; } _Q6V32_internal_union; _Q6V32_internal_union.b[0] = (b0); _Q6V32_internal_union.b[1] = (b1); _Q6V32_internal_union.b[2] = (b2); _Q6V32_internal_union.b[3] = (b3); _Q6V32_internal_union.d; })</cpp:value></cpp:define>












<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q6V32_CREATE_B</name><parameter_list>(<parameter><type><name>b3</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((Q6Vect32)(b3)) &lt;&lt; 24) | (((Q6Vect32)((b2) &amp; 0xff)) &lt;&lt; 16) | (((Q6Vect32)((b1) &amp; 0xff)) &lt;&lt; 8) | ((Q6Vect32)((b0) &amp; 0xff)))</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>Q6Vect32C</name> <block>{<block_content>
<label><name>public</name>:</label>

<macro><name>Q6Vect32C</name><argument_list>(<argument>int w = <literal type="number">0</literal></argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>w</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>Q6Vect32C</name><argument_list>(<argument>short h1</argument>, <argument>short h0</argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>Q6V32_CREATE_H(h1, h0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>Q6Vect32C</name><argument_list>(<argument>signed char b3</argument>, <argument>signed char b2</argument>, <argument>signed char b1</argument>, <argument>signed char b0</argument>)</argument_list></macro>
: <macro><name>data</name><argument_list>(<argument>Q6V32_CREATE_B(b3, b2, b1, b0)</argument>)</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Q6Vect32C</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>data</name><argument_list>(<argument>v.data</argument>)</argument_list></macro> <block>{}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>Q6Vect32C</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Q6Vect32C</name> <operator>&amp;</operator><name>v</name><operator>)</operator> <block>{
<expr><name>data</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>data</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><name>operator</name></type> <name>int</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>int</name></type> <name>W</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_W</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>int</name></type> <name>UW</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_UW</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>short</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>short</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_UH0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>short</name></type> <name>UH1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_UH1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>signed</name> <name>char</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>signed</name> <name>char</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_UB0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_UB1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_UB2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>unsigned</name> <name>char</name></type> <name>UB3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6V32_GET_UB3</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>




<function><type><name>Q6Vect32C</name></type> <name>W</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><call><name>Q6V32_PUT_W</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>Q6Vect32C</name></type> <name>H0</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><call><name>Q6V32_PUT_H0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect32C</name></type> <name>H1</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><call><name>Q6V32_PUT_H1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>Q6Vect32C</name></type> <name>B0</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><call><name>Q6V32_PUT_B0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect32C</name></type> <name>B1</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><call><name>Q6V32_PUT_B1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect32C</name></type> <name>B2</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><call><name>Q6V32_PUT_B2</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>Q6Vect32C</name></type> <name>B3</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>char</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Q6Vect32C</name><argument_list>(<argument><expr><call><name>Q6V32_PUT_B3</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__HVX_ARCH__</name> <operator>&gt;=</operator> <literal type="number">65</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__HVX__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__HVX_LENGTH__</name> <operator>==</operator> <literal type="number">128</literal><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>Q6VecPred128</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>Q6Vect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<typedef>typedef <type><name>long</name> <name>Q6Vect2048</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(256)))
<name>__attribute__</name>((<name>aligned</name>(256)));</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__HVX__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>__HVX_LENGTH__</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr></cpp:if>
<typedef>typedef <type><name>long</name> <name>Q6VecPred64</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(64)))
<name>__attribute__</name>((<name>aligned</name>(64)));</typedef>

<typedef>typedef <type><name>long</name> <name>Q6Vect512</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(64)))
<name>__attribute__</name>((<name>aligned</name>(64)));</typedef>

<typedef>typedef <type><name>long</name> <name>Q6Vect1024</name></type> <name>__attribute__</name>((<name>__vector_size__</name>(128)))
<name>__attribute__</name>((<name>aligned</name>(128)));</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>int</name></type> <name>Q6Pred</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HVX__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_GET_W</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_GET_V0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { HVX_VectorPair W; HVX_Vector V[2]; } _HEXAGON_HVX_internal_union; _HEXAGON_HVX_internal_union.W = (v); _HEXAGON_HVX_internal_union.V[0]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_GET_V1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { HVX_VectorPair W; HVX_Vector V[2]; } _HEXAGON_HVX_internal_union; _HEXAGON_HVX_internal_union.W = (v); _HEXAGON_HVX_internal_union.V[1]; })</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_GET_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { HVX_VectorPair W; HVX_VectorPred P[2]; } _HEXAGON_HVX_internal_union; _HEXAGON_HVX_internal_union.W = (v); _HEXAGON_HVX_internal_union.P[0]; })</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_PUT_W</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(new)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_PUT_V0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { HVX_VectorPair W; HVX_Vector V[2]; } _HEXAGON_HVX_internal_union; _HEXAGON_HVX_internal_union.W = (v); _HEXAGON_HVX_internal_union.V[0] = (new); _HEXAGON_HVX_internal_union.W; })</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_PUT_V1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { HVX_VectorPair W; HVX_Vector V[2]; } _HEXAGON_HVX_internal_union; _HEXAGON_HVX_internal_union.W = (v); _HEXAGON_HVX_internal_union.V[1] = (new); _HEXAGON_HVX_internal_union.W; })</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_PUT_P</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>new</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { HVX_VectorPair W; HVX_VectorPred P[2]; } _HEXAGON_HVX_internal_union; _HEXAGON_HVX_internal_union.W = (v); _HEXAGON_HVX_internal_union.P[0] = (new); _HEXAGON_HVX_internal_union.W; })</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_HVX_CREATE_W</name><parameter_list>(<parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__extension__({ union { HVX_VectorPair W; HVX_Vector V[2]; } _HEXAGON_HVX_internal_union; _HEXAGON_HVX_internal_union.V[0] = (v0); _HEXAGON_HVX_internal_union.V[1] = (v1); _HEXAGON_HVX_internal_union.W; })</cpp:value></cpp:define>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>class</name></type> <name>HVX_Vect</name> <block>{<block_content>
<label><name>public</name>:</label>


<expr_stmt><expr><call><name>HVX_Vect</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>data</name><argument_list>(<argument>Q6_W_vcombine_VV(Q6_V_vzero(), Q6_V_vzero())</argument>)</argument_list></macro><block>{}</block></expr>;</expr_stmt>


<macro><name>HVX_Vect</name><argument_list>(<argument>HVX_VectorPair W</argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>W</argument>)</argument_list></macro><block>{<block_content/>}</block><empty_stmt>;</empty_stmt>
<macro><name>HVX_Vect</name><argument_list>(<argument>HVX_Vector v1</argument>, <argument>HVX_Vector v0</argument>)</argument_list></macro> : <macro><name>data</name><argument_list>(<argument>HEXAGON_HVX_CREATE_W(v1, v0)</argument>)</argument_list></macro><block>{<block_content/>}</block><empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name>HVX_Vect</name><argument_list>(<argument><expr><specifier>const</specifier> <name>HVX_Vect</name> <operator>&amp;</operator><name>W</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><call><name>HVX_Vect</name><argument_list>(<argument><expr><name>HVX_Vect</name> <operator>&amp;&amp;</operator><name>W</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<decl_stmt><decl><type><name>HVX_Vect</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>HVX_Vect</name> <operator>&amp;</operator><name>W</name><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>

<function><type><name>operator</name></type> <name>HVX_VectorPair</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>data</name></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HVX_VectorPair</name></type> <name>W</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HEXAGON_HVX_GET_W</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HVX_Vector</name></type> <name>V0</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HEXAGON_HVX_GET_V0</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HVX_Vector</name></type> <name>V1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HEXAGON_HVX_GET_V1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HVX_VectorPred</name></type> <name>P</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HEXAGON_HVX_GET_P</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>



<function><type><name>HVX_Vect</name></type> <name>W</name><parameter_list>(<parameter><decl><type><name>HVX_VectorPair</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HVX_Vect</name><argument_list>(<argument><expr><call><name>HEXAGON_HVX_PUT_W</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>


<function><type><name>HVX_Vect</name></type> <name>V0</name><parameter_list>(<parameter><decl><type><name>HVX_Vector</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HVX_Vect</name><argument_list>(<argument><expr><call><name>HEXAGON_HVX_PUT_V0</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HVX_Vect</name></type> <name>V1</name><parameter_list>(<parameter><decl><type><name>HVX_Vector</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HVX_Vect</name><argument_list>(<argument><expr><call><name>HEXAGON_HVX_PUT_V1</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>HVX_Vect</name></type> <name>P</name><parameter_list>(<parameter><decl><type><name>HVX_VectorPred</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>HVX_Vect</name><argument_list>(<argument><expr><call><name>HEXAGON_HVX_PUT_P</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>HVX_VectorPair</name></type> <name>data</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DM0_STATUS_IDLE</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DM0_STATUS_RUN</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DM0_STATUS_ERROR</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_DSTATE_INCOMPLETE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_DSTATE_COMPLETE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_ORDER_NOORDER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_ORDER_ORDER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_BYPASS_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_BYPASS_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_COMP_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_COMP_DLBC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_DESCTYPE_TYPE0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEXAGON_UDMA_DESC_DESCTYPE_TYPE1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>hexagon_udma_descriptor_type0_s</name>
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name><range>:<expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>desctype</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstcomp</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srccomp</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstbypass</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcbypass</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>order</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstate</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
}</block></struct></type> <name>hexagon_udma_descriptor_type0_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>hexagon_udma_descriptor_type1_s</name>
<block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name><range>:<expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>desctype</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstcomp</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srccomp</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstbypass</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcbypass</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>order</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstate</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>allocation</name><range>:<expr><literal type="number">28</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>padding</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>roiwidth</name><range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>roiheight</name><range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcstride</name><range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dststride</name><range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>srcwidthoffset</name><range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dstwidthoffset</name><range>:<expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>hexagon_udma_descriptor_type1_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
