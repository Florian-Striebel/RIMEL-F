<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Basic/Targets/NVPTX.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_BASIC_TARGETS_NVPTX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_BASIC_TARGETS_NVPTX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Cuda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TargetOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>targets</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>NVPTXAddrSpaceMap</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">4</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">1</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>,
<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>NVPTXDWARFAddrSpaceMap</name><index>[]</index></name> <init>= <expr><block>{
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">5</literal></expr>,
<expr><operator>-</operator><literal type="number">1</literal></expr>,
<expr><literal type="number">8</literal></expr>,
<expr><literal type="number">4</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>NVPTXTargetInfo</name> <range>: <expr><name>public</name> <name>TargetInfo</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name><name>GCCRegNames</name><index>[]</index></name></expr>;
<expr><specifier>static</specifier> <specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <name><name>BuiltinInfo</name><index>[]</index></name></expr>;
<expr><name>CudaArch</name> <name>GPU</name></expr>;
<expr><name>uint32_t</name> <name>PTXVersion</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name></expr></argument>&gt;</argument_list></name> <name>HostTarget</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>NVPTXTargetInfo</name><argument_list>(<argument>const llvm::Triple &amp;Triple</argument>, <argument>const TargetOptions &amp;Opts</argument>,
<argument>unsigned TargetPointerWidth</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>getTargetDefines</name><argument_list>(<argument>const LangOptions &amp;Opts</argument>,
<argument>MacroBuilder &amp;Builder</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Builtin</name><operator>::</operator><name>Info</name></expr></argument>&gt;</argument_list></name> <macro><name>getTargetBuiltins</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name>
<macro><name>initFeatureMap</name><argument_list>(<argument>llvm::StringMap&lt;bool&gt; &amp;Features</argument>, <argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>StringRef CPU</argument>,
<argument>const std::vector&lt;std::string&gt; &amp;FeaturesVec</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><name><name>Features</name><index>[<expr><call><name>CudaArchToString</name><argument_list>(<argument><expr><name>GPU</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Features</name><index>[<expr><literal type="string">"ptx"</literal> <operator>+</operator> <name>std</name><operator>::</operator><call><name>to_string</name><argument_list>(<argument><expr><name>PTXVersion</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<return>return <expr><name>TargetInfo</name><operator>::</operator><call><name>initFeatureMap</name><argument_list>(<argument><expr><name>Features</name></expr></argument>, <argument><expr><name>Diags</name></expr></argument>, <argument><expr><name>CPU</name></expr></argument>, <argument><expr><name>FeaturesVec</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>hasFeature</name><argument_list>(<argument>StringRef Feature</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegNames</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TargetInfo</name><operator>::</operator><name>GCCRegAlias</name></expr></argument>&gt;</argument_list></name> <macro><name>getGCCRegAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>None</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>validateAsmConstraint</name><argument_list>(<argument>const char *&amp;Name</argument>,
<argument>TargetInfo::ConstraintInfo &amp;Info</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<switch>switch <condition>(<expr><operator>*</operator><name>Name</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><call><name><name>Info</name><operator>.</operator><name>setAllowsRegister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
}

const char *getClobbers(</block></switch>) <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block></block>

<name>BuiltinVaListKind</name> <macro><name>getBuiltinVaListKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>TargetInfo</name><operator>::</operator><name>CharPtrBuiltinVaList</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isValidCPUName</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name>StringToCudaArch</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CudaArch</name><operator>::</operator><name>UNKNOWN</name></expr>;</return>
}</block>

<name>void</name> <macro><name>fillValidCPUList</name><argument_list>(<argument>SmallVectorImpl&lt;StringRef&gt; &amp;Values</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CudaArch</name><operator>::</operator><name>SM_20</name></expr></argument>)</argument_list></call></expr></init></decl>;</init>
<condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CudaArch</name><operator>::</operator><name>LAST</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Values</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>CudaArchToString</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CudaArch</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block>

<name>bool</name> <macro><name>setCPU</name><argument_list>(<argument>const std::string &amp;Name</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>GPU</name> <operator>=</operator> <call><name>StringToCudaArch</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>GPU</name> <operator>!=</operator> <name>CudaArch</name><operator>::</operator><name>UNKNOWN</name></expr>;</return>
}</block>

<name>void</name> <macro><name>setSupportedOpenCLOpts</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><name>auto</name> <operator>&amp;</operator><name>Opts</name> <operator>=</operator> <call><name>getSupportedOpenCLOpts</name><argument_list>()</argument_list></call></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"cl_clang_storage_class_specifiers"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"__cl_clang_function_pointers"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"__cl_clang_variadic_functions"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"__cl_clang_non_portable_kernel_param_types"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"__cl_clang_bitfields"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;

<expr><name><name>Opts</name><index>[<expr><literal type="string">"cl_khr_fp64"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"__opencl_c_fp64"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"cl_khr_byte_addressable_store"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"cl_khr_global_int32_base_atomics"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"cl_khr_global_int32_extended_atomics"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"cl_khr_local_int32_base_atomics"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>Opts</name><index>[<expr><literal type="string">"cl_khr_local_int32_extended_atomics"</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;
}</block>







<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<macro><name>getDWARFAddressSpace</name><argument_list>(<argument>unsigned AddressSpace</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>AddressSpace</name> <operator>&gt;=</operator> <name>llvm</name><operator>::</operator><call><name>array_lengthof</name><argument_list>(<argument><expr><name>NVPTXDWARFAddrSpaceMap</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>NVPTXDWARFAddrSpaceMap</name><index>[<expr><name>AddressSpace</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name><name>NVPTXDWARFAddrSpaceMap</name><index>[<expr><name>AddressSpace</name></expr>]</index></name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>CallingConvCheckResult</name></type> <name>checkCallingConvention</name><argument_list>(<argument><expr><name>CallingConv</name> <name>CC</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>HostTarget</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>HostTarget</name><operator>-&gt;</operator><name>checkCallingConvention</name></name><argument_list>(<argument><expr><name>CC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>CCCR_Warning</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExtIntType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
