<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPITypes.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPITYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPITYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Checkers/MPIFunctionClassifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallSet.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mpi</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Request</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>State</name> : <type><name>unsigned</name> <name>char</name></type> <block>{ <decl><name>Nonblocking</name></decl>, <decl><name>Wait</name></decl> }</block>;</enum>

<macro><name>Request</name><argument_list>(<argument>State S</argument>)</argument_list></macro> : <macro><name>CurrentState</name></macro><block>{<block_content><expr><name>S</name></expr></block_content>}</block> <block>{<block_content/>}</block>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>Id</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>Id</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><name>CurrentState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Request</name> <operator>&amp;</operator><name>ToCompare</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>CurrentState</name> <operator>==</operator> <name><name>ToCompare</name><operator>.</operator><name>CurrentState</name></name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>State</name></type> <name>CurrentState</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<struct>struct <name>RequestMap</name> <block>{}</block>;</struct>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>MemRegion</name> <operator>*</operator></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>mpi</name><operator>::</operator><name>Request</name></expr></argument>&gt;</argument_list></name>
<name>RequestMapImpl</name></expr>;</expr_stmt></typedef>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct</type> <name><name>ProgramStateTrait</name><argument_list type="generic">&lt;<argument><expr><name>mpi</name><operator>::</operator><name>RequestMap</name></expr></argument>&gt;</argument_list></name>
<range>: <expr><name>public</name> <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><name>mpi</name><operator>::</operator><name>RequestMapImpl</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>GDMIndex</name><argument_list>()</argument_list></macro> <block>{
<expr><specifier>static</specifier> <name>int</name> <name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<return>return <expr><operator>&amp;</operator><name>index</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
