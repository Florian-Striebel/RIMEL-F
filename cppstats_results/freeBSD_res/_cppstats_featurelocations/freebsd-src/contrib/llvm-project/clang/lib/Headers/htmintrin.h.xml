<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/htmintrin.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HTMINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__HTMINTRIN_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HTM__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"HTM instruction set not enabled"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>uint64_t</name></type> <name>texasr_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>texasru_t</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>texasrl_t</name>;</typedef>
<typedef>typedef <type><name>uintptr_t</name></type> <name>tfiar_t</name>;</typedef>
<typedef>typedef <type><name>uintptr_t</name></type> <name>tfhar_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_STATE</name><parameter_list>(<parameter><type><name>CR0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CR0 &gt;&gt; 1) &amp; 0x3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_NONTRANSACTIONAL</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_SUSPENDED</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_TRANSACTIONAL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_EXTRACT_BITS</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>,<parameter><type><name>BITNUM</name></type></parameter>,<parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((TEXASR) &gt;&gt; (63-(BITNUM))) &amp; ((1&lt;&lt;(SIZE))-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_EXTRACT_BITS</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>,<parameter><type><name>BITNUM</name></type></parameter>,<parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((TEXASR) &gt;&gt; (31-(BITNUM))) &amp; ((1&lt;&lt;(SIZE))-1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_FAILURE_CODE</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 7, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_FAILURE_CODE</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 7, 8)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_FAILURE_PERSISTENT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 7, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_FAILURE_PERSISTENT</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 7, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_DISALLOWED</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 8, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_DISALLOWED</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 8, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_NESTING_OVERFLOW</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 9, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_NESTING_OVERFLOW</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 9, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_FOOTPRINT_OVERFLOW</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 10, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_FOOTPRINT_OVERFLOW</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 10, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_SELF_INDUCED_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 11, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_SELF_INDUCED_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 11, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_NON_TRANSACTIONAL_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 12, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_NON_TRANSACTIONAL_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 12, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_TRANSACTION_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 13, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_TRANSACTION_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 13, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_TRANSLATION_INVALIDATION_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 14, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_TRANSLATION_INVALIDATION_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 14, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_IMPLEMENTAION_SPECIFIC</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 15, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_IMPLEMENTAION_SPECIFIC</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 15, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_INSTRUCTION_FETCH_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 16, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_INSTRUCTION_FETCH_CONFLICT</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 16, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_ABORT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 31, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_ABORT</name><parameter_list>(<parameter><type><name>TEXASRU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASRU_EXTRACT_BITS(TEXASRU, 31, 1)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_SUSPENDED</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 32, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_PRIVILEGE</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 35, 2)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_FAILURE_SUMMARY</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 36, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_TFIAR_EXACT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 37, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_ROT</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 38, 1)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_TRANSACTION_LEVEL</name><parameter_list>(<parameter><type><name>TEXASR</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_TEXASR_EXTRACT_BITS(TEXASR, 63, 12)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_TBEGIN_STARTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_TBEGIN_INDETERMINATE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_TBEGIN_TRANSIENT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_TBEGIN_PERSISTENT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_FIRST_USER_ABORT_CODE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>




<struct>struct <name>__htm_tdb</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>reserved1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>nesting_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>abort_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>conflict_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>atia</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>eaid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>dxc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>reserved2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>program_int_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>exception_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>bea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>reserved3</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>gprs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__packed__</name><operator>,</operator> <call><name>__aligned__</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>




<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_tbegin_retry_null</name> <argument_list>(<argument><expr><name>int</name> <name>__retry</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cc</name> <operator>=</operator> <call><name>__builtin_tbegin</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>_HTM_TBEGIN_TRANSIENT</name>
<operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name>__retry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__builtin_tx_assist</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>cc</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_tbegin_retry_tdb</name> <argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__tdb</name></expr></argument>, <argument><expr><name>int</name> <name>__retry</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cc</name> <operator>=</operator> <call><name>__builtin_tbegin</name><argument_list>(<argument><expr><name>__tdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>_HTM_TBEGIN_TRANSIENT</name>
<operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name>__retry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__builtin_tx_assist</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>cc</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_tbegin_retry</name><parameter_list>(<parameter><type><name>tdb</name></type></parameter>, <parameter><type><name>retry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_constant_p(tdb == 0) &amp;&amp; tdb == 0 ? __builtin_tbegin_retry_null(retry) : __builtin_tbegin_retry_tdb(tdb, retry))</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_tbegin_retry_nofloat_null</name> <argument_list>(<argument><expr><name>int</name> <name>__retry</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cc</name> <operator>=</operator> <call><name>__builtin_tbegin_nofloat</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>_HTM_TBEGIN_TRANSIENT</name>
<operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name>__retry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__builtin_tx_assist</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>cc</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__builtin_tbegin_retry_nofloat_tdb</name> <argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>__tdb</name></expr></argument>, <argument><expr><name>int</name> <name>__retry</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>cc</name> <operator>=</operator> <call><name>__builtin_tbegin_nofloat</name><argument_list>(<argument><expr><name>__tdb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>_HTM_TBEGIN_TRANSIENT</name>
<operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name>__retry</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>__builtin_tx_assist</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>cc</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__builtin_tbegin_retry_nofloat</name><parameter_list>(<parameter><type><name>tdb</name></type></parameter>, <parameter><type><name>retry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_constant_p(tdb == 0) &amp;&amp; tdb == 0 ? __builtin_tbegin_retry_nofloat_null(retry) : __builtin_tbegin_retry_nofloat_tdb(tdb, retry))</cpp:value></cpp:define>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
