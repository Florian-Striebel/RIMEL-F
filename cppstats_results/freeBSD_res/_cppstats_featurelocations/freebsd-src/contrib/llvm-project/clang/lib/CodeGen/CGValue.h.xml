<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGValue.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGVALUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGVALUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Address.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenTBAA.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Constant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MDNode</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>AggValueSlot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>
<struct_decl>struct <name>CGBitFieldInfo</name>;</struct_decl>





<decl_stmt><decl><type><name>class</name></type> <name>RValue</name> <block>{<block_content>
<enum>enum <name>Flavor</name> <block>{ <decl><name>Scalar</name></decl>, <decl><name>Complex</name></decl>, <decl><name>Aggregate</name></decl> }</block>;</enum>



<enum>enum <block>{ <decl><name>AggAlignShift</name> <init>= <expr><literal type="number">4</literal></expr></init></decl> }</block>;</enum>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Flavor</name></expr></argument>&gt;</argument_list></name> <name>V1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>V2</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>isScalar</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>V1</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Scalar</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isComplex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>V1</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Complex</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isAggregate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>V1</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Aggregate</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isVolatileQualified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>V2</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getScalarVal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isScalar</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Not a scalar!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>V1</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getComplexVal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>V1</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>V2</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Address</name> <macro><name>getAggregateAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAggregate</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Not an aggregate!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>auto</name> <name>align</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>V2</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>AggAlignShift</name></expr>;
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name><name>V1</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getAggregatePointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAggregate</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Not an aggregate!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>V1</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>RValue</name></type> <name>getIgnored</name><parameter_list>()</parameter_list> <block>{<block_content>

<return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>RValue</name></type> <name>get</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>V</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>RValue</name></type> <name>ER</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V1</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V1</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>Scalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V2</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ER</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RValue</name></type> <name>getComplex</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>V1</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>V2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>RValue</name></type> <name>ER</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V1</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V2</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V1</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>Complex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V2</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ER</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>RValue</name></type> <name>getComplex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getComplex</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><specifier>static</specifier> <name>RValue</name></type> <name>getAggregate</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isVolatile</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>RValue</name></type> <name>ER</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V1</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><call><name><name>addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V1</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>Aggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>auto</name></type> <name>align</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V2</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>align</name> <operator>&lt;&lt;</operator> <name>AggAlignShift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ER</name><operator>.</operator><name>V2</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>isVolatile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ER</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<enum>enum <name>ARCPreciseLifetime_t</name> <block>{
<decl><name>ARCImpreciseLifetime</name></decl>, <decl><name>ARCPreciseLifetime</name></decl>
}</block>;</enum>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>AlignmentSource</name> <block>{<block_content>



<expr_stmt><expr><name>Decl</name></expr><operator>,</operator>




<expr><name>AttributedType</name></expr><operator>,</operator>



<expr><name>Type</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AlignmentSource</name></type> <name>getFieldAlignmentSource</name><parameter_list>(<parameter><decl><type><name>AlignmentSource</name></type> <name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content>


<return>return <expr><name>AlignmentSource</name><operator>::</operator><name>Decl</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>LValueBaseInfo</name> <block>{<block_content>
<decl_stmt><decl><type><name>AlignmentSource</name></type> <name>AlignSource</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>explicit</name></macro> <macro><name>LValueBaseInfo</name><argument_list>(<argument>AlignmentSource Source = AlignmentSource::Type</argument>)</argument_list></macro>
: <macro><name>AlignSource</name><argument_list>(<argument>Source</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>AlignmentSource</name> <macro><name>getAlignmentSource</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AlignSource</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAlignmentSource</name><parameter_list>(<parameter><decl><type><name>AlignmentSource</name></type> <name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>AlignSource</name> <operator>=</operator> <name>Source</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>mergeForCast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LValueBaseInfo</name> <modifier>&amp;</modifier></type><name>Info</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>setAlignmentSource</name><argument_list>(<argument><expr><call><name><name>Info</name><operator>.</operator><name>getAlignmentSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>LValue</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>Simple</name></decl>,
<decl><name>VectorElt</name></decl>,
<decl><name>BitField</name></decl>,
<decl><name>ExtVectorElt</name></decl>,
<decl><name>GlobalReg</name></decl>,
<decl><name>MatrixElt</name></decl>
}</block> <decl><name>LVType</name></decl>;</enum>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>V</name></expr>;</expr_stmt>

<union>union <block>{

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>VectorIdx</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>VectorElts</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>CGBitFieldInfo</name> <modifier>*</modifier></type><name>BitFieldInfo</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>QualType</name></type> <name>Type</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Qualifiers</name></type> <name>Quals</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Alignment</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Ivar</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ObjIsArray</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>NonGC</name><range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>GlobalObjCRef</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ThreadLocalRef</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>ImpreciseLifetime</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>Nontemporal</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LValueBaseInfo</name></type> <name>BaseInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TBAAAccessInfo</name></type> <name>TBAAInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>BaseIvarExp</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>Initialize</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>Type</name></decl></parameter>, <parameter><decl><type><name>Qualifiers</name></type> <name>Quals</name></decl></parameter>, <parameter><decl><type><name>CharUnits</name></type> <name>Alignment</name></decl></parameter>,
<parameter><decl><type><name>LValueBaseInfo</name></type> <name>BaseInfo</name></decl></parameter>, <parameter><decl><type><name>TBAAAccessInfo</name></type> <name>TBAAInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><call><name><name>Alignment</name><operator>.</operator><name>isZero</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>Type</name><operator>-&gt;</operator><name>isIncompleteType</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"initializing l-value with zero alignment!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Type</name></name> <operator>=</operator> <name>Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Quals</name></name> <operator>=</operator> <name>Quals</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>MaxAlign</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Alignment</name></name> <operator>=</operator> <ternary><condition><expr><call><name><name>Alignment</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>MaxAlign</name></expr>
?</condition><then> <expr><call><name><name>Alignment</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><name>MaxAlign</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>Alignment</name></name> <operator>==</operator> <call><name><name>Alignment</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Alignment exceeds allowed max!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>BaseInfo</name></name> <operator>=</operator> <name>BaseInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>TBAAInfo</name></name> <operator>=</operator> <name>TBAAInfo</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Ivar</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>ObjIsArray</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>NonGC</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>GlobalObjCRef</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>ImpreciseLifetime</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Nontemporal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>ThreadLocalRef</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>BaseIvarExp</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>isSimple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LVType</name> <operator>==</operator> <name>Simple</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isVectorElt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LVType</name> <operator>==</operator> <name>VectorElt</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isBitField</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LVType</name> <operator>==</operator> <name>BitField</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isExtVectorElt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LVType</name> <operator>==</operator> <name>ExtVectorElt</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isGlobalReg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LVType</name> <operator>==</operator> <name>GlobalReg</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isMatrixElt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LVType</name> <operator>==</operator> <name>MatrixElt</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isVolatileQualified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Quals</name><operator>.</operator><name>hasVolatile</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isRestrictQualified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Quals</name><operator>.</operator><name>hasRestrict</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getVRQualifiers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Quals</name><operator>.</operator><name>getCVRQualifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>Qualifiers</name><operator>::</operator><name>Const</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Type</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>Qualifiers</name><operator>::</operator><name>ObjCLifetime</name> <macro><name>getObjCLifetime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Quals</name><operator>.</operator><name>getObjCLifetime</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isObjCIvar</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ivar</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setObjCIvar</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Ivar</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isObjCArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ObjIsArray</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setObjCArray</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>ObjIsArray</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isNonGC</name> <argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NonGC</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setNonGC</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>NonGC</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isGlobalObjCRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>GlobalObjCRef</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setGlobalObjCRef</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>GlobalObjCRef</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isThreadLocalRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ThreadLocalRef</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setThreadLocalRef</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>ThreadLocalRef</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt></block_content>}</block></function>

<expr_stmt><expr><name>ARCPreciseLifetime_t</name> <macro><name>isARCPreciseLifetime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>ARCPreciseLifetime_t</name><argument_list>(<argument><expr><operator>!</operator><name>ImpreciseLifetime</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setARCPreciseLifetime</name><parameter_list>(<parameter><decl><type><name>ARCPreciseLifetime_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ImpreciseLifetime</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>ARCImpreciseLifetime</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>isNontemporal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Nontemporal</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setNontemporal</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Nontemporal</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isObjCWeak</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Quals</name><operator>.</operator><name>getObjCGCAttr</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Qualifiers</name><operator>::</operator><name>Weak</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isObjCStrong</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Quals</name><operator>.</operator><name>getObjCGCAttr</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Qualifiers</name><operator>::</operator><name>Strong</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isVolatile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Quals</name><operator>.</operator><name>hasVolatile</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getBaseIvarExp</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BaseIvarExp</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setBaseIvarExp</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>V</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>BaseIvarExp</name> <operator>=</operator> <name>V</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>TBAAAccessInfo</name> <macro><name>getTBAAInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TBAAInfo</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setTBAAInfo</name><parameter_list>(<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>Info</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>TBAAInfo</name> <operator>=</operator> <name>Info</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Qualifiers</name> <operator>&amp;</operator><macro><name>getQuals</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Quals</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Qualifiers</name> <modifier>&amp;</modifier></type><name>getQuals</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Quals</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>LangAS</name> <macro><name>getAddressSpace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Quals</name><operator>.</operator><name>getAddressSpace</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAlignment</name><parameter_list>(<parameter><decl><type><name>CharUnits</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Alignment</name> <operator>=</operator> <call><name><name>A</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>LValueBaseInfo</name> <macro><name>getBaseInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BaseInfo</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setBaseInfo</name><parameter_list>(<parameter><decl><type><name>LValueBaseInfo</name></type> <name>Info</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>BaseInfo</name> <operator>=</operator> <name>Info</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getPointer</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isSimple</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>V</name></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>Address</name></type> <name>getAddress</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>getPointer</name><argument_list>(<argument><expr><name>CGF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getAlignment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>void</name></type> <name>setAddress</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isSimple</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name><name>address</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Alignment</name> <operator>=</operator> <call><name><name>address</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>Address</name> <macro><name>getVectorAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>getVectorPointer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAlignment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getVectorPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isVectorElt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>V</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getVectorIdx</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isVectorElt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>VectorIdx</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Address</name> <macro><name>getMatrixAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>getMatrixPointer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAlignment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getMatrixPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isMatrixElt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>V</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getMatrixIdx</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isMatrixElt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>VectorIdx</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Address</name> <macro><name>getExtVectorAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>getExtVectorPointer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAlignment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getExtVectorPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isExtVectorElt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>V</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>getExtVectorElts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isExtVectorElt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>VectorElts</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Address</name> <macro><name>getBitFieldAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><call><name>getBitFieldPointer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAlignment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getBitFieldPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isBitField</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>CGBitFieldInfo</name> <operator>&amp;</operator><macro><name>getBitFieldInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isBitField</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>BitFieldInfo</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getGlobalReg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isGlobalReg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>; <return>return <expr><name>V</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>LValue</name></type> <name>MakeAddr</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>,
<parameter><decl><type><name>LValueBaseInfo</name></type> <name>BaseInfo</name></decl></parameter>, <parameter><decl><type><name>TBAAAccessInfo</name></type> <name>TBAAInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Qualifiers</name></type> <name>qs</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getQualifiers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>qs</name><operator>.</operator><name>setObjCGCAttr</name></name><argument_list>(<argument><expr><call><name><name>Context</name><operator>.</operator><name>getObjCGCAttrKind</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>LValue</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>LVType</name></name> <operator>=</operator> <name>Simple</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isPointerTy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>address</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BaseInfo</name></expr></argument>, <argument><expr><name>TBAAInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>LValue</name></type> <name>MakeVectorElt</name><argument_list>(<argument><expr><name>Address</name> <name>vecAddress</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Idx</name></expr></argument>,
<argument><expr><name>QualType</name> <name>type</name></expr></argument>, <argument><expr><name>LValueBaseInfo</name> <name>BaseInfo</name></expr></argument>,
<argument><expr><name>TBAAAccessInfo</name> <name>TBAAInfo</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>LValue</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>LVType</name></name> <operator>=</operator> <name>VectorElt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>vecAddress</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>VectorIdx</name></name> <operator>=</operator> <name>Idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getQualifiers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vecAddress</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>BaseInfo</name></expr></argument>, <argument><expr><name>TBAAInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>LValue</name></type> <name>MakeExtVectorElt</name><argument_list>(<argument><expr><name>Address</name> <name>vecAddress</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>Elts</name></expr></argument>,
<argument><expr><name>QualType</name> <name>type</name></expr></argument>, <argument><expr><name>LValueBaseInfo</name> <name>BaseInfo</name></expr></argument>,
<argument><expr><name>TBAAAccessInfo</name> <name>TBAAInfo</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>LValue</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>LVType</name></name> <operator>=</operator> <name>ExtVectorElt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>vecAddress</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>VectorElts</name></name> <operator>=</operator> <name>Elts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getQualifiers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vecAddress</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>BaseInfo</name></expr></argument>, <argument><expr><name>TBAAInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<function><type><specifier>static</specifier> <name>LValue</name></type> <name>MakeBitfield</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>Addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CGBitFieldInfo</name> <modifier>&amp;</modifier></type><name>Info</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LValueBaseInfo</name></type> <name>BaseInfo</name></decl></parameter>,
<parameter><decl><type><name>TBAAAccessInfo</name></type> <name>TBAAInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LValue</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>LVType</name></name> <operator>=</operator> <name>BitField</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>Addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>BitFieldInfo</name></name> <operator>=</operator> <operator>&amp;</operator><name>Info</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getQualifiers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BaseInfo</name></expr></argument>,
<argument><expr><name>TBAAInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LValue</name></type> <name>MakeGlobalReg</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>Reg</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>LValue</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>LVType</name></name> <operator>=</operator> <name>GlobalReg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>Reg</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getQualifiers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Reg</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>LValueBaseInfo</name><argument_list>(<argument><expr><name>AlignmentSource</name><operator>::</operator><name>Decl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TBAAAccessInfo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>LValue</name></type> <name>MakeMatrixElt</name><argument_list>(<argument><expr><name>Address</name> <name>matAddress</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Idx</name></expr></argument>,
<argument><expr><name>QualType</name> <name>type</name></expr></argument>, <argument><expr><name>LValueBaseInfo</name> <name>BaseInfo</name></expr></argument>,
<argument><expr><name>TBAAAccessInfo</name> <name>TBAAInfo</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>LValue</name></type> <name>R</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>LVType</name></name> <operator>=</operator> <name>MatrixElt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>matAddress</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>R</name><operator>.</operator><name>VectorIdx</name></name> <operator>=</operator> <name>Idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getQualifiers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>matAddress</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>BaseInfo</name></expr></argument>, <argument><expr><name>TBAAInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>R</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>RValue</name></type> <name>asAggregateRValue</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>RValue</name><operator>::</operator><call><name>getAggregate</name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>(<argument><expr><name>CGF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>isVolatileQualified</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>AggValueSlot</name> <block>{<block_content>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Addr</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Qualifiers</name></type> <name>Quals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>Alignment</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>DestructedFlag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>ObjCGCFlag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>ZeroedFlag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>













<decl_stmt><decl><type><name>bool</name></type> <name>AliasedFlag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>OverlapFlag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>SanitizerCheckedFlag</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>IsAliased_t</name> <block>{ <decl><name>IsNotAliased</name></decl>, <decl><name>IsAliased</name></decl> }</block>;</enum>
<enum>enum <name>IsDestructed_t</name> <block>{ <decl><name>IsNotDestructed</name></decl>, <decl><name>IsDestructed</name></decl> }</block>;</enum>
<enum>enum <name>IsZeroed_t</name> <block>{ <decl><name>IsNotZeroed</name></decl>, <decl><name>IsZeroed</name></decl> }</block>;</enum>
<enum>enum <name>Overlap_t</name> <block>{ <decl><name>DoesNotOverlap</name></decl>, <decl><name>MayOverlap</name></decl> }</block>;</enum>
<enum>enum <name>NeedsGCBarriers_t</name> <block>{ <decl><name>DoesNotNeedGCBarriers</name></decl>, <decl><name>NeedsGCBarriers</name></decl> }</block>;</enum>
<enum>enum <name>IsSanitizerChecked_t</name> <block>{ <decl><name>IsNotSanitizerChecked</name></decl>, <decl><name>IsSanitizerChecked</name></decl> }</block>;</enum>



<function><type><specifier>static</specifier> <name>AggValueSlot</name></type> <name>ignored</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>forAddr</name><argument_list>(<argument><expr><name>Address</name><operator>::</operator><call><name>invalid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>Qualifiers</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>IsNotDestructed</name></expr></argument>,
<argument><expr><name>DoesNotNeedGCBarriers</name></expr></argument>, <argument><expr><name>IsNotAliased</name></expr></argument>, <argument><expr><name>DoesNotOverlap</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>AggValueSlot</name></type> <name>forAddr</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>addr</name></decl></parameter>,
<parameter><decl><type><name>Qualifiers</name></type> <name>quals</name></decl></parameter>,
<parameter><decl><type><name>IsDestructed_t</name></type> <name>isDestructed</name></decl></parameter>,
<parameter><decl><type><name>NeedsGCBarriers_t</name></type> <name>needsGC</name></decl></parameter>,
<parameter><decl><type><name>IsAliased_t</name></type> <name>isAliased</name></decl></parameter>,
<parameter><decl><type><name>Overlap_t</name></type> <name>mayOverlap</name></decl></parameter>,
<parameter><decl><type><name>IsZeroed_t</name></type> <name>isZeroed</name> <init>= <expr><name>IsNotZeroed</name></expr></init></decl></parameter>,
<parameter><decl><type><name>IsSanitizerChecked_t</name></type> <name>isChecked</name> <init>= <expr><name>IsNotSanitizerChecked</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AggValueSlot</name></type> <name>AV</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>addr</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>Addr</name></name> <operator>=</operator> <call><name><name>addr</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>Alignment</name></name> <operator>=</operator> <call><name><name>addr</name><operator>.</operator><name>getAlignment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>Addr</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>Alignment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>Quals</name></name> <operator>=</operator> <name>quals</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>DestructedFlag</name></name> <operator>=</operator> <name>isDestructed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>ObjCGCFlag</name></name> <operator>=</operator> <name>needsGC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>ZeroedFlag</name></name> <operator>=</operator> <name>isZeroed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>AliasedFlag</name></name> <operator>=</operator> <name>isAliased</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>OverlapFlag</name></name> <operator>=</operator> <name>mayOverlap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>AV</name><operator>.</operator><name>SanitizerCheckedFlag</name></name> <operator>=</operator> <name>isChecked</name></expr>;</expr_stmt>
<return>return <expr><name>AV</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AggValueSlot</name></type>
<name>forLValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LValue</name> <modifier>&amp;</modifier></type><name>LV</name></decl></parameter>, <parameter><decl><type><name>CodeGenFunction</name> <modifier>&amp;</modifier></type><name>CGF</name></decl></parameter>, <parameter><decl><type><name>IsDestructed_t</name></type> <name>isDestructed</name></decl></parameter>,
<parameter><decl><type><name>NeedsGCBarriers_t</name></type> <name>needsGC</name></decl></parameter>, <parameter><decl><type><name>IsAliased_t</name></type> <name>isAliased</name></decl></parameter>,
<parameter><decl><type><name>Overlap_t</name></type> <name>mayOverlap</name></decl></parameter>, <parameter><decl><type><name>IsZeroed_t</name></type> <name>isZeroed</name> <init>= <expr><name>IsNotZeroed</name></expr></init></decl></parameter>,
<parameter><decl><type><name>IsSanitizerChecked_t</name></type> <name>isChecked</name> <init>= <expr><name>IsNotSanitizerChecked</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>forAddr</name><argument_list>(<argument><expr><call><name><name>LV</name><operator>.</operator><name>getAddress</name></name><argument_list>(<argument><expr><name>CGF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>LV</name><operator>.</operator><name>getQuals</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isDestructed</name></expr></argument>, <argument><expr><name>needsGC</name></expr></argument>,
<argument><expr><name>isAliased</name></expr></argument>, <argument><expr><name>mayOverlap</name></expr></argument>, <argument><expr><name>isZeroed</name></expr></argument>, <argument><expr><name>isChecked</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>IsDestructed_t</name> <macro><name>isExternallyDestructed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>IsDestructed_t</name><argument_list>(<argument><expr><name>DestructedFlag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setExternallyDestructed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>destructed</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>DestructedFlag</name> <operator>=</operator> <name>destructed</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>Qualifiers</name> <macro><name>getQualifiers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Quals</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isVolatile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Quals</name><operator>.</operator><name>hasVolatile</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setVolatile</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Quals</name><operator>.</operator><name>addVolatile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Quals</name><operator>.</operator><name>removeVolatile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>Qualifiers</name><operator>::</operator><name>ObjCLifetime</name> <macro><name>getObjCLifetime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Quals</name><operator>.</operator><name>getObjCLifetime</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>NeedsGCBarriers_t</name> <macro><name>requiresGCollection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>NeedsGCBarriers_t</name><argument_list>(<argument><expr><name>ObjCGCFlag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>getPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Addr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Address</name> <macro><name>getAddress</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Address</name><argument_list>(<argument><expr><name>Addr</name></expr></argument>, <argument><expr><call><name>getAlignment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isIgnored</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Addr</name> <operator>==</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CharUnits</name> <macro><name>getAlignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>IsAliased_t</name> <macro><name>isPotentiallyAliased</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>IsAliased_t</name><argument_list>(<argument><expr><name>AliasedFlag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Overlap_t</name> <macro><name>mayOverlap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Overlap_t</name><argument_list>(<argument><expr><name>OverlapFlag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isSanitizerChecked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SanitizerCheckedFlag</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>RValue</name> <macro><name>asRValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isIgnored</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>RValue</name><operator>::</operator><call><name>getIgnored</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content> else <block>{<block_content>
<return>return <expr><name>RValue</name><operator>::</operator><call><name>getAggregate</name><argument_list>(<argument><expr><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>isVolatile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
}

void setZeroed(bool V = true</block></block></if></if_stmt>) <block>{ <expr><name>ZeroedFlag</name> <operator>=</operator> <name>V</name></expr>; }</block></block>
<name>IsZeroed_t</name> <macro><name>isZeroed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>IsZeroed_t</name><argument_list>(<argument><expr><name>ZeroedFlag</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<decl_stmt><decl><type><name>CharUnits</name></type> <name>getPreferredSize</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><name>QualType</name> <name>Type</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name>mayOverlap</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Ctx</name><operator>.</operator><name>getTypeInfoDataSizeInChars</name></name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call><operator>.</operator><name>Width</name></expr>
</then><else>: <expr><call><name><name>Ctx</name><operator>.</operator><name>getTypeSizeInChars</name></name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
