<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/BreakableToken.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_BREAKABLETOKEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_BREAKABLETOKEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Encoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TokenAnnotator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"WhitespaceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>



<function_decl><type><name>bool</name></type> <name>switchesFormatting</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Token</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>FormatStyle</name>;</struct_decl>






















































<decl_stmt><decl><type><name>class</name></type> <name>BreakableToken</name> <block>{<block_content>
<label><name>public</name>:</label>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name><operator>::</operator><name>size_type</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>Split</name></expr>;</expr_stmt></typedef>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>BreakableToken</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>virtual</name> <name>unsigned</name> <macro><name>getLineCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>









<decl_stmt><decl><type><name>virtual</name> <name>unsigned</name></type> <name>getRangeLength</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>,
<argument><expr><name>StringRef</name><operator>::</operator><name>size_type</name> <name>Length</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>StartColumn</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>













<decl_stmt><decl><type><name>virtual</name> <name>unsigned</name></type> <name>getRemainingLength</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>StartColumn</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getRangeLength</name><argument_list>(<argument><expr><name>LineIndex</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>, <argument><expr><name>StringRef</name><operator>::</operator><name>npos</name></expr></argument>, <argument><expr><name>StartColumn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><name>virtual</name> <name>unsigned</name></type> <name>getContentStartColumn</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>,
<argument><expr><name>bool</name> <name>Break</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>












<decl_stmt><decl><type><name>virtual</name> <name>unsigned</name></type> <name>getContentIndent</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>Split</name></type> <name>getSplit</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>, <argument><expr><name>unsigned</name> <name>TailOffset</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ColumnLimit</name></expr></argument>, <argument><expr><name>unsigned</name> <name>ContentStartColumn</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Regex</name> <operator>&amp;</operator><name>CommentPragmasRegex</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>insertBreak</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>, <argument><expr><name>unsigned</name> <name>TailOffset</name></expr></argument>, <argument><expr><name>Split</name> <name>Split</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>ContentIndent</name></expr></argument>,
<argument><expr><name>WhitespaceManager</name> <operator>&amp;</operator><name>Whitespaces</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>getLengthAfterCompression</name><argument_list>(<argument><expr><name>unsigned</name> <name>RemainingTokenColumns</name></expr></argument>,
<argument><expr><name>Split</name> <name>Split</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>compressWhitespace</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>, <argument><expr><name>unsigned</name> <name>TailOffset</name></expr></argument>,
<argument><expr><name>Split</name> <name>Split</name></expr></argument>,
<argument><expr><name>WhitespaceManager</name> <operator>&amp;</operator><name>Whitespaces</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>supportsReflow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>












<decl_stmt><decl><type><name>virtual</name> <name>Split</name></type> <name>getReflowSplit</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Regex</name> <operator>&amp;</operator><name>CommentPragmasRegex</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>Split</name><argument_list>(<argument><expr><name>StringRef</name><operator>::</operator><name>npos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>reflow</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>,
<argument><expr><name>WhitespaceManager</name> <operator>&amp;</operator><name>Whitespaces</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>introducesBreakBeforeToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>adaptStartOfLine</name><argument_list>(<argument><expr><name>unsigned</name> <name>LineIndex</name></expr></argument>,
<argument><expr><name>WhitespaceManager</name> <operator>&amp;</operator><name>Whitespaces</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name>virtual</name> <name>Split</name></type> <name>getSplitAfterLastLine</name><argument_list>(<argument><expr><name>unsigned</name> <name>TailOffset</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>Split</name><argument_list>(<argument><expr><name>StringRef</name><operator>::</operator><name>npos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>replaceWhitespaceAfterLastLine</name><argument_list>(<argument><expr><name>unsigned</name> <name>TailOffset</name></expr></argument>,
<argument><expr><name>Split</name> <name>SplitAfterLastLine</name></expr></argument>,
<argument><expr><name>WhitespaceManager</name> <operator>&amp;</operator><name>Whitespaces</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>insertBreak</name><argument_list>(<argument><expr><call><name>getLineCount</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TailOffset</name></expr></argument>, <argument><expr><name>SplitAfterLastLine</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Whitespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>updateNextToken</name><argument_list>(<argument><expr><name>LineState</name> <operator>&amp;</operator><name>State</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>

<label><name>protected</name>:</label>
<macro><name>BreakableToken</name><argument_list>(<argument>const FormatToken &amp;Tok</argument>, <argument>bool InPPDirective</argument>,
<argument>encoding::Encoding Encoding</argument>, <argument>const FormatStyle &amp;Style</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Tok</name><argument_list>(<argument><expr><name>Tok</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>InPPDirective</name><argument_list>(<argument><expr><name>InPPDirective</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Encoding</name><argument_list>(<argument><expr><name>Encoding</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Style</name><argument_list>(<argument>Style</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>FormatToken</name> <operator>&amp;</operator><name>Tok</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>InPPDirective</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>encoding</name><operator>::</operator><name>Encoding</name> <name>Encoding</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FormatStyle</name> <modifier>&amp;</modifier></type><name>Style</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BreakableStringLiteral</name> <range>: <expr><name>public</name> <name>BreakableToken</name> <block>{
<expr><name>public</name><operator>:</operator>




<macro><name>BreakableStringLiteral</name><argument_list>(<argument>const FormatToken &amp;Tok</argument>, <argument>unsigned StartColumn</argument>,
<argument>StringRef Prefix</argument>, <argument>StringRef Postfix</argument>,
<argument>unsigned UnbreakableTailLength</argument>, <argument>bool InPPDirective</argument>,
<argument>encoding::Encoding Encoding</argument>, <argument>const FormatStyle &amp;Style</argument>)</argument_list></macro></expr>;

<expr><name>Split</name> <macro><name>getSplit</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>unsigned ColumnLimit</argument>,
<argument>unsigned ContentStartColumn</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>insertBreak</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>Split Split</argument>,
<argument>unsigned ContentIndent</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>compressWhitespace</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>Split Split</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{}</block>
<name>unsigned</name> <macro><name>getLineCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getRangeLength</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned Offset</argument>,
<argument>StringRef::size_type Length</argument>,
<argument>unsigned StartColumn</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getRemainingLength</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned Offset</argument>,
<argument>unsigned StartColumn</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getContentStartColumn</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>bool Break</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>

<name>unsigned</name> <name>StartColumn</name></expr>;

<expr><name>StringRef</name> <name>Prefix</name></expr>;

<expr><name>StringRef</name> <name>Postfix</name></expr>;

<expr><name>StringRef</name> <name>Line</name></expr>;


<expr><name>unsigned</name> <name>UnbreakableTailLength</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BreakableComment</name> <range>: <expr><name>public</name> <name>BreakableToken</name> <block>{
<expr><name>protected</name><operator>:</operator>




<macro><name>BreakableComment</name><argument_list>(<argument>const FormatToken &amp;Token</argument>, <argument>unsigned StartColumn</argument>,
<argument>bool InPPDirective</argument>, <argument>encoding::Encoding Encoding</argument>,
<argument>const FormatStyle &amp;Style</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>supportsReflow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>unsigned</name> <macro><name>getLineCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Split</name> <macro><name>getSplit</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>unsigned ColumnLimit</argument>,
<argument>unsigned ContentStartColumn</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>compressWhitespace</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>Split Split</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>

<specifier>const</specifier> <name>FormatToken</name> <operator>&amp;</operator><macro><name>tokenAt</name><argument_list>(<argument>unsigned LineIndex</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>virtual</name> <name>bool</name> <macro><name>mayReflow</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;






<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>Lines</name></expr>;




<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>Content</name></expr>;




<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FormatToken</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>Tokens</name></expr>;











<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>ContentColumn</name></expr>;


<expr><name>unsigned</name> <name>StartColumn</name></expr>;









<expr><name>StringRef</name> <name>ReflowPrefix</name> <operator>=</operator> <literal type="string">" "</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BreakableBlockComment</name> <range>: <expr><name>public</name> <name>BreakableComment</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>BreakableBlockComment</name><argument_list>(<argument>const FormatToken &amp;Token</argument>, <argument>unsigned StartColumn</argument>,
<argument>unsigned OriginalStartColumn</argument>, <argument>bool FirstInLine</argument>,
<argument>bool InPPDirective</argument>, <argument>encoding::Encoding Encoding</argument>,
<argument>const FormatStyle &amp;Style</argument>, <argument>bool UseCRLF</argument>)</argument_list></macro></expr>;

<expr><name>Split</name> <macro><name>getSplit</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>unsigned ColumnLimit</argument>,
<argument>unsigned ContentStartColumn</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getRangeLength</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned Offset</argument>,
<argument>StringRef::size_type Length</argument>,
<argument>unsigned StartColumn</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getRemainingLength</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned Offset</argument>,
<argument>unsigned StartColumn</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getContentStartColumn</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>bool Break</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getContentIndent</name><argument_list>(<argument>unsigned LineIndex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>insertBreak</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>Split Split</argument>,
<argument>unsigned ContentIndent</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Split</name> <macro><name>getReflowSplit</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>reflow</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>introducesBreakBeforeToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>adaptStartOfLine</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Split</name> <macro><name>getSplitAfterLastLine</name><argument_list>(<argument>unsigned TailOffset</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>mayReflow</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><specifier>static</specifier> <specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>ContentIndentingJavadocAnnotations</name></expr>;

<expr><name>private</name><operator>:</operator>








<name>void</name> <macro><name>adjustWhitespace</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>int IndentDelta</argument>)</argument_list></macro></expr>;











<expr><name>unsigned</name> <name>IndentAtLineBreak</name></expr>;



<expr><name>bool</name> <name>LastLineNeedsDecoration</name></expr>;


<expr><name>StringRef</name> <name>Decoration</name></expr>;



<expr><name>unsigned</name> <name>DecorationColumn</name></expr>;



<expr><name>bool</name> <name>DelimitersOnNewline</name></expr>;



<expr><name>unsigned</name> <name>UnbreakableTailLength</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BreakableLineCommentSection</name> <range>: <expr><name>public</name> <name>BreakableComment</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>BreakableLineCommentSection</name><argument_list>(<argument>const FormatToken &amp;Token</argument>, <argument>unsigned StartColumn</argument>,
<argument>bool InPPDirective</argument>, <argument>encoding::Encoding Encoding</argument>,
<argument>const FormatStyle &amp;Style</argument>)</argument_list></macro></expr>;

<expr><name>unsigned</name> <macro><name>getRangeLength</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned Offset</argument>,
<argument>StringRef::size_type Length</argument>,
<argument>unsigned StartColumn</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>unsigned</name> <macro><name>getContentStartColumn</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>bool Break</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>insertBreak</name><argument_list>(<argument>unsigned LineIndex</argument>, <argument>unsigned TailOffset</argument>, <argument>Split Split</argument>,
<argument>unsigned ContentIndent</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Split</name> <macro><name>getReflowSplit</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>reflow</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>adaptStartOfLine</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>WhitespaceManager &amp;Whitespaces</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>updateNextToken</name><argument_list>(<argument>LineState &amp;State</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>mayReflow</name><argument_list>(<argument>unsigned LineIndex</argument>,
<argument>const llvm::Regex &amp;CommentPragmasRegex</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>






<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>OriginalPrefix</name></expr>;













<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>Prefix</name></expr>;



<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>PrefixSpaceChange</name></expr>;








<expr><name>FormatToken</name> <operator>*</operator><name>LastLineTok</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
