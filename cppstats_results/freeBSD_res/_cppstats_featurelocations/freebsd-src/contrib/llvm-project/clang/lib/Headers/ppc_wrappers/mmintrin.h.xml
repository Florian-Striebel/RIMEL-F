<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/ppc_wrappers/mmintrin.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_WARN_X86_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

















<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please read comment above. Use -DNO_WARN_X86_INTRINSICS to disable this error."</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MMINTRIN_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MMINTRIN_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;altivec.h&gt;</cpp:file></cpp:include>


<typedef>typedef <macro><name>__attribute__</name><argument_list>(<argument>(__aligned__(<literal type="number">8</literal>))</argument>)</argument_list></macro> <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>__m64</name>;</typedef>

<typedef>typedef <macro><name>__attribute__</name><argument_list>(<argument>(__aligned__(<literal type="number">8</literal>))</argument>)</argument_list></macro> <type><union>union <block>{
<decl_stmt><decl><type><name>__m64</name></type> <name>as_m64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>as_char</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name><name>as_signed_char</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name><name>as_short</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>as_int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>as_long_long</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>as_float</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>as_double</name></decl>;</decl_stmt>
}</block></union></type> <name>__m64_union</name>;</typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_empty</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_empty</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>

</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi32_si64</name><argument_list>(<argument><expr><name>int</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_from_int</name><argument_list>(<argument><expr><name>int</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cvtsi32_si64</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64_si32</name><argument_list>(<argument><expr><name>__m64</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>__i</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_to_int</name><argument_list>(<argument><expr><name>__m64</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cvtsi64_si32</name><argument_list>(<argument><expr><name>__i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_from_int64</name><argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64_m64</name><argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64x_si64</name><argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_pi64x</name><argument_list>(<argument><expr><name>long</name> <name>long</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_to_int64</name><argument_list>(<argument><expr><name>__m64</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtm64_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64_si64x</name><argument_list>(<argument><expr><name>__m64</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>__i</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_packs_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>vm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>vresult</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vm1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<expr><name>__m1</name></expr>, <expr><name>__m2</name></expr>}</block></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content><expr><name>__m2</name></expr><operator>,</operator> <expr><name>__m1</name></expr></block_content>}</block><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>vresult</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name>vm1</name></expr></argument>, <argument><expr><name>vm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>vresult</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_packsswb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_packs_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_packs_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>vm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>vresult</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vm1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<expr><name>__m1</name></expr>, <expr><name>__m2</name></expr>}</block></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content><expr><name>__m2</name></expr><operator>,</operator> <expr><name>__m1</name></expr></block_content>}</block><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>vresult</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><name>vm1</name></expr></argument>, <argument><expr><name>vm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>vresult</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_packssdw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_packs_pi32</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_packs_pu16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>vm1</name> <init>= <expr><operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<expr><name>__m1</name></expr>, <expr><name>__m2</name></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content><expr><name>__m2</name></expr><operator>,</operator> <expr><name>__m1</name></expr></block_content>}</block><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>__vector</name> <name>signed</name> <name>short</name></type> <name>__zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>short</name></type> <name>__select</name> <init>= <expr><call><name>vec_cmplt</name><argument_list>(<argument><expr><name>vm1</name></expr></argument>, <argument><expr><name>__zero</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_packs</name><argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>vm1</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>vm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>char</name></type> <name>packsel</name> <init>= <expr><call><name>vec_pack</name><argument_list>(<argument><expr><name>__select</name></expr></argument>, <argument><expr><name>__select</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sel</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>__zero</name></expr></argument>, <argument><expr><name>packsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_packuswb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_packs_pu16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_punpckhbw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_unpackhi_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_punpckhwd</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_unpackhi_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_punpckhdq</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_unpackhi_pi32</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_mergel</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_punpcklbw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_unpacklo_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_punpcklwd</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_unpacklo_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_punpckldq</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_unpacklo_pi32</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_paddb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_add_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_paddw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_add_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR9</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_paddd</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_add_pi32</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psubb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sub_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psubw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sub_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR9</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_sub</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psubd</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sub_pi32</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m1</name> <operator>+</operator> <name>__m2</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m1</name> <operator>-</operator> <name>__m2</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sll_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m</name> <operator>&lt;&lt;</operator> <name>__count</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psllq</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sll_si64</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_slli_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m</name> <operator>&lt;&lt;</operator> <name>__count</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psllqi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_slli_si64</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srl_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m</name> <operator>&gt;&gt;</operator> <name>__count</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrlq</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srl_si64</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srli_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m</name> <operator>&gt;&gt;</operator> <name>__count</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrlqi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srli_si64</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_and_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m1</name> <operator>&amp;</operator> <name>__m2</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pand</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_and_si64</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_andnot_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>~</operator><name>__m1</name> <operator>&amp;</operator> <name>__m2</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pandn</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_andnot_si64</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_or_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m1</name> <operator>|</operator> <name>__m2</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_por</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_or_si64</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_xor_si64</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m1</name> <operator>^</operator> <name>__m2</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pxor</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_xor_si64</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setzero_si64</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m64</name></type> <name>res</name></decl>;</decl_stmt>
<asm>__asm__("cmpb %0,%1,%2;\n" : "=r"(res) : "r"(__m1), "r"(__m2) :);</asm>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pcmpeqb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cmpeq_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pcmpgtb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cmpgt_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pcmpeqw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cmpeq_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pcmpgtw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cmpgt_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR9</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pcmpeqd</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cmpeq_pi32</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR9</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator><call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pcmpgtd</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_cmpgt_pi32</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_paddsb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_adds_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_paddsw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_adds_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_pu8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_paddusb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_adds_pu8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_adds_pu16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_adds</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_paddusw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_adds_pu16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_pi8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psubsb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_subs_pi8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psubsw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_subs_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_pu8</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psubusb</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_subs_pu8</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_subs_pu16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_subs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psubusw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_subs_pu16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_madd_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_vmsumshm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pmaddwd</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_madd_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mulhi_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>xform1</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
<expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <call><name>vec_vmulesh</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>vec_vmulosh</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_perm</name><argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>xform1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pmulhw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_mulhi_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mullo_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pmullw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m1</name></expr></argument>, <argument><expr><name>__m64</name> <name>__m2</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_mullo_pi16</name><argument_list>(<argument><expr><name>__m1</name></expr></argument>, <argument><expr><name>__m2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sll_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>__count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sl</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psllw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sll_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_slli_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><call><name>_mm_sll_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psllwi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_slli_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sll_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>__count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>__count</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pslld</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sll_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_slli_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><call><name>_mm_sll_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pslldi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_slli_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sra_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>__count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sra</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psraw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sra_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srai_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><call><name>_mm_sra_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrawi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srai_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sra_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>__count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>__count</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrad</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_sra_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srai_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><call><name>_mm_sra_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psradi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srai_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srl_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>__count</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>__count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sr</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrlw</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srl_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srli_pi16</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><call><name>_mm_srl_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrlwi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srli_pi16</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srl_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>m</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>__count</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>m</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>__count</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrld</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>__m64</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srl_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_srli_pi32</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>

<return>return <expr><call><name>_mm_srl_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psrldi</name><argument_list>(<argument><expr><name>__m64</name> <name>__m</name></expr></argument>, <argument><expr><name>int</name> <name>__count</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_srli_pi32</name><argument_list>(<argument><expr><name>__m</name></expr></argument>, <argument><expr><name>__count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_pi32</name><argument_list>(<argument><expr><name>int</name> <name>__i1</name></expr></argument>, <argument><expr><name>int</name> <name>__i0</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__i0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__i1</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_pi16</name><argument_list>(<argument><expr><name>short</name> <name>__w3</name></expr></argument>, <argument><expr><name>short</name> <name>__w2</name></expr></argument>, <argument><expr><name>short</name> <name>__w1</name></expr></argument>, <argument><expr><name>short</name> <name>__w0</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__w0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__w1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>__w2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>__w3</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_pi8</name><argument_list>(<argument><expr><name>char</name> <name>__b7</name></expr></argument>, <argument><expr><name>char</name> <name>__b6</name></expr></argument>, <argument><expr><name>char</name> <name>__b5</name></expr></argument>, <argument><expr><name>char</name> <name>__b4</name></expr></argument>, <argument><expr><name>char</name> <name>__b3</name></expr></argument>,
<argument><expr><name>char</name> <name>__b2</name></expr></argument>, <argument><expr><name>char</name> <name>__b1</name></expr></argument>, <argument><expr><name>char</name> <name>__b0</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__b0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>__b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>__b3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>__b4</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>__b5</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>__b6</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>__b7</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_pi32</name><argument_list>(<argument><expr><name>int</name> <name>__i0</name></expr></argument>, <argument><expr><name>int</name> <name>__i1</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__i0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__i1</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_pi16</name><argument_list>(<argument><expr><name>short</name> <name>__w0</name></expr></argument>, <argument><expr><name>short</name> <name>__w1</name></expr></argument>, <argument><expr><name>short</name> <name>__w2</name></expr></argument>, <argument><expr><name>short</name> <name>__w3</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_set_pi16</name><argument_list>(<argument><expr><name>__w3</name></expr></argument>, <argument><expr><name>__w2</name></expr></argument>, <argument><expr><name>__w1</name></expr></argument>, <argument><expr><name>__w0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_pi8</name><argument_list>(<argument><expr><name>char</name> <name>__b0</name></expr></argument>, <argument><expr><name>char</name> <name>__b1</name></expr></argument>, <argument><expr><name>char</name> <name>__b2</name></expr></argument>, <argument><expr><name>char</name> <name>__b3</name></expr></argument>, <argument><expr><name>char</name> <name>__b4</name></expr></argument>,
<argument><expr><name>char</name> <name>__b5</name></expr></argument>, <argument><expr><name>char</name> <name>__b6</name></expr></argument>, <argument><expr><name>char</name> <name>__b7</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>_mm_set_pi8</name><argument_list>(<argument><expr><name>__b7</name></expr></argument>, <argument><expr><name>__b6</name></expr></argument>, <argument><expr><name>__b5</name></expr></argument>, <argument><expr><name>__b4</name></expr></argument>, <argument><expr><name>__b3</name></expr></argument>, <argument><expr><name>__b2</name></expr></argument>, <argument><expr><name>__b1</name></expr></argument>, <argument><expr><name>__b0</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_pi32</name><argument_list>(<argument><expr><name>int</name> <name>__i</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__i</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_pi16</name><argument_list>(<argument><expr><name>short</name> <name>__w</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR9</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>w</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>__w</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>__w</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type>
<name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_pi8</name><argument_list>(<argument><expr><name>signed</name> <name>char</name> <name>__b</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator><call><name>vec_splats</name><argument_list>(<argument><expr><name>__b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator><operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>b</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>__b</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>res</name><operator>.</operator><name>as_m64</name></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:empty>#include_next &lt;mmintrin.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
