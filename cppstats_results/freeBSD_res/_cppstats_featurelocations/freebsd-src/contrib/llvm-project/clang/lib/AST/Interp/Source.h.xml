<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Source.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_SOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_SOURCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Endian.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CodePtr</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CodePtr</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<name>CodePtr</name> <operator>&amp;</operator><name>operator</name><operator>+=</operator><operator>(</operator><name>int32_t</name> <name>Offset</name><operator>)</operator> <block>{
<expr><name>Ptr</name> <operator>+=</operator> <name>Offset</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>int32_t</name> <name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>CodePtr</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Ptr</name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name><name>RHS</name><operator>.</operator><name>Ptr</name></name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <literal type="string">"Invalid code pointer"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Ptr</name> <operator>-</operator> <name><name>RHS</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CodePtr</name> <name>operator</name><operator>-</operator><operator>(</operator><name>size_t</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Ptr</name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <literal type="string">"Invalid code pointer"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>CodePtr</name><argument_list>(<argument><expr><name>Ptr</name> <operator>-</operator> <name>RHS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CodePtr</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>Ptr</name></name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>T</name></type> <name>Value</name> <init>= <expr><call><name><name>ReadHelper</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>Value</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>

<expr_stmt><expr><call><name>CodePtr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>Ptr</argument>)</argument_list></macro> <block>{}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name>std</name><operator>::</operator><name><name>is_pointer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name>
<macro><name>ReadHelper</name><argument_list>(<argument>const char *Ptr</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>namespace</name> <name>llvm</name><operator>::</operator><name>support</name></expr>;
<return>return <expr><name>endian</name><operator>::</operator><call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>endianness</name><operator>::</operator><name>native</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_pointer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name>
<macro><name>ReadHelper</name><argument_list>(<argument>const char *Ptr</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>namespace</name> <name>llvm</name><operator>::</operator><name>support</name></expr>;
<expr><name>auto</name> <name>Punned</name> <operator>=</operator> <name>endian</name><operator>::</operator><call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>, <argument><expr><name>endianness</name><operator>::</operator><name>native</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Punned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Function</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Ptr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SourceInfo</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>SourceInfo</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><call><name>SourceInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Source</name><argument_list>(<argument>E</argument>)</argument_list></macro> <block>{}</block>
<call><name>SourceInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Source</name><argument_list>(<argument>D</argument>)</argument_list></macro> <block>{}</block>

<name>SourceLocation</name> <macro><name>getLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>asStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Source</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>asDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Source</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><specifier>const</specifier> <name>Decl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>asExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Source</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Source</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>SourceMap</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>SourceInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SourceMapper</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>SourceMapper</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>virtual</name> <name>SourceInfo</name> <macro><name>getSource</name><argument_list>(<argument>Function *F</argument>, <argument>CodePtr PC</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>getExpr</name><argument_list>(<argument><expr><name>Function</name> <operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>CodePtr</name> <name>PC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getLocation</name><argument_list>(<argument><expr><name>Function</name> <operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>CodePtr</name> <name>PC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
