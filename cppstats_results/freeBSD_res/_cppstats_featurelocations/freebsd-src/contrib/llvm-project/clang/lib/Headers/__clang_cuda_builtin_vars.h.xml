<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/__clang_cuda_builtin_vars.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CUDA_BUILTIN_VARS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_BUILTIN_VARS_H</name></cpp:macro></cpp:define>


<struct_decl>struct <name>uint3</name>;</struct_decl>
<struct_decl>struct <name>dim3</name>;</struct_decl>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_DEVICE_BUILTIN</name><parameter_list>(<parameter><type><name>FIELD</name></type></parameter>, <parameter><type><name>INTRINSIC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__declspec(property(get = __fetch_builtin_##FIELD)) unsigned int FIELD; static inline __attribute__((always_inline)) __attribute__((device)) unsigned int __fetch_builtin_##FIELD(void) { return INTRINSIC; }</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__cplusplus</name> <operator>&gt;=</operator> <literal type="number">201103L</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DELETE</name></cpp:macro> <cpp:value>=delete</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DELETE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_DISALLOW_BUILTINVAR_ACCESS</name><parameter_list>(<parameter><type><name>TypeName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((device)) TypeName() __DELETE; __attribute__((device)) TypeName(const TypeName &amp;) __DELETE; __attribute__((device)) void operator=(const TypeName &amp;) const __DELETE; __attribute__((device)) TypeName *operator&amp;() const __DELETE</cpp:value></cpp:define>





<struct>struct <name>__cuda_builtin_threadIdx_t</name> <block>{
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_tid_x</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_tid_y</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_tid_z</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>__CUDA_DISALLOW_BUILTINVAR_ACCESS</name><argument_list>(<argument><expr><name>__cuda_builtin_threadIdx_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>__cuda_builtin_blockIdx_t</name> <block>{
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_ctaid_x</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_ctaid_y</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_ctaid_z</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>__CUDA_DISALLOW_BUILTINVAR_ACCESS</name><argument_list>(<argument><expr><name>__cuda_builtin_blockIdx_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>__cuda_builtin_blockDim_t</name> <block>{
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_ntid_x</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_ntid_y</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_ntid_z</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>__CUDA_DISALLOW_BUILTINVAR_ACCESS</name><argument_list>(<argument><expr><name>__cuda_builtin_blockDim_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>__cuda_builtin_gridDim_t</name> <block>{
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_nctaid_x</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_nctaid_y</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>__CUDA_DEVICE_BUILTIN</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><call><name>__nvvm_read_ptx_sreg_nctaid_z</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>dim3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <expr_stmt><expr><name>operator</name> <macro><name>uint3</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>__CUDA_DISALLOW_BUILTINVAR_ACCESS</name><argument_list>(<argument><expr><name>__cuda_builtin_gridDim_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CUDA_BUILTIN_VAR</name></cpp:macro> <cpp:value>extern const __attribute__((device)) __attribute__((weak))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>__CUDA_BUILTIN_VAR</name> <name>__cuda_builtin_threadIdx_t</name></type> <name>threadIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__CUDA_BUILTIN_VAR</name> <name>__cuda_builtin_blockIdx_t</name></type> <name>blockIdx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__CUDA_BUILTIN_VAR</name> <name>__cuda_builtin_blockDim_t</name></type> <name>blockDim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__CUDA_BUILTIN_VAR</name> <name>__cuda_builtin_gridDim_t</name></type> <name>gridDim</name></decl>;</decl_stmt>




<macro><name>__attribute__</name><argument_list>(<argument>(device)</argument>)</argument_list></macro> <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>warpSize</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA_DEVICE_BUILTIN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA_BUILTIN_VAR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__CUDA_DISALLOW_BUILTINVAR_ACCESS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DELETE</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
