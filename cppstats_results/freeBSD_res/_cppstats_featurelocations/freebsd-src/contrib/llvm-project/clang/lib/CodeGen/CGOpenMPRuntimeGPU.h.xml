<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CGOPENMPRUNTIMEGPU_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CGOPENMPRUNTIMEGPU_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGOpenMPRuntime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenFunction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtOpenMP.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Frontend/OpenMP/OMPGridValues.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CGOpenMPRuntimeGPU</name> <range>: <expr><name>public</name> <name>CGOpenMPRuntime</name> <block>{
<expr><name>public</name><operator>:</operator>

enum <name>ExecutionMode</name> <block>{

<expr><name>EM_SPMD</name></expr>,

<expr><name>EM_NonSPMD</name></expr>,

<expr><name>EM_Unknown</name></expr>,
}</block></expr>;
<expr><name>private</name><operator>:</operator>

<name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>Work</name></expr>;

struct <expr><name>EntryFunctionState</name> <block>{
<expr><name>SourceLocation</name> <name>Loc</name></expr>;
}</block></expr>;

<expr><name>ExecutionMode</name> <macro><name>getExecutionMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>requiresFullRuntime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RequiresFullRuntime</name></expr>;</return> }</block>


<name>void</name> <call><name>syncCTAThreads</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list></call></expr>;


<expr><name>void</name> <macro><name>emitKernelInit</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>EntryFunctionState &amp;EST</argument>,
<argument>bool IsSPMD</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>emitKernelDeinit</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>EntryFunctionState &amp;EST</argument>,
<argument>bool IsSPMD</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>emitGenericVarsProlog</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>SourceLocation Loc</argument>,
<argument>bool WithSPMDCheck = false</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>emitGenericVarsEpilog</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>bool WithSPMDCheck = false</argument>)</argument_list></macro></expr>;







<expr><name>void</name> <macro><name>createOffloadEntry</name><argument_list>(<argument>llvm::Constant *ID</argument>, <argument>llvm::Constant *Addr</argument>,
<argument>uint64_t Size</argument>, <argument>int32_t Flags</argument>,
<argument>llvm::GlobalValue::LinkageTypes Linkage</argument>)</argument_list></macro> <name>override</name></expr>;










<expr><name>void</name> <macro><name>emitNonSPMDKernel</name><argument_list>(<argument>const OMPExecutableDirective &amp;D</argument>, <argument>StringRef ParentName</argument>,
<argument>llvm::Function *&amp;OutlinedFn</argument>,
<argument>llvm::Constant *&amp;OutlinedFnID</argument>, <argument>bool IsOffloadEntry</argument>,
<argument>const RegionCodeGenTy &amp;CodeGen</argument>)</argument_list></macro></expr>;












<expr><name>void</name> <macro><name>emitSPMDKernel</name><argument_list>(<argument>const OMPExecutableDirective &amp;D</argument>, <argument>StringRef ParentName</argument>,
<argument>llvm::Function *&amp;OutlinedFn</argument>,
<argument>llvm::Constant *&amp;OutlinedFnID</argument>, <argument>bool IsOffloadEntry</argument>,
<argument>const RegionCodeGenTy &amp;CodeGen</argument>)</argument_list></macro></expr>;










<expr><name>void</name> <macro><name>emitTargetOutlinedFunction</name><argument_list>(<argument>const OMPExecutableDirective &amp;D</argument>,
<argument>StringRef ParentName</argument>,
<argument>llvm::Function *&amp;OutlinedFn</argument>,
<argument>llvm::Constant *&amp;OutlinedFnID</argument>,
<argument>bool IsOffloadEntry</argument>,
<argument>const RegionCodeGenTy &amp;CodeGen</argument>)</argument_list></macro> <name>override</name></expr>;











<expr><name>void</name> <macro><name>emitNonSPMDParallelCall</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>SourceLocation Loc</argument>,
<argument>llvm::Value *OutlinedFn</argument>,
<argument>ArrayRef&lt;llvm::Value *&gt; CapturedVars</argument>,
<argument>const Expr *IfCond</argument>)</argument_list></macro></expr>;












<expr><name>void</name> <macro><name>emitSPMDParallelCall</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>SourceLocation Loc</argument>,
<argument>llvm::Function *OutlinedFn</argument>,
<argument>ArrayRef&lt;llvm::Value *&gt; CapturedVars</argument>,
<argument>const Expr *IfCond</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>



<name>StringRef</name> <macro><name>getOutlinedHelperName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><literal type="string">"__omp_outlined__"</literal></expr>;</return>
}</block>



<name>bool</name> <macro><name>isDefaultLocationConstant</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>





<name>unsigned</name> <macro><name>getDefaultLocationReserved2Flags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>CGOpenMPRuntimeGPU</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <name>override</name></expr>;






<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>getGPUWarpSize</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>getGPUThreadID</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><call><name>getGPUNumThreads</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>void</name> <macro><name>emitProcBindClause</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>,
<argument>llvm::omp::ProcBindKind ProcBind</argument>,
<argument>SourceLocation Loc</argument>)</argument_list></macro> <name>override</name></expr>;





<expr><name>virtual</name> <name>void</name> <macro><name>emitNumThreadsClause</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>,
<argument>llvm::Value *NumThreads</argument>,
<argument>SourceLocation Loc</argument>)</argument_list></macro> <name>override</name></expr>;






<expr><name>void</name> <macro><name>emitNumTeamsClause</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>const Expr *NumTeams</argument>,
<argument>const Expr *ThreadLimit</argument>, <argument>SourceLocation Loc</argument>)</argument_list></macro> <name>override</name></expr>;










<expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator>
<macro><name>emitParallelOutlinedFunction</name><argument_list>(<argument>const OMPExecutableDirective &amp;D</argument>,
<argument>const VarDecl *ThreadIDVar</argument>,
<argument>OpenMPDirectiveKind InnermostKind</argument>,
<argument>const RegionCodeGenTy &amp;CodeGen</argument>)</argument_list></macro> <name>override</name></expr>;










<expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator>
<macro><name>emitTeamsOutlinedFunction</name><argument_list>(<argument>const OMPExecutableDirective &amp;D</argument>,
<argument>const VarDecl *ThreadIDVar</argument>,
<argument>OpenMPDirectiveKind InnermostKind</argument>,
<argument>const RegionCodeGenTy &amp;CodeGen</argument>)</argument_list></macro> <name>override</name></expr>;









<expr><name>void</name> <macro><name>emitTeamsCall</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>const OMPExecutableDirective &amp;D</argument>,
<argument>SourceLocation Loc</argument>, <argument>llvm::Function *OutlinedFn</argument>,
<argument>ArrayRef&lt;llvm::Value *&gt; CapturedVars</argument>)</argument_list></macro> <name>override</name></expr>;










<expr><name>void</name> <macro><name>emitParallelCall</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>SourceLocation Loc</argument>,
<argument>llvm::Function *OutlinedFn</argument>,
<argument>ArrayRef&lt;llvm::Value *&gt; CapturedVars</argument>,
<argument>const Expr *IfCond</argument>)</argument_list></macro> <name>override</name></expr>;









<expr><name>void</name> <macro><name>emitBarrierCall</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>SourceLocation Loc</argument>,
<argument>OpenMPDirectiveKind Kind</argument>, <argument>bool EmitChecks = true</argument>,
<argument>bool ForceSimpleCall = false</argument>)</argument_list></macro> <name>override</name></expr>;






<expr><name>void</name> <macro><name>emitCriticalRegion</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>StringRef CriticalName</argument>,
<argument>const RegionCodeGenTy &amp;CriticalOpGen</argument>,
<argument>SourceLocation Loc</argument>,
<argument>const Expr *Hint = nullptr</argument>)</argument_list></macro> <name>override</name></expr>;














<expr><name>virtual</name> <name>void</name> <macro><name>emitReduction</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>SourceLocation Loc</argument>,
<argument>ArrayRef&lt;const Expr *&gt; Privates</argument>,
<argument>ArrayRef&lt;const Expr *&gt; LHSExprs</argument>,
<argument>ArrayRef&lt;const Expr *&gt; RHSExprs</argument>,
<argument>ArrayRef&lt;const Expr *&gt; ReductionOps</argument>,
<argument>ReductionOptionsTy Options</argument>)</argument_list></macro> <name>override</name></expr>;





<expr><name>llvm</name><operator>::</operator><name>FunctionCallee</name> <macro><name>createNVPTXRuntimeFunction</name><argument_list>(<argument>unsigned Function</argument>)</argument_list></macro></expr>;





<expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><macro><name>translateParameter</name><argument_list>(<argument>const FieldDecl *FD</argument>,
<argument>const VarDecl *NativeParam</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;





<expr><name>Address</name> <macro><name>getParameterAddress</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>const VarDecl *NativeParam</argument>,
<argument>const VarDecl *TargetParam</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>void</name> <macro><name>emitOutlinedFunctionCall</name><argument_list>(
<argument>CodeGenFunction &amp;CGF</argument>, <argument>SourceLocation Loc</argument>, <argument>llvm::FunctionCallee OutlinedFn</argument>,
<argument>ArrayRef&lt;llvm::Value *&gt; Args = llvm::None</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>void</name> <macro><name>emitFunctionProlog</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>, <argument>const Decl *D</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>Address</name> <macro><name>getAddressOfLocalVariable</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>,
<argument>const VarDecl *VD</argument>)</argument_list></macro> <name>override</name></expr>;





enum <expr><name>DataSharingMode</name> <block>{

<expr><name>CUDA</name></expr>,

<expr><name>Generic</name></expr>,
}</block></expr>;



<expr><name>void</name> <macro><name>functionFinished</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>getDefaultDistScheduleAndChunk</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>,
<argument>const OMPLoopDirective &amp;S</argument>, <argument>OpenMPDistScheduleClauseKind &amp;ScheduleKind</argument>,
<argument>llvm::Value *&amp;Chunk</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><name>void</name> <macro><name>getDefaultScheduleAndChunk</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>,
<argument>const OMPLoopDirective &amp;S</argument>, <argument>OpenMPScheduleClauseKind &amp;ScheduleKind</argument>,
<argument>const Expr *&amp;ChunkExpr</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>void</name> <macro><name>adjustTargetSpecificDataForLambdas</name><argument_list>(
<argument>CodeGenFunction &amp;CGF</argument>, <argument>const OMPExecutableDirective &amp;D</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>void</name> <macro><name>processRequiresDirective</name><argument_list>(<argument>const OMPRequiresDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;




<expr><name>bool</name> <macro><name>hasAllocateAttributeForGlobalVar</name><argument_list>(<argument>const VarDecl *VD</argument>, <argument>LangAS &amp;AS</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>




<name>ExecutionMode</name> <name>CurrentExecutionMode</name> <operator>=</operator> <name>EM_Unknown</name></expr>;


<expr><name>bool</name> <name>RequiresFullRuntime</name> <operator>=</operator> <name>true</name></expr>;



<expr><name>bool</name> <name>IsInTargetMasterThreadRegion</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>bool</name> <name>IsInTTDRegion</name> <operator>=</operator> <name>false</name></expr>;

<expr><name>bool</name> <name>IsInParallelRegion</name> <operator>=</operator> <name>false</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>WrapperFunctionsMap</name></expr>;





<expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><call><name>createParallelDataSharingWrapper</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator><name>OutlinedParallelFn</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>OMPExecutableDirective</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr>;


struct <expr><name>MappedVarData</name> <block>{

<expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>GlobalizedVal</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>Address</name> <name>PrivateAddr</name> <operator>=</operator> <name>Address</name><operator>::</operator><call><name>invalid</name><argument_list>()</argument_list></call></expr>;
}</block></expr>;

<expr><name>using</name> <name>DeclToAddrMapTy</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>MappedVarData</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>using</name> <name>EscapedParamsTy</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr>;
struct <expr><name>FunctionData</name> <block>{
<expr><name>DeclToAddrMapTy</name> <name>LocalVarData</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DeclToAddrMapTy</name></expr></argument>&gt;</argument_list></name> <name>SecondaryLocalVarData</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>None</name></expr>;
<expr><name>EscapedParamsTy</name> <name>EscapedParameters</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ValueDecl</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>EscapedVariableLengthDecls</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name>
<name>EscapedVariableLengthDeclsAddrs</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>IsInSPMDModeFlag</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CodeGenFunction</name><operator>::</operator><name>OMPMapVars</name></expr></argument>&gt;</argument_list></name> <name>MappedParams</name></expr>;
}</block></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator></expr></argument>, <argument><expr><name>FunctionData</name></expr></argument>&gt;</argument_list></name> <name>FunctionGlobalizedDecls</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>KernelTeamsReductionPtr</name> <operator>=</operator> <name>nullptr</name></expr>;




<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>TeamsReductions</name></expr>;


<expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>KernelStaticGlobalized</name> <operator>=</operator> <name>nullptr</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ValueDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>TeamAndReductions</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
