<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/WhitespaceManager.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_WHITESPACEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_WHITESPACEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TokenAnnotator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Format/Format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>












<decl_stmt><decl><type><name>class</name></type> <name>WhitespaceManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>WhitespaceManager</name><argument_list>(<argument>const SourceManager &amp;SourceMgr</argument>, <argument>const FormatStyle &amp;Style</argument>,
<argument>bool UseCRLF</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>SourceMgr</name><argument_list>(<argument><expr><name>SourceMgr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Style</name><argument_list>(<argument><expr><name>Style</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>UseCRLF</name><argument_list>(<argument>UseCRLF</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>useCRLF</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UseCRLF</name></expr>;</return> }</block></expr></expr_stmt>







<function_decl><type><name>void</name></type> <name>replaceWhitespace</name><parameter_list>(<parameter><decl><type><name>FormatToken</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Newlines</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Spaces</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>StartOfTokenColumn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isAligned</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>InPPDirective</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>addUntouchableToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>InPPDirective</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>addReplacement</name><argument_list>(<argument><expr><specifier>const</specifier> <name>tooling</name><operator>::</operator><name>Replacement</name> <operator>&amp;</operator><name>Replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<function_decl><type><name>void</name></type> <name>replaceWhitespaceInToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ReplaceChars</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>PreviousPostfix</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>CurrentPrefix</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>InPPDirective</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Newlines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Spaces</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><specifier>const</specifier> <name>tooling</name><operator>::</operator><name>Replacements</name> <operator>&amp;</operator><call><name>generateReplacements</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<struct>struct <name>Change</name> <block>{

<decl_stmt><decl><type><name>class</name></type> <name>IsBeforeInFile</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>IsBeforeInFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SourceMgr</name><argument_list>(<argument>SourceMgr</argument>)</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>Change</name> <operator>&amp;</operator><name>C1</name><operator>,</operator> <specifier>const</specifier> <name>Change</name> <operator>&amp;</operator><name>C2</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>










<macro><name>Change</name><argument_list>(<argument>const FormatToken &amp;Tok</argument>, <argument>bool CreateReplacement</argument>,
<argument>SourceRange OriginalWhitespaceRange</argument>, <argument>int Spaces</argument>,
<argument>unsigned StartOfTokenColumn</argument>, <argument>unsigned NewlinesBefore</argument>,
<argument>StringRef PreviousLinePostfix</argument>, <argument>StringRef CurrentLinePrefix</argument>,
<argument>bool IsAligned</argument>, <argument>bool ContinuesPPDirective</argument>, <argument>bool IsInsideToken</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>FormatToken</name> <modifier>*</modifier></type><name>Tok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>CreateReplacement</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceRange</name></type> <name>OriginalWhitespaceRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>StartOfTokenColumn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NewlinesBefore</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>PreviousLinePostfix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>CurrentLinePrefix</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsAligned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ContinuesPPDirective</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>Spaces</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsInsideToken</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>IsTrailingComment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>TokenLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>PreviousEndOfTokenColumn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EscapedNewlineColumn</name></decl>;</decl_stmt>









<decl_stmt><decl><type><specifier>const</specifier> <name>Change</name> <modifier>*</modifier></type><name>StartOfBlockComment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>IndentationOffset</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>ConditionalsLevel</name></decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>indentAndNestingLevel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name><name>Tok</name><operator>-&gt;</operator><name>IndentLevel</name></name></expr></argument>, <argument><expr><name><name>Tok</name><operator>-&gt;</operator><name>NestingLevel</name></name></expr></argument>,
<argument><expr><name>ConditionalsLevel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<label><name>private</name>:</label>
<struct>struct <name>CellDescription</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Cell</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>EndIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>HasSplit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CellDescription</name> <modifier>*</modifier></type><name>NextColumnElement</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CellDescription</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Index</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Index</name></name> <operator>&amp;&amp;</operator> <name>Cell</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Cell</name></name> <operator>&amp;&amp;</operator>
<name>EndIndex</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>EndIndex</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>constexpr</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CellDescription</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>Other</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>CellDescriptions</name> <block>{
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CellDescription</name></expr></argument>&gt;</argument_list></name></type> <name>Cells</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CellCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>InitialSpaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>




<function_decl><type><name>void</name></type> <name>calculateLineBreakInformation</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignConsecutiveMacros</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignConsecutiveAssignments</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignConsecutiveBitFields</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignConsecutiveDeclarations</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignChainedConditionals</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignTrailingComments</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>alignTrailingComments</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>End</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Column</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignEscapedNewlines</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>alignEscapedNewlines</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>End</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Column</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>alignArrayInitializers</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>alignArrayInitializers</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>End</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>void</name></type> <name>alignArrayInitializersRightJustified</name><argument_list>(<argument><expr><name>CellDescriptions</name> <operator>&amp;&amp;</operator><name>CellDescs</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>alignArrayInitializersLeftJustified</name><argument_list>(<argument><expr><name>CellDescriptions</name> <operator>&amp;&amp;</operator><name>CellDescs</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>calculateCellWidth</name><argument_list>(<argument><expr><name>unsigned</name> <name>Start</name></expr></argument>, <argument><expr><name>unsigned</name> <name>End</name></expr></argument>,
<argument><expr><name>bool</name> <name>WithSpaces</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<function_decl><type><name>CellDescriptions</name></type> <name>getCells</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>End</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isSplitCell</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CellDescription</name> <modifier>&amp;</modifier></type><name>Cell</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>I</name></expr></argument>&gt;</argument_list></name>
<specifier>auto</specifier></type> <name>getNetWidth</name><argument_list>(<argument><expr><specifier>const</specifier> <name>I</name> <operator>&amp;</operator><name>Start</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>I</name> <operator>&amp;</operator><name>End</name></expr></argument>, <argument><expr><name>unsigned</name> <name>InitialSpaces</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>NetWidth</name> <init>= <expr><name>InitialSpaces</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>auto</name></type> <name>PrevIter</name> <init>= <expr><name>Start</name></expr></init></decl>;</init> <condition><expr><name>PrevIter</name> <operator>!=</operator> <name>End</name></expr>;</condition> <incr><expr><operator>++</operator><name>PrevIter</name></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name><name>Changes</name><index>[<expr><name><name>PrevIter</name><operator>-&gt;</operator><name>Index</name></name></expr>]</index></name><operator>.</operator><name>NewlinesBefore</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NetWidth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>NetWidth</name> <operator>+=</operator>
<call><name>calculateCellWidth</name><argument_list>(<argument><expr><name><name>PrevIter</name><operator>-&gt;</operator><name>Index</name></name></expr></argument>, <argument><expr><name><name>PrevIter</name><operator>-&gt;</operator><name>EndIndex</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>NetWidth</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>I</name></expr></argument>&gt;</argument_list></name>
<name>unsigned</name></type> <name>getMaximumCellWidth</name><argument_list>(<argument><expr><name>I</name> <name>CellIter</name></expr></argument>, <argument><expr><name>unsigned</name> <name>NetWidth</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CellWidth</name> <init>=
<expr><call><name>calculateCellWidth</name><argument_list>(<argument><expr><name><name>CellIter</name><operator>-&gt;</operator><name>Index</name></name></expr></argument>, <argument><expr><name><name>CellIter</name><operator>-&gt;</operator><name>EndIndex</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Changes</name><index>[<expr><name><name>CellIter</name><operator>-&gt;</operator><name>Index</name></name></expr>]</index></name><operator>.</operator><name>NewlinesBefore</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>CellWidth</name> <operator>+=</operator> <name>NetWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>Next</name> <init>= <expr><name><name>CellIter</name><operator>-&gt;</operator><name>NextColumnElement</name></name></expr></init></decl>;</init> <condition><expr><name>Next</name> <operator>!=</operator> <name>nullptr</name></expr>;</condition>
<incr><expr><name>Next</name> <operator>=</operator> <name><name>Next</name><operator>-&gt;</operator><name>NextColumnElement</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>ThisWidth</name> <init>= <expr><call><name>calculateCellWidth</name><argument_list>(<argument><expr><name><name>Next</name><operator>-&gt;</operator><name>Index</name></name></expr></argument>, <argument><expr><name><name>Next</name><operator>-&gt;</operator><name>EndIndex</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Changes</name><index>[<expr><name><name>Next</name><operator>-&gt;</operator><name>Index</name></name></expr>]</index></name><operator>.</operator><name>NewlinesBefore</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ThisWidth</name> <operator>+=</operator> <name>NetWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>CellWidth</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>max</name><argument_list>(<argument><expr><name>CellWidth</name></expr></argument>, <argument><expr><name>ThisWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>CellWidth</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>I</name></expr></argument>&gt;</argument_list></name>
<name>unsigned</name></type> <name>getMaximumNetWidth</name><argument_list>(<argument><expr><specifier>const</specifier> <name>I</name> <operator>&amp;</operator><name>CellStart</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>I</name> <operator>&amp;</operator><name>CellStop</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>InitialSpaces</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>CellCount</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>MaxNetWidth</name> <init>= <expr><call><name>getNetWidth</name><argument_list>(<argument><expr><name>CellStart</name></expr></argument>, <argument><expr><name>CellStop</name></expr></argument>, <argument><expr><name>InitialSpaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>RowCount</name> <init>= <expr><literal type="number">1U</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>Offset</name> <init>= <expr><name>std</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>CellStart</name></expr></argument>, <argument><expr><name>CellStop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>Next</name> <init>= <expr><name><name>CellStop</name><operator>-&gt;</operator><name>NextColumnElement</name></name></expr></init></decl>;</init> <condition><expr><name>Next</name> <operator>!=</operator> <name>nullptr</name></expr>;</condition>
<incr><expr><name>Next</name> <operator>=</operator> <name><name>Next</name><operator>-&gt;</operator><name>NextColumnElement</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>Start</name> <init>= <expr><operator>(</operator><name>CellStart</name> <operator>+</operator> <name>RowCount</name> <operator>*</operator> <name>CellCount</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>End</name> <init>= <expr><name>Start</name> <operator>+</operator> <name>Offset</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>MaxNetWidth</name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name>max</name><argument_list>(<argument><expr><name>MaxNetWidth</name></expr></argument>, <argument><expr><call><name>getNetWidth</name><argument_list>(<argument><expr><name>Start</name></expr></argument>, <argument><expr><name>End</name></expr></argument>, <argument><expr><name>InitialSpaces</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>RowCount</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>MaxNetWidth</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function_decl><type><name>void</name></type> <name>alignToStartOfCell</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Start</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>End</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>CellDescriptions</name></type> <name>linkCells</name><argument_list>(<argument><expr><name>CellDescriptions</name> <operator>&amp;&amp;</operator><name>CellDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>generateChanges</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>storeReplacement</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>Range</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>appendNewlineText</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Text</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Newlines</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>appendEscapedNewlineText</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Text</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Newlines</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>PreviousEndOfTokenColumn</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>EscapedNewlineColumn</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>appendIndentText</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Text</name></expr></argument>, <argument><expr><name>unsigned</name> <name>IndentLevel</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Spaces</name></expr></argument>, <argument><expr><name>unsigned</name> <name>WhitespaceStartColumn</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsAligned</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>appendTabIndent</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Text</name></expr></argument>, <argument><expr><name>unsigned</name> <name>Spaces</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Indentation</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Change</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>Changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tooling</name><operator>::</operator><name>Replacements</name> <name>Replaces</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>FormatStyle</name> <modifier>&amp;</modifier></type><name>Style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>UseCRLF</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
