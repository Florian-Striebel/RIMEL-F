<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/ppc_wrappers/xmmintrin.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_WARN_X86_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

















<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please read comment above. Use -DNO_WARN_X86_INTRINSICS to disable this error."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_XMMINTRIN_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XMMINTRIN_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_SHUFFLE</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((w) &lt;&lt; 6) | ((x) &lt;&lt; 4) | ((y) &lt;&lt; 2) | (z))</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;altivec.h&gt;</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STRICT_ANSI__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal><operator>)</operator><operator>)</operator></expr></cpp:if>


<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vector</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixel</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bool</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mmintrin.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_HOSTED__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mm_malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <type><name>vector</name> <name>float</name> <name>__m128</name></type> <name>__attribute__</name>((<name>__may_alias__</name>));</typedef>


<typedef>typedef <type><name>vector</name> <name>float</name> <name>__m128_u</name></type> <name>__attribute__</name>((<name>__may_alias__</name>, <name>__aligned__</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list>));</typedef>


<typedef>typedef <type><name>vector</name> <name>float</name></type> <name>__v4sf</name>;</typedef>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_undefined_ps</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>__Y</name> <init>= <expr><name>__Y</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>__Y</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setzero_ps</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load_ps</name> <argument_list>(<argument><expr><name>float</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadu_ps</name> <argument_list>(<argument><expr><name>float</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_vsx_ld</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadr_ps</name> <argument_list>(<argument><expr><name>float</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>__tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m128</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>permute_vector</name> <init>=
<expr><block>{ <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>__tmp</name> <operator>=</operator> <call><name>vec_ld</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name> <operator>*</operator><operator>)</operator> <name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__tmp</name></expr></argument>, <argument><expr><name>__tmp</name></expr></argument>, <argument><expr><name>permute_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set1_ps</name> <argument_list>(<argument><expr><name>float</name> <name>__F</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><block>{ <expr><name>__F</name></expr>, <expr><name>__F</name></expr>, <expr><name>__F</name></expr>, <expr><name>__F</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_ps1</name> <argument_list>(<argument><expr><name>float</name> <name>__F</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set1_ps</name> <argument_list>(<argument><expr><name>__F</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_ps</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>float</name> <name>__Z</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <name>__Y</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <name>__X</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <name>__W</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><block>{ <expr><name>__W</name></expr>, <expr><name>__X</name></expr>, <expr><name>__Y</name></expr>, <expr><name>__Z</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_setr_ps</name> <argument_list>(<argument><expr><name>float</name> <name>__Z</name></expr></argument>, <argument><expr><name>float</name> <name>__Y</name></expr></argument>, <argument><expr><name>float</name> <name>__X</name></expr></argument>, <argument><expr><name>float</name> <name>__W</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><block>{ <expr><name>__Z</name></expr>, <expr><name>__Y</name></expr>, <expr><name>__X</name></expr>, <expr><name>__W</name></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store_ps</name> <argument_list>(<argument><expr><name>float</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>vec_st</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>*</operator><operator>)</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storeu_ps</name> <argument_list>(<argument><expr><name>float</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>__m128_u</name> <operator>*</operator><operator>)</operator><name>__P</name> <operator>=</operator> <name>__A</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storer_ps</name> <argument_list>(<argument><expr><name>float</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>__tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>permute_vector</name> <init>=
<expr><block>{ <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
<expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>__tmp</name> <operator>=</operator> <operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>permute_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_mm_store_ps</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><name>__tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store1_ps</name> <argument_list>(<argument><expr><name>float</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>__va</name> <init>= <expr><call><name>vec_splat</name><argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_mm_store_ps</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><name>__va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store_ps1</name> <argument_list>(<argument><expr><name>float</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_mm_store1_ps</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_set_ss</name> <argument_list>(<argument><expr><name>float</name> <name>__F</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <macro><name>__extension__</name> <argument_list>(<argument>__m128</argument>)</argument_list></macro><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><block>{ <expr><name>__F</name></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_move_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load_ss</name> <argument_list>(<argument><expr><name>float</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set_ss</name> <argument_list>(<argument><expr><operator>*</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_store_ss</name> <argument_list>(<argument><expr><name>float</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__P</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m128</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m128</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mul_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m128</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_div_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__m128</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__A</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sqrt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_sqrt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_add_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name> <operator>+</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sub_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name> <operator>-</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mul_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name> <operator>*</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_div_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name> <operator>/</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sqrt_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_sqrt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_rcp_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_re</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_rsqrt_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>vec_rsqrte</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_rcp_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>_mm_rcp_ps</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_rsqrt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m128</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_rsqrte</name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_max_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>= <expr><block>{<expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_max</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>int</name></type> <name>m</name> <init>= <expr><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_max_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>int</name></type> <name>m</name> <init>= <expr><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>vec_sel</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_and_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_and</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_andnot_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_andc</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_or_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_or</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_xor_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_xor</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>,<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmplt_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmple_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmple</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpge_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmpge</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpneq_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>__v4sf</name> <operator>)</operator> <call><name>vec_cmpeq</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_nor</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnlt_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmpge</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnle_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpngt_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmple</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnge_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_cmplt</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpord_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>float_exp_mask</name> <init>=
<expr><block>{ <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>float_exp_mask</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>float_exp_mask</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name> <operator>)</operator> <call><name>vec_and</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpunord_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>float_exp_mask</name> <init>=
<expr><block>{ <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>float_exp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>float_exp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name> <operator>)</operator> <call><name>vec_or</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpeq_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmplt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmplt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmple_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmple</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpgt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpge_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmpge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpneq_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmpeq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_nor</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnlt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmpge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnle_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmpgt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpngt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmple</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpnge_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>




<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_cmplt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpord_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>float_exp_mask</name> <init>=
<expr><block>{ <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>float_exp_mask</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>float_exp_mask</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_and</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cmpunord_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>float_exp_mask</name> <init>=
<expr><block>{ <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr>, <expr><literal type="number">0x7f800000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>mask</name> <init>=
<expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_abs</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>float_exp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>float_exp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_or</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator><call><name>vec_sel</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>c</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comieq_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comilt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comile_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comigt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comige_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_comineq_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomieq_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomilt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomile_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomigt_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomige_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_ucomineq_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>__B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>float</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtss_f32</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__A</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtss_si32</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>dtmp</name></decl>;</decl_stmt>
<asm>__asm__(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"xxsldwi %x0,%x0,%x0,3;\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"xscvspdp %x2,%x0;\n"
"fctiw %2,%2;\n"
"mfvsrd %1,%x2;\n"
: "+wa" (__A),
"=r" (res),
"=f" (dtmp)
: );</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__builtin_rint</name><argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvt_ss2si</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtss_si32</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtss_si64</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name>dtmp</name></decl>;</decl_stmt>
<asm>__asm__(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
"xxsldwi %x0,%x0,%x0,3;\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"xscvspdp %x2,%x0;\n"
"fctid %2,%2;\n"
"mfvsrd %1,%x2;\n"
: "+wa" (__A),
"=r" (res),
"=f" (dtmp)
: );</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>__builtin_llrint</name><argument_list>(<argument><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtss_si64x</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtss_si64</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<enum>enum <name>_mm_hint</name>
<block>{

<decl><name>_MM_HINT_ET0</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>_MM_HINT_ET1</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>_MM_HINT_T0</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>_MM_HINT_T1</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>_MM_HINT_T2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_MM_HINT_NTA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block>;</enum>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_prefetch</name> <argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr>enum <name>_mm_hint</name> <name>__I</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>__builtin_prefetch</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtps_pi32</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<decl_stmt><decl><type><name>__v4sf</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>rounded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>


<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rounded</name> <operator>=</operator> <call><name>vec_rint</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>vec_cts</name> <argument_list>(<argument><expr><name>rounded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>result</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvt_ps2pi</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtps_pi32</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttss_si32</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>temp</name> <init>= <expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtt_ss2si</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvttss_si32</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttss_si64</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>temp</name> <init>= <expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttss_si64x</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>temp</name> <init>= <expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>temp</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvttps_pi32</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>


<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>__v4sf</name><operator>)</operator> <call><name>vec_splat</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator><name>__A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>vec_cts</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>result</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtt_ps2pi</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvttps_pi32</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi32_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>temp</name> <init>= <expr><name>__B</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<return>return <expr><name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvt_si2ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtsi32_ss</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>float</name></type> <name>temp</name> <init>= <expr><name>__B</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<return>return <expr><name>__A</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtsi64x_ss</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtsi64_ss</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpi32_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>vm1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>float</name></type> <name>vf1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vm1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{<expr><name>__B</name></expr>, <expr><name>__B</name></expr>}</block></expr>;</expr_stmt>
<expr_stmt><expr><name>vf1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>float</name><operator>)</operator> <call><name>vec_ctf</name> <argument_list>(<argument><expr><name>vm1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>__m128</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator>
<block>{ <expr><operator>(</operator><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>vf1</name><operator>)</operator> <index>[<expr><literal type="number">0</literal></expr>]</index></expr>,
<expr><operator>(</operator><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__A</name><operator>)</operator> <index>[<expr><literal type="number">1</literal></expr>]</index></expr>}</block><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvt_pi2ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_cvtpi32_ps</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpi16_ps</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>vs8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>vi4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>float</name></type> <name>vf1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vs8</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>vi4</name> <operator>=</operator> <call><name>vec_vupklsh</name> <argument_list>(<argument><expr><name>vs8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vf1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>float</name><operator>)</operator> <call><name>vec_ctf</name> <argument_list>(<argument><expr><name>vi4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>vf1</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpu16_ps</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>zero</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>vs8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>vi4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>float</name></type> <name>vf1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vs8</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>vi4</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_mergel</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>vs8</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>zero</name><operator>,</operator> <name>vs8</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>vf1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>float</name><operator>)</operator> <call><name>vec_ctf</name> <argument_list>(<argument><expr><name>vi4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>vf1</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpi8_ps</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>vc16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>vs8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>vi4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>float</name></type> <name>vf1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vc16</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>char</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>vs8</name> <operator>=</operator> <call><name>vec_vupkhsb</name> <argument_list>(<argument><expr><name>vc16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vi4</name> <operator>=</operator> <call><name>vec_vupkhsh</name> <argument_list>(<argument><expr><name>vs8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vf1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>float</name><operator>)</operator> <call><name>vec_ctf</name> <argument_list>(<argument><expr><name>vi4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>vf1</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>

<name>_mm_cvtpu8_ps</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>zero</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>vc16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>vs8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>vi4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>float</name></type> <name>vf1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vc16</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__A</name></expr> }</block></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>vs8</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><name>vc16</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vi4</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><name>vs8</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>vs8</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><name>vc16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vi4</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>int</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator> <name>zero</name></expr></argument>,
<argument><expr><name>vs8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>vf1</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>float</name><operator>)</operator> <call><name>vec_ctf</name> <argument_list>(<argument><expr><name>vi4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>vf1</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtpi32x2_ps</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>vi4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>float</name></type> <name>vf4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vi4</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{ <expr><name>__A</name></expr>, <expr><name>__B</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>vf4</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>float</name><operator>)</operator> <call><name>vec_ctf</name> <argument_list>(<argument><expr><name>vi4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <name>vf4</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtps_pi16</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>rounded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rounded</name> <operator>=</operator> <call><name>vec_rint</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>vec_cts</name> <argument_list>(<argument><expr><name>rounded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>vec_pack</name> <argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>result</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_cvtps_pi8</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>rounded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>tmp_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>signed</name> <name>int</name></type> <name>zero</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>tmp_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>char</name></type> <name>res_v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rounded</name> <operator>=</operator> <call><name>vec_rint</name><argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_i</name> <operator>=</operator> <call><name>vec_cts</name> <argument_list>(<argument><expr><name>rounded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_s</name> <operator>=</operator> <call><name>vec_pack</name> <argument_list>(<argument><expr><name>tmp_i</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res_v</name> <operator>=</operator> <call><name>vec_pack</name> <argument_list>(<argument><expr><name>tmp_s</name></expr></argument>, <argument><expr><name>tmp_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>res_v</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>

<name>_mm_shuffle_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__mask</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_10</name> <init>= <expr><name>__mask</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_32</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_54</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_76</name> <init>= <expr><operator>(</operator><name>__mask</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>permute_selectors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x00010203</literal></expr>, <expr><literal type="number">0x04050607</literal></expr>, <expr><literal type="number">0x08090A0B</literal></expr>, <expr><literal type="number">0x0C0D0E0F</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_10</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_32</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_54</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x10101010</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_76</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x10101010</literal></expr>;</expr_stmt>
<return>return <expr><call><name>vec_perm</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpackhi_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_vmrglw</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_unpacklo_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_vmrghw</name> <argument_list>(<argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator> <name>__A</name></expr></argument>, <argument><expr><operator>(</operator><name>__v4sf</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadh_pi</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name> <init>= <expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__p</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>*</operator><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__a</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>__p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storeh_pi</name> <argument_list>(<argument><expr><name>__m64</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name> <init>= <expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>__A</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>__P</name> <operator>=</operator> <name><name>__a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movehl_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_mergel</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__B</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movelh_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m128</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator> <call><name>vec_mergeh</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_loadl_pi</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name> <init>= <expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>__A</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__p</name> <init>= <expr><call><name>vec_splats</name><argument_list>(<argument><expr><operator>*</operator><name>__P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>__a</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>__p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><name>__a</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_storel_pi</name> <argument_list>(<argument><expr><name>__m64</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__a</name> <init>= <expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>__A</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>__P</name> <operator>=</operator> <name><name>__a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR8</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movemask_ps</name> <argument_list>(<argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>perm_mask</name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x00204060</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x80808080</literal></expr>, <expr><literal type="number">0x00204060</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator>
<call><name>vec_vbpermq</name> <argument_list>(<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <name>__A</name></expr></argument>,
<argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <name>perm_mask</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load1_ps</name> <argument_list>(<argument><expr><name>float</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_set1_ps</name> <argument_list>(<argument><expr><operator>*</operator><name>__P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m128</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_load_ps1</name> <argument_list>(<argument><expr><name>float</name> <specifier>const</specifier> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_load1_ps</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_extract_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>shiftr</name> <init>= <expr><name>__N</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__BIG_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>shiftr</name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <name>shiftr</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><operator>(</operator><name>__A</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>shiftr</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pextrw</name> <argument_list>(<argument><expr><name>__m64</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_extract_pi16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__N</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_insert_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__D</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>shiftl</name> <init>= <expr><operator>(</operator><name>__N</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__m64</name></type> <name>shiftD</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>__m64</name><operator>)</operator> <name>__D</name> <operator>&lt;&lt;</operator> <name>shiftl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__m64</name></type> <name>mask</name> <init>= <expr><literal type="number">0xffffUL</literal> <operator>&lt;&lt;</operator> <name>shiftl</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m64</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>__A</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>shiftD</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pinsrw</name> <argument_list>(<argument><expr><name>__m64</name> <specifier>const</specifier> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__D</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_insert_pi16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__D</name></expr></argument>, <argument><expr><name>__N</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>

<name>_mm_max_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>short</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>__bool</name> <name>short</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__A</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pmaxsw</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_max_pi16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_max_pu8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>__bool</name> <name>char</name><operator>)</operator><call><name>vec_cmpgt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__A</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pmaxub</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_max_pu8</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>short</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>__bool</name> <name>short</name><operator>)</operator><call><name>vec_cmplt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__A</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>m1</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pminsw</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_min_pi16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_min_pu8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>__bool</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>__bool</name> <name>char</name><operator>)</operator><call><name>vec_cmplt</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_sel</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m1</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__A</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m2</name><operator>.</operator><name>as_m64</name></name> <operator>=</operator> <name>__B</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>res</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<ternary><condition><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then>
<expr><name><name>m1</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>m2</name><operator>.</operator><name>as_char</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <name><name>res</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pminub</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_min_pu8</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_movemask_pi8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>p</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x0008101820283038UL</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><literal type="number">0x3830282018100800UL</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>__builtin_bpermd</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>int</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pmovmskb</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_movemask_pi8</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_mulhi_pu16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>xform1</name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w0</name> <operator>=</operator> <call><name>vec_vmuleuh</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w1</name> <operator>=</operator> <call><name>vec_vmulouh</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_perm</name> <argument_list>(<argument><expr><name>w0</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>xform1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pmulhuw</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_mulhi_pu16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_shuffle_pi16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_10</name> <init>= <expr><name>__N</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_32</name> <init>= <expr><operator>(</operator><name>__N</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_54</name> <init>= <expr><operator>(</operator><name>__N</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_selector_76</name> <init>= <expr><operator>(</operator><name>__N</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>permute_selectors</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">0x0908</literal></expr>, <expr><literal type="number">0x0B0A</literal></expr>, <expr><literal type="number">0x0D0C</literal></expr>, <expr><literal type="number">0x0F0E</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="number">0x0607</literal></expr>, <expr><literal type="number">0x0405</literal></expr>, <expr><literal type="number">0x0203</literal></expr>, <expr><literal type="number">0x0001</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__LITTLE_ENDIAN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_10</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_32</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_54</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_76</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_10</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_32</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_54</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>permute_selectors</name><index>[<expr><name>element_selector_76</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>as_m64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>vec_perm</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>r</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pshufw</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>int</name> <specifier>const</specifier> <name>__N</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_shuffle_pi16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__N</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_maskmove_si64</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__N</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__m64</name></type> <name>hibit</name> <init>= <expr><literal type="number">0x8080808080808080UL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m64</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m64</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>__m64</name><operator>*</operator><operator>)</operator><name>__P</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>_mm_cmpeq_pi8</name> <argument_list>(<argument><expr><operator>(</operator><name>__N</name> <operator>&amp;</operator> <name>hibit</name><operator>)</operator></expr></argument>, <argument><expr><name>hibit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>__A</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_maskmovq</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__N</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>__P</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_mm_maskmove_si64</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__N</name></expr></argument>, <argument><expr><name>__P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_avg_pu8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_avg</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pavgb</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_avg_pu8</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_avg_pu16</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>short</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>short</name><operator>)</operator><call><name>vec_splats</name> <argument_list>(<argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>vec_avg</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>__m64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>__vector</name> <name>long</name> <name>long</name><operator>)</operator> <name>c</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_pavgw</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_avg_pu16</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sad_pu8</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>unsigned</name> <name>char</name></type> <name>vmin</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>, <decl><type ref="prev"/><name>vabsdiff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__vector</name> <name>signed</name> <name>int</name></type> <name>vsum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>__vector</name> <name>unsigned</name> <name>int</name></type> <name>zero</name> <init>=
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__m64_union</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{ <expr><literal type="number">0UL</literal></expr>, <expr><name>__A</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>__vector</name> <name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <block>{ <expr><literal type="number">0UL</literal></expr>, <expr><name>__B</name></expr> }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>vmin</name> <operator>=</operator> <call><name>vec_min</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>vec_max</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vabsdiff</name> <operator>=</operator> <call><name>vec_sub</name> <argument_list>(<argument><expr><name>vmax</name></expr></argument>, <argument><expr><name>vmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator> <call><name>vec_sum4s</name> <argument_list>(<argument><expr><name>vabsdiff</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vsum</name> <operator>=</operator> <call><name>vec_sums</name> <argument_list>(<argument><expr><name>vsum</name></expr></argument>, <argument><expr><operator>(</operator><name>__vector</name> <name>signed</name> <name>int</name><operator>)</operator> <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>result</name><operator>.</operator><name>as_short</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vsum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>result</name><operator>.</operator><name>as_m64</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>__m64</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_m_psadbw</name> <argument_list>(<argument><expr><name>__m64</name> <name>__A</name></expr></argument>, <argument><expr><name>__m64</name> <name>__B</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>_mm_sad_pu8</name> <argument_list>(<argument><expr><name>__A</name></expr></argument>, <argument><expr><name>__B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_stream_pi</name> <argument_list>(<argument><expr><name>__m64</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m64</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<asm>__asm__ (
" dcbtstt 0,%0"
:
: "b" (__P)
: "memory"
);</asm>
<expr_stmt><expr><operator>*</operator><name>__P</name> <operator>=</operator> <name>__A</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_stream_ps</name> <argument_list>(<argument><expr><name>float</name> <operator>*</operator><name>__P</name></expr></argument>, <argument><expr><name>__m128</name> <name>__A</name></expr></argument>)</argument_list>
<block>{<block_content>

<asm>__asm__ (
" dcbtstt 0,%0"
:
: "b" (__P)
: "memory"
);</asm>
<expr_stmt><expr><call><name>_mm_store_ps</name> <argument_list>(<argument><expr><name>__P</name></expr></argument>, <argument><expr><name>__A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_sfence</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>

<expr_stmt><expr><call><name>__atomic_thread_fence</name> <argument_list>(<argument><expr><name>__ATOMIC_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>_mm_pause</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_ARCH_PWR8</name></expr></cpp:if>










<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>__PPR</name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (
" mfppr %0;"
" or 31,31,31;"
" isync;"
" lwsync;"
" isync;"
" mtppr %0;"
: "=r" (__PPR)
:
: "memory"
);</asm>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<expr_stmt><expr><call><name>__atomic_thread_fence</name> <argument_list>(<argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MM_TRANSPOSE4_PS</name><parameter_list>(<parameter><type><name>row0</name></type></parameter>, <parameter><type><name>row1</name></type></parameter>, <parameter><type><name>row2</name></type></parameter>, <parameter><type><name>row3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { __v4sf __r0 = (row0), __r1 = (row1), __r2 = (row2), __r3 = (row3); __v4sf __t0 = vec_vmrghw (__r0, __r1); __v4sf __t1 = vec_vmrghw (__r2, __r3); __v4sf __t2 = vec_vmrglw (__r0, __r1); __v4sf __t3 = vec_vmrglw (__r2, __r3); (row0) = (__v4sf)vec_mergeh ((__vector long long)__t0, (__vector long long)__t1); (row1) = (__v4sf)vec_mergel ((__vector long long)__t0, (__vector long long)__t1); (row2) = (__v4sf)vec_mergeh ((__vector long long)__t2, (__vector long long)__t3); (row3) = (__v4sf)vec_mergel ((__vector long long)__t2, (__vector long long)__t3); } while (0)</cpp:value></cpp:define>



















<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:empty>#include_next &lt;xmmintrin.h&gt;</cpp:empty>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
