<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Pointer.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_POINTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_POINTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Descriptor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InterpBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ComparisonCategories.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeadBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InterpState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Pointer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<enum_decl>enum <name>PrimType</name> : <type><name>unsigned</name></type>;</enum_decl>





<decl_stmt><decl><type><name>class</name></type> <name>Pointer</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>PastEndMark</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>RootPtrMark</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>Pointer</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Block</name> <operator>*</operator><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Pointer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Pointer</name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointer</name> <operator>&amp;&amp;</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Pointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Pointer</name> <operator>&amp;</operator><name>P</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><name>Pointer</name> <operator>&amp;&amp;</operator><name>P</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>APValue</name> <macro><name>toAPValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>Pointer</name></type> <name>atIndex</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <name>RootPtrMark</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>RootPtrMark</name></expr></argument>, <argument><expr><call><name>getDeclDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Off</name> <init>= <expr><name>Idx</name> <operator>*</operator> <call><name>elemSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ElemDesc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InlineDescriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InitMap</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><name>Base</name> <operator>+</operator> <name>Off</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>Pointer</name></type> <name>atField</name><argument_list>(<argument><expr><name>unsigned</name> <name>Off</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Field</name> <init>= <expr><name>Offset</name> <operator>+</operator> <name>Off</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Field</name></expr></argument>, <argument><expr><name>Field</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>Pointer</name> <macro><name>narrow</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<if_stmt><if>if <condition>(<expr><call><name>isZero</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isUnknownSizeArray</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>


<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <name>RootPtrMark</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>Offset</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>Offset</name></expr> </then><else>: <expr><name>PastEndMark</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isOnePastEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><name>PastEndMark</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>inPrimitiveArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Offset</name> <operator>!=</operator> <name>Base</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><name>Offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InitMap</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>Offset</name> <operator>!=</operator> <name>Base</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>NewBase</name> <init>= <expr><name>Base</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InlineDescriptor</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>NewBase</name></expr></argument>, <argument><expr><name>NewBase</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>Pointer</name> <macro><name>expand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isElementPastEnd</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>Adjust</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inPrimitiveArray</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Adjust</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InitMap</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Adjust</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InlineDescriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><name>Base</name> <operator>+</operator> <call><name>getSize</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Adjust</name></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>


if (Base != Offset</block></if></if_stmt>)</block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>


<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>RootPtrMark</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Next</name> <init>= <expr><name>Base</name> <operator>-</operator> <call><name>getInlineDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>Offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>Desc</name> <init>= <expr><ternary><condition><expr><name>Next</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>getDeclDesc</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>getDescriptor</name><argument_list>(<argument><expr><name>Next</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>Desc</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Desc</name><operator>-&gt;</operator><name>IsArray</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Next</name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isZero</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Pointee</name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isLive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Pointee</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>Pointee</name><operator>-&gt;</operator><name>IsDead</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isField</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Base</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>Base</name> <operator>!=</operator> <name>RootPtrMark</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>Descriptor</name> <operator>*</operator><macro><name>getDeclDesc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Pointee</name><operator>-&gt;</operator><name>Desc</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getDeclLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getDeclDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getLocation</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>Pointer</name> <macro><name>getBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <name>RootPtrMark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Offset</name> <operator>==</operator> <name>PastEndMark</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot get base of a block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>
assert(Offset == Base &amp;&amp; "not an inner field"</block></if></if_stmt>)</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NewBase</name> <init>= <expr><name>Base</name> <operator>-</operator> <call><name>getInlineDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>Offset</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>NewBase</name></expr></argument>, <argument><expr><name>NewBase</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>Pointer</name> <macro><name>getArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <name>RootPtrMark</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>Offset</name> <operator>!=</operator> <name>PastEndMark</name> <operator>&amp;&amp;</operator> <literal type="string">"not an array element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block>
<call><name>assert</name><argument_list>(<argument><expr><name>Offset</name> <operator>!=</operator> <name>Base</name> <operator>&amp;&amp;</operator> <literal type="string">"not an array element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>Pointer</name><argument_list>(<argument><expr><name>Pointee</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>, <argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</return>
}


Descriptor <expr_stmt><expr><operator>*</operator><macro><name>getFieldDesc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>Base</name> <operator>==</operator> <name>RootPtrMark</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getDeclDesc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getInlineDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>Desc</name></expr>;</return>
}


QualType <macro><name>getType</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{ <return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>size_t</name> <macro><name>elemSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <name>RootPtrMark</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getDeclDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getElemSize</name><argument_list>()</argument_list></call></expr>;</return>
}

size_t <macro><name>getSize</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{ <return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Offset</name> <operator>!=</operator> <name>PastEndMark</name> <operator>&amp;&amp;</operator> <literal type="string">"invalid offset"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Base</name> <operator>==</operator> <name>RootPtrMark</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Offset</name></expr>;</return></block_content></block></if></if_stmt>

<name>unsigned</name> <name>Adjust</name> <operator>=</operator> <literal type="number">0</literal></block></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Offset</name> <operator>!=</operator> <name>Base</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ElemDesc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Adjust</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InlineDescriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Adjust</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InitMap</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>Offset</name> <operator>-</operator> <name>Base</name> <operator>-</operator> <name>Adjust</name></expr>;</return>
}


bool <macro><name>inArray</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{ <return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IsArray</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>inPrimitiveArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isPrimitiveArray</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUnknownSizeArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isUnknownSizeArray</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isArrayElement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Base</name> <operator>!=</operator> <name>Offset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>Base</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>Base</name> <operator>==</operator> <name>RootPtrMark</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>Offset</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Record</name> <operator>*</operator><macro><name>getRecord</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>ElemRecord</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator><macro><name>getField</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFieldDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>asFieldDecl</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isUnion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isExtern</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>isExtern</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isStatic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isTemporary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>isTemporary</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isStaticTemporary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isStatic</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isTemporary</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isMutable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Base</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>getInlineDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IsMutable</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isInitialized</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isActive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Base</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>getInlineDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IsActive</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isBaseClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isField</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getInlineDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IsBase</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isConst</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Base</name> <operator>==</operator> <literal type="number">0</literal> <operator>?</operator> <call><name>getDeclDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IsConst</name> <operator>:</operator> <call><name>getInlineDesc</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>IsConst</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getDeclID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>getDeclID</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getByteOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Offset</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getNumElems</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getSize</name><argument_list>()</argument_list></call> <operator>/</operator> <call><name>elemSize</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>int64_t</name> <macro><name>getIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isElementPastEnd</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>ElemSize</name> <init>= <expr><call><name>elemSize</name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getOffset</name><argument_list>()</argument_list></call> <operator>/</operator> <name>ElemSize</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}


bool <macro><name>isOnePastEnd</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><call><name>isElementPastEnd</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>getSize</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>getOffset</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isElementPastEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Offset</name> <operator>==</operator> <name>PastEndMark</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <operator>&amp;</operator><macro><name>deref</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isLive</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid pointer"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>Offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>&amp;</modifier></type><name>elem</name><argument_list>(<argument><expr><name>unsigned</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><name>I</name></expr>]</index></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>void</name> <macro><name>initialize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>activate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>deactivate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hasSameBase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Pointer</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pointer</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hasSameArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Pointer</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pointer</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <name>Base</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name>Offset</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Pointee</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <call><name><name>Pointee</name><operator>-&gt;</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"nullptr"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DeadBlock</name></decl>;</decl_stmt>

<macro><name>Pointer</name><argument_list>(<argument>Block *Pointee</argument>, <argument>unsigned Base</argument>, <argument>unsigned Offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>InlineDescriptor</name> <operator>*</operator><macro><name>getInlineDesc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getDescriptor</name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>InlineDescriptor</name> <modifier>*</modifier></type><name>getDescriptor</name><argument_list>(<argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Not a nested pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>InlineDescriptor</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>Offset</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>InitMap</name> <operator>*</operator><operator>&amp;</operator><macro><name>getInitMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>InitMap</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Pointee</name><operator>-&gt;</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>Base</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>Block</name> <modifier>*</modifier></type><name>Pointee</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>Base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>Prev</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>Next</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
};

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <specifier>const</specifier> <name>Pointer</name> <operator>&amp;</operator><name>P</name><operator>)</operator> <block>{
<expr><call><name><name>P</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>OS</name></expr>;</return>
}</block></expr></expr_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
