<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/ASTUtils.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYZER_WEBKIT_ASTUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYZER_WEBKIT_ASTUTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
































<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<macro><name>tryToFindPtrOrigin</name><argument_list>(<argument>const clang::Expr *E</argument>, <argument>bool StopAtFirstRefCountedObj</argument>)</argument_list></macro></expr>;</expr_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>isASafeCallArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>std</name><operator>::</operator><name>string</name> <macro><name>safeGetName</name><argument_list>(<argument>const T *ASTNode</argument>)</argument_list></macro> <block>{
<expr><specifier>const</specifier> <name>auto</name> <operator>*</operator><specifier>const</specifier> <name>ND</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>NamedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ASTNode</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ND</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ND</name><operator>-&gt;</operator><name>getDeclName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isIdentifier</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name><name>ND</name><operator>-&gt;</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>str</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
