<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/htmxlintrin.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HTMXLINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__HTMXLINTRIN_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__HTM__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"HTM instruction set not enabled"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;htmintrin.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASR_PTR</name><parameter_list>(<parameter><type><name>TM_BUF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((texasr_t *)((char *)(TM_BUF) + 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRU_PTR</name><parameter_list>(<parameter><type><name>TM_BUF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((texasru_t *)((char *)(TM_BUF) + 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TEXASRL_PTR</name><parameter_list>(<parameter><type><name>TM_BUF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((texasrl_t *)((char *)(TM_BUF) + 4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TFIAR_PTR</name><parameter_list>(<parameter><type><name>TM_BUF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tfiar_t *)((char *)(TM_BUF) + 8))</cpp:value></cpp:define>

<typedef>typedef <type><name>char</name></type> <name><name>TM_buff_type</name><index>[<expr><literal type="number">16</literal></expr>]</index></name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HTM_TBEGIN_STARTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_simple_begin</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_expect</name> <argument_list>(<argument><expr><call><name>__builtin_tbegin</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_HTM_TBEGIN_STARTED</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_begin</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><call><name>_TEXASRL_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_expect</name> <argument_list>(<argument><expr><call><name>__builtin_tbegin</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>_HTM_TBEGIN_STARTED</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__powerpc64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><call><name>_TEXASR_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_get_texasr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_get_texasru</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><call><name>_TEXASRL_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_get_texasr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><call><name>_TFIAR_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__builtin_get_tfiar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_end</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>__builtin_expect</name> <argument_list>(<argument><expr><call><name>__builtin_tend</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_abort</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_tabort</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_named_abort</name> <argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <specifier>const</specifier> <name>__code</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_tabort</name> <argument_list>(<argument><expr><name>__code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_resume</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_tresume</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>void</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_suspend</name> <argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_tsuspend</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_user_abort</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasru_t</name></type> <name>texasru</name> <init>= <expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_TEXASRU_ABORT</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_named_user_abort</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>__code</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasru_t</name></type> <name>texasru</name> <init>= <expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>__code</name> <operator>=</operator> <call><name>_TEXASRU_FAILURE_CODE</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>_TEXASRU_ABORT</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_illegal</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasru_t</name></type> <name>texasru</name> <init>= <expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_TEXASRU_DISALLOWED</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_footprint_exceeded</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasru_t</name></type> <name>texasru</name> <init>= <expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_TEXASRU_FOOTPRINT_OVERFLOW</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_nesting_depth</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasrl_t</name></type> <name>texasrl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>_HTM_STATE</name> <argument_list>(<argument><expr><call><name>__builtin_ttest</name> <argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>_HTM_NONTRANSACTIONAL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>texasrl</name> <operator>=</operator> <operator>*</operator><call><name>_TEXASRL_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_TEXASR_FAILURE_SUMMARY</name> <argument_list>(<argument><expr><name>texasrl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>texasrl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>texasrl</name> <operator>=</operator> <operator>(</operator><name>texasrl_t</name><operator>)</operator> <call><name>__builtin_get_texasr</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>_TEXASR_TRANSACTION_LEVEL</name> <argument_list>(<argument><expr><name>texasrl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_nested_too_deep</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasru_t</name></type> <name>texasru</name> <init>= <expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_TEXASRU_NESTING_OVERFLOW</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_conflict</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasru_t</name></type> <name>texasru</name> <init>= <expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>_TEXASRU_EXTRACT_BITS</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_failure_persistent</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>texasru_t</name></type> <name>texasru</name> <init>= <expr><operator>*</operator><call><name>_TEXASRU_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>_TEXASRU_FAILURE_PERSISTENT</name> <argument_list>(<argument><expr><name>texasru</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_failure_address</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><call><name>_TFIAR_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>__inline</name> <name>long</name> <name>long</name></type>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>__gnu_inline__</name><operator>,</operator> <name>__always_inline__</name><operator>,</operator> <name>__artificial__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_failure_code</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__TM_buff</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><operator>*</operator><call><name>_TEXASR_PTR</name> <argument_list>(<argument><expr><name>__TM_buff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>





<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_simple_begin</name> <argument_list>()</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_tbegin_nofloat</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_begin</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_tbegin_nofloat</name> <argument_list>(<argument><expr><name>__tdb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_end</name> <argument_list>()</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_tend</name> <argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_abort</name> <argument_list>()</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_tabort</name> <argument_list>(<argument><expr><name>_HTM_FIRST_USER_ABORT_CODE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_named_abort</name> <argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <specifier>const</specifier> <name>__code</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><call><name>__builtin_tabort</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>_HTM_FIRST_USER_ABORT_CODE</name> <operator>+</operator> <name>__code</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_non_transactional_store</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__addr</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <specifier>const</specifier> <name>__value</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>__builtin_non_tx_store</name> <argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>__addr</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>__value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_nesting_depth</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><call><name>__builtin_tx_nesting_depth</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>depth</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdb</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>tdb</name><operator>-&gt;</operator><name>nesting_depth</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_user_abort</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdb</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>&gt;=</operator> <name>_HTM_FIRST_USER_ABORT_CODE</name><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_named_user_abort</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name><operator>*</operator> <name>__code</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdb</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>&gt;=</operator> <name>_HTM_FIRST_USER_ABORT_CODE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>__code</name> <operator>=</operator> <name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>-</operator> <name>_HTM_FIRST_USER_ABORT_CODE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_illegal</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>tdb</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>==</operator> <literal type="number">4</literal>
<operator>||</operator> <name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>==</operator> <literal type="number">11</literal> <operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_footprint_exceeded</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>tdb</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>==</operator> <literal type="number">7</literal>
<operator>||</operator> <name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_nested_too_deep</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>tdb</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>==</operator> <literal type="number">13</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_conflict</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>tdb</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>==</operator> <literal type="number">9</literal>
<operator>||</operator> <name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name> <operator>==</operator> <literal type="number">10</literal> <operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_is_failure_persistent</name> <argument_list>(<argument><expr><name>long</name> <specifier>const</specifier> <name>__result</name></expr></argument>)</argument_list>
<block>{<block_content>
<return>return <expr><name>__result</name> <operator>==</operator> <name>_HTM_TBEGIN_PERSISTENT</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_failure_address</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>tdb</name><operator>-&gt;</operator><name>atia</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>__inline</name> <name>long</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__always_inline__</name><operator>,</operator> <name>__nodebug__</name><operator>)</operator></expr></argument>)</argument_list>
<name>__TM_failure_code</name> <argument_list>(<argument><expr><name>void</name><operator>*</operator> <specifier>const</specifier> <name>__tdb_ptr</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>__htm_tdb</name></name> <modifier>*</modifier></type><name>tdb</name> <init>= <expr><operator>(</operator>struct <name>__htm_tdb</name><operator>*</operator><operator>)</operator><name>__tdb_ptr</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>tdb</name><operator>-&gt;</operator><name>abort_code</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
