<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/TargetInfo.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_TARGETINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_TARGETINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenModule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CGValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SyncScope.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Constant</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>GlobalValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Value</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ABIInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CallArgList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeGenFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGBlockInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CGFunctionInfo</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>TargetCodeGenInfo</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ABIInfo</name></expr></argument>&gt;</argument_list></name> <name>Info</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TargetCodeGenInfo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ABIInfo</name></expr></argument>&gt;</argument_list></name> <name>Info</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Info</name><argument_list>(<argument>std::move(Info)</argument>)</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>TargetCodeGenInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>ABIInfo</name> <operator>&amp;</operator><macro><name>getABIInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>Info</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>setTargetAttributes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>GlobalValue</name> <operator>*</operator><name>GV</name></expr></argument>,
<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>M</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>emitTargetMetadata</name><argument_list>(
<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><name>GlobalDecl</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>MangledDeclNames</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>checkFunctionCallABI</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>CallLoc</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>Caller</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>Callee</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CallArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>









<expr_stmt><expr><name>virtual</name> <name>unsigned</name> <macro><name>getSizeOfUnwindException</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>








<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>extendPointerWithSExt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>int</name></type> <name>getDwarfEHStackPointer</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenModule</name> <operator>&amp;</operator><name>M</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>initDwarfEHRegSizeTable</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><name>Address</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>decodeReturnAddress</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>llvm::Value *Address</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Address</name></expr>;</return>
}</block></expr></expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>encodeReturnAddress</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>llvm::Value *Address</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Address</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator>
<macro><name>testFPKind</name><argument_list>(<argument>llvm::Value *V</argument>, <argument>unsigned BuiltinID</argument>, <argument>CGBuilderTy &amp;Builder</argument>,
<argument>CodeGenModule &amp;CGM</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>V</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isFloatingPointTy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"V should have an FP type."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>adjustInlineAsmType</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>StringRef Constraint</argument>,
<argument>llvm::Type *Ty</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Ty</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isScalarizableAsmOperand</name><argument_list>(<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>Ty</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>addReturnRegisterOutputs</name><argument_list>(
<argument><expr><name>CodeGen</name><operator>::</operator><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>, <argument><expr><name>CodeGen</name><operator>::</operator><name>LValue</name> <name>ReturnValue</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Constraints</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ResultRegTypes</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ResultTruncRegTypes</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CodeGen</name><operator>::</operator><name>LValue</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ResultRegDests</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>AsmString</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>NumOutputs</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>doesReturnSlotInterfereWithArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>











<expr_stmt><expr><name>virtual</name> <name>StringRef</name> <macro><name>getARCRetainAutoreleasedReturnValueMarker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>markARCOptimizedReturnCallsAsNoTail</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator>
<macro><name>getUBSanFunctionSignature</name><argument_list>(<argument>CodeGen::CodeGenModule &amp;CGM</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>











































<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isNoProtoCallVariadic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CodeGen</name><operator>::</operator><name>CallArgList</name> <operator>&amp;</operator><name>args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FunctionNoProtoType</name> <operator>*</operator><name>fnType</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>getDependentLibraryOption</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Lib</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">24</literal></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Opt</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>getDetectMismatchOption</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Name</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Value</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Opt</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>unsigned</name> <macro><name>getOpenCLKernelCallingConv</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>getNullPointer</name><argument_list>(<argument>const CodeGen::CodeGenModule &amp;CGM</argument>,
<argument>llvm::PointerType *T</argument>, <argument>QualType QT</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>virtual</name> <name>LangAS</name></type> <name>getGlobalVarAddressSpace</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>LangAS</name> <macro><name>getASTAllocaAddressSpace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LangAS</name><operator>::</operator><name>Default</name></expr>;</return> }</block></expr></expr_stmt>







<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator><macro><name>performAddrSpaceCast</name><argument_list>(<argument>CodeGen::CodeGenFunction &amp;CGF</argument>,
<argument>llvm::Value *V</argument>, <argument>LangAS SrcAddr</argument>,
<argument>LangAS DestAddr</argument>, <argument>llvm::Type *DestTy</argument>,
<argument>bool IsNonNull = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>performAddrSpaceCast</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>,
<argument>llvm::Constant *V</argument>,
<argument>LangAS SrcAddr</argument>, <argument>LangAS DestAddr</argument>,
<argument>llvm::Type *DestTy</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>LangAS</name> <macro><name>getAddrSpaceOfCxaAtexitPtrParam</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LangAS</name><operator>::</operator><name>Default</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>SyncScope</name><operator>::</operator><name>ID</name> <macro><name>getLLVMSyncScopeID</name><argument_list>(<argument>const LangOptions &amp;LangOpts</argument>,
<argument>SyncScope Scope</argument>,
<argument>llvm::AtomicOrdering Ordering</argument>,
<argument>llvm::LLVMContext &amp;Ctx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TargetOpenCLBlockHelper</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Value</name> <operator>*</operator></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>ValueTy</name></expr>;</expr_stmt></typedef>
<macro><name>TargetOpenCLBlockHelper</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>TargetOpenCLBlockHelper</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <call><name>getCustomFieldTypes</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>ValueTy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name>
<call><name>getCustomFieldValues</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CGBlockInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>areAllCustomFieldValuesConstant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CGBlockInfo</name> <modifier>&amp;</modifier></type><name>Info</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name>
<call><name>getCustomFieldValues</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CGBlockInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>virtual</name> <name>TargetOpenCLBlockHelper</name> <operator>*</operator><macro><name>getTargetOpenCLBlockHelper</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>






<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Function</name> <operator>*</operator>
<macro><name>createEnqueuedBlockKernel</name><argument_list>(<argument>CodeGenFunction &amp;CGF</argument>,
<argument>llvm::Function *BlockInvokeFunc</argument>,
<argument>llvm::Value *BlockLiteral</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>shouldEmitStaticExternCAliases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>setCUDAKernelCallingConvention</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionType</name> <operator>*</operator><operator>&amp;</operator><name>FT</name></expr></argument>)</argument_list> const <block>{<block_content/>}</block></decl></decl_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>getCUDADeviceBuiltinSurfaceDeviceType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><macro><name>getCUDADeviceBuiltinTextureDeviceType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>emitCUDADeviceBuiltinSurfaceDeviceCopy</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>LValue</name> <name>Dst</name></expr></argument>,
<argument><expr><name>LValue</name> <name>Src</name></expr></argument>)</argument_list> const <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>emitCUDADeviceBuiltinTextureDeviceCopy</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>,
<argument><expr><name>LValue</name> <name>Dst</name></expr></argument>,
<argument><expr><name>LValue</name> <name>Src</name></expr></argument>)</argument_list> const <block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
