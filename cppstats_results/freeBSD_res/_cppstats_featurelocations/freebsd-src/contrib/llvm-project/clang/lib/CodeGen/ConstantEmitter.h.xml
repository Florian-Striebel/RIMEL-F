<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/CodeGen/ConstantEmitter.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_CODEGEN_CONSTANTEMITTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_CODEGEN_CONSTANTEMITTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenFunction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"CodeGenModule.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ConstantEmitter</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CodeGenFunction</name> <modifier>*</modifier><specifier>const</specifier></type> <name>CGF</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>Abstract</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>InitializedNonAbstract</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Finalized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>InConstantContext</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>LangAS</name></type> <name>DestAddressSpace</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name>
<name>PlaceholderAddresses</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ConstantEmitter</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>, <argument><expr><name>CodeGenFunction</name> <operator>*</operator><name>CGF</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CGM</name><argument_list>(<argument><expr><name>CGM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CGF</name><argument_list>(<argument>CGF</argument>)</argument_list></macro> <expr><block>{}</block>




<call><name>ConstantEmitter</name><argument_list>(<argument><expr><name>CodeGenFunction</name> <operator>&amp;</operator><name>CGF</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>CGM</name><argument_list>(<argument><expr><name><name>CGF</name><operator>.</operator><name>CGM</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CGF</name><argument_list>(<argument>&amp;CGF</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>ConstantEmitter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ConstantEmitter</name> <operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstantEmitter</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ConstantEmitter</name> <operator>&amp;</operator><name>other</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ConstantEmitter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isAbstract</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Abstract</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>tryEmitForInitializer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitForInitializer</name><argument_list>(<argument>const Expr *E</argument>, <argument>LangAS destAddrSpace</argument>,
<argument>QualType destType</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>emitForInitializer</name><argument_list>(<argument>const APValue &amp;value</argument>, <argument>LangAS destAddrSpace</argument>,
<argument>QualType destType</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>finalize</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>global</name></expr></argument>)</argument_list></decl>;</decl_stmt>

















<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>tryEmitAbstractForInitializer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>emitAbstract</name><argument_list>(<argument>const Expr *E</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>emitAbstract</name><argument_list>(<argument>SourceLocation loc</argument>, <argument>const APValue &amp;value</argument>,
<argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitAbstract</name><argument_list>(<argument>const Expr *E</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitAbstractForMemory</name><argument_list>(<argument>const Expr *E</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitAbstract</name><argument_list>(<argument>const APValue &amp;value</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitAbstractForMemory</name><argument_list>(<argument>const APValue &amp;value</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>tryEmitConstantExpr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ConstantExpr</name> <operator>*</operator><name>CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>emitNullForMemory</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>emitNullForMemory</name><argument_list>(<argument><expr><name>CGM</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>emitForMemory</name><argument_list>(<argument>llvm::Constant *C</argument>, <argument>QualType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>emitForMemory</name><argument_list>(<argument><expr><name>CGM</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>emitNullForMemory</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>emitForMemory</name><argument_list>(<argument>CodeGenModule &amp;CGM</argument>, <argument>llvm::Constant *C</argument>,
<argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>tryEmitPrivateForVarInit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitPrivate</name><argument_list>(<argument>const Expr *E</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitPrivateForMemory</name><argument_list>(<argument>const Expr *E</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitPrivate</name><argument_list>(<argument>const APValue &amp;value</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>tryEmitPrivateForMemory</name><argument_list>(<argument>const APValue &amp;value</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>GlobalValue</name> <operator>*</operator><call><name>getCurrentAddrPrivate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>










<decl_stmt><decl><type><name>void</name></type> <name>registerCurrentAddrPrivate</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>signal</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>GlobalValue</name> <operator>*</operator><name>placeholder</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>initializeNonAbstract</name><parameter_list>(<parameter><decl><type><name>LangAS</name></type> <name>destAS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>InitializedNonAbstract</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>InitializedNonAbstract</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DestAddressSpace</name> <operator>=</operator> <name>destAS</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>markIfFailed</name><argument_list>(<argument>llvm::Constant *init</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>init</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<struct>struct <name>AbstractState</name> <block>{
<decl_stmt><decl><type><name>bool</name></type> <name>OldValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>OldPlaceholdersSize</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>AbstractState</name></type> <name>pushAbstract</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>AbstractState</name></type> <name>saved</name> <init>= <expr><block>{ <expr><name>Abstract</name></expr>, <macro><name>PlaceholderAddresses</name></macro><expr><operator>.</operator><macro><name>size</name><argument_list>()</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Abstract</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>saved</name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>validateAndPopAbstract</name><argument_list>(<argument>llvm::Constant *C</argument>, <argument>AbstractState save</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
