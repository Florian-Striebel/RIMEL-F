<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/Record.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_RECORD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_RECORD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Pointer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Program</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Record</name> <block>{<block_content>
<label><name>public</name>:</label>

<struct>struct <name>Field</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>Desc</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>Base</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Descriptor</name> <modifier>*</modifier></type><name>Desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Record</name> <modifier>*</modifier></type><name>R</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>using</name></type> <name>FieldList</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Field</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>BaseList</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>VirtualBaseList</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Base</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Decl</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUnion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getDecl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isUnion</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BaseSize</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getFullSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BaseSize</name> <operator>+</operator> <name>VirtualSize</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Field</name> <modifier>*</modifier></type><name>getField</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator><name>FD</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Base</name> <modifier>*</modifier></type><name>getBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><name>FD</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Base</name> <modifier>*</modifier></type><name>getVirtualBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>const_field_iter</name> <init>= <expr><name>FieldList</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>const_field_iter</name></expr></argument>&gt;</argument_list></name> <macro><name>fields</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>Fields</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Fields</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>unsigned</name></type> <name>getNumFields</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Fields</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>Field</name> <modifier>*</modifier></type><name>getField</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>Fields</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>const_base_iter</name> <init>= <expr><name>BaseList</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>const_base_iter</name></expr></argument>&gt;</argument_list></name> <macro><name>bases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>Bases</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Bases</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>unsigned</name></type> <name>getNumBases</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Bases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>Base</name> <modifier>*</modifier></type><name>getBase</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>Bases</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>const_virtual_iter</name> <init>= <expr><name>VirtualBaseList</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>const_virtual_iter</name></expr></argument>&gt;</argument_list></name> <macro><name>virtual_bases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name><name>VirtualBases</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>VirtualBases</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>unsigned</name></type> <name>getNumVirtualBases</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>VirtualBases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>Base</name> <modifier>*</modifier></type><name>getVirtualBase</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>VirtualBases</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>

<macro><name>Record</name><argument_list>(<argument>const RecordDecl *</argument>, <argument>BaseList &amp;&amp;Bases</argument>, <argument>FieldList &amp;&amp;Fields</argument>,
<argument>VirtualBaseList &amp;&amp;VirtualBases</argument>, <argument>unsigned VirtualSize</argument>,
<argument>unsigned BaseSize</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Program</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>RecordDecl</name> <modifier>*</modifier></type><name>Decl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BaseList</name></type> <name>Bases</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FieldList</name></type> <name>Fields</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VirtualBaseList</name></type> <name>VirtualBases</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Base</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>BaseMap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FieldDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Field</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>FieldMap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>RecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Base</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>VirtualBaseMap</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>BaseSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>VirtualSize</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
