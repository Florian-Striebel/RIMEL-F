<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Driver/ToolChains/Darwin.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_DARWIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_DARWIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Cuda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ROCm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DarwinSDKInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Tool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/ToolChain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/XRayArgs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MachO</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tools</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>darwin</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ArchType</name> <macro><name>getArchTypeForMachOArchName</name><argument_list>(<argument>StringRef Str</argument>)</argument_list></macro></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setTripleTypeForMachOArchName</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>StringRef</name> <name>Str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MachOTool</name> <range>: <expr><name>public</name> <name>Tool</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>AddMachOArch</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>const</specifier> <name>toolchains</name><operator>::</operator><name>MachO</name> <operator>&amp;</operator><macro><name>getMachOToolChain</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>toolchains</name><operator>::</operator><name>MachO</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getToolChain</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<call><name>MachOTool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>ShortName</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Tool</name><argument_list>(<argument>Name</argument>, <argument>ShortName</argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>
}</expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>Assembler</name> <operator>:</operator> <name>public</name> <name>MachOTool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Assembler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MachOTool</name><argument_list>(<argument><literal type="string">"darwin::Assembler"</literal></argument>, <argument><literal type="string">"assembler"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>Linker</name> <operator>:</operator> <name>public</name> <name>MachOTool</name> <block>{
<expr><name>bool</name> <macro><name>NeedsTempPath</name><argument_list>(<argument>const InputInfoList &amp;Inputs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>AddLinkArgs</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>,
<argument>const InputInfoList &amp;Inputs</argument>, <argument>unsigned Version[<literal type="number">5</literal>]</argument>,
<argument>bool LinkerIsLLD</argument>, <argument>bool LinkerIsLLDDarwinNew</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>Linker</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MachOTool</name><argument_list>(<argument><literal type="string">"darwin::Linker"</literal></argument>, <argument><literal type="string">"linker"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isLinkJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>Lipo</name> <operator>:</operator> <name>public</name> <name>MachOTool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Lipo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>MachOTool</name><argument_list>(<argument><literal type="string">"darwin::Lipo"</literal></argument>, <argument><literal type="string">"lipo"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>Dsymutil</name> <operator>:</operator> <name>public</name> <name>MachOTool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Dsymutil</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MachOTool</name><argument_list>(<argument><literal type="string">"darwin::Dsymutil"</literal></argument>, <argument><literal type="string">"dsymutil"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isDsymutilJob</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>VerifyDebug</name> <operator>:</operator> <name>public</name> <name>MachOTool</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>VerifyDebug</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MachOTool</name><argument_list>(<argument><literal type="string">"darwin::VerifyDebug"</literal></argument>, <argument><literal type="string">"dwarfdump"</literal></argument>, <argument>TC</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>hasIntegratedCPP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>void</name> <macro><name>ConstructJob</name><argument_list>(<argument>Compilation &amp;C</argument>, <argument>const JobAction &amp;JA</argument>,
<argument>const InputInfo &amp;Output</argument>, <argument>const InputInfoList &amp;Inputs</argument>,
<argument>const llvm::opt::ArgList &amp;TCArgs</argument>,
<argument>const char *LinkingOutput</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;
}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>toolchains</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>MachO</name> <range>: <expr><name>public</name> <name>ToolChain</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>Tool</name> <operator>*</operator><macro><name>buildAssembler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>buildLinker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>Tool</name> <operator>*</operator><macro><name>getTool</name><argument_list>(<argument>Action::ActionClass AC</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>tools</name><operator>::</operator><name>darwin</name><operator>::</operator><name>Lipo</name></expr></argument>&gt;</argument_list></name> <name>Lipo</name></expr>;
<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>tools</name><operator>::</operator><name>darwin</name><operator>::</operator><name>Dsymutil</name></expr></argument>&gt;</argument_list></name> <name>Dsymutil</name></expr>;
<expr><name>mutable</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>tools</name><operator>::</operator><name>darwin</name><operator>::</operator><name>VerifyDebug</name></expr></argument>&gt;</argument_list></name> <name>VerifyDebug</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>MachO</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>MachO</name><argument_list>()</argument_list></macro> <name>override</name></expr>;






<expr><name>StringRef</name> <macro><name>getMachOArchName</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>virtual</name> <name>void</name> <macro><name>AddLinkARCArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <block>{}</block>





<name>virtual</name> <name>void</name> <macro><name>AddLinkRuntimeLibArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>,
<argument>bool ForceLinkBuiltinRT = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>addStartObjectFileArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
}</block>

<name>virtual</name> <name>void</name> <macro><name>addMinVersionArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>addPlatformVersionArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
}</block>



<name>virtual</name> <name>bool</name> <macro><name>isKernelStatic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>


<name>bool</name> <macro><name>isTargetIOSBased</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>


enum <name>RuntimeLinkOptions</name> <operator>:</operator> <name>unsigned</name> <block>{

<expr><name>RLO_AlwaysLink</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>,


<expr><name>RLO_IsEmbedded</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,


<expr><name>RLO_AddRPath</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>,
}</block></expr>;


<expr><name>void</name> <macro><name>AddLinkRuntimeLib</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>, <argument>StringRef Component</argument>,
<argument>RuntimeLinkOptions Opts = RuntimeLinkOptions()</argument>,
<argument>bool IsShared = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>void</name> <macro><name>addProfileRTLibs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

}</block>





<name>types</name><operator>::</operator><name>ID</name> <macro><name>LookupTypeForExtension</name><argument_list>(<argument>StringRef Ext</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>HasNativeLLVMSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>IsBlocksDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<return>return <expr><name>true</name></expr>;</return>
}</block>
<name>bool</name> <macro><name>IsIntegratedAssemblerDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>IsMathErrnoDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>IsEncodeExtendedBlockSignatureDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>bool</name> <macro><name>IsObjCNonFragileABIDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{

<return>return <expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArch</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>UseObjCMixedDispatch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>bool</name> <macro><name>IsUnwindTablesDefault</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>RuntimeLibType</name> <macro><name>GetDefaultRuntimeLibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>ToolChain</name><operator>::</operator><name>RLT_CompilerRT</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isPICDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPIEDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>isPICDefaultForced</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>SupportsProfiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>UseDwarfDebugFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>ExceptionHandling</name>
<macro><name>GetExceptionModel</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>ExceptionHandling</name><operator>::</operator><name>None</name></expr>;</return>
}</block>

<name>virtual</name> <name>StringRef</name> <macro><name>getOSLibraryNameSuffix</name><argument_list>(<argument>bool IgnoreSim = false</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><literal type="string">""</literal></expr>;</return>
}</block>



<name>bool</name> <macro><name>canSplitThinLTOUnit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

}</expr>;


<expr><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name> <name>Darwin</name> <operator>:</operator> <name>public</name> <name>MachO</name> <block>{
<expr><name>public</name><operator>:</operator>





<name>mutable</name> <name>bool</name> <name>TargetInitialized</name></expr>;

enum <expr><name>DarwinPlatformKind</name> <block>{
<expr><name>MacOS</name></expr>,
<expr><name>IPhoneOS</name></expr>,
<expr><name>TvOS</name></expr>,
<expr><name>WatchOS</name></expr>,
<expr><name>LastDarwinPlatform</name> <operator>=</operator> <name>WatchOS</name></expr>
}</block></expr>;
enum <expr><name>DarwinEnvironmentKind</name> <block>{
<expr><name>NativeEnvironment</name></expr>,
<expr><name>Simulator</name></expr>,
<expr><name>MacCatalyst</name></expr>,
}</block></expr>;

<expr><name>mutable</name> <name>DarwinPlatformKind</name> <name>TargetPlatform</name></expr>;
<expr><name>mutable</name> <name>DarwinEnvironmentKind</name> <name>TargetEnvironment</name></expr>;


<expr><name>mutable</name> <name>VersionTuple</name> <name>TargetVersion</name></expr>;

<expr><name>mutable</name> <name>VersionTuple</name> <name>OSTargetVersion</name></expr>;


<expr><name>mutable</name> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DarwinSDKInfo</name></expr></argument>&gt;</argument_list></name> <name>SDKInfo</name></expr>;

<expr><name>CudaInstallationDetector</name> <name>CudaInstallation</name></expr>;
<expr><name>RocmInstallationDetector</name> <name>RocmInstallation</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>AddDeploymentTarget</name><argument_list>(<argument>llvm::opt::DerivedArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>Darwin</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>Darwin</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ComputeEffectiveClangTriple</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>types::ID InputType</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;




<expr><name>void</name> <macro><name>addMinVersionArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addPlatformVersionArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addStartObjectFileArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isKernelStatic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><operator>(</operator><operator>!</operator><operator>(</operator><call><name>isTargetIPhoneOS</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isIPhoneOSVersionLT</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>isTargetWatchOS</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block>

<name>void</name> <macro><name>addProfileRTLibs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>






<name>void</name> <macro><name>setTarget</name><argument_list>(<argument>DarwinPlatformKind Platform</argument>, <argument>DarwinEnvironmentKind Environment</argument>,
<argument>unsigned Major</argument>, <argument>unsigned Minor</argument>, <argument>unsigned Micro</argument>,
<argument>VersionTuple NativeTargetVersion</argument>)</argument_list></macro> <specifier>const</specifier> <block>{


<if_stmt><if>if <condition>(<expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <name>TargetPlatform</name> <operator>==</operator> <name>Platform</name> <operator>&amp;&amp;</operator>
<name>TargetEnvironment</name> <operator>==</operator> <name>Environment</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>Environment</name> <operator>==</operator> <name>MacCatalyst</name> <operator>?</operator> <name>OSTargetVersion</name> <operator>:</operator> <name>TargetVersion</name><operator>)</operator> <operator>==</operator>
<call><name>VersionTuple</name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Micro</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target already initialized!"</literal></expr></argument>)</argument_list></call></block></expr>;
<expr><name>TargetInitialized</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>TargetPlatform</name> <operator>=</operator> <name>Platform</name></expr>;
<expr><name>TargetEnvironment</name> <operator>=</operator> <name>Environment</name></expr>;
<expr><name>TargetVersion</name> <operator>=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Micro</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Environment</name> <operator>==</operator> <name>Simulator</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Darwin</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setTripleEnvironment</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>Simulator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Environment</name> <operator>==</operator> <name>MacCatalyst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Darwin</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setTripleEnvironment</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>MacABI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TargetVersion</name> <operator>=</operator> <name>NativeTargetVersion</name></expr>;</expr_stmt>
<expr_stmt><expr><name>OSTargetVersion</name> <operator>=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><name>Major</name></expr></argument>, <argument><expr><name>Minor</name></expr></argument>, <argument><expr><name>Micro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

public:
bool isTargetIPhoneOS(</block></if></if_stmt>) <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>TargetPlatform</name> <operator>==</operator> <name>IPhoneOS</name> <operator>||</operator> <name>TargetPlatform</name> <operator>==</operator> <name>TvOS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>TargetEnvironment</name> <operator>==</operator> <name>NativeEnvironment</name></expr>;</return>
}</block></block>

<name>bool</name> <macro><name>isTargetIOSSimulator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>TargetPlatform</name> <operator>==</operator> <name>IPhoneOS</name> <operator>||</operator> <name>TargetPlatform</name> <operator>==</operator> <name>TvOS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>TargetEnvironment</name> <operator>==</operator> <name>Simulator</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetIOSBased</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>isTargetIPhoneOS</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isTargetIOSSimulator</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetTvOS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>TvOS</name> <operator>&amp;&amp;</operator> <name>TargetEnvironment</name> <operator>==</operator> <name>NativeEnvironment</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetTvOSSimulator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>TvOS</name> <operator>&amp;&amp;</operator> <name>TargetEnvironment</name> <operator>==</operator> <name>Simulator</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetTvOSBased</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>TvOS</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetWatchOS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>WatchOS</name> <operator>&amp;&amp;</operator> <name>TargetEnvironment</name> <operator>==</operator> <name>NativeEnvironment</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetWatchOSSimulator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>WatchOS</name> <operator>&amp;&amp;</operator> <name>TargetEnvironment</name> <operator>==</operator> <name>Simulator</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetWatchOSBased</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>WatchOS</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetMacCatalyst</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>IPhoneOS</name> <operator>&amp;&amp;</operator> <name>TargetEnvironment</name> <operator>==</operator> <name>MacCatalyst</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetMacOS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>MacOS</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetMacOSBased</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetPlatform</name> <operator>==</operator> <name>MacOS</name> <operator>||</operator> <call><name>isTargetMacCatalyst</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetAppleSiliconMac</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>isTargetMacOSBased</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getArch</name><argument_list>()</argument_list></call> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>aarch64</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTargetInitialized</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TargetInitialized</name></expr>;</return> }</block>





<name>VersionTuple</name> <macro><name>getTripleTargetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>TargetInitialized</name> <operator>&amp;&amp;</operator> <literal type="string">"Target not initialized!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name>isTargetMacCatalyst</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>OSTargetVersion</name></expr> </then><else>: <expr><name>TargetVersion</name></expr></else></ternary></expr>;</return>
}</block>

<name>bool</name> <macro><name>isIPhoneOSVersionLT</name><argument_list>(<argument>unsigned V0</argument>, <argument>unsigned V1 = <literal type="number">0</literal></argument>,
<argument>unsigned V2 = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isTargetIOSBased</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected call for non iOS target!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TargetVersion</name> <operator>&lt;</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><name>V0</name></expr></argument>, <argument><expr><name>V1</name></expr></argument>, <argument><expr><name>V2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>





<name>bool</name> <macro><name>isMacosxVersionLT</name><argument_list>(<argument>unsigned V0</argument>, <argument>unsigned V1 = <literal type="number">0</literal></argument>, <argument>unsigned V2 = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isTargetMacOSBased</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMacOSX</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMacCatalystEnvironment</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Unexpected call for non OS X target!"</literal></expr></argument>)</argument_list></call></expr>;


<expr><name>VersionTuple</name> <name>MinVers</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><call><name>Triple</name><argument_list>(<argument><expr><call><name>getTriple</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getArchName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"apple"</literal></expr></argument>, <argument><expr><literal type="string">"macos"</literal></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>getMinimumSupportedOSVersion</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><call><name><name>MinVers</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>MinVers</name> <operator>&gt;</operator> <name>TargetVersion</name></expr>
?</condition><then> <expr><name>MinVers</name></expr>
</then><else>: <expr><name>TargetVersion</name></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><name>V0</name></expr></argument>, <argument><expr><name>V1</name></expr></argument>, <argument><expr><name>V2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>



<name>bool</name> <macro><name>isAlignedAllocationUnavailable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <macro><name>addClangTargetOptions</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>StringRef</name> <macro><name>getPlatformFamily</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>StringRef</name> <macro><name>getOSLibraryNameSuffix</name><argument_list>(<argument>bool IgnoreSim = false</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>StringRef</name> <macro><name>getSDKName</name><argument_list>(<argument>StringRef isysroot</argument>)</argument_list></macro></expr>;








<expr><name>bool</name> <macro><name>isCrossCompiling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>DerivedArgList</name> <operator>*</operator>
<macro><name>TranslateArgs</name><argument_list>(<argument>const llvm::opt::DerivedArgList &amp;Args</argument>, <argument>StringRef BoundArch</argument>,
<argument>Action::OffloadKind DeviceOffloadKind</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>CXXStdlibType</name> <macro><name>GetDefaultCXXStdlibType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>ObjCRuntime</name> <macro><name>getDefaultObjCRuntime</name><argument_list>(<argument>bool isNonFragile</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasBlocksRuntime</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddCudaIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AddHIPIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>UseObjCMixedDispatch</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{



<return>return <expr><operator>!</operator><operator>(</operator><call><name>isTargetMacOSBased</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isMacosxVersionLT</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block>

<name>LangOptions</name><operator>::</operator><name>StackProtectorMode</name>
<macro><name>GetDefaultStackProtectorLevel</name><argument_list>(<argument>bool KernelOrKext</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{


<if_stmt><if>if <condition>(<expr><call><name>isTargetIOSBased</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isTargetWatchOSBased</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LangOptions</name><operator>::</operator><name>SSPOn</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isTargetMacOSBased</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isMacosxVersionLT</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LangOptions</name><operator>::</operator><name>SSPOn</name></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isTargetMacOSBased</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isMacosxVersionLT</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>KernelOrKext</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LangOptions</name><operator>::</operator><name>SSPOn</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><name>LangOptions</name><operator>::</operator><name>SSPOff</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>CheckObjCARC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>ExceptionHandling</name> <macro><name>GetExceptionModel</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>SupportsEmbeddedBitcode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SanitizerMask</name> <macro><name>getSupportedSanitizers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>printVerboseInfo</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const <name>override</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name> <name>LLVM_LIBRARY_VISIBILITY</name></type> <name>DarwinClang</name> <range>: <expr><name>public</name> <name>Darwin</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DarwinClang</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Driver</name> <operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>Triple</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;




<expr><name>RuntimeLibType</name> <macro><name>GetRuntimeLibType</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddLinkRuntimeLibArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>,
<argument>bool ForceLinkBuiltinRT = false</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddClangCXXStdlibIncludeArgs</name><argument_list>(
<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddClangSystemIncludeArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddCXXStdlibLibArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddCCKextLibArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>addClangWarningOptions</name><argument_list>(<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>void</name> <macro><name>AddLinkARCArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>unsigned</name> <macro><name>GetDefaultDwarfVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;


<expr><name>bool</name> <macro><name>GetDefaultStandaloneDebug</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>llvm</name><operator>::</operator><name>DebuggerKind</name> <macro><name>getDefaultDebuggerTuning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>DebuggerKind</name><operator>::</operator><name>LLDB</name></expr>;</return>
}</block>



<name>private</name><operator>:</operator>
<name>void</name> <macro><name>AddLinkSanitizerLibArgs</name><argument_list>(<argument>const llvm::opt::ArgList &amp;Args</argument>,
<argument>llvm::opt::ArgStringList &amp;CmdArgs</argument>,
<argument>StringRef Sanitizer</argument>,
<argument>bool shared = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>AddGnuCPlusPlusIncludePaths</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>,
<argument>llvm::opt::ArgStringList &amp;CC1Args</argument>,
<argument>llvm::SmallString&lt;<literal type="number">128</literal>&gt; Base</argument>,
<argument>llvm::StringRef Version</argument>,
<argument>llvm::StringRef ArchDir</argument>,
<argument>llvm::StringRef BitDir</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>GetHeaderSysroot</name><argument_list>(<argument>const llvm::opt::ArgList &amp;DriverArgs</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
