<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/tgmath.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CLANG_TGMATH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CLANG_TGMATH_H</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_HOSTED__</name> <operator>&amp;&amp;</operator> <call><name>__has_include_next</name><argument_list>(<argument><expr><operator>&lt;</operator><name><name>tgmath</name><operator>.</operator><name>h</name></name><operator>&gt;</operator></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:empty>#include_next &lt;tgmath.h&gt;</cpp:empty>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TG_ATTRSp</name></cpp:macro> <cpp:value>__attribute__((__overloadable__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TG_ATTRS</name></cpp:macro> <cpp:value>__attribute__((__overloadable__, __always_inline__))</cpp:value></cpp:define>



<typedef>typedef <type><name>void</name></type> <name>_Argument_type_is_not_arithmetic</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>_Argument_type_is_not_arithmetic</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
__attribute__<parameter_list>(<parameter/></parameter_list>(__unavailable__<operator>,</operator>__overloadable__</function_decl>))<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>double</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>long</name> <name>double</name> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>double</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier> <name>_TG_ATTRSp</name></type> <name>__tg_promote</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <parameter><decl><type><specifier>_Complex</specifier></type></decl></parameter></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__tg_promote1</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__typeof__(__tg_promote(__x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__tg_promote2</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__typeof__(__tg_promote(__x) + __tg_promote(__y)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__tg_promote3</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>, <parameter><type><name>__z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__typeof__(__tg_promote(__x) + __tg_promote(__y) + __tg_promote(__z)))</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_acos</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>acosf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_acos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>acos</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_acos</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>acosl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_acos</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cacosf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_acos</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cacos</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_acos</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cacosl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>acos</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>acos</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_acos(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_asin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>asinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_asin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>asin</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_asin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>asinl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_asin</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>casinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_asin</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>casin</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_asin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>casinl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>asin</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asin</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_asin(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atan</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atan</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atanl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_atan</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>catanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_atan</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>catan</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_atan</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>catanl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>atan</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atan</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_atan(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_acosh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>acoshf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_acosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>acosh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_acosh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>acoshl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_acosh</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cacoshf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_acosh</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cacosh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_acosh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cacoshl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>acosh</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>acosh</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_acosh(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_asinh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>asinhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_asinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>asinh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_asinh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>asinhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_asinh</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>casinhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_asinh</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>casinh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_asinh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>casinhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>asinh</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asinh</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_asinh(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atanh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atanhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atanh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atanh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atanhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_atanh</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>catanhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_atanh</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>catanh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_atanh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>catanhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>atanh</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atanh</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_atanh(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cos</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cosf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cos</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cos</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cosl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cos</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ccosf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cos</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ccos</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cos</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ccosl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cos</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cos</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_cos(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sin</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sinl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sin</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csinf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sin</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csin</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csinl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sin</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sin</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_sin(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tan</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tan</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tan</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tanl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_tan</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ctanf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_tan</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ctan</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_tan</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ctanl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tan</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tan</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_tan(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cosh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>coshf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cosh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cosh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>coshl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cosh</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ccoshf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cosh</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ccosh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cosh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ccoshl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cosh</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cosh</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_cosh(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sinh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sinhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sinh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sinh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sinhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sinh</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csinhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sinh</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csinh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sinh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csinhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sinh</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sinh</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_sinh(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tanh</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tanhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tanh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tanh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tanhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_tanh</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ctanhf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_tanh</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ctanh</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_tanh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ctanhl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tanh</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tanh</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_tanh(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_exp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>expf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_exp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>exp</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_exp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>expl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_exp</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cexpf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_exp</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cexp</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_exp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cexpl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>exp</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exp</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_exp(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>logf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>logl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_log</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>clogf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_log</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>clog</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_log</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>clogl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_log(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_pow</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>powf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_pow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>powl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_pow</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cpowf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_pow</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cpow</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_pow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__y</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>cpowl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pow</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pow</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_pow(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sqrt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sqrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_sqrt</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>sqrtl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sqrt</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csqrtf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sqrt</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csqrt</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_sqrt</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>csqrtl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sqrt</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqrt</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_sqrt(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fabs</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fabsf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fabs</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fabs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fabsl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fabs</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cabsf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fabs</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cabs</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fabs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cabsl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fabs</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fabs</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_fabs(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atan2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atan2f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atan2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atan2</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_atan2</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atan2l</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>atan2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>atan2</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_atan2(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cbrt</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cbrtf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cbrt</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cbrt</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cbrtl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cbrt</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cbrt</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_cbrt(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ceil</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ceilf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ceil</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ceil</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ceil</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ceill</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ceil</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ceil</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_ceil(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_copysign</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>copysignf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_copysign</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>copysign</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_copysign</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>copysignl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>copysign</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copysign</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_copysign(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_erf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>erff</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_erf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>erf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_erf</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>erfl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>erf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>erf</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_erf(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_erfc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>erfcf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_erfc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>erfc</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_erfc</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>erfcl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>erfc</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>erfc</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_erfc(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_exp2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>exp2f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_exp2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>exp2</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_exp2</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>exp2l</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>exp2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exp2</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_exp2(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_expm1</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>expm1f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_expm1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>expm1</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_expm1</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>expm1l</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>expm1</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>expm1</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_expm1(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fdim</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fdimf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fdim</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fdim</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fdim</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fdiml</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fdim</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdim</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_fdim(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_floor</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>floorf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_floor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>floor</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_floor</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>floorl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>floor</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>floor</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_floor(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__z</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>fmaf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>fma</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fma</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__z</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>fmal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fma</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fma</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>, <parameter><type><name>__z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_fma(__tg_promote3((__x), (__y), (__z))(__x), __tg_promote3((__x), (__y), (__z))(__y), __tg_promote3((__x), (__y), (__z))(__z))</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmax</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fmaxf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmax</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fmax</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmax</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fmaxl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fmax</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmax</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_fmax(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmin</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fminf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fmin</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmin</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fminl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fmin</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmin</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_fmin(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmod</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fmodf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmod</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fmod</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_fmod</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>fmodl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fmod</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmod</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_fmod(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_frexp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>frexpf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_frexp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>frexp</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_frexp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>frexpl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>frexp</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>frexp</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_frexp(__tg_promote1((__x))(__x), __y)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_hypot</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>hypotf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_hypot</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>hypot</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_hypot</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>hypotl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>hypot</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hypot</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_hypot(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ilogb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ilogbf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ilogb</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ilogb</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ilogb</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ilogbl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ilogb</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ilogb</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_ilogb(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ldexp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ldexpf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ldexp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ldexp</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_ldexp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>ldexpl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ldexp</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldexp</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_ldexp(__tg_promote1((__x))(__x), __y)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lgamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lgammaf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lgamma</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lgamma</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lgammal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lgamma</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lgamma</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_lgamma(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>long</name> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_llrint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>llrintf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_llrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>llrint</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_llrint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>llrintl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>llrint</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llrint</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_llrint(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>long</name> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_llround</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>llroundf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_llround</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>llround</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_llround</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>llroundl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>llround</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llround</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_llround(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log10</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log10f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log10</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log10</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log10</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log10l</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log10</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log10</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_log10(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log1p</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log1pf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log1p</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log1p</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log1p</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log1pl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log1p</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log1p</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_log1p(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log2f</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log2</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_log2</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>log2l</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>log2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>log2</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_log2(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_logb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>logbf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_logb</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>logb</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_logb</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>logbl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>logb</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logb</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_logb(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lrint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lrintf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lrint</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lrint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lrintl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lrint</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lrint</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_lrint(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lround</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lroundf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lround</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lround</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name>
<name>_TG_ATTRS</name></type>
<name>__tg_lround</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>lroundl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lround</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lround</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_lround(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nearbyint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nearbyintf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nearbyint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nearbyint</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nearbyint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nearbyintl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>nearbyint</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nearbyint</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_nearbyint(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nextafter</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nextafterf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nextafter</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nextafter</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nextafter</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nextafterl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>nextafter</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nextafter</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_nextafter(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nexttoward</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nexttowardf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nexttoward</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nexttoward</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_nexttoward</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>nexttowardl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>nexttoward</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nexttoward</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_nexttoward(__tg_promote1((__x))(__x), (__y))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_remainder</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>remainderf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_remainder</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>remainder</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_remainder</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>remainderl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>remainder</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>remainder</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_remainder(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y))</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_remquo</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__z</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>remquof</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_remquo</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__z</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>remquo</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_remquo</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>double</name></type> <name>__y</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>__z</name></decl></parameter>)</parameter_list>
<block>{<block_content><return>return <expr><call><name>remquol</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>, <argument><expr><name>__z</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>remquo</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>remquo</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>, <parameter><type><name>__z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_remquo(__tg_promote2((__x), (__y))(__x), __tg_promote2((__x), (__y))(__y), (__z))</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_rint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>rintf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_rint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>rint</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_rint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>rintl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rint</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rint</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_rint(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_round</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>roundf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_round</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>round</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_round</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>roundl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>round</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>round</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_round(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_scalbn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>scalbnf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_scalbn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>scalbn</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_scalbn</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>scalbnl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scalbn</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scalbn</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_scalbn(__tg_promote1((__x))(__x), __y)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_scalbln</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>scalblnf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_scalbln</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>scalbln</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_scalbln</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>__y</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>scalblnl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>, <argument><expr><name>__y</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scalbln</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scalbln</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>, <parameter><type><name>__y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_scalbln(__tg_promote1((__x))(__x), __y)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tgamma</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tgammaf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tgamma</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tgamma</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_tgamma</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>tgammal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tgamma</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tgamma</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_tgamma(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_trunc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>truncf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_trunc</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>trunc</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_trunc</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>truncl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>trunc</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trunc</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_trunc(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_carg</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atan2f</name><argument_list>(<argument><expr><literal type="number">0.F</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_carg</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atan2</name><argument_list>(<argument><expr><literal type="number">0.</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_carg</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>atan2l</name><argument_list>(<argument><expr><literal type="number">0.L</literal></expr></argument>, <argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_carg</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cargf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_carg</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>carg</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_carg</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cargl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>carg</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>carg</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_carg(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cimag</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cimag</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cimag</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cimag</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cimagf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cimag</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cimag</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_cimag</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cimagl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cimag</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cimag</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_cimag(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_conj</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><name>__x</name></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_conj</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><name>__x</name></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_conj</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><name>__x</name></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_conj</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>conjf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_conj</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>conj</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_conj</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>conjl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>conj</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>conj</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_conj(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cproj</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cprojf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cproj</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cproj</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cproj</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cprojl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cproj</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cprojf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cproj</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cproj</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name> <specifier>_Complex</specifier>
<name>_TG_ATTRS</name></type>
<name>__tg_cproj</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>cprojl</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>cproj</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cproj</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_cproj(__tg_promote1((__x))(__x))</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_creal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><name>__x</name></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_creal</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><name>__x</name></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_creal</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><name>__x</name></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name>
<name>_TG_ATTRS</name></type>
<name>__tg_creal</name><parameter_list>(<parameter><decl><type><name>float</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>crealf</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_creal</name><parameter_list>(<parameter><decl><type><name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>creal</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>double</name>
<name>_TG_ATTRS</name></type>
<name>__tg_creal</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name> <specifier>_Complex</specifier></type> <name>__x</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><call><name>creall</name><argument_list>(<argument><expr><name>__x</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>creal</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>creal</name><parameter_list>(<parameter><type><name>__x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__tg_creal(__tg_promote1((__x))(__x))</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_TG_ATTRSp</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_TG_ATTRS</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
