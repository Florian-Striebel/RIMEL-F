<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Format/Encoding.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_FORMAT_ENCODING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_FORMAT_ENCODING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ConvertUTF.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Unicode.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>format</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>encoding</name> <block>{<block_content>

<enum>enum <name>Encoding</name> <block>{
<decl><name>Encoding_UTF8</name></decl>,
<decl><name>Encoding_Unknown</name></decl>
}</block>;</enum>



<function><type><specifier>inline</specifier> <name>Encoding</name></type> <name>detectEncoding</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>UTF8</name> <operator>*</operator><name>Ptr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>UTF8</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Text</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>UTF8</name> <operator>*</operator><name>BufEnd</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>UTF8</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Text</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>llvm</name><operator>::</operator><call><name>isLegalUTF8String</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Ptr</name></expr></argument>, <argument><expr><name>BufEnd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Encoding_UTF8</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Encoding_Unknown</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>columnWidth</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>, <parameter><decl><type><name>Encoding</name></type> <name>Encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Encoding</name> <operator>==</operator> <name>Encoding_UTF8</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ContentWidth</name> <init>= <expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>unicode</name><operator>::</operator><call><name>columnWidthUTF8</name><argument_list>(<argument><expr><name>Text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>ContentWidth</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ContentWidth</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>Text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>columnWidthWithTabs</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>StartColumn</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>TabWidth</name></decl></parameter>, <parameter><decl><type><name>Encoding</name></type> <name>Encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>TotalWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Tail</name> <init>= <expr><name>Text</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>StringRef</name><operator>::</operator><name>size_type</name> <name>TabPos</name> <operator>=</operator> <call><name><name>Tail</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>TabPos</name> <operator>==</operator> <name>StringRef</name><operator>::</operator><name>npos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>TotalWidth</name> <operator>+</operator> <call><name>columnWidth</name><argument_list>(<argument><expr><name>Tail</name></expr></argument>, <argument><expr><name>Encoding</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>TotalWidth</name> <operator>+=</operator> <call><name>columnWidth</name><argument_list>(<argument><expr><call><name><name>Tail</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TabPos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>TabWidth</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>TotalWidth</name> <operator>+=</operator> <name>TabWidth</name> <operator>-</operator> <operator>(</operator><name>TotalWidth</name> <operator>+</operator> <name>StartColumn</name><operator>)</operator> <operator>%</operator> <name>TabWidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Tail</name> <operator>=</operator> <call><name><name>Tail</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>TabPos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>getCodePointNumBytes</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>FirstChar</name></decl></parameter>, <parameter><decl><type><name>Encoding</name></type> <name>Encoding</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>Encoding</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>Encoding_UTF8</name></expr>:</case>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>getNumBytesForUTF8</name><argument_list>(<argument><expr><name>FirstChar</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isOctDigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isHexDigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>inline</specifier> <name>unsigned</name></type> <name>getEscapeSequenceLength</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>Text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>Text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<return>return <expr><literal type="number">6</literal></expr>;</return>
<case>case <expr><literal type="char">'U'</literal></expr>:</case>
<return>return <expr><literal type="number">10</literal></expr>;</return>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>I</name> <operator>&lt;</operator> <call><name><name>Text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isHexDigit</name><argument_list>(<argument><expr><name><name>Text</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>I</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>I</name></expr>;</return>
</block_content>}</block>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>isOctDigit</name><argument_list>(<argument><expr><name><name>Text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>I</name> <operator>&lt;</operator> <call><name><name>Text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>I</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>isOctDigit</name><argument_list>(<argument><expr><name><name>Text</name><index>[<expr><name>I</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>I</name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>I</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>llvm</name><operator>::</operator><call><name>getNumBytesForUTF8</name><argument_list>(<argument><expr><name><name>Text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
