<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/InterpState.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_INTERPSTATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_INTERPSTATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"InterpStack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"State.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/APValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/OptionalDiagnostic.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InterpStack</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InterpFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceMapper</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name> <name>InterpState</name></type> <name>final</name> <range>: <expr><name>public</name> <name>State</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>SourceMapper</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>InterpState</name><argument_list>(<argument><expr><name>State</name> <operator>&amp;</operator><name>Parent</name></expr></argument>, <argument><expr><name>Program</name> <operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>InterpStack</name> <operator>&amp;</operator><name>Stk</name></expr></argument>, <argument><expr><name>Context</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>,
<argument><expr><name>SourceMapper</name> <operator>*</operator><name>M</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>InterpState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>Frame</name> <modifier>*</modifier></type><name>getSplitFrame</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Parent</name><operator>.</operator><name>getCurrentFrame</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>Frame</name> <operator>*</operator><macro><name>getCurrentFrame</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>
<function><type><name>unsigned</name></type> <name>getCallStackDepth</name><parameter_list>()</parameter_list> override <block>{<block_content> <return>return <expr><name>CallStackDepth</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Frame</name> <operator>*</operator><macro><name>getBottomFrame</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>Parent</name><operator>.</operator><name>getBottomFrame</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Expr</name><operator>::</operator><name>EvalStatus</name> <operator>&amp;</operator><macro><name>getEvalStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>Parent</name><operator>.</operator><name>getEvalStatus</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getCtx</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>Parent</name><operator>.</operator><name>getCtx</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>checkingForUndefinedBehavior</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>Parent</name><operator>.</operator><name>checkingForUndefinedBehavior</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>keepEvaluatingAfterFailure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>Parent</name><operator>.</operator><name>keepEvaluatingAfterFailure</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>checkingPotentialConstantExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>Parent</name><operator>.</operator><name>checkingPotentialConstantExpression</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>bool</name></type> <name>noteUndefinedBehavior</name><parameter_list>()</parameter_list> override <block>{<block_content>
<return>return <expr><call><name><name>Parent</name><operator>.</operator><name>noteUndefinedBehavior</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>hasActiveDiagnostic</name><parameter_list>()</parameter_list> override <block>{<block_content> <return>return <expr><call><name><name>Parent</name><operator>.</operator><name>hasActiveDiagnostic</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setActiveDiagnostic</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Flag</name></decl></parameter>)</parameter_list> override <block>{<block_content>
<expr_stmt><expr><call><name><name>Parent</name><operator>.</operator><name>setActiveDiagnostic</name></name><argument_list>(<argument><expr><name>Flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>setFoldFailureDiagnostic</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Flag</name></decl></parameter>)</parameter_list> override <block>{<block_content>
<expr_stmt><expr><call><name><name>Parent</name><operator>.</operator><name>setFoldFailureDiagnostic</name></name><argument_list>(<argument><expr><name>Flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>hasPriorDiagnostic</name><parameter_list>()</parameter_list> override <block>{<block_content> <return>return <expr><call><name><name>Parent</name><operator>.</operator><name>hasPriorDiagnostic</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<decl_stmt><decl><type><name>bool</name></type> <name>reportOverflow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>deallocate</name><parameter_list>(<parameter><decl><type><name>Block</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>SourceInfo</name></type> <name>getSource</name><argument_list>(<argument><expr><name>Function</name> <operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>CodePtr</name> <name>PC</name></expr></argument>)</argument_list> const <name>override</name> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>M</name></expr> ?</condition><then> <expr><call><name><name>M</name><operator>-&gt;</operator><name>getSource</name></name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>PC</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>F</name><operator>-&gt;</operator><name>getSource</name></name><argument_list>(<argument><expr><name>PC</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>State</name> <modifier>&amp;</modifier></type><name>Parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DeadBlock</name> <modifier>*</modifier></type><name>DeadBlocks</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceMapper</name> <modifier>*</modifier></type><name>M</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>Program</name> <modifier>&amp;</modifier></type><name>P</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InterpStack</name> <modifier>&amp;</modifier></type><name>Stk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Context</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>InterpFrame</name> <modifier>*</modifier></type><name>Current</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>CallStackDepth</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
