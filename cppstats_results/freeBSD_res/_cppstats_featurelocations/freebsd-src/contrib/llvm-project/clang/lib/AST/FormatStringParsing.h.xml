<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/FormatStringParsing.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_ANALYSIS_FORMATSTRINGPARSING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_ANALYSIS_FORMATSTRINGPARSING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/FormatString.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>UpdateOnReturn</name> <block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>ValueToUpdate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>ValueToCopy</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>UpdateOnReturn</name><argument_list>(<argument><expr><name>T</name> <operator>&amp;</operator><name>valueToUpdate</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>valueToCopy</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ValueToUpdate</name><argument_list>(<argument><expr><name>valueToUpdate</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>ValueToCopy</name><argument_list>(<argument>valueToCopy</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>UpdateOnReturn</name><argument_list>()</argument_list></macro> <block>{
<expr><name>ValueToUpdate</name> <operator>=</operator> <name>ValueToCopy</name></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>analyze_format_string</name> <block>{<block_content>

<function_decl><type><name>OptionalAmount</name></type> <name>ParseAmount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>OptionalAmount</name></type> <name>ParseNonPositionAmount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>argIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>OptionalAmount</name></type> <name>ParsePositionAmount</name><parameter_list>(<parameter><decl><type><name>FormatStringHandler</name> <modifier>&amp;</modifier></type><name>H</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Beg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>PositionContext</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ParseFieldWidth</name><parameter_list>(<parameter><decl><type><name>FormatStringHandler</name> <modifier>&amp;</modifier></type><name>H</name></decl></parameter>,
<parameter><decl><type><name>FormatSpecifier</name> <modifier>&amp;</modifier></type><name>CS</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>argIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ParseArgPosition</name><parameter_list>(<parameter><decl><type><name>FormatStringHandler</name> <modifier>&amp;</modifier></type><name>H</name></decl></parameter>,
<parameter><decl><type><name>FormatSpecifier</name> <modifier>&amp;</modifier></type><name>CS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>ParseVectorModifier</name><parameter_list>(<parameter><decl><type><name>FormatStringHandler</name> <modifier>&amp;</modifier></type><name>H</name></decl></parameter>,
<parameter><decl><type><name>FormatSpecifier</name> <modifier>&amp;</modifier></type><name>FS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LO</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>ParseLengthModifier</name><parameter_list>(<parameter><decl><type><name>FormatSpecifier</name> <modifier>&amp;</modifier></type><name>FS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Beg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LO</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsScanf</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>ParseUTF8InvalidSpecifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SpecifierBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FmtStrEnd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SpecifierResult</name> <block>{<block_content>
<decl_stmt><decl><type><name>T</name></type> <name>FS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Stop</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>SpecifierResult</name><argument_list>(<argument>bool stop = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Start</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Stop</name><argument_list>(<argument>stop</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>SpecifierResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>start</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>FS</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Start</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Stop</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Start</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>shouldStop</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Stop</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Start</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>FS</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>FS</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
