<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/AST/Interp/PrimType.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_INTERP_TYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_INTERP_TYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Boolean.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Integral.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Pointer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>interp</name> <block>{<block_content>


<enum>enum <name>PrimType</name> : <type><name>unsigned</name></type> <block>{
<decl><name>PT_Sint8</name></decl>,
<decl><name>PT_Uint8</name></decl>,
<decl><name>PT_Sint16</name></decl>,
<decl><name>PT_Uint16</name></decl>,
<decl><name>PT_Sint32</name></decl>,
<decl><name>PT_Uint32</name></decl>,
<decl><name>PT_Sint64</name></decl>,
<decl><name>PT_Uint64</name></decl>,
<decl><name>PT_Bool</name></decl>,
<decl><name>PT_Ptr</name></decl>,
}</block>;</enum>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>PrimType</name> <name>T</name><operator>&gt;</operator> struct <name>PrimConv</name></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Sint8</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Uint8</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Sint16</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Uint16</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Sint32</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Uint32</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Sint64</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Uint64</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name><name>Integral</name><argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>&gt;</argument_list></name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Bool</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name>Boolean</name></expr>; }</block></expr>;</expr_stmt>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PrimConv</name><argument_list type="generic">&lt;<argument><expr><name>PT_Ptr</name></expr></argument>&gt;</argument_list></name> <block>{ <expr><name>using</name> <name>T</name> <operator>=</operator> <name>Pointer</name></expr>; }</block></expr>;</expr_stmt>


<function_decl><type><name>size_t</name></type> <name>primSize</name><parameter_list>(<parameter><decl><type><name>PrimType</name></type> <name>Type</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>constexpr</name> <name>size_t</name></type> <name>align</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>Size</name> <operator>+</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <call><name>alignof</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isPrimitiveIntegral</name><parameter_list>(<parameter><decl><type><name>PrimType</name></type> <name>Type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>Type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PT_Bool</name></expr>:</case>
<case>case <expr><name>PT_Sint8</name></expr>:</case>
<case>case <expr><name>PT_Uint8</name></expr>:</case>
<case>case <expr><name>PT_Sint16</name></expr>:</case>
<case>case <expr><name>PT_Uint16</name></expr>:</case>
<case>case <expr><name>PT_Sint32</name></expr>:</case>
<case>case <expr><name>PT_Uint32</name></expr>:</case>
<case>case <expr><name>PT_Sint64</name></expr>:</case>
<case>case <expr><name>PT_Uint64</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SWITCH_CASE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case Name: { using T = PrimConv&lt;Name&gt;::T; do {B;} while(0); break; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SWITCH</name><parameter_list>(<parameter><type><name>Expr</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (Expr) { TYPE_SWITCH_CASE(PT_Sint8, B) TYPE_SWITCH_CASE(PT_Uint8, B) TYPE_SWITCH_CASE(PT_Sint16, B) TYPE_SWITCH_CASE(PT_Uint16, B) TYPE_SWITCH_CASE(PT_Sint32, B) TYPE_SWITCH_CASE(PT_Uint32, B) TYPE_SWITCH_CASE(PT_Sint64, B) TYPE_SWITCH_CASE(PT_Uint64, B) TYPE_SWITCH_CASE(PT_Bool, B) TYPE_SWITCH_CASE(PT_Ptr, B) }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPOSITE_TYPE_SWITCH</name><parameter_list>(<parameter><type><name>Expr</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (Expr) { TYPE_SWITCH_CASE(PT_Ptr, B) default: do { D; } while(0); break; }</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_TYPE_SWITCH</name><parameter_list>(<parameter><type><name>Expr</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (Expr) { TYPE_SWITCH_CASE(PT_Sint8, B) TYPE_SWITCH_CASE(PT_Uint8, B) TYPE_SWITCH_CASE(PT_Sint16, B) TYPE_SWITCH_CASE(PT_Uint16, B) TYPE_SWITCH_CASE(PT_Sint32, B) TYPE_SWITCH_CASE(PT_Uint32, B) TYPE_SWITCH_CASE(PT_Sint64, B) TYPE_SWITCH_CASE(PT_Uint64, B) default: llvm_unreachable("not an integer"); }</cpp:value></cpp:define>











<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
