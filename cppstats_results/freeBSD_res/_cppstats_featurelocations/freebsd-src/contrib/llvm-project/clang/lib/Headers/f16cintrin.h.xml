<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/Headers/f16cintrin.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>__IMMINTRIN_H</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Never use &lt;f16cintrin.h&gt; directly; include &lt;immintrin.h&gt; instead."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__F16CINTRIN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__F16CINTRIN_H</name></cpp:macro></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS128</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("f16c"), __min_vector_width__(128)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFAULT_FN_ATTRS256</name></cpp:macro> <cpp:value>__attribute__((__always_inline__, __nodebug__, __target__("f16c"), __min_vector_width__(256)))</cpp:value></cpp:define>

















<function><type><specifier>static</specifier> <name>__inline</name> <name>float</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_cvtsh_ss</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>__v8hi</name></type> <name>__v</name> <init>= <expr><block>{<expr><operator>(</operator><name>short</name><operator>)</operator><name>__a</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__v4sf</name></type> <name>__r</name> <init>= <expr><call><name>__builtin_ia32_vcvtph2ps</name><argument_list>(<argument><expr><name>__v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>__r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_cvtss_sh</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned short)(((__v8hi)__builtin_ia32_vcvtps2ph((__v4sf){a, 0, 0, 0}, (imm)))[0])</cpp:value></cpp:define>


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm_cvtps_ph</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vcvtps2ph((__v4sf)(__m128)(a), (imm))</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <name>__inline</name> <name>__m128</name> <name>__DEFAULT_FN_ATTRS128</name></type>
<name>_mm_cvtph_ps</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m128</name><operator>)</operator><call><name>__builtin_ia32_vcvtph2ps</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_mm256_cvtps_ph</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__m128i)__builtin_ia32_vcvtps2ph256((__v8sf)(__m256)(a), (imm))</cpp:value></cpp:define>














<function><type><specifier>static</specifier> <name>__inline</name> <name>__m256</name> <name>__DEFAULT_FN_ATTRS256</name></type>
<name>_mm256_cvtph_ps</name><parameter_list>(<parameter><decl><type><name>__m128i</name></type> <name>__a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>__m256</name><operator>)</operator><call><name>__builtin_ia32_vcvtph2ps256</name><argument_list>(<argument><expr><operator>(</operator><name>__v8hi</name><operator>)</operator><name>__a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS128</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__DEFAULT_FN_ATTRS256</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
