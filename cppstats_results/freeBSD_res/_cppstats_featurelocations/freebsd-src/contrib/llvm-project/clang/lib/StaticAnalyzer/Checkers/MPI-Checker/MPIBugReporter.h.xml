<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/lib/StaticAnalyzer/Checkers/MPI-Checker/MPIBugReporter.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPIBUGREPORTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPIBUGREPORTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MPITypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugType.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mpi</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MPIBugReporter</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MPIBugReporter</name><argument_list>(<argument>const CheckerBase &amp;CB</argument>)</argument_list></macro> <block>{<block_content>
<macro><name>UnmatchedWaitBugType</name></macro><expr_stmt><expr><operator>.</operator><macro><name>reset</name><argument_list>(<argument>new BugType(&amp;CB, <literal type="string">"Unmatched wait"</literal>, MPIError)</argument>)</argument_list></macro></expr>;</expr_stmt>
<macro><name>DoubleNonblockingBugType</name></macro><expr_stmt><expr><operator>.</operator><macro><name>reset</name><argument_list>(
<argument>new BugType(&amp;CB, <literal type="string">"Double nonblocking"</literal>, MPIError)</argument>)</argument_list></macro></expr>;</expr_stmt>
<macro><name>MissingWaitBugType</name></macro><expr_stmt><expr><operator>.</operator><macro><name>reset</name><argument_list>(<argument>new BugType(&amp;CB, <literal type="string">"Missing wait"</literal>, MPIError)</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block>









<decl_stmt><decl><type><name>void</name></type> <name>reportDoubleNonblocking</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallEvent</name> <operator>&amp;</operator><name>MPICallEvent</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Request</name> <operator>&amp;</operator><name>Req</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><specifier>const</specifier> <name>RequestRegion</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><specifier>const</specifier> <name>ExplNode</name></expr></argument>,
<argument><expr><name>BugReporter</name> <operator>&amp;</operator><name>BReporter</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>reportMissingWait</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Request</name> <operator>&amp;</operator><name>Req</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><specifier>const</specifier> <name>RequestRegion</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><specifier>const</specifier> <name>ExplNode</name></expr></argument>,
<argument><expr><name>BugReporter</name> <operator>&amp;</operator><name>BReporter</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>reportUnmatchedWait</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallEvent</name> <operator>&amp;</operator><name>CE</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><specifier>const</specifier> <name>RequestRegion</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><specifier>const</specifier> <name>ExplNode</name></expr></argument>,
<argument><expr><name>BugReporter</name> <operator>&amp;</operator><name>BReporter</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>MPIError</name> <operator>=</operator> <literal type="string">"MPI Error"</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugType</name></expr></argument>&gt;</argument_list></name> <name>UnmatchedWaitBugType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugType</name></expr></argument>&gt;</argument_list></name> <name>MissingWaitBugType</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BugType</name></expr></argument>&gt;</argument_list></name> <name>DoubleNonblockingBugType</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>RequestNodeVisitor</name> <range>: <expr><name>public</name> <name>BugReporterVisitor</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RequestNodeVisitor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><specifier>const</specifier> <name>MemoryRegion</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>ErrText</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>RequestRegion</name><argument_list>(<argument><expr><name>MemoryRegion</name></expr></argument>)</argument_list></call></expr>, <macro><name>ErrorText</name><argument_list>(<argument>ErrText</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<expr><specifier>static</specifier> <name>int</name> <name>X</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>RequestRegion</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>PathDiagnosticPieceRef</name> <macro><name>VisitNode</name><argument_list>(<argument>const ExplodedNode *N</argument>,
<argument>BugReporterContext &amp;BRC</argument>,
<argument>PathSensitiveBugReport &amp;BR</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><specifier>const</specifier> <name>RequestRegion</name></expr>;
<expr><name>bool</name> <name>IsNodeFound</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>ErrorText</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
