<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_PARTIALDIAGNOSTIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_PARTIALDIAGNOSTIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PartialDiagnostic</name> <range>: <expr><name>public</name> <name>StreamingDiagnostic</name> <block>{
<expr><name>private</name><operator>:</operator>





<name>mutable</name> <name>unsigned</name> <name>DiagID</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>public</name><operator>:</operator>
struct <name>NullDiagnostic</name> <block>{}</block></expr>;



<macro><name>PartialDiagnostic</name><argument_list>(<argument>NullDiagnostic</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>PartialDiagnostic</name><argument_list>(<argument>unsigned DiagID</argument>, <argument>DiagStorageAllocator &amp;Allocator_</argument>)</argument_list></macro>
<operator>:</operator> <call><name>StreamingDiagnostic</name><argument_list>(<argument><expr><name>Allocator_</name></expr></argument>)</argument_list></call></expr>, <macro><name>DiagID</name><argument_list>(<argument>DiagID</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>PartialDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>StreamingDiagnostic</name><argument_list>()</argument_list></call></expr>, <macro><name>DiagID</name><argument_list>(<argument>Other.DiagID</argument>)</argument_list></macro> <expr><block>{
<expr><name>Allocator</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>Allocator</name></name></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>DiagStorage</name> <operator>=</operator> <operator>*</operator><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

template &lt;typename T&gt; const PartialDiagnostic &amp;operator&lt;&lt;(const T &amp;V</block></if></if_stmt>) <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name>DB</name> <operator>&lt;&lt;</operator> <name>V</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></block>




<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <operator>=</operator> <name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;
<argument><expr><operator>!</operator><name>std</name><operator>::</operator><name><name>is_lvalue_reference</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>T</name> <operator>&amp;&amp;</operator><name>V</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name>DB</name> <operator>&lt;&lt;</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<call><name>PartialDiagnostic</name><argument_list>(<argument><expr><name>PartialDiagnostic</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>DiagID</name><argument_list>(<argument>Other.DiagID</argument>)</argument_list></macro> <block>{
<expr><name>Allocator</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>Allocator</name></name></expr>;
<expr><name>DiagStorage</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>;
<expr><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>

<call><name>PartialDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><name>Other</name></expr></argument>,
<argument><expr><name>DiagnosticStorage</name> <operator>*</operator><name>DiagStorage_</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DiagID</name><argument_list>(<argument>Other.DiagID</argument>)</argument_list></macro> <block>{
<expr><name>Allocator</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>DiagStorageAllocator</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>~</operator><call><name>uintptr_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>DiagStorage</name> <operator>=</operator> <name>DiagStorage_</name></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name><name>this</name><operator>-&gt;</operator><name>DiagStorage</name></name> <operator>=</operator> <operator>*</operator><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<call><name>PartialDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Diagnostic</name> <operator>&amp;</operator><name>Other</name></expr></argument>, <argument><expr><name>DiagStorageAllocator</name> <operator>&amp;</operator><name>Allocator_</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DiagID</name><argument_list>(<argument>Other.getID()</argument>)</argument_list></macro> <block>{
<expr><name>Allocator</name> <operator>=</operator> <operator>&amp;</operator><name>Allocator_</name></expr>;

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><call><name><name>Other</name><operator>.</operator><name>getNumArgs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Other</name><operator>.</operator><name>getArgKind</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_std_string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AddString</name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>getArgStdStr</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AddTaggedVal</name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>getRawArg</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Other</name><operator>.</operator><name>getArgKind</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt/>}</block_content>


for (unsigned I = 0</block><operator>,</operator> <expr_stmt><expr><name>N</name> <operator>=</operator> <call><name><name>Other</name><operator>.</operator><name>getNumRanges</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></for> <name>I</name> <operator>!=</operator> <name>N</name></block></expr>; <expr><operator>++</operator><name>I</name></expr>)
<call><name>AddSourceRange</name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>getRange</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr></range></decl>;</decl_stmt>


<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><call><name><name>Other</name><operator>.</operator><name>getNumFixItHints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>AddFixItHint</name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>getFixItHint</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>PartialDiagnostic</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>DiagID</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>DiagID</name></name></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>DiagStorage</name> <operator>=</operator> <call><name>getStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>DiagStorage</name> <operator>=</operator> <operator>*</operator><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><call><name>freeStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

return *this</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></init></decl></decl_stmt>

<decl_stmt><decl><type><name>PartialDiagnostic</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>PartialDiagnostic</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><call><name>freeStorage</name><argument_list>()</argument_list></call></expr>;

<expr><name>DiagID</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>DiagID</name></name></expr>;
<expr><name>DiagStorage</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>DiagStorage</name></name></expr>;
<expr><name>Allocator</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>Allocator</name></name></expr>;

<expr><name><name>Other</name><operator>.</operator><name>DiagStorage</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>

<function><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>PartialDiagnostic</name> <modifier>&amp;</modifier></type><name>PD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>, <argument><expr><name><name>PD</name><operator>.</operator><name>DiagID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>DiagStorage</name></expr></argument>, <argument><expr><name><name>PD</name><operator>.</operator><name>DiagStorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>Allocator</name></expr></argument>, <argument><expr><name><name>PD</name><operator>.</operator><name>Allocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getDiagID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DiagID</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setDiagID</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>DiagID</name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>Emit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>DB</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DiagStorage</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>e</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>DiagnosticsEngine</name><operator>::</operator><name>ArgumentKind</name><operator>)</operator><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsKind</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_std_string</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>DB</name><operator>.</operator><name>AddString</name></name><argument_list>(<argument><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsStr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>DiagnosticsEngine</name><operator>::</operator><name>ArgumentKind</name><operator>)</operator><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsKind</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name>CharSourceRange</name> <modifier>&amp;</modifier></type><name>Range</name> <range>: <expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagRanges</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>DB</name><operator>.</operator><name>AddSourceRange</name></name><argument_list>(<argument><expr><name>Range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><decl><type><specifier>const</specifier> <name>FixItHint</name> <modifier>&amp;</modifier></type><name>Fix</name> <range>: <expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>FixItHints</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>DB</name><operator>.</operator><name>AddFixItHint</name></name><argument_list>(<argument><expr><name>Fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>EmitToString</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Buf</name></expr></argument>)</argument_list> const <block>{<block_content>


<decl_stmt><decl><type><name>DiagnosticBuilder</name></type> <name>DB</name><argument_list>(<argument><expr><call><name><name>Diags</name><operator>.</operator><name>Report</name></name><argument_list>(<argument><expr><call><name>getDiagID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Emit</name><argument_list>(<argument><expr><name>DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Diagnostic</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FormatDiagnostic</name><argument_list>(<argument><expr><name>Buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>DB</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Diags</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>DiagID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>DiagID</name></name> <operator>=</operator> <name>DiagID</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freeStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasStorage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DiagStorage</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>StringRef</name></type> <name>getStringArg</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DiagStorage</name> <operator>&amp;&amp;</operator> <literal type="string">"No diagnostic storage?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <name><name>DiagStorage</name><operator>-&gt;</operator><name>NumDiagArgs</name></name> <operator>&amp;&amp;</operator> <literal type="string">"Not enough diagnostic args"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsKind</name><index>[<expr><name>I</name></expr>]</index></name>
<operator>==</operator> <name>DiagnosticsEngine</name><operator>::</operator><name>ak_std_string</name> <operator>&amp;&amp;</operator> <literal type="string">"Not a string arg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>DiagStorage</name><operator>-&gt;</operator><name>DiagArgumentsStr</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
};

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>DiagnosticBuilder</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><name>PD</name><operator>)</operator> <block>{
<expr><call><name><name>PD</name><operator>.</operator><name>Emit</name></name><argument_list>(<argument><expr><name>DB</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>PartialDiagnosticAt</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>PartialDiagnostic</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
