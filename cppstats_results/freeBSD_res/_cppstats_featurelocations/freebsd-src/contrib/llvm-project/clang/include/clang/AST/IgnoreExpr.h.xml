<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/IgnoreExpr.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_IGNOREEXPR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_IGNOREEXPR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>


<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreExprNodesImpl</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>E</name></expr>;</return> </block_content>}</block></function>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FnTy</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>FnTys</name></expr></argument>&gt;</argument_list></name>
<name>Expr</name> <modifier>*</modifier></type><name>IgnoreExprNodesImpl</name><argument_list>(<argument><expr><name>Expr</name> <operator>*</operator><name>E</name></expr></argument>, <argument><expr><name>FnTy</name> <operator>&amp;&amp;</operator><name>Fn</name></expr></argument>, <argument><expr><name>FnTys</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Fns</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>IgnoreExprNodesImpl</name><argument_list>(<argument><expr><call><name>Fn</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>FnTys</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Fns</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>FnTys</name></expr></argument>&gt;</argument_list></name> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreExprNodes</name><argument_list>(<argument><expr><name>Expr</name> <operator>*</operator><name>E</name></expr></argument>, <argument><expr><name>FnTys</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Fns</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>LastE</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>E</name> <operator>!=</operator> <name>LastE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LastE</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>
<expr_stmt><expr><name>E</name> <operator>=</operator> <name>detail</name><operator>::</operator><call><name>IgnoreExprNodesImpl</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>FnTys</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Fns</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>FnTys</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreExprNodes</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>, <argument><expr><name>FnTys</name> <operator>&amp;&amp;</operator><operator>...</operator><name>Fns</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>IgnoreExprNodes</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>FnTys</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Fns</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreImplicitCastsSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>ICE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ImplicitCastExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>ICE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>FE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FullExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>FE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreImplicitCastsExtraSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>



<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>SubE</name> <init>= <expr><call><name>IgnoreImplicitCastsSingleStep</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>SubE</name> <operator>!=</operator> <name>E</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SubE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>MTE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>MaterializeTemporaryExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>MTE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>NTTP</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SubstNonTypeTemplateParmExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>NTTP</name><operator>-&gt;</operator><name>getReplacement</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreCastsSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>CE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CastExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>CE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>FE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FullExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>FE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>MTE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>MaterializeTemporaryExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>MTE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>NTTP</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>SubstNonTypeTemplateParmExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>NTTP</name><operator>-&gt;</operator><name>getReplacement</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreLValueCastsSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>CE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CastExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>CE</name><operator>-&gt;</operator><name>getCastKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CK_LValueToRValue</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>E</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>IgnoreCastsSingleStep</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreBaseCastsSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>CE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CastExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>CE</name><operator>-&gt;</operator><name>getCastKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_DerivedToBase</name> <operator>||</operator>
<call><name><name>CE</name><operator>-&gt;</operator><name>getCastKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_UncheckedDerivedToBase</name> <operator>||</operator>
<call><name><name>CE</name><operator>-&gt;</operator><name>getCastKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CK_NoOp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>CE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreImplicitSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>SubE</name> <init>= <expr><call><name>IgnoreImplicitCastsSingleStep</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>SubE</name> <operator>!=</operator> <name>E</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>SubE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>MTE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>MaterializeTemporaryExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>MTE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>BTE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXBindTemporaryExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>BTE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreElidableImplicitConstructorSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>CCE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>CCE</name> <operator>&amp;&amp;</operator> <call><name><name>CCE</name><operator>-&gt;</operator><name>isElidable</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXTemporaryObjectExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CCE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumArgs</name> <init>= <expr><call><name><name>CCE</name><operator>-&gt;</operator><name>getNumArgs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>NumArgs</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>NumArgs</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>CCE</name><operator>-&gt;</operator><name>getArg</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>isDefaultArgument</name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>CCE</name><operator>-&gt;</operator><name>getArg</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>isDefaultArgument</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>CCE</name><operator>-&gt;</operator><name>isListInitialization</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>CCE</name><operator>-&gt;</operator><name>getArg</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreImplicitAsWrittenSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>ICE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ImplicitCastExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>ICE</name><operator>-&gt;</operator><name>getSubExprAsWritten</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>IgnoreImplicitSingleStep</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreParensOnlySingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>PE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ParenExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>PE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Expr</name> <modifier>*</modifier></type><name>IgnoreParensSingleStep</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>PE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ParenExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>PE</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>UO</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>UnaryOperator</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>UO</name><operator>-&gt;</operator><name>getOpcode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>UO_Extension</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>UO</name><operator>-&gt;</operator><name>getSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>auto</name> <operator>*</operator><name>GSE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>GenericSelectionExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>GSE</name><operator>-&gt;</operator><name>isResultDependent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>GSE</name><operator>-&gt;</operator><name>getResultExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>auto</name> <operator>*</operator><name>CE</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>ChooseExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>CE</name><operator>-&gt;</operator><name>isConditionDependent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>CE</name><operator>-&gt;</operator><name>getChosenSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>E</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
