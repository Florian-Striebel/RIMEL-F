<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTStructuralEquivalence.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTSTRUCTURALEQUIVALENCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTSTRUCTURALEQUIVALENCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>StructuralEquivalenceKind</name> <block>{<block_content>
<expr_stmt><expr><name>Default</name></expr><operator>,</operator>
<expr><name>Minimal</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>StructuralEquivalenceContext</name> <block>{

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>FromCtx</name></decl>, <decl><type ref="prev"><modifier>&amp;</modifier></type><name>ToCtx</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>DeclsToCheck</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>VisitedDecls</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>NonEquivalentDecls</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>StructuralEquivalenceKind</name></type> <name>EqKind</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>StrictTypeSpelling</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>ErrorOnTagTypeMismatch</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Complain</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>LastDiagFromC2</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>StructuralEquivalenceContext</name><argument_list>(
<argument>ASTContext &amp;FromCtx</argument>, <argument>ASTContext &amp;ToCtx</argument>,
<argument>llvm::DenseSet&lt;std::pair&lt;Decl *</argument>, <argument>Decl *&gt;&gt; &amp;NonEquivalentDecls</argument>,
<argument>StructuralEquivalenceKind EqKind</argument>,
<argument>bool StrictTypeSpelling = false</argument>, <argument>bool Complain = true</argument>,
<argument>bool ErrorOnTagTypeMismatch = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>FromCtx</name><argument_list>(<argument><expr><name>FromCtx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ToCtx</name><argument_list>(<argument><expr><name>ToCtx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NonEquivalentDecls</name><argument_list>(<argument><expr><name>NonEquivalentDecls</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>EqKind</name><argument_list>(<argument><expr><name>EqKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>StrictTypeSpelling</name><argument_list>(<argument><expr><name>StrictTypeSpelling</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ErrorOnTagTypeMismatch</name><argument_list>(<argument><expr><name>ErrorOnTagTypeMismatch</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Complain</name><argument_list>(<argument>Complain</argument>)</argument_list></macro> <expr><block>{}</block>

<name>DiagnosticBuilder</name> <macro><name>Diag1</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>unsigned DiagID</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>DiagnosticBuilder</name></type> <name>Diag2</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>bool</name></type> <name>IsEquivalent</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D1</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D2</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>IsEquivalent</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T1</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>T2</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>IsEquivalent</name><parameter_list>(<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S1</name></decl></parameter>, <parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S2</name></decl></parameter>)</parameter_list>;</function_decl>











<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name>
<call><name>findUntaggedStructOrUnionIndex</name><argument_list>(<argument><expr><name>RecordDecl</name> <operator>*</operator><name>Anon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>unsigned</name></type> <name>getApplicableDiagnostic</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ErrorDiagnostic</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>




<function_decl><type><name>bool</name></type> <name>Finish</name><parameter_list>()</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>CheckCommonEquivalence</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D1</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D2</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>CheckKindSpecificEquivalence</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D1</name></decl></parameter>, <parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D2</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
