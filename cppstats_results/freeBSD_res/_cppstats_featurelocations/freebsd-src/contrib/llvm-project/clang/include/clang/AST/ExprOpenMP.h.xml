<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ExprOpenMP.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_EXPROPENMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_EXPROPENMP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ComputeDependence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




































<decl_stmt><decl><type><name>class</name></type> <name>OMPArraySectionExpr</name> <range>: <expr><name>public</name> <name>Expr</name> <block>{
enum <expr><block>{ <expr><name>BASE</name></expr>, <expr><name>LOWER_BOUND</name></expr>, <expr><name>LENGTH</name></expr>, <expr><name>STRIDE</name></expr>, <expr><name>END_EXPR</name></expr> }</block></expr>;
<expr><name>Stmt</name> <operator>*</operator><name><name>SubExprs</name><index>[<expr><name>END_EXPR</name></expr>]</index></name></expr>;
<expr><name>SourceLocation</name> <name>ColonLocFirst</name></expr>;
<expr><name>SourceLocation</name> <name>ColonLocSecond</name></expr>;
<expr><name>SourceLocation</name> <name>RBracketLoc</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>OMPArraySectionExpr</name><argument_list>(<argument>Expr *Base</argument>, <argument>Expr *LowerBound</argument>, <argument>Expr *Length</argument>, <argument>Expr *Stride</argument>,
<argument>QualType Type</argument>, <argument>ExprValueKind VK</argument>, <argument>ExprObjectKind OK</argument>,
<argument>SourceLocation ColonLocFirst</argument>,
<argument>SourceLocation ColonLocSecond</argument>, <argument>SourceLocation RBracketLoc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Expr</name><argument_list>(<argument><expr><name>OMPArraySectionExprClass</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name>VK</name></expr></argument>, <argument><expr><name>OK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ColonLocFirst</name><argument_list>(<argument><expr><name>ColonLocFirst</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ColonLocSecond</name><argument_list>(<argument><expr><name>ColonLocSecond</name></expr></argument>)</argument_list></call></expr>,
<macro><name>RBracketLoc</name><argument_list>(<argument>RBracketLoc</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>SubExprs</name><index>[<expr><name>BASE</name></expr>]</index></name> <operator>=</operator> <name>Base</name></expr>;
<expr><name><name>SubExprs</name><index>[<expr><name>LOWER_BOUND</name></expr>]</index></name> <operator>=</operator> <name>LowerBound</name></expr>;
<expr><name><name>SubExprs</name><index>[<expr><name>LENGTH</name></expr>]</index></name> <operator>=</operator> <name>Length</name></expr>;
<expr><name><name>SubExprs</name><index>[<expr><name>STRIDE</name></expr>]</index></name> <operator>=</operator> <name>Stride</name></expr>;
<expr><call><name>setDependence</name><argument_list>(<argument><expr><call><name>computeDependence</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>


<name>explicit</name> <macro><name>OMPArraySectionExpr</name><argument_list>(<argument>EmptyShell Shell</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Expr</name><argument_list>(<argument>OMPArraySectionExprClass</argument>, <argument>Shell</argument>)</argument_list></macro> <block>{}</block>




<name>Expr</name> <operator>*</operator><macro><name>getBase</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>BASE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>BASE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>setBase</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>BASE</name></expr>]</index></name> <operator>=</operator> <name>E</name></expr>; }</block>


<specifier>static</specifier> <name>QualType</name> <call><name>getBaseOriginalType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>Base</name></expr></argument>)</argument_list></call></expr>;


<expr><name>Expr</name> <operator>*</operator><macro><name>getLowerBound</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>LOWER_BOUND</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getLowerBound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>LOWER_BOUND</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>setLowerBound</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>LOWER_BOUND</name></expr>]</index></name> <operator>=</operator> <name>E</name></expr>; }</block>


<name>Expr</name> <operator>*</operator><macro><name>getLength</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>LENGTH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>LENGTH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>setLength</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>LENGTH</name></expr>]</index></name> <operator>=</operator> <name>E</name></expr>; }</block>


<name>Expr</name> <operator>*</operator><macro><name>getStride</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>STRIDE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getStride</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>STRIDE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>setStride</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>STRIDE</name></expr>]</index></name> <operator>=</operator> <name>E</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name>getBase</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getBeginLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>RBracketLoc</name></expr>;</return> }</block>

<name>SourceLocation</name> <macro><name>getColonLocFirst</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ColonLocFirst</name></expr>;</return> }</block>
<name>void</name> <macro><name>setColonLocFirst</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>ColonLocFirst</name> <operator>=</operator> <name>L</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getColonLocSecond</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ColonLocSecond</name></expr>;</return> }</block>
<name>void</name> <macro><name>setColonLocSecond</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>ColonLocSecond</name> <operator>=</operator> <name>L</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getRBracketLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RBracketLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setRBracketLoc</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>RBracketLoc</name> <operator>=</operator> <name>L</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getExprLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name>getBase</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getExprLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OMPArraySectionExprClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>BASE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>END_EXPR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>BASE</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>END_EXPR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>OMPArrayShapingExpr</name> <name>final</name>
<operator>:</operator> <name>public</name> <name>Expr</name></expr>,
<expr><name>private</name> <name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>OMPArrayShapingExpr</name></expr></argument>, <argument><expr><name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>TrailingObjects</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTStmtWriter</name></expr>;

<expr><name>SourceLocation</name> <name>LPLoc</name></expr>;
<expr><name>SourceLocation</name> <name>RPLoc</name></expr>;
<expr><name>unsigned</name> <name>NumDims</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<macro><name>OMPArrayShapingExpr</name><argument_list>(<argument>QualType ExprTy</argument>, <argument>Expr *Op</argument>, <argument>SourceLocation L</argument>,
<argument>SourceLocation R</argument>, <argument>ArrayRef&lt;Expr *&gt; Dims</argument>)</argument_list></macro>;


<expr><name>explicit</name> <macro><name>OMPArrayShapingExpr</name><argument_list>(<argument>EmptyShell Shell</argument>, <argument>unsigned NumDims</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Expr</name><argument_list>(<argument><expr><name>OMPArrayShapingExprClass</name></expr></argument>, <argument><expr><name>Shell</name></expr></argument>)</argument_list></call></expr>, <macro><name>NumDims</name><argument_list>(<argument>NumDims</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <call><name>setDimensions</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Dims</name></expr></argument>)</argument_list></call></expr>;


<expr><name>void</name> <macro><name>setBase</name><argument_list>(<argument>Expr *Op</argument>)</argument_list></macro> <block>{ <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><name>NumDims</name></expr>]</index> <operator>=</operator> <name>Op</name></expr>; }</block>


<name>void</name> <call><name>setBracketsRanges</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <name>BR</name></expr></argument>)</argument_list></call></expr>;

<expr><name>unsigned</name> <macro><name>numTrailingObjects</name><argument_list>(<argument>OverloadToken&lt;Expr *&gt;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><name>NumDims</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
}</block>

<name>unsigned</name> <macro><name>numTrailingObjects</name><argument_list>(<argument>OverloadToken&lt;SourceRange&gt;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumDims</name></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>OMPArrayShapingExpr</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>const ASTContext &amp;Context</argument>, <argument>QualType T</argument>,
<argument>Expr *Op</argument>, <argument>SourceLocation L</argument>,
<argument>SourceLocation R</argument>, <argument>ArrayRef&lt;Expr *&gt; Dims</argument>,
<argument>ArrayRef&lt;SourceRange&gt; BracketRanges</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>OMPArrayShapingExpr</name> <operator>*</operator><macro><name>CreateEmpty</name><argument_list>(<argument>const ASTContext &amp;Context</argument>,
<argument>unsigned NumDims</argument>)</argument_list></macro></expr>;

<expr><name>SourceLocation</name> <macro><name>getLParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LPLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setLParenLoc</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>LPLoc</name> <operator>=</operator> <name>L</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getRParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RPLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setRParenLoc</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>RPLoc</name> <operator>=</operator> <name>L</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>LPLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name>getBase</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getDimensions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NumDims</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name> <macro><name>getBracketsRanges</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>SourceRange</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NumDims</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>Expr</name> <operator>*</operator><macro><name>getBase</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><name>NumDims</name></expr>]</index></expr>;</return> }</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><index>[<expr><name>NumDims</name></expr>]</index></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OMPArrayShapingExprClass</name></expr>;</return>
}</block>


<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<expr><name>Stmt</name> <operator>*</operator><operator>*</operator><name>Begin</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>Begin</name> <operator>+</operator> <name>NumDims</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>Stmt</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><name>Begin</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>Begin</name> <operator>+</operator> <name>NumDims</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;



struct <expr><name>OMPIteratorHelperData</name> <block>{

<expr><name>VarDecl</name> <operator>*</operator><name>CounterVD</name> <operator>=</operator> <name>nullptr</name></expr>;


<expr><name>Expr</name> <operator>*</operator><name>Upper</name> <operator>=</operator> <name>nullptr</name></expr>;


<expr><name>Expr</name> <operator>*</operator><name>Update</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>Expr</name> <operator>*</operator><name>CounterUpdate</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr>;

























<expr><name>class</name> <name>OMPIteratorExpr</name> <name>final</name>
<operator>:</operator> <name>public</name> <name>Expr</name></expr>,
<expr><name>private</name> <name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>OMPIteratorExpr</name></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Expr</name> <operator>*</operator></expr></argument>,
<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>OMPIteratorHelperData</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>

struct <name>IteratorRange</name> <block>{
<expr><name>Expr</name> <operator>*</operator><name>Begin</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Expr</name> <operator>*</operator><name>End</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Expr</name> <operator>*</operator><name>Step</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr>;

struct <expr><name>IteratorDefinition</name> <block>{
<expr><name>Decl</name> <operator>*</operator><name>IteratorDecl</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>IteratorRange</name> <name>Range</name></expr>;
<expr><name>SourceLocation</name> <name>AssignmentLoc</name></expr>;
<expr><name>SourceLocation</name> <name>ColonLoc</name></expr>, <expr><name>SecondColonLoc</name></expr>;
}</block></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>TrailingObjects</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTStmtWriter</name></expr>;


enum <expr><name>class</name> <name>RangeExprOffset</name> <block>{
<expr><name>Begin</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>End</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><name>Step</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><name>Total</name> <operator>=</operator> <literal type="number">3</literal></expr>,
}</block></expr>;


enum <expr><name>class</name> <name>RangeLocOffset</name> <block>{
<expr><name>AssignLoc</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>FirstColonLoc</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><name>SecondColonLoc</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><name>Total</name> <operator>=</operator> <literal type="number">3</literal></expr>,
}</block></expr>;

<expr><name>SourceLocation</name> <name>IteratorKwLoc</name></expr>;

<expr><name>SourceLocation</name> <name>LPLoc</name></expr>;

<expr><name>SourceLocation</name> <name>RPLoc</name></expr>;

<expr><name>unsigned</name> <name>NumIterators</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<macro><name>OMPIteratorExpr</name><argument_list>(<argument>QualType ExprTy</argument>, <argument>SourceLocation IteratorKwLoc</argument>,
<argument>SourceLocation L</argument>, <argument>SourceLocation R</argument>,
<argument>ArrayRef&lt;IteratorDefinition&gt; Data</argument>,
<argument>ArrayRef&lt;OMPIteratorHelperData&gt; Helpers</argument>)</argument_list></macro>;


<expr><name>explicit</name> <macro><name>OMPIteratorExpr</name><argument_list>(<argument>EmptyShell Shell</argument>, <argument>unsigned NumIterators</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Expr</name><argument_list>(<argument><expr><name>OMPIteratorExprClass</name></expr></argument>, <argument><expr><name>Shell</name></expr></argument>)</argument_list></call></expr>, <macro><name>NumIterators</name><argument_list>(<argument>NumIterators</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <macro><name>setIteratorDeclaration</name><argument_list>(<argument>unsigned I</argument>, <argument>Decl *D</argument>)</argument_list></macro></expr>;



<expr><name>void</name> <macro><name>setAssignmentLoc</name><argument_list>(<argument>unsigned I</argument>, <argument>SourceLocation Loc</argument>)</argument_list></macro></expr>;



<expr><name>void</name> <macro><name>setIteratorRange</name><argument_list>(<argument>unsigned I</argument>, <argument>Expr *Begin</argument>, <argument>SourceLocation ColonLoc</argument>,
<argument>Expr *End</argument>, <argument>SourceLocation SecondColonLoc</argument>, <argument>Expr *Step</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>setHelper</name><argument_list>(<argument>unsigned I</argument>, <argument>const OMPIteratorHelperData &amp;D</argument>)</argument_list></macro></expr>;

<expr><name>unsigned</name> <macro><name>numTrailingObjects</name><argument_list>(<argument>OverloadToken&lt;Decl *&gt;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumIterators</name></expr>;</return>
}</block>

<name>unsigned</name> <macro><name>numTrailingObjects</name><argument_list>(<argument>OverloadToken&lt;Expr *&gt;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumIterators</name> <operator>*</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RangeExprOffset</name><operator>::</operator><name>Total</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>unsigned</name> <macro><name>numTrailingObjects</name><argument_list>(<argument>OverloadToken&lt;SourceLocation&gt;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumIterators</name> <operator>*</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RangeLocOffset</name><operator>::</operator><name>Total</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>OMPIteratorExpr</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>const ASTContext &amp;Context</argument>, <argument>QualType T</argument>,
<argument>SourceLocation IteratorKwLoc</argument>, <argument>SourceLocation L</argument>,
<argument>SourceLocation R</argument>,
<argument>ArrayRef&lt;IteratorDefinition&gt; Data</argument>,
<argument>ArrayRef&lt;OMPIteratorHelperData&gt; Helpers</argument>)</argument_list></macro></expr>;

<expr><specifier>static</specifier> <name>OMPIteratorExpr</name> <operator>*</operator><macro><name>CreateEmpty</name><argument_list>(<argument>const ASTContext &amp;Context</argument>,
<argument>unsigned NumIterators</argument>)</argument_list></macro></expr>;

<expr><name>SourceLocation</name> <macro><name>getLParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LPLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setLParenLoc</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>LPLoc</name> <operator>=</operator> <name>L</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getRParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RPLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setRParenLoc</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>RPLoc</name> <operator>=</operator> <name>L</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getIteratorKwLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IteratorKwLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setIteratorKwLoc</name><argument_list>(<argument>SourceLocation L</argument>)</argument_list></macro> <block>{ <expr><name>IteratorKwLoc</name> <operator>=</operator> <name>L</name></expr>; }</block>
<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>IteratorKwLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>RPLoc</name></expr>;</return> }</block>


<name>Decl</name> <operator>*</operator><macro><name>getIteratorDecl</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getIteratorDecl</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>OMPIteratorExpr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getIteratorDecl</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>IteratorRange</name> <macro><name>getIteratorRange</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>IteratorRange</name> <macro><name>getIteratorRange</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>OMPIteratorExpr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getIteratorRange</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>SourceLocation</name> <macro><name>getAssignLoc</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>SourceLocation</name> <macro><name>getColonLoc</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>SourceLocation</name> <macro><name>getSecondColonLoc</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>unsigned</name> <macro><name>numOfIterators</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumIterators</name></expr>;</return> }</block>


<name>OMPIteratorHelperData</name> <operator>&amp;</operator><macro><name>getHelper</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>OMPIteratorHelperData</name> <operator>&amp;</operator><macro><name>getHelper</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OMPIteratorExprClass</name></expr>;</return>
}</block>


<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<expr><name>Stmt</name> <operator>*</operator><operator>*</operator><name>Begin</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>child_range</name><argument_list>(
<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>Begin</name> <operator>+</operator> <name>NumIterators</name> <operator>*</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RangeExprOffset</name><operator>::</operator><name>Total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>Stmt</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><name>Begin</name> <operator>=</operator>
<call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>const_child_range</name><argument_list>(
<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>Begin</name> <operator>+</operator> <name>NumIterators</name> <operator>*</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>RangeExprOffset</name><operator>::</operator><name>Total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
