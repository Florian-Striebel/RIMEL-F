<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang-c/Index.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_C_INDEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_C_INDEX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/BuildSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/CXErrorCode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/CXString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/ExternC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/Platform.h"</cpp:file></cpp:include>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINDEX_VERSION_MAJOR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINDEX_VERSION_MINOR</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINDEX_VERSION_ENCODE</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((major)*10000) + ((minor)*1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINDEX_VERSION</name></cpp:macro> <cpp:value>CINDEX_VERSION_ENCODE(CINDEX_VERSION_MAJOR, CINDEX_VERSION_MINOR)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINDEX_VERSION_STRINGIZE_</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#major "." #minor</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINDEX_VERSION_STRINGIZE</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CINDEX_VERSION_STRINGIZE_(major, minor)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CINDEX_VERSION_STRING</name></cpp:macro> <cpp:value>CINDEX_VERSION_STRINGIZE(CINDEX_VERSION_MAJOR, CINDEX_VERSION_MINOR)</cpp:value></cpp:define>


<macro><name>LLVM_CLANG_C_EXTERN_C_BEGIN</name></macro>
























<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXIndex</name>;</typedef>





<typedef>typedef <type><name><name>struct</name> <name>CXTargetInfoImpl</name></name> <modifier>*</modifier></type><name>CXTargetInfo</name>;</typedef>




<typedef>typedef <type><name><name>struct</name> <name>CXTranslationUnitImpl</name></name> <modifier>*</modifier></type><name>CXTranslationUnit</name>;</typedef>





<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXClientData</name>;</typedef>








<struct>struct <name>CXUnsavedFile</name> <block>{





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Filename</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Contents</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>Length</name></decl>;</decl_stmt>
}</block>;</struct>






<enum>enum <name>CXAvailabilityKind</name> <block>{



<decl><name>CXAvailability_Available</name></decl>,




<decl><name>CXAvailability_Deprecated</name></decl>,



<decl><name>CXAvailability_NotAvailable</name></decl>,




<decl><name>CXAvailability_NotAccessible</name></decl>
}</block>;</enum>




<typedef>typedef <type><struct>struct <name>CXVersion</name> <block>{




<decl_stmt><decl><type><name>int</name></type> <name>Major</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>Minor</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>Subminor</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXVersion</name>;</typedef>






<enum>enum <name>CXCursor_ExceptionSpecificationKind</name> <block>{



<decl><name>CXCursor_ExceptionSpecificationKind_None</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_DynamicNone</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_Dynamic</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_MSAny</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_BasicNoexcept</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_ComputedNoexcept</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_Unevaluated</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_Uninstantiated</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_Unparsed</name></decl>,




<decl><name>CXCursor_ExceptionSpecificationKind_NoThrow</name></decl>
}</block>;</enum>









































<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXIndex</name></type> <name>clang_createIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>excludeDeclarationsFromPCH</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>displayDiagnostics</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeIndex</name><parameter_list>(<parameter><decl><type><name>CXIndex</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{



<decl><name>CXGlobalOpt_None</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,








<decl><name>CXGlobalOpt_ThreadBackgroundPriorityForIndexing</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,








<decl><name>CXGlobalOpt_ThreadBackgroundPriorityForEditing</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,





<decl><name>CXGlobalOpt_ThreadBackgroundPriorityForAll</name> <init>=
<expr><name>CXGlobalOpt_ThreadBackgroundPriorityForIndexing</name> <operator>|</operator>
<name>CXGlobalOpt_ThreadBackgroundPriorityForEditing</name></expr></init></decl>

}</block></enum></type> <name>CXGlobalOptFlags</name>;</typedef>














<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_CXIndex_setGlobalOptions</name><parameter_list>(<parameter><decl><type><name>CXIndex</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXIndex_getGlobalOptions</name><parameter_list>(<parameter><decl><type><name>CXIndex</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type>
<name>clang_CXIndex_setInvocationEmissionPathOption</name><parameter_list>(<parameter><decl><type><name>CXIndex</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Path</name></decl></parameter>)</parameter_list>;</function_decl>










<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXFile</name>;</typedef>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getFileName</name><parameter_list>(<parameter><decl><type><name>CXFile</name></type> <name>SFile</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>time_t</name></type> <name>clang_getFileTime</name><parameter_list>(<parameter><decl><type><name>CXFile</name></type> <name>SFile</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CXFileUniqueID</name>;</typedef>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_getFileUniqueID</name><parameter_list>(<parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>CXFileUniqueID</name> <modifier>*</modifier></type><name>outID</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isFileMultipleIncludeGuarded</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXFile</name></type> <name>clang_getFile</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clang_getFileContents</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_File_isEqual</name><parameter_list>(<parameter><decl><type><name>CXFile</name></type> <name>file1</name></decl></parameter>, <parameter><decl><type><name>CXFile</name></type> <name>file2</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_File_tryGetRealPathName</name><parameter_list>(<parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>

























<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>ptr_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>int_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXSourceLocation</name>;</typedef>







<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>ptr_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>begin_int_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>end_int_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXSourceRange</name>;</typedef>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getNullLocation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_equalLocations</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>loc1</name></decl></parameter>,
<parameter><decl><type><name>CXSourceLocation</name></type> <name>loc2</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getLocation</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>line</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>column</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getLocationForOffset</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Location_isInSystemHeader</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Location_isFromMainFile</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_getNullRange</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_getRange</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>begin</name></decl></parameter>,
<parameter><decl><type><name>CXSourceLocation</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_equalRanges</name><parameter_list>(<parameter><decl><type><name>CXSourceRange</name></type> <name>range1</name></decl></parameter>,
<parameter><decl><type><name>CXSourceRange</name></type> <name>range2</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Range_isNull</name><parameter_list>(<parameter><decl><type><name>CXSourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getExpansionLocation</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>column</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>;</function_decl>









































<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getPresumedLocation</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>column</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getInstantiationLocation</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>column</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>;</function_decl>























<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getSpellingLocation</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>column</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
























<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getFileLocation</name><parameter_list>(<parameter><decl><type><name>CXSourceLocation</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getRangeStart</name><parameter_list>(<parameter><decl><type><name>CXSourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getRangeEnd</name><parameter_list>(<parameter><decl><type><name>CXSourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXSourceRange</name> <modifier>*</modifier></type><name>ranges</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXSourceRangeList</name>;</typedef>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRangeList</name> <modifier>*</modifier></type><name>clang_getSkippedRanges</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRangeList</name> <modifier>*</modifier></type>
<name>clang_getAllSkippedRanges</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeSourceRangeList</name><parameter_list>(<parameter><decl><type><name>CXSourceRangeList</name> <modifier>*</modifier></type><name>ranges</name></decl></parameter>)</parameter_list>;</function_decl>














<enum>enum <name>CXDiagnosticSeverity</name> <block>{




<decl><name>CXDiagnostic_Ignored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,





<decl><name>CXDiagnostic_Note</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,





<decl><name>CXDiagnostic_Warning</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,




<decl><name>CXDiagnostic_Error</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,






<decl><name>CXDiagnostic_Fatal</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>





<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXDiagnostic</name>;</typedef>




<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXDiagnosticSet</name>;</typedef>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_getNumDiagnosticsInSet</name><parameter_list>(<parameter><decl><type><name>CXDiagnosticSet</name></type> <name>Diags</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXDiagnostic</name></type> <name>clang_getDiagnosticInSet</name><parameter_list>(<parameter><decl><type><name>CXDiagnosticSet</name></type> <name>Diags</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Index</name></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>CXLoadDiag_Error</name> <block>{



<decl><name>CXLoadDiag_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,





<decl><name>CXLoadDiag_Unknown</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,





<decl><name>CXLoadDiag_CannotLoad</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,





<decl><name>CXLoadDiag_InvalidFile</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>














<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXDiagnosticSet</name></type> <name>clang_loadDiagnostics</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>CXLoadDiag_Error</name></name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>errorString</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeDiagnosticSet</name><parameter_list>(<parameter><decl><type><name>CXDiagnosticSet</name></type> <name>Diags</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXDiagnosticSet</name></type> <name>clang_getChildDiagnostics</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type> <name>D</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_getNumDiagnostics</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>Unit</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXDiagnostic</name></type> <name>clang_getDiagnostic</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>Unit</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Index</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXDiagnosticSet</name></type>
<name>clang_getDiagnosticSetFromTU</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>Unit</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeDiagnostic</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type> <name>Diagnostic</name></decl></parameter>)</parameter_list>;</function_decl>







<enum>enum <name>CXDiagnosticDisplayOptions</name> <block>{













<decl><name>CXDiagnostic_DisplaySourceLocation</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,







<decl><name>CXDiagnostic_DisplayColumn</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,









<decl><name>CXDiagnostic_DisplaySourceRanges</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,








<decl><name>CXDiagnostic_DisplayOption</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,








<decl><name>CXDiagnostic_DisplayCategoryId</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,








<decl><name>CXDiagnostic_DisplayCategoryName</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>
}</block>;</enum>
















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_formatDiagnostic</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type> <name>Diagnostic</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Options</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_defaultDiagnosticDisplayOptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXDiagnosticSeverity</name></name></type>
<name>clang_getDiagnosticSeverity</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getDiagnosticLocation</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getDiagnosticSpelling</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getDiagnosticOption</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type> <name>Diag</name></decl></parameter>,
<parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>Disable</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_getDiagnosticCategory</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CINDEX_DEPRECATED</name> <name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_getDiagnosticCategoryName</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Category</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getDiagnosticCategoryText</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_getDiagnosticNumRanges</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_getDiagnosticRange</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type> <name>Diagnostic</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Range</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_getDiagnosticNumFixIts</name><parameter_list>(<parameter><decl><type><name>CXDiagnostic</name></type> <name>Diagnostic</name></decl></parameter>)</parameter_list>;</function_decl>


























<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getDiagnosticFixIt</name><parameter_list>(
<parameter><decl><type><name>CXDiagnostic</name></type> <name>Diagnostic</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>FixIt</name></decl></parameter>, <parameter><decl><type><name>CXSourceRange</name> <modifier>*</modifier></type><name>ReplacementRange</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_getTranslationUnitSpelling</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>CTUnit</name></decl></parameter>)</parameter_list>;</function_decl>









































<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXTranslationUnit</name></type> <name>clang_createTranslationUnitFromSourceFile</name><parameter_list>(
<parameter><decl><type><name>CXIndex</name></type> <name>CIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_clang_command_line_args</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>clang_command_line_args</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXTranslationUnit</name></type>
<name>clang_createTranslationUnit</name><parameter_list>(<parameter><decl><type><name>CXIndex</name></type> <name>CIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ast_filename</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXErrorCode</name></name></type>
<name>clang_createTranslationUnit2</name><parameter_list>(<parameter><decl><type><name>CXIndex</name></type> <name>CIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ast_filename</name></decl></parameter>,
<parameter><decl><type><name>CXTranslationUnit</name> <modifier>*</modifier></type><name>out_TU</name></decl></parameter>)</parameter_list>;</function_decl>








<enum>enum <name>CXTranslationUnit_Flags</name> <block>{




<decl><name>CXTranslationUnit_None</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,











<decl><name>CXTranslationUnit_DetailedPreprocessingRecord</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,












<decl><name>CXTranslationUnit_Incomplete</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,















<decl><name>CXTranslationUnit_PrecompiledPreamble</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,









<decl><name>CXTranslationUnit_CacheCompletionResults</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,








<decl><name>CXTranslationUnit_ForSerialization</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,







<decl><name>CXTranslationUnit_CXXChainedPCH</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,








<decl><name>CXTranslationUnit_SkipFunctionBodies</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,






<decl><name>CXTranslationUnit_IncludeBriefCommentsInCodeCompletion</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,







<decl><name>CXTranslationUnit_CreatePreambleOnFirstParse</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,










<decl><name>CXTranslationUnit_KeepGoing</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,




<decl><name>CXTranslationUnit_SingleFileParse</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,







<decl><name>CXTranslationUnit_LimitSkipFunctionBodiesToPreamble</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>,




<decl><name>CXTranslationUnit_IncludeAttributedTypes</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,




<decl><name>CXTranslationUnit_VisitImplicitAttributes</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,









<decl><name>CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>,




<decl><name>CXTranslationUnit_RetainExcludedConditionalBlocks</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>
}</block>;</enum>













<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_defaultEditingTranslationUnitOptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXTranslationUnit</name></type> <name>clang_parseTranslationUnit</name><parameter_list>(
<parameter><decl><type><name>CXIndex</name></type> <name>CIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>command_line_args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_command_line_args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>













































<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXErrorCode</name></name></type> <name>clang_parseTranslationUnit2</name><parameter_list>(
<parameter><decl><type><name>CXIndex</name></type> <name>CIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>command_line_args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_command_line_args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>CXTranslationUnit</name> <modifier>*</modifier></type><name>out_TU</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXErrorCode</name></name></type> <name>clang_parseTranslationUnit2FullArgv</name><parameter_list>(
<parameter><decl><type><name>CXIndex</name></type> <name>CIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_filename</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>command_line_args</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_command_line_args</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>CXTranslationUnit</name> <modifier>*</modifier></type><name>out_TU</name></decl></parameter>)</parameter_list>;</function_decl>








<enum>enum <name>CXSaveTranslationUnit_Flags</name> <block>{



<decl><name>CXSaveTranslationUnit_None</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>
}</block>;</enum>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_defaultSaveOptions</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>CXSaveError</name> <block>{



<decl><name>CXSaveError_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,








<decl><name>CXSaveError_Unknown</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,








<decl><name>CXSaveError_TranslationErrors</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,





<decl><name>CXSaveError_InvalidTU</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>
























<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_saveTranslationUnit</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FileName</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_suspendTranslationUnit</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeTranslationUnit</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>)</parameter_list>;</function_decl>








<enum>enum <name>CXReparse_Flags</name> <block>{



<decl><name>CXReparse_None</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>
}</block>;</enum>











<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_defaultReparseOptions</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>)</parameter_list>;</function_decl>








































<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type>
<name>clang_reparseTranslationUnit</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>




<enum>enum <name>CXTUResourceUsageKind</name> <block>{
<decl><name>CXTUResourceUsage_AST</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_Identifiers</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_Selectors</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_GlobalCompletionResults</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_SourceManagerContentCache</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_AST_SideTables</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_SourceManager_Membuffer_Malloc</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_SourceManager_Membuffer_MMap</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_ExternalASTSource_Membuffer_MMap</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_Preprocessor</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_PreprocessingRecord</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_SourceManager_DataStructures</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_Preprocessor_HeaderSearch</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN</name> <init>= <expr><name>CXTUResourceUsage_AST</name></expr></init></decl>,
<decl><name>CXTUResourceUsage_MEMORY_IN_BYTES_END</name> <init>=
<expr><name>CXTUResourceUsage_Preprocessor_HeaderSearch</name></expr></init></decl>,

<decl><name>CXTUResourceUsage_First</name> <init>= <expr><name>CXTUResourceUsage_AST</name></expr></init></decl>,
<decl><name>CXTUResourceUsage_Last</name> <init>= <expr><name>CXTUResourceUsage_Preprocessor_HeaderSearch</name></expr></init></decl>
}</block>;</enum>





<function_decl><type><name>CINDEX_LINKAGE</name>
<specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clang_getTUResourceUsageName</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXTUResourceUsageKind</name></name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>CXTUResourceUsageEntry</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>CXTUResourceUsageKind</name></name></type> <name>kind</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>amount</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXTUResourceUsageEntry</name>;</typedef>




<typedef>typedef <type><struct>struct <name>CXTUResourceUsage</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>numEntries</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXTUResourceUsageEntry</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>

}</block></struct></type> <name>CXTUResourceUsage</name>;</typedef>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXTUResourceUsage</name></type>
<name>clang_getCXTUResourceUsage</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeCXTUResourceUsage</name><parameter_list>(<parameter><decl><type><name>CXTUResourceUsage</name></type> <name>usage</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXTargetInfo</name></type>
<name>clang_getTranslationUnitTargetInfo</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>CTUnit</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_TargetInfo_dispose</name><parameter_list>(<parameter><decl><type><name>CXTargetInfo</name></type> <name>Info</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_TargetInfo_getTriple</name><parameter_list>(<parameter><decl><type><name>CXTargetInfo</name></type> <name>Info</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_TargetInfo_getPointerWidth</name><parameter_list>(<parameter><decl><type><name>CXTargetInfo</name></type> <name>Info</name></decl></parameter>)</parameter_list>;</function_decl>








<enum>enum <name>CXCursorKind</name> <block>{










<decl><name>CXCursor_UnexposedDecl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>CXCursor_StructDecl</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>CXCursor_UnionDecl</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>CXCursor_ClassDecl</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>CXCursor_EnumDecl</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,




<decl><name>CXCursor_FieldDecl</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>CXCursor_EnumConstantDecl</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>CXCursor_FunctionDecl</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>CXCursor_VarDecl</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>CXCursor_ParmDecl</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCInterfaceDecl</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCCategoryDecl</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCProtocolDecl</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCPropertyDecl</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCIvarDecl</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCInstanceMethodDecl</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCClassMethodDecl</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCImplementationDecl</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCCategoryImplDecl</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,

<decl><name>CXCursor_TypedefDecl</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,

<decl><name>CXCursor_CXXMethod</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>CXCursor_Namespace</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>CXCursor_LinkageSpec</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,

<decl><name>CXCursor_Constructor</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,

<decl><name>CXCursor_Destructor</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,

<decl><name>CXCursor_ConversionFunction</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,

<decl><name>CXCursor_TemplateTypeParameter</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,

<decl><name>CXCursor_NonTypeTemplateParameter</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,

<decl><name>CXCursor_TemplateTemplateParameter</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,

<decl><name>CXCursor_FunctionTemplate</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,

<decl><name>CXCursor_ClassTemplate</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,

<decl><name>CXCursor_ClassTemplatePartialSpecialization</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,

<decl><name>CXCursor_NamespaceAlias</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,

<decl><name>CXCursor_UsingDirective</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,

<decl><name>CXCursor_UsingDeclaration</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,

<decl><name>CXCursor_TypeAliasDecl</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCSynthesizeDecl</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>,

<decl><name>CXCursor_ObjCDynamicDecl</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>,

<decl><name>CXCursor_CXXAccessSpecifier</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,

<decl><name>CXCursor_FirstDecl</name> <init>= <expr><name>CXCursor_UnexposedDecl</name></expr></init></decl>,
<decl><name>CXCursor_LastDecl</name> <init>= <expr><name>CXCursor_CXXAccessSpecifier</name></expr></init></decl>,


<decl><name>CXCursor_FirstRef</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCSuperClassRef</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCProtocolRef</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCClassRef</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,















<decl><name>CXCursor_TypeRef</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>,
<decl><name>CXCursor_CXXBaseSpecifier</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>,




<decl><name>CXCursor_TemplateRef</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>,



<decl><name>CXCursor_NamespaceRef</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,




<decl><name>CXCursor_MemberRef</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,















<decl><name>CXCursor_LabelRef</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,





































<decl><name>CXCursor_OverloadedDeclRef</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>,





<decl><name>CXCursor_VariableRef</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,

<decl><name>CXCursor_LastRef</name> <init>= <expr><name>CXCursor_VariableRef</name></expr></init></decl>,


<decl><name>CXCursor_FirstInvalid</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>,
<decl><name>CXCursor_InvalidFile</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>,
<decl><name>CXCursor_NoDeclFound</name> <init>= <expr><literal type="number">71</literal></expr></init></decl>,
<decl><name>CXCursor_NotImplemented</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>,
<decl><name>CXCursor_InvalidCode</name> <init>= <expr><literal type="number">73</literal></expr></init></decl>,
<decl><name>CXCursor_LastInvalid</name> <init>= <expr><name>CXCursor_InvalidCode</name></expr></init></decl>,


<decl><name>CXCursor_FirstExpr</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,










<decl><name>CXCursor_UnexposedExpr</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,





<decl><name>CXCursor_DeclRefExpr</name> <init>= <expr><literal type="number">101</literal></expr></init></decl>,





<decl><name>CXCursor_MemberRefExpr</name> <init>= <expr><literal type="number">102</literal></expr></init></decl>,


<decl><name>CXCursor_CallExpr</name> <init>= <expr><literal type="number">103</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCMessageExpr</name> <init>= <expr><literal type="number">104</literal></expr></init></decl>,


<decl><name>CXCursor_BlockExpr</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>,



<decl><name>CXCursor_IntegerLiteral</name> <init>= <expr><literal type="number">106</literal></expr></init></decl>,



<decl><name>CXCursor_FloatingLiteral</name> <init>= <expr><literal type="number">107</literal></expr></init></decl>,



<decl><name>CXCursor_ImaginaryLiteral</name> <init>= <expr><literal type="number">108</literal></expr></init></decl>,



<decl><name>CXCursor_StringLiteral</name> <init>= <expr><literal type="number">109</literal></expr></init></decl>,



<decl><name>CXCursor_CharacterLiteral</name> <init>= <expr><literal type="number">110</literal></expr></init></decl>,





<decl><name>CXCursor_ParenExpr</name> <init>= <expr><literal type="number">111</literal></expr></init></decl>,




<decl><name>CXCursor_UnaryOperator</name> <init>= <expr><literal type="number">112</literal></expr></init></decl>,



<decl><name>CXCursor_ArraySubscriptExpr</name> <init>= <expr><literal type="number">113</literal></expr></init></decl>,




<decl><name>CXCursor_BinaryOperator</name> <init>= <expr><literal type="number">114</literal></expr></init></decl>,



<decl><name>CXCursor_CompoundAssignOperator</name> <init>= <expr><literal type="number">115</literal></expr></init></decl>,



<decl><name>CXCursor_ConditionalOperator</name> <init>= <expr><literal type="number">116</literal></expr></init></decl>,






<decl><name>CXCursor_CStyleCastExpr</name> <init>= <expr><literal type="number">117</literal></expr></init></decl>,



<decl><name>CXCursor_CompoundLiteralExpr</name> <init>= <expr><literal type="number">118</literal></expr></init></decl>,



<decl><name>CXCursor_InitListExpr</name> <init>= <expr><literal type="number">119</literal></expr></init></decl>,



<decl><name>CXCursor_AddrLabelExpr</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>,



<decl><name>CXCursor_StmtExpr</name> <init>= <expr><literal type="number">121</literal></expr></init></decl>,



<decl><name>CXCursor_GenericSelectionExpr</name> <init>= <expr><literal type="number">122</literal></expr></init></decl>,









<decl><name>CXCursor_GNUNullExpr</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>,



<decl><name>CXCursor_CXXStaticCastExpr</name> <init>= <expr><literal type="number">124</literal></expr></init></decl>,



<decl><name>CXCursor_CXXDynamicCastExpr</name> <init>= <expr><literal type="number">125</literal></expr></init></decl>,



<decl><name>CXCursor_CXXReinterpretCastExpr</name> <init>= <expr><literal type="number">126</literal></expr></init></decl>,



<decl><name>CXCursor_CXXConstCastExpr</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>,









<decl><name>CXCursor_CXXFunctionalCastExpr</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,



<decl><name>CXCursor_CXXTypeidExpr</name> <init>= <expr><literal type="number">129</literal></expr></init></decl>,



<decl><name>CXCursor_CXXBoolLiteralExpr</name> <init>= <expr><literal type="number">130</literal></expr></init></decl>,



<decl><name>CXCursor_CXXNullPtrLiteralExpr</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>,



<decl><name>CXCursor_CXXThisExpr</name> <init>= <expr><literal type="number">132</literal></expr></init></decl>,






<decl><name>CXCursor_CXXThrowExpr</name> <init>= <expr><literal type="number">133</literal></expr></init></decl>,




<decl><name>CXCursor_CXXNewExpr</name> <init>= <expr><literal type="number">134</literal></expr></init></decl>,




<decl><name>CXCursor_CXXDeleteExpr</name> <init>= <expr><literal type="number">135</literal></expr></init></decl>,



<decl><name>CXCursor_UnaryExpr</name> <init>= <expr><literal type="number">136</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCStringLiteral</name> <init>= <expr><literal type="number">137</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCEncodeExpr</name> <init>= <expr><literal type="number">138</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCSelectorExpr</name> <init>= <expr><literal type="number">139</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCProtocolExpr</name> <init>= <expr><literal type="number">140</literal></expr></init></decl>,








<decl><name>CXCursor_ObjCBridgedCastExpr</name> <init>= <expr><literal type="number">141</literal></expr></init></decl>,














<decl><name>CXCursor_PackExpansionExpr</name> <init>= <expr><literal type="number">142</literal></expr></init></decl>,











<decl><name>CXCursor_SizeOfPackExpr</name> <init>= <expr><literal type="number">143</literal></expr></init></decl>,













<decl><name>CXCursor_LambdaExpr</name> <init>= <expr><literal type="number">144</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCBoolLiteralExpr</name> <init>= <expr><literal type="number">145</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCSelfExpr</name> <init>= <expr><literal type="number">146</literal></expr></init></decl>,



<decl><name>CXCursor_OMPArraySectionExpr</name> <init>= <expr><literal type="number">147</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCAvailabilityCheckExpr</name> <init>= <expr><literal type="number">148</literal></expr></init></decl>,




<decl><name>CXCursor_FixedPointLiteral</name> <init>= <expr><literal type="number">149</literal></expr></init></decl>,



<decl><name>CXCursor_OMPArrayShapingExpr</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>,




<decl><name>CXCursor_OMPIteratorExpr</name> <init>= <expr><literal type="number">151</literal></expr></init></decl>,



<decl><name>CXCursor_CXXAddrspaceCastExpr</name> <init>= <expr><literal type="number">152</literal></expr></init></decl>,

<decl><name>CXCursor_LastExpr</name> <init>= <expr><name>CXCursor_CXXAddrspaceCastExpr</name></expr></init></decl>,


<decl><name>CXCursor_FirstStmt</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>,









<decl><name>CXCursor_UnexposedStmt</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>,












<decl><name>CXCursor_LabelStmt</name> <init>= <expr><literal type="number">201</literal></expr></init></decl>,






<decl><name>CXCursor_CompoundStmt</name> <init>= <expr><literal type="number">202</literal></expr></init></decl>,



<decl><name>CXCursor_CaseStmt</name> <init>= <expr><literal type="number">203</literal></expr></init></decl>,



<decl><name>CXCursor_DefaultStmt</name> <init>= <expr><literal type="number">204</literal></expr></init></decl>,



<decl><name>CXCursor_IfStmt</name> <init>= <expr><literal type="number">205</literal></expr></init></decl>,



<decl><name>CXCursor_SwitchStmt</name> <init>= <expr><literal type="number">206</literal></expr></init></decl>,



<decl><name>CXCursor_WhileStmt</name> <init>= <expr><literal type="number">207</literal></expr></init></decl>,



<decl><name>CXCursor_DoStmt</name> <init>= <expr><literal type="number">208</literal></expr></init></decl>,



<decl><name>CXCursor_ForStmt</name> <init>= <expr><literal type="number">209</literal></expr></init></decl>,



<decl><name>CXCursor_GotoStmt</name> <init>= <expr><literal type="number">210</literal></expr></init></decl>,



<decl><name>CXCursor_IndirectGotoStmt</name> <init>= <expr><literal type="number">211</literal></expr></init></decl>,



<decl><name>CXCursor_ContinueStmt</name> <init>= <expr><literal type="number">212</literal></expr></init></decl>,



<decl><name>CXCursor_BreakStmt</name> <init>= <expr><literal type="number">213</literal></expr></init></decl>,



<decl><name>CXCursor_ReturnStmt</name> <init>= <expr><literal type="number">214</literal></expr></init></decl>,



<decl><name>CXCursor_GCCAsmStmt</name> <init>= <expr><literal type="number">215</literal></expr></init></decl>,
<decl><name>CXCursor_AsmStmt</name> <init>= <expr><name>CXCursor_GCCAsmStmt</name></expr></init></decl>,



<decl><name>CXCursor_ObjCAtTryStmt</name> <init>= <expr><literal type="number">216</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCAtCatchStmt</name> <init>= <expr><literal type="number">217</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCAtFinallyStmt</name> <init>= <expr><literal type="number">218</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCAtThrowStmt</name> <init>= <expr><literal type="number">219</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCAtSynchronizedStmt</name> <init>= <expr><literal type="number">220</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCAutoreleasePoolStmt</name> <init>= <expr><literal type="number">221</literal></expr></init></decl>,



<decl><name>CXCursor_ObjCForCollectionStmt</name> <init>= <expr><literal type="number">222</literal></expr></init></decl>,



<decl><name>CXCursor_CXXCatchStmt</name> <init>= <expr><literal type="number">223</literal></expr></init></decl>,



<decl><name>CXCursor_CXXTryStmt</name> <init>= <expr><literal type="number">224</literal></expr></init></decl>,



<decl><name>CXCursor_CXXForRangeStmt</name> <init>= <expr><literal type="number">225</literal></expr></init></decl>,



<decl><name>CXCursor_SEHTryStmt</name> <init>= <expr><literal type="number">226</literal></expr></init></decl>,



<decl><name>CXCursor_SEHExceptStmt</name> <init>= <expr><literal type="number">227</literal></expr></init></decl>,



<decl><name>CXCursor_SEHFinallyStmt</name> <init>= <expr><literal type="number">228</literal></expr></init></decl>,



<decl><name>CXCursor_MSAsmStmt</name> <init>= <expr><literal type="number">229</literal></expr></init></decl>,





<decl><name>CXCursor_NullStmt</name> <init>= <expr><literal type="number">230</literal></expr></init></decl>,




<decl><name>CXCursor_DeclStmt</name> <init>= <expr><literal type="number">231</literal></expr></init></decl>,



<decl><name>CXCursor_OMPParallelDirective</name> <init>= <expr><literal type="number">232</literal></expr></init></decl>,



<decl><name>CXCursor_OMPSimdDirective</name> <init>= <expr><literal type="number">233</literal></expr></init></decl>,



<decl><name>CXCursor_OMPForDirective</name> <init>= <expr><literal type="number">234</literal></expr></init></decl>,



<decl><name>CXCursor_OMPSectionsDirective</name> <init>= <expr><literal type="number">235</literal></expr></init></decl>,



<decl><name>CXCursor_OMPSectionDirective</name> <init>= <expr><literal type="number">236</literal></expr></init></decl>,



<decl><name>CXCursor_OMPSingleDirective</name> <init>= <expr><literal type="number">237</literal></expr></init></decl>,



<decl><name>CXCursor_OMPParallelForDirective</name> <init>= <expr><literal type="number">238</literal></expr></init></decl>,



<decl><name>CXCursor_OMPParallelSectionsDirective</name> <init>= <expr><literal type="number">239</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTaskDirective</name> <init>= <expr><literal type="number">240</literal></expr></init></decl>,



<decl><name>CXCursor_OMPMasterDirective</name> <init>= <expr><literal type="number">241</literal></expr></init></decl>,



<decl><name>CXCursor_OMPCriticalDirective</name> <init>= <expr><literal type="number">242</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTaskyieldDirective</name> <init>= <expr><literal type="number">243</literal></expr></init></decl>,



<decl><name>CXCursor_OMPBarrierDirective</name> <init>= <expr><literal type="number">244</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTaskwaitDirective</name> <init>= <expr><literal type="number">245</literal></expr></init></decl>,



<decl><name>CXCursor_OMPFlushDirective</name> <init>= <expr><literal type="number">246</literal></expr></init></decl>,



<decl><name>CXCursor_SEHLeaveStmt</name> <init>= <expr><literal type="number">247</literal></expr></init></decl>,



<decl><name>CXCursor_OMPOrderedDirective</name> <init>= <expr><literal type="number">248</literal></expr></init></decl>,



<decl><name>CXCursor_OMPAtomicDirective</name> <init>= <expr><literal type="number">249</literal></expr></init></decl>,



<decl><name>CXCursor_OMPForSimdDirective</name> <init>= <expr><literal type="number">250</literal></expr></init></decl>,



<decl><name>CXCursor_OMPParallelForSimdDirective</name> <init>= <expr><literal type="number">251</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetDirective</name> <init>= <expr><literal type="number">252</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTeamsDirective</name> <init>= <expr><literal type="number">253</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTaskgroupDirective</name> <init>= <expr><literal type="number">254</literal></expr></init></decl>,



<decl><name>CXCursor_OMPCancellationPointDirective</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>,



<decl><name>CXCursor_OMPCancelDirective</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetDataDirective</name> <init>= <expr><literal type="number">257</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTaskLoopDirective</name> <init>= <expr><literal type="number">258</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTaskLoopSimdDirective</name> <init>= <expr><literal type="number">259</literal></expr></init></decl>,



<decl><name>CXCursor_OMPDistributeDirective</name> <init>= <expr><literal type="number">260</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetEnterDataDirective</name> <init>= <expr><literal type="number">261</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetExitDataDirective</name> <init>= <expr><literal type="number">262</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetParallelDirective</name> <init>= <expr><literal type="number">263</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetParallelForDirective</name> <init>= <expr><literal type="number">264</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetUpdateDirective</name> <init>= <expr><literal type="number">265</literal></expr></init></decl>,



<decl><name>CXCursor_OMPDistributeParallelForDirective</name> <init>= <expr><literal type="number">266</literal></expr></init></decl>,



<decl><name>CXCursor_OMPDistributeParallelForSimdDirective</name> <init>= <expr><literal type="number">267</literal></expr></init></decl>,



<decl><name>CXCursor_OMPDistributeSimdDirective</name> <init>= <expr><literal type="number">268</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetParallelForSimdDirective</name> <init>= <expr><literal type="number">269</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetSimdDirective</name> <init>= <expr><literal type="number">270</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTeamsDistributeDirective</name> <init>= <expr><literal type="number">271</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTeamsDistributeSimdDirective</name> <init>= <expr><literal type="number">272</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTeamsDistributeParallelForSimdDirective</name> <init>= <expr><literal type="number">273</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTeamsDistributeParallelForDirective</name> <init>= <expr><literal type="number">274</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetTeamsDirective</name> <init>= <expr><literal type="number">275</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetTeamsDistributeDirective</name> <init>= <expr><literal type="number">276</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetTeamsDistributeParallelForDirective</name> <init>= <expr><literal type="number">277</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective</name> <init>= <expr><literal type="number">278</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTargetTeamsDistributeSimdDirective</name> <init>= <expr><literal type="number">279</literal></expr></init></decl>,



<decl><name>CXCursor_BuiltinBitCastExpr</name> <init>= <expr><literal type="number">280</literal></expr></init></decl>,



<decl><name>CXCursor_OMPMasterTaskLoopDirective</name> <init>= <expr><literal type="number">281</literal></expr></init></decl>,



<decl><name>CXCursor_OMPParallelMasterTaskLoopDirective</name> <init>= <expr><literal type="number">282</literal></expr></init></decl>,



<decl><name>CXCursor_OMPMasterTaskLoopSimdDirective</name> <init>= <expr><literal type="number">283</literal></expr></init></decl>,



<decl><name>CXCursor_OMPParallelMasterTaskLoopSimdDirective</name> <init>= <expr><literal type="number">284</literal></expr></init></decl>,



<decl><name>CXCursor_OMPParallelMasterDirective</name> <init>= <expr><literal type="number">285</literal></expr></init></decl>,



<decl><name>CXCursor_OMPDepobjDirective</name> <init>= <expr><literal type="number">286</literal></expr></init></decl>,



<decl><name>CXCursor_OMPScanDirective</name> <init>= <expr><literal type="number">287</literal></expr></init></decl>,



<decl><name>CXCursor_OMPTileDirective</name> <init>= <expr><literal type="number">288</literal></expr></init></decl>,



<decl><name>CXCursor_OMPCanonicalLoop</name> <init>= <expr><literal type="number">289</literal></expr></init></decl>,



<decl><name>CXCursor_OMPInteropDirective</name> <init>= <expr><literal type="number">290</literal></expr></init></decl>,



<decl><name>CXCursor_OMPDispatchDirective</name> <init>= <expr><literal type="number">291</literal></expr></init></decl>,



<decl><name>CXCursor_OMPMaskedDirective</name> <init>= <expr><literal type="number">292</literal></expr></init></decl>,



<decl><name>CXCursor_OMPUnrollDirective</name> <init>= <expr><literal type="number">293</literal></expr></init></decl>,

<decl><name>CXCursor_LastStmt</name> <init>= <expr><name>CXCursor_OMPUnrollDirective</name></expr></init></decl>,







<decl><name>CXCursor_TranslationUnit</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>,


<decl><name>CXCursor_FirstAttr</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>,




<decl><name>CXCursor_UnexposedAttr</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>,

<decl><name>CXCursor_IBActionAttr</name> <init>= <expr><literal type="number">401</literal></expr></init></decl>,
<decl><name>CXCursor_IBOutletAttr</name> <init>= <expr><literal type="number">402</literal></expr></init></decl>,
<decl><name>CXCursor_IBOutletCollectionAttr</name> <init>= <expr><literal type="number">403</literal></expr></init></decl>,
<decl><name>CXCursor_CXXFinalAttr</name> <init>= <expr><literal type="number">404</literal></expr></init></decl>,
<decl><name>CXCursor_CXXOverrideAttr</name> <init>= <expr><literal type="number">405</literal></expr></init></decl>,
<decl><name>CXCursor_AnnotateAttr</name> <init>= <expr><literal type="number">406</literal></expr></init></decl>,
<decl><name>CXCursor_AsmLabelAttr</name> <init>= <expr><literal type="number">407</literal></expr></init></decl>,
<decl><name>CXCursor_PackedAttr</name> <init>= <expr><literal type="number">408</literal></expr></init></decl>,
<decl><name>CXCursor_PureAttr</name> <init>= <expr><literal type="number">409</literal></expr></init></decl>,
<decl><name>CXCursor_ConstAttr</name> <init>= <expr><literal type="number">410</literal></expr></init></decl>,
<decl><name>CXCursor_NoDuplicateAttr</name> <init>= <expr><literal type="number">411</literal></expr></init></decl>,
<decl><name>CXCursor_CUDAConstantAttr</name> <init>= <expr><literal type="number">412</literal></expr></init></decl>,
<decl><name>CXCursor_CUDADeviceAttr</name> <init>= <expr><literal type="number">413</literal></expr></init></decl>,
<decl><name>CXCursor_CUDAGlobalAttr</name> <init>= <expr><literal type="number">414</literal></expr></init></decl>,
<decl><name>CXCursor_CUDAHostAttr</name> <init>= <expr><literal type="number">415</literal></expr></init></decl>,
<decl><name>CXCursor_CUDASharedAttr</name> <init>= <expr><literal type="number">416</literal></expr></init></decl>,
<decl><name>CXCursor_VisibilityAttr</name> <init>= <expr><literal type="number">417</literal></expr></init></decl>,
<decl><name>CXCursor_DLLExport</name> <init>= <expr><literal type="number">418</literal></expr></init></decl>,
<decl><name>CXCursor_DLLImport</name> <init>= <expr><literal type="number">419</literal></expr></init></decl>,
<decl><name>CXCursor_NSReturnsRetained</name> <init>= <expr><literal type="number">420</literal></expr></init></decl>,
<decl><name>CXCursor_NSReturnsNotRetained</name> <init>= <expr><literal type="number">421</literal></expr></init></decl>,
<decl><name>CXCursor_NSReturnsAutoreleased</name> <init>= <expr><literal type="number">422</literal></expr></init></decl>,
<decl><name>CXCursor_NSConsumesSelf</name> <init>= <expr><literal type="number">423</literal></expr></init></decl>,
<decl><name>CXCursor_NSConsumed</name> <init>= <expr><literal type="number">424</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCException</name> <init>= <expr><literal type="number">425</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCNSObject</name> <init>= <expr><literal type="number">426</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCIndependentClass</name> <init>= <expr><literal type="number">427</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCPreciseLifetime</name> <init>= <expr><literal type="number">428</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCReturnsInnerPointer</name> <init>= <expr><literal type="number">429</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCRequiresSuper</name> <init>= <expr><literal type="number">430</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCRootClass</name> <init>= <expr><literal type="number">431</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCSubclassingRestricted</name> <init>= <expr><literal type="number">432</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCExplicitProtocolImpl</name> <init>= <expr><literal type="number">433</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCDesignatedInitializer</name> <init>= <expr><literal type="number">434</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCRuntimeVisible</name> <init>= <expr><literal type="number">435</literal></expr></init></decl>,
<decl><name>CXCursor_ObjCBoxable</name> <init>= <expr><literal type="number">436</literal></expr></init></decl>,
<decl><name>CXCursor_FlagEnum</name> <init>= <expr><literal type="number">437</literal></expr></init></decl>,
<decl><name>CXCursor_ConvergentAttr</name> <init>= <expr><literal type="number">438</literal></expr></init></decl>,
<decl><name>CXCursor_WarnUnusedAttr</name> <init>= <expr><literal type="number">439</literal></expr></init></decl>,
<decl><name>CXCursor_WarnUnusedResultAttr</name> <init>= <expr><literal type="number">440</literal></expr></init></decl>,
<decl><name>CXCursor_AlignedAttr</name> <init>= <expr><literal type="number">441</literal></expr></init></decl>,
<decl><name>CXCursor_LastAttr</name> <init>= <expr><name>CXCursor_AlignedAttr</name></expr></init></decl>,


<decl><name>CXCursor_PreprocessingDirective</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>,
<decl><name>CXCursor_MacroDefinition</name> <init>= <expr><literal type="number">501</literal></expr></init></decl>,
<decl><name>CXCursor_MacroExpansion</name> <init>= <expr><literal type="number">502</literal></expr></init></decl>,
<decl><name>CXCursor_MacroInstantiation</name> <init>= <expr><name>CXCursor_MacroExpansion</name></expr></init></decl>,
<decl><name>CXCursor_InclusionDirective</name> <init>= <expr><literal type="number">503</literal></expr></init></decl>,
<decl><name>CXCursor_FirstPreprocessing</name> <init>= <expr><name>CXCursor_PreprocessingDirective</name></expr></init></decl>,
<decl><name>CXCursor_LastPreprocessing</name> <init>= <expr><name>CXCursor_InclusionDirective</name></expr></init></decl>,





<decl><name>CXCursor_ModuleImportDecl</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>,
<decl><name>CXCursor_TypeAliasTemplateDecl</name> <init>= <expr><literal type="number">601</literal></expr></init></decl>,



<decl><name>CXCursor_StaticAssert</name> <init>= <expr><literal type="number">602</literal></expr></init></decl>,



<decl><name>CXCursor_FriendDecl</name> <init>= <expr><literal type="number">603</literal></expr></init></decl>,
<decl><name>CXCursor_FirstExtraDecl</name> <init>= <expr><name>CXCursor_ModuleImportDecl</name></expr></init></decl>,
<decl><name>CXCursor_LastExtraDecl</name> <init>= <expr><name>CXCursor_FriendDecl</name></expr></init></decl>,




<decl><name>CXCursor_OverloadCandidate</name> <init>= <expr><literal type="number">700</literal></expr></init></decl>
}</block>;</enum>



















<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CXCursor</name>;</typedef>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getNullCursor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getTranslationUnitCursor</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_equalCursors</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>, <parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Cursor_isNull</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_hashCursor</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXCursorKind</name></name></type> <name>clang_getCursorKind</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isDeclaration</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isInvalidDeclaration</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isReference</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isExpression</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isStatement</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isAttribute</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_hasAttrs</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isInvalid</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isTranslationUnit</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isPreprocessing</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isUnexposed</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type></decl></parameter>)</parameter_list>;</function_decl>




<enum>enum <name>CXLinkageKind</name> <block>{


<decl><name>CXLinkage_Invalid</name></decl>,




<decl><name>CXLinkage_NoLinkage</name></decl>,

<decl><name>CXLinkage_Internal</name></decl>,


<decl><name>CXLinkage_UniqueExternal</name></decl>,

<decl><name>CXLinkage_External</name></decl>
}</block>;</enum>




<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXLinkageKind</name></name></type> <name>clang_getCursorLinkage</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>CXVisibilityKind</name> <block>{


<decl><name>CXVisibility_Invalid</name></decl>,


<decl><name>CXVisibility_Hidden</name></decl>,

<decl><name>CXVisibility_Protected</name></decl>,

<decl><name>CXVisibility_Default</name></decl>
}</block>;</enum>












<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXVisibilityKind</name></name></type> <name>clang_getCursorVisibility</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXAvailabilityKind</name></name></type>
<name>clang_getCursorAvailability</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><struct>struct <name>CXPlatformAvailability</name> <block>{






<decl_stmt><decl><type><name>CXString</name></type> <name>Platform</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXVersion</name></type> <name>Introduced</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CXVersion</name></type> <name>Deprecated</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CXVersion</name></type> <name>Obsoleted</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>Unavailable</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>CXString</name></type> <name>Message</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXPlatformAvailability</name>;</typedef>





































<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_getCursorPlatformAvailability</name><parameter_list>(
<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>always_deprecated</name></decl></parameter>, <parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>deprecated_message</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>always_unavailable</name></decl></parameter>, <parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>unavailable_message</name></decl></parameter>,
<parameter><decl><type><name>CXPlatformAvailability</name> <modifier>*</modifier></type><name>availability</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>availability_size</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type>
<name>clang_disposeCXPlatformAvailability</name><parameter_list>(<parameter><decl><type><name>CXPlatformAvailability</name> <modifier>*</modifier></type><name>availability</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_Cursor_getVarDeclInitializer</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Cursor_hasVarDeclGlobalStorage</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Cursor_hasVarDeclExternalStorage</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>




<enum>enum <name>CXLanguageKind</name> <block>{
<decl><name>CXLanguage_Invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXLanguage_C</name></decl>,
<decl><name>CXLanguage_ObjC</name></decl>,
<decl><name>CXLanguage_CPlusPlus</name></decl>
}</block>;</enum>




<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXLanguageKind</name></name></type> <name>clang_getCursorLanguage</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>CXTLSKind</name> <block>{ <decl><name>CXTLS_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>CXTLS_Dynamic</name></decl>, <decl><name>CXTLS_Static</name></decl> }</block>;</enum>





<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXTLSKind</name></name></type> <name>clang_getCursorTLSKind</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXTranslationUnit</name></type> <name>clang_Cursor_getTranslationUnit</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><name><name>struct</name> <name>CXCursorSetImpl</name></name> <modifier>*</modifier></type><name>CXCursorSet</name>;</typedef>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursorSet</name></type> <name>clang_createCXCursorSet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeCXCursorSet</name><parameter_list>(<parameter><decl><type><name>CXCursorSet</name></type> <name>cset</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXCursorSet_contains</name><parameter_list>(<parameter><decl><type><name>CXCursorSet</name></type> <name>cset</name></decl></parameter>,
<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXCursorSet_insert</name><parameter_list>(<parameter><decl><type><name>CXCursorSet</name></type> <name>cset</name></decl></parameter>,
<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>


































<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getCursorSemanticParent</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>



































<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getCursorLexicalParent</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>












































<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getOverriddenCursors</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><name>CXCursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>overridden</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>num_overridden</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeOverriddenCursors</name><parameter_list>(<parameter><decl><type><name>CXCursor</name> <modifier>*</modifier></type><name>overridden</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXFile</name></type> <name>clang_getIncludedFile</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getCursor</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>, <parameter><decl><type><name>CXSourceLocation</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getCursorLocation</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_getCursorExtent</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>














<enum>enum <name>CXTypeKind</name> <block>{



<decl><name>CXType_Invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,





<decl><name>CXType_Unexposed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>CXType_Void</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXType_Bool</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CXType_Char_U</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CXType_UChar</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CXType_Char16</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CXType_Char32</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CXType_UShort</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>CXType_UInt</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>CXType_ULong</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>CXType_ULongLong</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CXType_UInt128</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>CXType_Char_S</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>CXType_SChar</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>CXType_WChar</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>CXType_Short</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>CXType_Int</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>CXType_Long</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>CXType_LongLong</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>CXType_Int128</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>CXType_Float</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>CXType_Double</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>CXType_LongDouble</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>CXType_NullPtr</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>CXType_Overload</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>CXType_Dependent</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,
<decl><name>CXType_ObjCId</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,
<decl><name>CXType_ObjCClass</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,
<decl><name>CXType_ObjCSel</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,
<decl><name>CXType_Float128</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,
<decl><name>CXType_Half</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,
<decl><name>CXType_Float16</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,
<decl><name>CXType_ShortAccum</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,
<decl><name>CXType_Accum</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,
<decl><name>CXType_LongAccum</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,
<decl><name>CXType_UShortAccum</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,
<decl><name>CXType_UAccum</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>,
<decl><name>CXType_ULongAccum</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>,
<decl><name>CXType_BFloat16</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,
<decl><name>CXType_FirstBuiltin</name> <init>= <expr><name>CXType_Void</name></expr></init></decl>,
<decl><name>CXType_LastBuiltin</name> <init>= <expr><name>CXType_BFloat16</name></expr></init></decl>,

<decl><name>CXType_Complex</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>CXType_Pointer</name> <init>= <expr><literal type="number">101</literal></expr></init></decl>,
<decl><name>CXType_BlockPointer</name> <init>= <expr><literal type="number">102</literal></expr></init></decl>,
<decl><name>CXType_LValueReference</name> <init>= <expr><literal type="number">103</literal></expr></init></decl>,
<decl><name>CXType_RValueReference</name> <init>= <expr><literal type="number">104</literal></expr></init></decl>,
<decl><name>CXType_Record</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>,
<decl><name>CXType_Enum</name> <init>= <expr><literal type="number">106</literal></expr></init></decl>,
<decl><name>CXType_Typedef</name> <init>= <expr><literal type="number">107</literal></expr></init></decl>,
<decl><name>CXType_ObjCInterface</name> <init>= <expr><literal type="number">108</literal></expr></init></decl>,
<decl><name>CXType_ObjCObjectPointer</name> <init>= <expr><literal type="number">109</literal></expr></init></decl>,
<decl><name>CXType_FunctionNoProto</name> <init>= <expr><literal type="number">110</literal></expr></init></decl>,
<decl><name>CXType_FunctionProto</name> <init>= <expr><literal type="number">111</literal></expr></init></decl>,
<decl><name>CXType_ConstantArray</name> <init>= <expr><literal type="number">112</literal></expr></init></decl>,
<decl><name>CXType_Vector</name> <init>= <expr><literal type="number">113</literal></expr></init></decl>,
<decl><name>CXType_IncompleteArray</name> <init>= <expr><literal type="number">114</literal></expr></init></decl>,
<decl><name>CXType_VariableArray</name> <init>= <expr><literal type="number">115</literal></expr></init></decl>,
<decl><name>CXType_DependentSizedArray</name> <init>= <expr><literal type="number">116</literal></expr></init></decl>,
<decl><name>CXType_MemberPointer</name> <init>= <expr><literal type="number">117</literal></expr></init></decl>,
<decl><name>CXType_Auto</name> <init>= <expr><literal type="number">118</literal></expr></init></decl>,






<decl><name>CXType_Elaborated</name> <init>= <expr><literal type="number">119</literal></expr></init></decl>,


<decl><name>CXType_Pipe</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>,


<decl><name>CXType_OCLImage1dRO</name> <init>= <expr><literal type="number">121</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dArrayRO</name> <init>= <expr><literal type="number">122</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dBufferRO</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dRO</name> <init>= <expr><literal type="number">124</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayRO</name> <init>= <expr><literal type="number">125</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dDepthRO</name> <init>= <expr><literal type="number">126</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayDepthRO</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dMSAARO</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayMSAARO</name> <init>= <expr><literal type="number">129</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dMSAADepthRO</name> <init>= <expr><literal type="number">130</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayMSAADepthRO</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>,
<decl><name>CXType_OCLImage3dRO</name> <init>= <expr><literal type="number">132</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dWO</name> <init>= <expr><literal type="number">133</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dArrayWO</name> <init>= <expr><literal type="number">134</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dBufferWO</name> <init>= <expr><literal type="number">135</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dWO</name> <init>= <expr><literal type="number">136</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayWO</name> <init>= <expr><literal type="number">137</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dDepthWO</name> <init>= <expr><literal type="number">138</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayDepthWO</name> <init>= <expr><literal type="number">139</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dMSAAWO</name> <init>= <expr><literal type="number">140</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayMSAAWO</name> <init>= <expr><literal type="number">141</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dMSAADepthWO</name> <init>= <expr><literal type="number">142</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayMSAADepthWO</name> <init>= <expr><literal type="number">143</literal></expr></init></decl>,
<decl><name>CXType_OCLImage3dWO</name> <init>= <expr><literal type="number">144</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dRW</name> <init>= <expr><literal type="number">145</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dArrayRW</name> <init>= <expr><literal type="number">146</literal></expr></init></decl>,
<decl><name>CXType_OCLImage1dBufferRW</name> <init>= <expr><literal type="number">147</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dRW</name> <init>= <expr><literal type="number">148</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayRW</name> <init>= <expr><literal type="number">149</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dDepthRW</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayDepthRW</name> <init>= <expr><literal type="number">151</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dMSAARW</name> <init>= <expr><literal type="number">152</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayMSAARW</name> <init>= <expr><literal type="number">153</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dMSAADepthRW</name> <init>= <expr><literal type="number">154</literal></expr></init></decl>,
<decl><name>CXType_OCLImage2dArrayMSAADepthRW</name> <init>= <expr><literal type="number">155</literal></expr></init></decl>,
<decl><name>CXType_OCLImage3dRW</name> <init>= <expr><literal type="number">156</literal></expr></init></decl>,
<decl><name>CXType_OCLSampler</name> <init>= <expr><literal type="number">157</literal></expr></init></decl>,
<decl><name>CXType_OCLEvent</name> <init>= <expr><literal type="number">158</literal></expr></init></decl>,
<decl><name>CXType_OCLQueue</name> <init>= <expr><literal type="number">159</literal></expr></init></decl>,
<decl><name>CXType_OCLReserveID</name> <init>= <expr><literal type="number">160</literal></expr></init></decl>,

<decl><name>CXType_ObjCObject</name> <init>= <expr><literal type="number">161</literal></expr></init></decl>,
<decl><name>CXType_ObjCTypeParam</name> <init>= <expr><literal type="number">162</literal></expr></init></decl>,
<decl><name>CXType_Attributed</name> <init>= <expr><literal type="number">163</literal></expr></init></decl>,

<decl><name>CXType_OCLIntelSubgroupAVCMcePayload</name> <init>= <expr><literal type="number">164</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCImePayload</name> <init>= <expr><literal type="number">165</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCRefPayload</name> <init>= <expr><literal type="number">166</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCSicPayload</name> <init>= <expr><literal type="number">167</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCMceResult</name> <init>= <expr><literal type="number">168</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCImeResult</name> <init>= <expr><literal type="number">169</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCRefResult</name> <init>= <expr><literal type="number">170</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCSicResult</name> <init>= <expr><literal type="number">171</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout</name> <init>= <expr><literal type="number">172</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout</name> <init>= <expr><literal type="number">173</literal></expr></init></decl>,
<decl><name>CXType_OCLIntelSubgroupAVCImeSingleRefStreamin</name> <init>= <expr><literal type="number">174</literal></expr></init></decl>,

<decl><name>CXType_OCLIntelSubgroupAVCImeDualRefStreamin</name> <init>= <expr><literal type="number">175</literal></expr></init></decl>,

<decl><name>CXType_ExtVector</name> <init>= <expr><literal type="number">176</literal></expr></init></decl>,
<decl><name>CXType_Atomic</name> <init>= <expr><literal type="number">177</literal></expr></init></decl>
}</block>;</enum>




<enum>enum <name>CXCallingConv</name> <block>{
<decl><name>CXCallingConv_Default</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXCallingConv_C</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXCallingConv_X86StdCall</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXCallingConv_X86FastCall</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CXCallingConv_X86ThisCall</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CXCallingConv_X86Pascal</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CXCallingConv_AAPCS</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CXCallingConv_AAPCS_VFP</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CXCallingConv_X86RegCall</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>CXCallingConv_IntelOclBicc</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>CXCallingConv_Win64</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>CXCallingConv_X86_64Win64</name> <init>= <expr><name>CXCallingConv_Win64</name></expr></init></decl>,
<decl><name>CXCallingConv_X86_64SysV</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CXCallingConv_X86VectorCall</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>CXCallingConv_Swift</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>CXCallingConv_PreserveMost</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>CXCallingConv_PreserveAll</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,
<decl><name>CXCallingConv_AArch64VectorCall</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>CXCallingConv_SwiftAsync</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,

<decl><name>CXCallingConv_Invalid</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,
<decl><name>CXCallingConv_Unexposed</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>
}</block>;</enum>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>CXTypeKind</name></name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CXType</name>;</typedef>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getCursorType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getTypeSpelling</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>CT</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getTypedefDeclUnderlyingType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getEnumDeclIntegerType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_getEnumConstantDeclValue</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>clang_getEnumConstantDeclUnsignedValue</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_getFieldDeclBitWidth</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Cursor_getNumArguments</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_Cursor_getArgument</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>







<enum>enum <name>CXTemplateArgumentKind</name> <block>{
<decl><name>CXTemplateArgumentKind_Null</name></decl>,
<decl><name>CXTemplateArgumentKind_Type</name></decl>,
<decl><name>CXTemplateArgumentKind_Declaration</name></decl>,
<decl><name>CXTemplateArgumentKind_NullPtr</name></decl>,
<decl><name>CXTemplateArgumentKind_Integral</name></decl>,
<decl><name>CXTemplateArgumentKind_Template</name></decl>,
<decl><name>CXTemplateArgumentKind_TemplateExpansion</name></decl>,
<decl><name>CXTemplateArgumentKind_Expression</name></decl>,
<decl><name>CXTemplateArgumentKind_Pack</name></decl>,

<decl><name>CXTemplateArgumentKind_Invalid</name></decl>
}</block>;</enum>

















<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Cursor_getNumTemplateArguments</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXTemplateArgumentKind</name></name></type>
<name>clang_Cursor_getTemplateArgumentKind</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Cursor_getTemplateArgumentType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_Cursor_getTemplateArgumentValue</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>clang_Cursor_getTemplateArgumentUnsignedValue</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_equalTypes</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>CXType</name></type> <name>B</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getCanonicalType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isConstQualifiedType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isMacroFunctionLike</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isMacroBuiltin</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isFunctionInlined</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isVolatileQualifiedType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isRestrictQualifiedType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_getAddressSpace</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getTypedefName</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>CT</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getPointeeType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getTypeDeclaration</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getDeclObjCTypeEncoding</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Type_getObjCEncoding</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getTypeKindSpelling</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXTypeKind</name></name></type> <name>K</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXCallingConv</name></name></type> <name>clang_getFunctionTypeCallingConv</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getResultType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_getExceptionSpecificationType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_getNumArgTypes</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getArgType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Type_getObjCObjectBaseType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Type_getNumObjCProtocolRefs</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_Type_getObjCProtocolDecl</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Type_getNumObjCTypeArgs</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Type_getObjCTypeArg</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isFunctionTypeVariadic</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getCursorResultType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_getCursorExceptionSpecificationType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isPODType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getElementType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_getNumElements</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getArrayElementType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_getArraySize</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Type_getNamedType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Type_isTransparentTagTypedef</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>CXTypeNullabilityKind</name> <block>{



<decl><name>CXTypeNullability_NonNull</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,



<decl><name>CXTypeNullability_Nullable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,






<decl><name>CXTypeNullability_Unspecified</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,



<decl><name>CXTypeNullability_Invalid</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,







<decl><name>CXTypeNullability_NullableResult</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>




<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXTypeNullabilityKind</name></name></type> <name>clang_Type_getNullability</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>









<enum>enum <name>CXTypeLayoutError</name> <block>{



<decl><name>CXTypeLayoutError_Invalid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,



<decl><name>CXTypeLayoutError_Incomplete</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,



<decl><name>CXTypeLayoutError_Dependent</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,



<decl><name>CXTypeLayoutError_NotConstantSize</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>,



<decl><name>CXTypeLayoutError_InvalidFieldName</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,



<decl><name>CXTypeLayoutError_Undeduced</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>
}</block>;</enum>













<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_Type_getAlignOf</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Type_getClassType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_Type_getSizeOf</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_Type_getOffsetOf</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Type_getModifiedType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Type_getValueType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>CT</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_Cursor_getOffsetOfField</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isAnonymous</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isAnonymousRecordDecl</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isInlineNamespace</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>CXRefQualifierKind</name> <block>{

<decl><name>CXRefQualifier_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CXRefQualifier_LValue</name></decl>,

<decl><name>CXRefQualifier_RValue</name></decl>
}</block>;</enum>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Type_getNumTemplateArguments</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Type_getTemplateArgumentAsType</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXRefQualifierKind</name></name></type> <name>clang_Type_getCXXRefQualifier</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isBitField</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isVirtualBase</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>CX_CXXAccessSpecifier</name> <block>{
<decl><name>CX_CXXInvalidAccessSpecifier</name></decl>,
<decl><name>CX_CXXPublic</name></decl>,
<decl><name>CX_CXXProtected</name></decl>,
<decl><name>CX_CXXPrivate</name></decl>
}</block>;</enum>








<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CX_CXXAccessSpecifier</name></name></type> <name>clang_getCXXAccessSpecifier</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>





<enum>enum <name>CX_StorageClass</name> <block>{
<decl><name>CX_SC_Invalid</name></decl>,
<decl><name>CX_SC_None</name></decl>,
<decl><name>CX_SC_Extern</name></decl>,
<decl><name>CX_SC_Static</name></decl>,
<decl><name>CX_SC_PrivateExtern</name></decl>,
<decl><name>CX_SC_OpenCLWorkGroupLocal</name></decl>,
<decl><name>CX_SC_Auto</name></decl>,
<decl><name>CX_SC_Register</name></decl>
}</block>;</enum>







<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CX_StorageClass</name></name></type> <name>clang_Cursor_getStorageClass</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_getNumOverloadedDecls</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getOverloadedDecl</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_getIBOutletCollectionType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>





















<enum>enum <name>CXChildVisitResult</name> <block>{



<decl><name>CXChildVisit_Break</name></decl>,




<decl><name>CXChildVisit_Continue</name></decl>,




<decl><name>CXChildVisit_Recurse</name></decl>
}</block>;</enum>













<typedef>typedef <function_decl><type><name><name>enum</name> <name>CXChildVisitResult</name></name></type> (<modifier>*</modifier><name>CXCursorVisitor</name>)<parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><name>CXCursor</name></type> <name>parent</name></decl></parameter>,
<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>























<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_visitChildren</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>parent</name></decl></parameter>,
<parameter><decl><type><name>CXCursorVisitor</name></type> <name>visitor</name></decl></parameter>,
<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></cpp:if>










<typedef>typedef <function_decl><type><name><name>enum</name> <name>CXChildVisitResult</name></name></type> (<modifier>^</modifier><name>CXCursorVisitorBlock</name>)<parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>,
<parameter><decl><type><name>CXCursor</name></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl></typedef>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_visitChildrenWithBlock</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>CXCursorVisitorBlock</name></type> <name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

























<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCursorUSR</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_constructUSR_ObjCClass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_constructUSR_ObjCCategory</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category_name</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_constructUSR_ObjCProtocol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protocol_name</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_constructUSR_ObjCIvar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>CXString</name></type> <name>classUSR</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_constructUSR_ObjCMethod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>isInstanceMethod</name></decl></parameter>,
<parameter><decl><type><name>CXString</name></type> <name>classUSR</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_constructUSR_ObjCProperty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>property</name></decl></parameter>,
<parameter><decl><type><name>CXString</name></type> <name>classUSR</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCursorSpelling</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_Cursor_getSpellingNameRange</name><parameter_list>(
<parameter><decl><type><name>CXCursor</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>pieceIndex</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXPrintingPolicy</name>;</typedef>






<enum>enum <name>CXPrintingPolicyProperty</name> <block>{
<decl><name>CXPrintingPolicy_Indentation</name></decl>,
<decl><name>CXPrintingPolicy_SuppressSpecifiers</name></decl>,
<decl><name>CXPrintingPolicy_SuppressTagKeyword</name></decl>,
<decl><name>CXPrintingPolicy_IncludeTagDefinition</name></decl>,
<decl><name>CXPrintingPolicy_SuppressScope</name></decl>,
<decl><name>CXPrintingPolicy_SuppressUnwrittenScope</name></decl>,
<decl><name>CXPrintingPolicy_SuppressInitializers</name></decl>,
<decl><name>CXPrintingPolicy_ConstantArraySizeAsWritten</name></decl>,
<decl><name>CXPrintingPolicy_AnonymousTagLocations</name></decl>,
<decl><name>CXPrintingPolicy_SuppressStrongLifetime</name></decl>,
<decl><name>CXPrintingPolicy_SuppressLifetimeQualifiers</name></decl>,
<decl><name>CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors</name></decl>,
<decl><name>CXPrintingPolicy_Bool</name></decl>,
<decl><name>CXPrintingPolicy_Restrict</name></decl>,
<decl><name>CXPrintingPolicy_Alignof</name></decl>,
<decl><name>CXPrintingPolicy_UnderscoreAlignof</name></decl>,
<decl><name>CXPrintingPolicy_UseVoidForZeroParams</name></decl>,
<decl><name>CXPrintingPolicy_TerseOutput</name></decl>,
<decl><name>CXPrintingPolicy_PolishForDeclaration</name></decl>,
<decl><name>CXPrintingPolicy_Half</name></decl>,
<decl><name>CXPrintingPolicy_MSWChar</name></decl>,
<decl><name>CXPrintingPolicy_IncludeNewlines</name></decl>,
<decl><name>CXPrintingPolicy_MSVCFormatting</name></decl>,
<decl><name>CXPrintingPolicy_ConstantsAsWritten</name></decl>,
<decl><name>CXPrintingPolicy_SuppressImplicitBase</name></decl>,
<decl><name>CXPrintingPolicy_FullyQualifiedName</name></decl>,

<decl><name>CXPrintingPolicy_LastProperty</name> <init>= <expr><name>CXPrintingPolicy_FullyQualifiedName</name></expr></init></decl>
}</block>;</enum>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_PrintingPolicy_getProperty</name><parameter_list>(<parameter><decl><type><name>CXPrintingPolicy</name></type> <name>Policy</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>CXPrintingPolicyProperty</name></name></type> <name>Property</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type>
<name>clang_PrintingPolicy_setProperty</name><parameter_list>(<parameter><decl><type><name>CXPrintingPolicy</name></type> <name>Policy</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>CXPrintingPolicyProperty</name></name></type> <name>Property</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Value</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXPrintingPolicy</name></type> <name>clang_getCursorPrintingPolicy</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_PrintingPolicy_dispose</name><parameter_list>(<parameter><decl><type><name>CXPrintingPolicy</name></type> <name>Policy</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCursorPrettyPrinted</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>Cursor</name></decl></parameter>,
<parameter><decl><type><name>CXPrintingPolicy</name></type> <name>Policy</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCursorDisplayName</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getCursorReferenced</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getCursorDefinition</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_isCursorDefinition</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>

























<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getCanonicalCursor</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Cursor_getObjCSelectorIndex</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Cursor_isDynamicCall</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXType</name></type> <name>clang_Cursor_getReceiverType</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<typedef>typedef <type><enum>enum <block>{
<decl><name>CXObjCPropertyAttr_noattr</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_readonly</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_getter</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_assign</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_readwrite</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_retain</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_copy</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_nonatomic</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_setter</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_atomic</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_weak</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_strong</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_unsafe_unretained</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>,
<decl><name>CXObjCPropertyAttr_class</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>
}</block></enum></type> <name>CXObjCPropertyAttrKind</name>;</typedef>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_Cursor_getObjCPropertyAttributes</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Cursor_getObjCPropertyGetterName</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Cursor_getObjCPropertySetterName</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><enum>enum <block>{
<decl><name>CXObjCDeclQualifier_None</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
<decl><name>CXObjCDeclQualifier_In</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>CXObjCDeclQualifier_Inout</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>CXObjCDeclQualifier_Out</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>CXObjCDeclQualifier_Bycopy</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>CXObjCDeclQualifier_Byref</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>CXObjCDeclQualifier_Oneway</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>
}</block></enum></type> <name>CXObjCDeclQualifierKind</name>;</typedef>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_getObjCDeclQualifiers</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isObjCOptional</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isVariadic</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Cursor_isExternalSymbol</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>,
<parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>language</name></decl></parameter>,
<parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>definedIn</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>isGenerated</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_Cursor_getCommentRange</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Cursor_getRawCommentText</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Cursor_getBriefCommentText</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Cursor_getMangling</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXStringSet</name> <modifier>*</modifier></type><name>clang_Cursor_getCXXManglings</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXStringSet</name> <modifier>*</modifier></type><name>clang_Cursor_getObjCManglings</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>)</parameter_list>;</function_decl>













<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXModule</name>;</typedef>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXModule</name></type> <name>clang_Cursor_getModule</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXModule</name></type> <name>clang_getModuleForFile</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>, <parameter><decl><type><name>CXFile</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXFile</name></type> <name>clang_Module_getASTFile</name><parameter_list>(<parameter><decl><type><name>CXModule</name></type> <name>Module</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXModule</name></type> <name>clang_Module_getParent</name><parameter_list>(<parameter><decl><type><name>CXModule</name></type> <name>Module</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Module_getName</name><parameter_list>(<parameter><decl><type><name>CXModule</name></type> <name>Module</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_Module_getFullName</name><parameter_list>(<parameter><decl><type><name>CXModule</name></type> <name>Module</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_Module_isSystem</name><parameter_list>(<parameter><decl><type><name>CXModule</name></type> <name>Module</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Module_getNumTopLevelHeaders</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>,
<parameter><decl><type><name>CXModule</name></type> <name>Module</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXFile</name></type> <name>clang_Module_getTopLevelHeader</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>, <parameter><decl><type><name>CXModule</name></type> <name>Module</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Index</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_CXXConstructor_isConvertingConstructor</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXConstructor_isCopyConstructor</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXConstructor_isDefaultConstructor</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXConstructor_isMoveConstructor</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXField_isMutable</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXMethod_isDefaulted</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXMethod_isPureVirtual</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXMethod_isStatic</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXMethod_isVirtual</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXRecord_isAbstract</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_EnumDecl_isScoped</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_CXXMethod_isConst</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXCursorKind</name></name></type> <name>clang_getTemplateCursorKind</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>





























<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCursor</name></type> <name>clang_getSpecializedCursorTemplate</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>



















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_getCursorReferenceNameRange</name><parameter_list>(
<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NameFlags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>PieceIndex</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>CXNameRefFlags</name> <block>{




<decl><name>CXNameRange_WantQualifier</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,





<decl><name>CXNameRange_WantTemplateArgs</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,











<decl><name>CXNameRange_WantSinglePiece</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>
}</block>;</enum>


















<typedef>typedef <type><enum>enum <name>CXTokenKind</name> <block>{



<decl><name>CXToken_Punctuation</name></decl>,




<decl><name>CXToken_Keyword</name></decl>,




<decl><name>CXToken_Identifier</name></decl>,




<decl><name>CXToken_Literal</name></decl>,




<decl><name>CXToken_Comment</name></decl>
}</block></enum></type> <name>CXTokenKind</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>int_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXToken</name>;</typedef>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXToken</name> <modifier>*</modifier></type><name>clang_getToken</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>,
<parameter><decl><type><name>CXSourceLocation</name></type> <name>Location</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXTokenKind</name></type> <name>clang_getTokenKind</name><parameter_list>(<parameter><decl><type><name>CXToken</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getTokenSpelling</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>, <parameter><decl><type><name>CXToken</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceLocation</name></type> <name>clang_getTokenLocation</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>,
<parameter><decl><type><name>CXToken</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXSourceRange</name></type> <name>clang_getTokenExtent</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>, <parameter><decl><type><name>CXToken</name></type></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_tokenize</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>, <parameter><decl><type><name>CXSourceRange</name></type> <name>Range</name></decl></parameter>,
<parameter><decl><type><name>CXToken</name> <modifier>*</modifier><modifier>*</modifier></type><name>Tokens</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>NumTokens</name></decl></parameter>)</parameter_list>;</function_decl>































<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_annotateTokens</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>, <parameter><decl><type><name>CXToken</name> <modifier>*</modifier></type><name>Tokens</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>NumTokens</name></decl></parameter>, <parameter><decl><type><name>CXCursor</name> <modifier>*</modifier></type><name>Cursors</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_disposeTokens</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>, <parameter><decl><type><name>CXToken</name> <modifier>*</modifier></type><name>Tokens</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>NumTokens</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCursorKindSpelling</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getDefinitionSpellingAndExtent</name><parameter_list>(
<parameter><decl><type><name>CXCursor</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>startBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endBuf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>startLine</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>startColumn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>endLine</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>endColumn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_enableStackTraces</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_executeOnThread</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>stack_size</name></decl></parameter>)</parameter_list>;</function_decl>






























<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXCompletionString</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{










<decl_stmt><decl><type><name><name>enum</name> <name>CXCursorKind</name></name></type> <name>CursorKind</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>CXCompletionString</name></type> <name>CompletionString</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXCompletionResult</name>;</typedef>








<enum>enum <name>CXCompletionChunkKind</name> <block>{

































<decl><name>CXCompletionChunk_Optional</name></decl>,










<decl><name>CXCompletionChunk_TypedText</name></decl>,







<decl><name>CXCompletionChunk_Text</name></decl>,










<decl><name>CXCompletionChunk_Placeholder</name></decl>,









<decl><name>CXCompletionChunk_Informative</name></decl>,



















<decl><name>CXCompletionChunk_CurrentParameter</name></decl>,




<decl><name>CXCompletionChunk_LeftParen</name></decl>,




<decl><name>CXCompletionChunk_RightParen</name></decl>,



<decl><name>CXCompletionChunk_LeftBracket</name></decl>,



<decl><name>CXCompletionChunk_RightBracket</name></decl>,



<decl><name>CXCompletionChunk_LeftBrace</name></decl>,



<decl><name>CXCompletionChunk_RightBrace</name></decl>,



<decl><name>CXCompletionChunk_LeftAngle</name></decl>,



<decl><name>CXCompletionChunk_RightAngle</name></decl>,



<decl><name>CXCompletionChunk_Comma</name></decl>,







<decl><name>CXCompletionChunk_ResultType</name></decl>,



<decl><name>CXCompletionChunk_Colon</name></decl>,



<decl><name>CXCompletionChunk_SemiColon</name></decl>,



<decl><name>CXCompletionChunk_Equal</name></decl>,



<decl><name>CXCompletionChunk_HorizontalSpace</name></decl>,




<decl><name>CXCompletionChunk_VerticalSpace</name></decl>
}</block>;</enum>










<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXCompletionChunkKind</name></name></type>
<name>clang_getCompletionChunkKind</name><parameter_list>(<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>chunk_number</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCompletionChunkText</name><parameter_list>(
<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>chunk_number</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCompletionString</name></type> <name>clang_getCompletionChunkCompletionString</name><parameter_list>(
<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>chunk_number</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_getNumCompletionChunks</name><parameter_list>(<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_getCompletionPriority</name><parameter_list>(<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name><name>enum</name> <name>CXAvailabilityKind</name></name></type>
<name>clang_getCompletionAvailability</name><parameter_list>(<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_getCompletionNumAnnotations</name><parameter_list>(<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCompletionAnnotation</name><parameter_list>(
<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>annotation_number</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCompletionParent</name><parameter_list>(
<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>CXCursorKind</name></name> <modifier>*</modifier></type><name>kind</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_getCompletionBriefComment</name><parameter_list>(<parameter><decl><type><name>CXCompletionString</name></type> <name>completion_string</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCompletionString</name></type>
<name>clang_getCursorCompletionString</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>








<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><name>CXCompletionResult</name> <modifier>*</modifier></type><name>Results</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>NumResults</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXCodeCompleteResults</name>;</typedef>














<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_getCompletionNumFixIts</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>results</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>completion_index</name></decl></parameter>)</parameter_list>;</function_decl>












































<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getCompletionFixIt</name><parameter_list>(
<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>results</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>completion_index</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>fixit_index</name></decl></parameter>, <parameter><decl><type><name>CXSourceRange</name> <modifier>*</modifier></type><name>replacement_range</name></decl></parameter>)</parameter_list>;</function_decl>








<enum>enum <name>CXCodeComplete_Flags</name> <block>{




<decl><name>CXCodeComplete_IncludeMacros</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,





<decl><name>CXCodeComplete_IncludeCodePatterns</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,





<decl><name>CXCodeComplete_IncludeBriefComments</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,






<decl><name>CXCodeComplete_SkipPreamble</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,





<decl><name>CXCodeComplete_IncludeCompletionsWithFixIts</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>
}</block>;</enum>







<enum>enum <name>CXCompletionContext</name> <block>{




<decl><name>CXCompletionContext_Unexposed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,




<decl><name>CXCompletionContext_AnyType</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,





<decl><name>CXCompletionContext_AnyValue</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCObjectValue</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCSelectorValue</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,




<decl><name>CXCompletionContext_CXXClassTypeValue</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,





<decl><name>CXCompletionContext_DotMemberAccess</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ArrowMemberAccess</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCPropertyAccess</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,




<decl><name>CXCompletionContext_EnumTag</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>,



<decl><name>CXCompletionContext_UnionTag</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>,



<decl><name>CXCompletionContext_StructTag</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ClassTag</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr></init></decl>,




<decl><name>CXCompletionContext_Namespace</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr></init></decl>,




<decl><name>CXCompletionContext_NestedNameSpecifier</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></init></decl>,





<decl><name>CXCompletionContext_ObjCInterface</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCProtocol</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCCategory</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCInstanceMessage</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCClassMessage</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr></init></decl>,




<decl><name>CXCompletionContext_ObjCSelectorName</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr></init></decl>,





<decl><name>CXCompletionContext_MacroName</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></init></decl>,




<decl><name>CXCompletionContext_NaturalLanguage</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></init></decl>,




<decl><name>CXCompletionContext_IncludedFile</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr></init></decl>,




<decl><name>CXCompletionContext_Unknown</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>
}</block>;</enum>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_defaultCodeCompleteOptions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>





































































<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXCodeCompleteResults</name> <modifier>*</modifier></type>
<name>clang_codeCompleteAt</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_filename</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>complete_line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>complete_column</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>CINDEX_LINKAGE</name>
<name>void</name></type> <name>clang_sortCodeCompletionResults</name><parameter_list>(<parameter><decl><type><name>CXCompletionResult</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>NumResults</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name>
<name>void</name></type> <name>clang_disposeCodeCompleteResults</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name>
<name>unsigned</name></type> <name>clang_codeCompleteGetNumDiagnostics</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXDiagnostic</name></type> <name>clang_codeCompleteGetDiagnostic</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Index</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name>
<name>unsigned</name> <name>long</name> <name>long</name></type>
<name>clang_codeCompleteGetContexts</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>CINDEX_LINKAGE</name>
<name><name>enum</name> <name>CXCursorKind</name></name></type>
<name>clang_codeCompleteGetContainerKind</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>IsIncomplete</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXString</name></type> <name>clang_codeCompleteGetContainerUSR</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXString</name></type> <name>clang_codeCompleteGetObjCSelector</name><parameter_list>(<parameter><decl><type><name>CXCodeCompleteResults</name> <modifier>*</modifier></type><name>Results</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type> <name>clang_getClangVersion</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_toggleCrashRecovery</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>isEnabled</name></decl></parameter>)</parameter_list>;</function_decl>












<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CXInclusionVisitor</name>)<parameter_list>(<parameter><decl><type><name>CXFile</name></type> <name>included_file</name></decl></parameter>,
<parameter><decl><type><name>CXSourceLocation</name> <modifier>*</modifier></type><name>inclusion_stack</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>include_len</name></decl></parameter>,
<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_getInclusions</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type> <name>tu</name></decl></parameter>,
<parameter><decl><type><name>CXInclusionVisitor</name></type> <name>visitor</name></decl></parameter>,
<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{
<decl><name>CXEval_Int</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXEval_Float</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXEval_ObjCStrLiteral</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CXEval_StrLiteral</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CXEval_CFStr</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>CXEval_Other</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>CXEval_UnExposed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>

}</block></enum></type> <name>CXEvalResultKind</name>;</typedef>




<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXEvalResult</name>;</typedef>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXEvalResult</name></type> <name>clang_Cursor_Evaluate</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXEvalResultKind</name></type> <name>clang_EvalResult_getKind</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_EvalResult_getAsInt</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>long</name> <name>long</name></type> <name>clang_EvalResult_getAsLongLong</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_EvalResult_isUnsignedInt</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name> <name>long</name> <name>long</name></type>
<name>clang_EvalResult_getAsUnsigned</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>double</name></type> <name>clang_EvalResult_getAsDouble</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clang_EvalResult_getAsStr</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_EvalResult_dispose</name><parameter_list>(<parameter><decl><type><name>CXEvalResult</name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>












<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXRemapping</name>;</typedef>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXRemapping</name></type> <name>clang_getRemappings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXRemapping</name></type> <name>clang_getRemappingsFromFileList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filePaths</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>numFiles</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_remap_getNumFiles</name><parameter_list>(<parameter><decl><type><name>CXRemapping</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_remap_getFilenames</name><parameter_list>(<parameter><decl><type><name>CXRemapping</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>,
<parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>original</name></decl></parameter>,
<parameter><decl><type><name>CXString</name> <modifier>*</modifier></type><name>transformed</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_remap_dispose</name><parameter_list>(<parameter><decl><type><name>CXRemapping</name></type></decl></parameter>)</parameter_list>;</function_decl>










<enum>enum <name>CXVisitorResult</name> <block>{ <decl><name>CXVisit_Break</name></decl>, <decl><name>CXVisit_Continue</name></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct <name>CXCursorAndRangeVisitor</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
<function_decl><type><name><name>enum</name> <name>CXVisitorResult</name></name></type> (<modifier>*</modifier><name>visit</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>CXCursor</name></type></decl></parameter>, <parameter><decl><type><name>CXSourceRange</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>CXCursorAndRangeVisitor</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{



<decl><name>CXResult_Success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,



<decl><name>CXResult_Invalid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,




<decl><name>CXResult_VisitBreak</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block></enum></type> <name>CXResult</name>;</typedef>















<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXResult</name></type> <name>clang_findReferencesInFile</name><parameter_list>(
<parameter><decl><type><name>CXCursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>CXCursorAndRangeVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXResult</name></type> <name>clang_findIncludesInFile</name><parameter_list>(
<parameter><decl><type><name>CXTranslationUnit</name></type> <name>TU</name></decl></parameter>, <parameter><decl><type><name>CXFile</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>CXCursorAndRangeVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <function_decl><type><name><name>enum</name> <name>CXVisitorResult</name></name></type> (<modifier>^</modifier><name>CXCursorAndRangeVisitorBlock</name>)<parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>,
<parameter><decl><type><name>CXSourceRange</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXResult</name></type> <name>clang_findReferencesInFileWithBlock</name><parameter_list>(<parameter><decl><type><name>CXCursor</name></type></decl></parameter>, <parameter><decl><type><name>CXFile</name></type></decl></parameter>,
<parameter><decl><type><name>CXCursorAndRangeVisitorBlock</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXResult</name></type> <name>clang_findIncludesInFileWithBlock</name><parameter_list>(<parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>, <parameter><decl><type><name>CXFile</name></type></decl></parameter>,
<parameter><decl><type><name>CXCursorAndRangeVisitorBlock</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXIdxClientFile</name>;</typedef>




<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXIdxClientEntity</name>;</typedef>





<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXIdxClientContainer</name>;</typedef>





<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXIdxClientASTFile</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ptr_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>int_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxLoc</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>hashLoc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXFile</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isImport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isAngled</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>isModuleImport</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxIncludedFileInfo</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><name>CXFile</name></type> <name>file</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXModule</name></type> <name>module</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>isImplicit</name></decl>;</decl_stmt>

}</block></struct></type> <name>CXIdxImportedASTFileInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>CXIdxEntity_Unexposed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXIdxEntity_Typedef</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXIdxEntity_Function</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXIdxEntity_Variable</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CXIdxEntity_Field</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>CXIdxEntity_EnumConstant</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>CXIdxEntity_ObjCClass</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>CXIdxEntity_ObjCProtocol</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>CXIdxEntity_ObjCCategory</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>CXIdxEntity_ObjCInstanceMethod</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>CXIdxEntity_ObjCClassMethod</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>CXIdxEntity_ObjCProperty</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>CXIdxEntity_ObjCIvar</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,

<decl><name>CXIdxEntity_Enum</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>CXIdxEntity_Struct</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>CXIdxEntity_Union</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,

<decl><name>CXIdxEntity_CXXClass</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXNamespace</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXNamespaceAlias</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXStaticVariable</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXStaticMethod</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXInstanceMethod</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXConstructor</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXDestructor</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXConversionFunction</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXTypeAlias</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,
<decl><name>CXIdxEntity_CXXInterface</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>

}</block></enum></type> <name>CXIdxEntityKind</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>CXIdxEntityLang_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXIdxEntityLang_C</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXIdxEntityLang_ObjC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXIdxEntityLang_CXX</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>CXIdxEntityLang_Swift</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>CXIdxEntityLanguage</name>;</typedef>











<typedef>typedef <type><enum>enum <block>{
<decl><name>CXIdxEntity_NonTemplate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXIdxEntity_Template</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXIdxEntity_TemplatePartialSpecialization</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXIdxEntity_TemplateSpecialization</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>CXIdxEntityCXXTemplateKind</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>CXIdxAttr_Unexposed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXIdxAttr_IBAction</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXIdxAttr_IBOutlet</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>CXIdxAttr_IBOutletCollection</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>CXIdxAttrKind</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>CXIdxAttrKind</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxAttrInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>CXIdxEntityKind</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxEntityCXXTemplateKind</name></type> <name>templateKind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxEntityLanguage</name></type> <name>lang</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>USR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxAttrInfo</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numAttributes</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxEntityInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>CXCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxContainerInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxAttrInfo</name> <modifier>*</modifier></type><name>attrInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>objcClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXCursor</name></type> <name>classCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>classLoc</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxIBOutletCollectionAttrInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>CXIdxDeclFlag_Skipped</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl> }</block></enum></type> <name>CXIdxDeclInfoFlags</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>entityInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxContainerInfo</name> <modifier>*</modifier></type><name>semanticContainer</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxContainerInfo</name> <modifier>*</modifier></type><name>lexicalContainer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isRedeclaration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isDefinition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isContainer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxContainerInfo</name> <modifier>*</modifier></type><name>declAsContainer</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>int</name></type> <name>isImplicit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxAttrInfo</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numAttributes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>CXIdxDeclInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>CXIdxObjCContainer_ForwardRef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXIdxObjCContainer_Interface</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>CXIdxObjCContainer_Implementation</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>CXIdxObjCContainerKind</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type><name>declInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxObjCContainerKind</name></type> <name>kind</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxObjCContainerDeclInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxBaseClassInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxObjCProtocolRefInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxObjCProtocolRefInfo</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>protocols</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numProtocols</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxObjCProtocolRefListInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxObjCContainerDeclInfo</name> <modifier>*</modifier></type><name>containerInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxBaseClassInfo</name> <modifier>*</modifier></type><name>superInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxObjCProtocolRefListInfo</name> <modifier>*</modifier></type><name>protocols</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxObjCInterfaceDeclInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxObjCContainerDeclInfo</name> <modifier>*</modifier></type><name>containerInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>objcClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXCursor</name></type> <name>classCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>classLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxObjCProtocolRefListInfo</name> <modifier>*</modifier></type><name>protocols</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxObjCCategoryDeclInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type><name>declInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>getter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>setter</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxObjCPropertyDeclInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type><name>declInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxBaseClassInfo</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>bases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>numBases</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxCXXClassDeclInfo</name>;</typedef>







<typedef>typedef <type><enum>enum <block>{



<decl><name>CXIdxEntityRef_Direct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,




<decl><name>CXIdxEntityRef_Implicit</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>CXIdxEntityRefKind</name>;</typedef>







<typedef>typedef <type><enum>enum <block>{
<decl><name>CXSymbolRole_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Declaration</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Definition</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Reference</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Read</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Write</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Call</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Dynamic</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
<decl><name>CXSymbolRole_AddressOf</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
<decl><name>CXSymbolRole_Implicit</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>CXSymbolRole</name>;</typedef>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>CXIdxEntityRefKind</name></type> <name>kind</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXCursor</name></type> <name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>referencedEntity</name></decl>;</decl_stmt>











<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type><name>parentEntity</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>CXIdxContainerInfo</name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXSymbolRole</name></type> <name>role</name></decl>;</decl_stmt>
}</block></struct></type> <name>CXIdxEntityRefInfo</name>;</typedef>





<typedef>typedef <type><struct>struct <block>{




<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>abortQuery</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>diagnostic</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>CXDiagnosticSet</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CXIdxClientFile</name></type> (<modifier>*</modifier><name>enteredMainFile</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>CXFile</name></type> <name>mainFile</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CXIdxClientFile</name></type> (<modifier>*</modifier><name>ppIncludedFile</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXIdxIncludedFileInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CXIdxClientASTFile</name></type> (<modifier>*</modifier><name>importedASTFile</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXIdxImportedASTFileInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CXIdxClientContainer</name></type> (<modifier>*</modifier><name>startedTranslationUnit</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reserved</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>indexDeclaration</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>indexEntityReference</name>)<parameter_list>(<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXIdxEntityRefInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>IndexerCallbacks</name>;</typedef>

<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_index_isEntityObjCContainerKind</name><parameter_list>(<parameter><decl><type><name>CXIdxEntityKind</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>CXIdxObjCContainerDeclInfo</name> <modifier>*</modifier></type>
<name>clang_index_getObjCContainerDeclInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>CXIdxObjCInterfaceDeclInfo</name> <modifier>*</modifier></type>
<name>clang_index_getObjCInterfaceDeclInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name>
<specifier>const</specifier> <name>CXIdxObjCCategoryDeclInfo</name> <modifier>*</modifier></type>
<name>clang_index_getObjCCategoryDeclInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>CXIdxObjCProtocolRefListInfo</name> <modifier>*</modifier></type>
<name>clang_index_getObjCProtocolRefListInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>CXIdxObjCPropertyDeclInfo</name> <modifier>*</modifier></type>
<name>clang_index_getObjCPropertyDeclInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>CXIdxIBOutletCollectionAttrInfo</name> <modifier>*</modifier></type>
<name>clang_index_getIBOutletCollectionAttrInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxAttrInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>CINDEX_LINKAGE</name> <specifier>const</specifier> <name>CXIdxCXXClassDeclInfo</name> <modifier>*</modifier></type>
<name>clang_index_getCXXClassDeclInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxDeclInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXIdxClientContainer</name></type>
<name>clang_index_getClientContainer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxContainerInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_index_setClientContainer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxContainerInfo</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>CXIdxClientContainer</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXIdxClientEntity</name></type>
<name>clang_index_getClientEntity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_index_setClientEntity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXIdxEntityInfo</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>CXIdxClientEntity</name></type></decl></parameter>)</parameter_list>;</function_decl>





<typedef>typedef <type><name>void</name> <modifier>*</modifier></type><name>CXIndexAction</name>;</typedef>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXIndexAction</name></type> <name>clang_IndexAction_create</name><parameter_list>(<parameter><decl><type><name>CXIndex</name></type> <name>CIdx</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_IndexAction_dispose</name><parameter_list>(<parameter><decl><type><name>CXIndexAction</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{



<decl><name>CXIndexOpt_None</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,






<decl><name>CXIndexOpt_SuppressRedundantRefs</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,





<decl><name>CXIndexOpt_IndexFunctionLocalSymbols</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,





<decl><name>CXIndexOpt_IndexImplicitTemplateInstantiations</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,




<decl><name>CXIndexOpt_SuppressWarnings</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,






<decl><name>CXIndexOpt_SkipParsedBodiesInSession</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>

}</block></enum></type> <name>CXIndexOptFlags</name>;</typedef>


























<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_indexSourceFile</name><parameter_list>(
<parameter><decl><type><name>CXIndexAction</name></type></decl></parameter>, <parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>IndexerCallbacks</name> <modifier>*</modifier></type><name>index_callbacks</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>index_callbacks_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>index_options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>command_line_args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_command_line_args</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>, <parameter><decl><type><name>CXTranslationUnit</name> <modifier>*</modifier></type><name>out_TU</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>TU_options</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_indexSourceFileFullArgv</name><parameter_list>(
<parameter><decl><type><name>CXIndexAction</name></type></decl></parameter>, <parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>IndexerCallbacks</name> <modifier>*</modifier></type><name>index_callbacks</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>index_callbacks_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>index_options</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source_filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>command_line_args</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_command_line_args</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>CXUnsavedFile</name></name> <modifier>*</modifier></type><name>unsaved_files</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>num_unsaved_files</name></decl></parameter>, <parameter><decl><type><name>CXTranslationUnit</name> <modifier>*</modifier></type><name>out_TU</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>TU_options</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>CINDEX_LINKAGE</name> <name>int</name></type> <name>clang_indexTranslationUnit</name><parameter_list>(
<parameter><decl><type><name>CXIndexAction</name></type></decl></parameter>, <parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>, <parameter><decl><type><name>IndexerCallbacks</name> <modifier>*</modifier></type><name>index_callbacks</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>index_callbacks_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>index_options</name></decl></parameter>, <parameter><decl><type><name>CXTranslationUnit</name></type></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_indexLoc_getFileLocation</name><parameter_list>(<parameter><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl></parameter>,
<parameter><decl><type><name>CXIdxClientFile</name> <modifier>*</modifier></type><name>indexFile</name></decl></parameter>,
<parameter><decl><type><name>CXFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>column</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name>
<name>CXSourceLocation</name></type> <name>clang_indexLoc_getCXSourceLocation</name><parameter_list>(<parameter><decl><type><name>CXIdxLoc</name></type> <name>loc</name></decl></parameter>)</parameter_list>;</function_decl>












<typedef>typedef <function_decl><type><name><name>enum</name> <name>CXVisitorResult</name></name></type> (<modifier>*</modifier><name>CXFieldVisitor</name>)<parameter_list>(<parameter><decl><type><name>CXCursor</name></type> <name>C</name></decl></parameter>,
<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>




















<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type> <name>clang_Type_visitFields</name><parameter_list>(<parameter><decl><type><name>CXType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>CXFieldVisitor</name></type> <name>visitor</name></decl></parameter>,
<parameter><decl><type><name>CXClientData</name></type> <name>client_data</name></decl></parameter>)</parameter_list>;</function_decl>









<expr><name>LLVM_CLANG_C_EXTERN_C_END</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
