<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringActionRule.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_ACTION_RULE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RefactoringOptionVisitor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RefactoringResultConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RefactoringRuleContext</name></decl>;</decl_stmt>

<struct>struct <name>RefactoringDescriptor</name> <block>{

<decl_stmt><decl><type><name>StringRef</name></type> <name>Name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>Title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>Description</name></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><name>class</name></type> <name>RefactoringActionRuleBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>RefactoringActionRuleBase</name><argument_list>()</argument_list></macro> <block>{}</block>





<name>virtual</name> <name>void</name> <call><name>invoke</name><argument_list>(<argument><expr><name>RefactoringResultConsumer</name> <operator>&amp;</operator><name>Consumer</name></expr></argument>,
<argument><expr><name>RefactoringRuleContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>RefactoringActionRule</name> <range>: <expr><name>public</name> <name>RefactoringActionRuleBase</name> <block>{
<expr><name>public</name><operator>:</operator>


<name>virtual</name> <name>bool</name> <call><name>hasSelectionRequirement</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;







<expr><name>virtual</name> <name>void</name> <call><name>visitRefactoringOptions</name><argument_list>(<argument><expr><name>RefactoringOptionVisitor</name> <operator>&amp;</operator><name>Visitor</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
