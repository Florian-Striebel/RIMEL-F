<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/Mangle.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_MANGLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_MANGLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/GlobalDecl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/ABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXConstructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDestructorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<struct_decl>struct <name>MethodVFTableLocation</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMethodDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringLiteral</name></decl>;</decl_stmt>
<struct_decl>struct <name>ThisAdjustment</name>;</struct_decl>
<struct_decl>struct <name>ThunkInfo</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>MangleContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>ManglerKind</name> <block>{
<decl><name>MK_Itanium</name></decl>,
<decl><name>MK_Microsoft</name></decl>
}</block>;</enum>

<label><name>private</name>:</label>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ManglerKind</name></type> <name>Kind</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>BlockDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>GlobalBlockIds</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>BlockDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>LocalBlockIds</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>NamedDecl</name><operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>AnonStructIds</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>ManglerKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>

<macro><name>explicit</name></macro> <macro><name>MangleContext</name><argument_list>(<argument>ASTContext &amp;Context</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>ManglerKind Kind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Context</name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Diags</name><argument_list>(<argument><expr><name>Diags</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>Kind</argument>)</argument_list></macro> <expr><block>{}</block>

<name>virtual</name> <operator>~</operator><macro><name>MangleContext</name><argument_list>()</argument_list></macro> <block>{ }</block>

<name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Context</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><macro><name>getDiags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Diags</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>virtual</name> <name>void</name></type> <name>startNewFunction</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>LocalBlockIds</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>getBlockId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>BD</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Local</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>BlockDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>BlockIds</name>
<operator>=</operator> <ternary><condition><expr><name>Local</name></expr>?</condition><then> <expr><name>LocalBlockIds</name></expr> </then><else>: <expr><name>GlobalBlockIds</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>BlockDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<name>Result</name> <operator>=</operator> <call><name><name>BlockIds</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>BD</name></expr></argument>, <argument><expr><call><name><name>BlockIds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>getAnonymousStructId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<name>Result</name> <operator>=</operator> <call><name><name>AnonStructIds</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name><name>AnonStructIds</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Result</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>getAnonymousStructIdForDebugInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>Result</name> <operator>=</operator>
<call><name><name>AnonStructIds</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Result</name> <operator>==</operator> <call><name><name>AnonStructIds</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>Result</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>getLambdaString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Lambda</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<function_decl><type><name>bool</name></type> <name>shouldMangleDeclName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>shouldMangleCXXName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>shouldMangleStringLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringLiteral</name> <modifier>*</modifier></type><name>SL</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>virtual</name> <name>bool</name></type> <name>isUniqueInternalLinkageDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>virtual</name> <name>void</name></type> <name>needsUniqueInternalLinkageNames</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>mangleName</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleCXXName</name><parameter_list>(<parameter><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleThunk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ThunkInfo</name> <modifier>&amp;</modifier></type><name>Thunk</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleCXXDtorThunk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDestructorDecl</name> <modifier>*</modifier></type><name>DD</name></decl></parameter>, <parameter><decl><type><name>CXXDtorType</name></type> <name>Type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ThisAdjustment</name> <modifier>&amp;</modifier></type><name>ThisAdjustment</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleReferenceTemporary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ManglingNumber</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleCXXRTTI</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleCXXRTTIName</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleStringLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringLiteral</name> <modifier>*</modifier></type><name>SL</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleMSGuidDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MSGuidDecl</name> <modifier>*</modifier></type><name>GD</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mangleGlobalBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>BD</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ID</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mangleCtorBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXConstructorDecl</name> <modifier>*</modifier></type><name>CD</name></decl></parameter>, <parameter><decl><type><name>CXXCtorType</name></type> <name>CT</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>BD</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mangleDtorBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDestructorDecl</name> <modifier>*</modifier></type><name>CD</name></decl></parameter>, <parameter><decl><type><name>CXXDtorType</name></type> <name>DT</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>BD</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mangleBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>BD</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>mangleObjCMethodName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>includePrefixByte</name> <init>= <expr><name>true</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>includeCategoryNamespace</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mangleObjCMethodNameAsSourceName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMethodDecl</name> <modifier>*</modifier></type><name>MD</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleStaticGuardVariable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleDynamicInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleDynamicAtExitDestructor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleSEHFilterExpression</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>EnclosingDecl</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleSEHFinallyBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>EnclosingDecl</name></decl></parameter>,
<parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>mangleTypeName</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ItaniumMangleContext</name> <range>: <expr><name>public</name> <name>MangleContext</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>DiscriminatorOverrideTy</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><call><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;
<expr><name>explicit</name> <call><name>ItaniumMangleContext</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MangleContext</name><argument_list>(<argument>C</argument>, <argument>D</argument>, <argument>MK_Itanium</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <call><name>mangleCXXVTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>mangleCXXVTT</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name> <macro><name>mangleCXXCtorVTable</name><argument_list>(<argument>const CXXRecordDecl *RD</argument>, <argument>int64_t Offset</argument>,
<argument>const CXXRecordDecl *Type</argument>,
<argument>raw_ostream &amp;</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>mangleItaniumThreadLocalInit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>mangleItaniumThreadLocalWrapper</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>mangleCXXCtorComdat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXConstructorDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>mangleCXXDtorComdat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXDestructorDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>mangleLambdaSig</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Lambda</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>mangleDynamicStermFinalizer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;



<expr><name>virtual</name> <name>DiscriminatorOverrideTy</name> <macro><name>getDiscriminatorOverride</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const MangleContext *C</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>C</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MK_Itanium</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>ItaniumMangleContext</name> <operator>*</operator><call><name>create</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>ItaniumMangleContext</name> <operator>*</operator><macro><name>create</name><argument_list>(<argument>ASTContext &amp;Context</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>DiscriminatorOverrideTy Discriminator</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MicrosoftMangleContext</name> <range>: <expr><name>public</name> <name>MangleContext</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>MicrosoftMangleContext</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>MangleContext</name><argument_list>(<argument>C</argument>, <argument>D</argument>, <argument>MK_Microsoft</argument>)</argument_list></macro> <block>{}</block>




<name>virtual</name> <name>void</name> <call><name>mangleCXXVFTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Derived</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>BasePath</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;




<expr><name>virtual</name> <name>void</name> <call><name>mangleCXXVBTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Derived</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>BasePath</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>mangleThreadSafeStaticGuardVariable</name><argument_list>(<argument>const VarDecl *VD</argument>,
<argument>unsigned GuardNum</argument>,
<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>mangleVirtualMemPtrThunk</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXMethodDecl</name> <operator>*</operator><name>MD</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>MethodVFTableLocation</name> <operator>&amp;</operator><name>ML</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>mangleCXXVirtualDisplacementMap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>SrcRD</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>DstRD</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>mangleCXXThrowInfo</name><argument_list>(<argument>QualType T</argument>, <argument>bool IsConst</argument>, <argument>bool IsVolatile</argument>,
<argument>bool IsUnaligned</argument>, <argument>uint32_t NumEntries</argument>,
<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>mangleCXXCatchableTypeArray</name><argument_list>(<argument>QualType T</argument>, <argument>uint32_t NumEntries</argument>,
<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>mangleCXXCatchableType</name><argument_list>(<argument>QualType T</argument>, <argument>const CXXConstructorDecl *CD</argument>,
<argument>CXXCtorType CT</argument>, <argument>uint32_t Size</argument>,
<argument>uint32_t NVOffset</argument>, <argument>int32_t VBPtrOffset</argument>,
<argument>uint32_t VBIndex</argument>, <argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>mangleCXXRTTIBaseClassDescriptor</name><argument_list>(
<argument>const CXXRecordDecl *Derived</argument>, <argument>uint32_t NVOffset</argument>, <argument>int32_t VBPtrOffset</argument>,
<argument>uint32_t VBTableOffset</argument>, <argument>uint32_t Flags</argument>, <argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>mangleCXXRTTIBaseClassArray</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Derived</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name>
<call><name>mangleCXXRTTIClassHierarchyDescriptor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Derived</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name>
<call><name>mangleCXXRTTICompleteObjectLocator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Derived</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>BasePath</name></expr></argument>,
<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const MangleContext *C</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>C</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MK_Microsoft</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>MicrosoftMangleContext</name> <operator>*</operator><call><name>create</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ASTNameGenerator</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>ASTNameGenerator</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>ASTNameGenerator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>bool</name></type> <name>writeName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>getName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>getAllManglings</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Implementation</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Implementation</name></expr></argument>&gt;</argument_list></name> <name>Impl</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
