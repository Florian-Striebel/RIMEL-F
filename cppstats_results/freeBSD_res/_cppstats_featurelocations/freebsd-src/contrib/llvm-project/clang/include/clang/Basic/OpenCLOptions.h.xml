<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/OpenCLOptions.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_OPENCLOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_OPENCLOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>

<macro><name>namespace</name></macro> <block>{<block_content>



<enum>enum <name>OpenCLVersionID</name> : <type><name>unsigned</name> <name>int</name></type> <block>{
<decl><name>OCL_C_10</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>OCL_C_11</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>OCL_C_12</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>OCL_C_20</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>OCL_C_30</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>OCL_C_ALL</name> <init>= <expr><literal type="number">0x1f</literal></expr></init></decl>,
<decl><name>OCL_C_11P</name> <init>= <expr><name>OCL_C_ALL</name> <operator>^</operator> <name>OCL_C_10</name></expr></init></decl>,
<decl><name>OCL_C_12P</name> <init>= <expr><name>OCL_C_ALL</name> <operator>^</operator> <operator>(</operator><name>OCL_C_10</name> <operator>|</operator> <name>OCL_C_11</name><operator>)</operator></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OpenCLVersionID</name></type> <name>encodeOpenCLVersion</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OpenCLVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>OpenCLVersion</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown OpenCL version code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><literal type="number">100</literal></expr>:</case>
<return>return <expr><name>OCL_C_10</name></expr>;</return>
<case>case <expr><literal type="number">110</literal></expr>:</case>
<return>return <expr><name>OCL_C_11</name></expr>;</return>
<case>case <expr><literal type="number">120</literal></expr>:</case>
<return>return <expr><name>OCL_C_12</name></expr>;</return>
<case>case <expr><literal type="number">200</literal></expr>:</case>
<return>return <expr><name>OCL_C_20</name></expr>;</return>
<case>case <expr><literal type="number">300</literal></expr>:</case>
<return>return <expr><name>OCL_C_30</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>isOpenCLVersionContainedInMask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LO</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>Mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>CLVer</name> <init>= <expr><ternary><condition><expr><name><name>LO</name><operator>.</operator><name>OpenCLCPlusPlus</name></name></expr> ?</condition><then> <expr><literal type="number">200</literal></expr> </then><else>: <expr><name><name>LO</name><operator>.</operator><name>OpenCLVersion</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OpenCLVersionID</name></type> <name>Code</name> <init>= <expr><call><name>encodeOpenCLVersion</name><argument_list>(<argument><expr><name>CLVer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>Mask</name> <operator>&amp;</operator> <name>Code</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block>


<decl_stmt><decl><type><name>class</name></type> <name>OpenCLOptions</name> <block>{<block_content>

<label><name>public</name>:</label>









<decl_stmt><decl><type><name>bool</name></type> <name>areProgramScopeVariablesSupported</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>Opts</name><operator>.</operator><name>OpenCLCPlusPlus</name></name> <operator>||</operator> <name><name>Opts</name><operator>.</operator><name>OpenCLVersion</name></name> <operator>==</operator> <literal type="number">200</literal> <operator>||</operator>
<operator>(</operator><name><name>Opts</name><operator>.</operator><name>OpenCLVersion</name></name> <operator>==</operator> <literal type="number">300</literal> <operator>&amp;&amp;</operator>
<call><name>isSupported</name><argument_list>(<argument><expr><literal type="string">"__opencl_c_program_scope_global_variables"</literal></expr></argument>, <argument><expr><name>Opts</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<struct>struct <name>OpenCLOptionInfo</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>WithPragma</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Avail</name> <init>= <expr><literal type="number">100U</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Core</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Opt</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Supported</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Enabled</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OpenCLOptionInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>OpenCLOptionInfo</name><argument_list>(<argument>bool Pragma</argument>, <argument>unsigned AvailV</argument>, <argument>unsigned CoreV</argument>,
<argument>unsigned OptV</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>WithPragma</name><argument_list>(<argument><expr><name>Pragma</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Avail</name><argument_list>(<argument><expr><name>AvailV</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Core</name><argument_list>(<argument><expr><name>CoreV</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Opt</name><argument_list>(<argument>OptV</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isCore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Core</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isOptionalCore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Opt</name> <operator>!=</operator> <literal type="number">0U</literal></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isAvailableIn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const <block>{<block_content>

<decl_stmt><decl><type><name>auto</name></type> <name>CLVer</name> <init>= <expr><ternary><condition><expr><name><name>LO</name><operator>.</operator><name>OpenCLCPlusPlus</name></name></expr> ?</condition><then> <expr><literal type="number">200</literal></expr> </then><else>: <expr><name><name>LO</name><operator>.</operator><name>OpenCLVersion</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><name>CLVer</name> <operator>&gt;=</operator> <name>Avail</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isCoreIn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isAvailableIn</name><argument_list>(<argument><expr><name>LO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isOpenCLVersionContainedInMask</name><argument_list>(<argument><expr><name>LO</name></expr></argument>, <argument><expr><name>Core</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isOptionalCoreIn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isAvailableIn</name><argument_list>(<argument><expr><name>LO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isOpenCLVersionContainedInMask</name><argument_list>(<argument><expr><name>LO</name></expr></argument>, <argument><expr><name>Opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>isKnown</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>isAvailableOption</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isWithPragma</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isSupported</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isSupportedCore</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isSupportedOptionalCore</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isSupportedCoreOrOptionalCore</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isSupportedExtension</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>acceptsPragma</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>, <argument><expr><name>bool</name> <name>V</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>enable</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>, <argument><expr><name>bool</name> <name>V</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>support</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>, <argument><expr><name>bool</name> <name>V</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>OpenCLOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>addSupport</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>FeaturesMap</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>disableAll</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>OpenCLOptionInfoMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>OpenCLOptionInfo</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>isOpenCLOptionCoreIn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>, <argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>OpenCLOptionInfo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>isCoreIn</name><argument_list>(<argument><expr><name>LO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>bool</name></type> <name>isOpenCLOptionAvailableIn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>,
<argument><expr><name>Args</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>OpenCLOptionInfo</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>isAvailableIn</name><argument_list>(<argument><expr><name>LO</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>diagnoseUnsupportedFeatureDependencies</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>TI</name></decl></parameter>,
<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>diagnoseFeatureExtensionDifferences</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>TI</name></decl></parameter>,
<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>isEnabled</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>OpenCLOptionInfoMap</name></type> <name>OptMap</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
