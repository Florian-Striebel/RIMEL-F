<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SYMEXPR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SYMEXPR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemRegion</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>SymExpr</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
enum <name>Kind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Id##Kind,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYMBOL_RANGE</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>First</name></type></parameter>, <parameter><type><name>Last</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BEGIN_##Id = First, END_##Id = Last,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/Symbols.def"</cpp:file></cpp:include>
}</block></expr>;

<expr><name>private</name><operator>:</operator>
<name>Kind</name> <name>K</name></expr>;

<expr><name>protected</name><operator>:</operator>
<macro><name>SymExpr</name><argument_list>(<argument>Kind k</argument>)</argument_list></macro> <operator>:</operator> <macro><name>K</name><argument_list>(<argument>k</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isValidTypeForSymbol</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <block>{


<return>return <expr><operator>!</operator><call><name><name>T</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>T</name><operator>-&gt;</operator><name>isVoidType</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>mutable</name> <name>unsigned</name> <name>Complexity</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>SymExpr</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>K</name></expr>;</return> }</block>

<name>virtual</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>dumpToStream</name><argument_list>(<argument>raw_ostream &amp;os</argument>)</argument_list></macro> <specifier>const</specifier> <block>{}</block>

<name>virtual</name> <name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>virtual</name> <name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>profile</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;






<expr><name>class</name> <name>symbol_iterator</name> <block>{
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name> <name>itr</name></expr>;

<expr><name>void</name> <call><name>expand</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>symbol_iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>symbol_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><name>SE</name></expr></argument>)</argument_list></call></expr>;

<expr><name>symbol_iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator></expr>;
<expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator></expr>;

<expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>symbol_iterator</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier></expr>;
<expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>symbol_iterator</name> <operator>&amp;</operator><name>X</name><operator>)</operator> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>symbol_iterator</name> <macro><name>symbol_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>symbol_iterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>static</specifier> <name>symbol_iterator</name> <macro><name>symbol_end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>symbol_iterator</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>virtual</name> <name>unsigned</name> <macro><name>computeComplexity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;











<expr><name>virtual</name> <specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><macro><name>getOriginRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nullptr</name></expr>;</return> }</block>
}</expr>;

<expr><specifier>inline</specifier> <name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>os</name>,
<specifier>const</specifier> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>SymExpr</name> <operator>*</operator><name>SE</name><operator>)</operator> <block>{
<expr><call><name><name>SE</name><operator>-&gt;</operator><name>dumpToStream</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>os</name></expr>;</return>
}</block>

<name>using</name> <name>SymbolRef</name> <operator>=</operator> <specifier>const</specifier> <name>SymExpr</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>SymbolRefSmallVectorTy</name> <operator>=</operator> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRef</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>SymbolID</name> <operator>=</operator> <name>unsigned</name></expr>;



<expr><name>class</name> <name>SymbolData</name> <operator>:</operator> <name>public</name> <name>SymExpr</name> <block>{
<expr><specifier>const</specifier> <name>SymbolID</name> <name>Sym</name></expr>;

<expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>
<macro><name>SymbolData</name><argument_list>(<argument>Kind k</argument>, <argument>SymbolID sym</argument>)</argument_list></macro> <operator>:</operator> <call><name>SymExpr</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>, <macro><name>Sym</name><argument_list>(<argument>sym</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>classof</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<operator>~</operator><macro><name>SymbolData</name><argument_list>()</argument_list></macro> <name>override</name> <operator>=</operator> default</expr>;


<expr><name>virtual</name> <name>StringRef</name> <macro><name>getKindStr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>SymbolID</name> <macro><name>getSymbolID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Sym</name></expr>;</return> }</block>

<name>unsigned</name> <macro><name>computeComplexity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></expr>;


<expr><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const SymExpr *SE</argument>)</argument_list></macro> <block>{
<expr><name>Kind</name> <name>k</name> <operator>=</operator> <call><name><name>SE</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>k</name> <operator>&gt;=</operator> <name>BEGIN_SYMBOLS</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>END_SYMBOLS</name></expr>;</return>
}</block>
}</expr>;

}</block></expr>
}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
