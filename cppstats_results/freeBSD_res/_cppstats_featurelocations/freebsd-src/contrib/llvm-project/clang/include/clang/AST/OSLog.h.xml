<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/OSLog.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_OSLOG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_OSLOG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>analyze_os_log</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>OSLogBufferItem</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{


<decl><name>ScalarKind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,




<decl><name>CountKind</name></decl>,



<decl><name>StringKind</name></decl>,



<decl><name>PointerKind</name></decl>,



<decl><name>ObjCObjKind</name></decl>,


<decl><name>WideStringKind</name></decl>,



<decl><name>ErrnoKind</name></decl>,


<decl><name>MaskKind</name></decl>
}</block>;</enum>

<enum>enum <block>{

<decl><name>IsPrivate</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,


<decl><name>IsPublic</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,


<decl><name>IsSensitive</name> <init>= <expr><literal type="number">0x4</literal> <operator>|</operator> <name>IsPrivate</name></expr></init></decl>
}</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>TheKind</name> <init>= <expr><name>ScalarKind</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>TheExpr</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>ConstValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharUnits</name></type> <name>Size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>MaskType</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>OSLogBufferItem</name><argument_list>(<argument>Kind kind</argument>, <argument>const Expr *expr</argument>, <argument>CharUnits size</argument>, <argument>unsigned flags</argument>,
<argument>StringRef maskType = StringRef()</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>TheKind</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>TheExpr</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Size</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>MaskType</name><argument_list>(<argument>maskType</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Flags</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Flags</name> <operator>==</operator> <name>IsPrivate</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Flags</name> <operator>==</operator> <name>IsPublic</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>Flags</name> <operator>==</operator> <name>IsSensitive</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"unexpected privacy flag"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>OSLogBufferItem</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>CharUnits value</argument>, <argument>unsigned flags</argument>)</argument_list></macro>
<operator>:</operator> <call><name>TheKind</name><argument_list>(<argument><expr><name>CountKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ConstValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Size</name><argument_list>(<argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getTypeSizeInChars</name></name><argument_list>(<argument><expr><name><name>Ctx</name><operator>.</operator><name>IntTy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Flags</name><argument_list>(<argument>flags</argument>)</argument_list></macro> <expr><block>{}</block>

<name>unsigned</name> <name>char</name> <macro><name>getDescriptorByte</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>unsigned</name> <name>char</name> <name>result</name> <operator>=</operator> <name>Flags</name></expr>;
<expr><name>result</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>getKind</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;
<return>return <expr><name>result</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <name>char</name> <macro><name>getSizeByte</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>size</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantity</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TheKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>getIsPrivate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>IsPrivate</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TheExpr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <macro><name>getConstValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ConstValue</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getMaskType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MaskType</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OSLogBufferLayout</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>OSLogBufferItem</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>Items</name></decl>;</decl_stmt>

<enum>enum <name>Flags</name> <block>{ <decl><name>HasPrivateItems</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>HasNonScalarItems</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl> }</block>;</enum>

<expr_stmt><expr><name>CharUnits</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>CharUnits</name> <name>result</name></expr>;
<expr><name>result</name> <operator>+=</operator> <name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>item</name> <operator>:</operator> <name>Items</name></expr></init>)</control> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>item</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return result</block><empty_stmt>;</empty_stmt></for>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasPrivateItems</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>any_of</name><argument_list>(
<argument><expr><name>Items</name></expr></argument>, <argument><expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>OSLogBufferItem</name> <operator>&amp;</operator><name>Item</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>Item</name><operator>.</operator><name>getIsPrivate</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasNonScalarOrMask</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>any_of</name><argument_list>(<argument><expr><name>Items</name></expr></argument>, <argument><expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>OSLogBufferItem</name> <operator>&amp;</operator><name>Item</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>Item</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OSLogBufferItem</name><operator>::</operator><name>ScalarKind</name> <operator>||</operator>
<operator>!</operator><call><name><name>Item</name><operator>.</operator><name>getMaskType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <name>char</name> <macro><name>getSummaryByte</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>unsigned</name> <name>char</name> <name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<if_stmt><if>if <condition>(<expr><call><name>hasPrivateItems</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>HasPrivateItems</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hasNonScalarOrMask</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>HasNonScalarItems</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <name>char</name> <macro><name>getNumArgsByte</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>computeOSLogBufferLayout</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CallExpr</name> <operator>*</operator><name>E</name></expr></argument>,
<argument><expr><name>OSLogBufferLayout</name> <operator>&amp;</operator><name>layout</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
