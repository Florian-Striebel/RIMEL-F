<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ExprConcepts.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_EXPRCONCEPTS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_EXPRCONCEPTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConcept.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/NestedNameSpecifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TrailingObjects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTStmtReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTStmtWriter</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name> <name>ConceptSpecializationExpr</name></type> <name>final</name> <range>: <expr><name>public</name> <name>Expr</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>ConceptReference</name></decl>,
<decl><type ref="prev"/><name>private</name> <name>llvm</name>::<name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ConceptSpecializationExpr</name></expr></argument>,
<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTStmtReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name></type> <name>TrailingObjects</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>SubstitutionDiagnostic</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumTemplateArgs</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ASTConstraintSatisfaction</name> <modifier>*</modifier></type><name>Satisfaction</name></decl>;</decl_stmt>

<macro><name>ConceptSpecializationExpr</name><argument_list>(<argument>const ASTContext &amp;C</argument>, <argument>NestedNameSpecifierLoc NNS</argument>,
<argument>SourceLocation TemplateKWLoc</argument>,
<argument>DeclarationNameInfo ConceptNameInfo</argument>,
<argument>NamedDecl *FoundDecl</argument>, <argument>ConceptDecl *NamedConcept</argument>,
<argument>const ASTTemplateArgumentListInfo *ArgsAsWritten</argument>,
<argument>ArrayRef&lt;TemplateArgument&gt; ConvertedArgs</argument>,
<argument>const ConstraintSatisfaction *Satisfaction</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>ConceptSpecializationExpr</name><argument_list>(<argument>const ASTContext &amp;C</argument>, <argument>ConceptDecl *NamedConcept</argument>,
<argument>ArrayRef&lt;TemplateArgument&gt; ConvertedArgs</argument>,
<argument>const ConstraintSatisfaction *Satisfaction</argument>,
<argument>bool Dependent</argument>,
<argument>bool ContainsUnexpandedParameterPack</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>ConceptSpecializationExpr</name><argument_list>(<argument>EmptyShell Empty</argument>, <argument>unsigned NumTemplateArgs</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>

<function_decl><type><specifier>static</specifier> <name>ConceptSpecializationExpr</name> <modifier>*</modifier></type>
<name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>NestedNameSpecifierLoc</name></type> <name>NNS</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>TemplateKWLoc</name></decl></parameter>, <parameter><decl><type><name>DeclarationNameInfo</name></type> <name>ConceptNameInfo</name></decl></parameter>,
<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>FoundDecl</name></decl></parameter>, <parameter><decl><type><name>ConceptDecl</name> <modifier>*</modifier></type><name>NamedConcept</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ASTTemplateArgumentListInfo</name> <modifier>*</modifier></type><name>ArgsAsWritten</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name></type> <name>ConvertedArgs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstraintSatisfaction</name> <modifier>*</modifier></type><name>Satisfaction</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ConceptSpecializationExpr</name> <modifier>*</modifier></type>
<name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>ConceptDecl</name> <modifier>*</modifier></type><name>NamedConcept</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name></type> <name>ConvertedArgs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstraintSatisfaction</name> <modifier>*</modifier></type><name>Satisfaction</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>Dependent</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ContainsUnexpandedParameterPack</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ConceptSpecializationExpr</name> <modifier>*</modifier></type>
<name>Create</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>EmptyShell</name></type> <name>Empty</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NumTemplateArgs</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <macro><name>getTemplateArguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>NumTemplateArgs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>setTemplateArguments</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name></type> <name>Converted</name></decl></parameter>)</parameter_list>;</function_decl>




<expr_stmt><expr><name>bool</name> <macro><name>isSatisfied</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isValueDependent</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <literal type="string">"isSatisfied called on a dependent ConceptSpecializationExpr"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Satisfaction</name><operator>-&gt;</operator><name>IsSatisfied</name></name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>ASTConstraintSatisfaction</name> <operator>&amp;</operator><macro><name>getSatisfaction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isValueDependent</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <literal type="string">"getSatisfaction called on dependent ConceptSpecializationExpr"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>Satisfaction</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConceptSpecializationExprClass</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name><name>ConceptName</name><operator>.</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{



<return>return <expr><call><name><name>ArgsAsWritten</name><operator>-&gt;</operator><name>RAngleLoc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>?</operator> <name><name>ArgsAsWritten</name><operator>-&gt;</operator><name>RAngleLoc</name></name>
<operator>:</operator> <call><name><name>ConceptName</name><operator>.</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>child_range</name></type> <name>children</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><call><name>child_iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>child_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><call><name>const_child_iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>const_child_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>concepts</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>Requirement</name> <block>{<block_content>
<label><name>public</name>:</label>


<enum>enum <name>RequirementKind</name> <block>{ <decl><name>RK_Type</name></decl>, <decl><name>RK_Simple</name></decl>, <decl><name>RK_Compound</name></decl>, <decl><name>RK_Nested</name></decl> }</block>;</enum>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>RequirementKind</name></type> <name>Kind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Dependent</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ContainsUnexpandedParameterPack</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Satisfied</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<label><name>public</name>:</label>
<struct>struct <name>SubstitutionDiagnostic</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>SubstitutedEntity</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>DiagLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>DiagMessage</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>Requirement</name><argument_list>(<argument>RequirementKind Kind</argument>, <argument>bool IsDependent</argument>,
<argument>bool ContainsUnexpandedParameterPack</argument>, <argument>bool IsSatisfied = true</argument>)</argument_list></macro> :
<expr_stmt><expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Dependent</name><argument_list>(<argument><expr><name>IsDependent</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ContainsUnexpandedParameterPack</name><argument_list>(<argument><expr><name>ContainsUnexpandedParameterPack</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Satisfied</name><argument_list>(<argument>IsSatisfied</argument>)</argument_list></macro> <expr><block>{}</block>

<name>RequirementKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isSatisfied</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Dependent</name> <operator>&amp;&amp;</operator>
<literal type="string">"isSatisfied can only be called on non-dependent requirements."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Satisfied</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setSatisfied</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsSatisfied</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Dependent</name> <operator>&amp;&amp;</operator>
<literal type="string">"setSatisfied can only be called on non-dependent requirements."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Satisfied</name> <operator>=</operator> <name>IsSatisfied</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setDependent</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsDependent</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Dependent</name> <operator>=</operator> <name>IsDependent</name></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>isDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Dependent</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setContainsUnexpandedParameterPack</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Contains</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ContainsUnexpandedParameterPack</name> <operator>=</operator> <name>Contains</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>containsUnexpandedParameterPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ContainsUnexpandedParameterPack</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>TypeRequirement</name> <range>: <expr><name>public</name> <name>Requirement</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>SatisfactionStatus</name> <block>{
<expr><name>SS_Dependent</name></expr>,
<expr><name>SS_SubstitutionFailure</name></expr>,
<expr><name>SS_Satisfied</name></expr>
}</block></expr>;
<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator></expr></argument>, <argument><expr><name>TypeSourceInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Value</name></expr>;
<expr><name>SatisfactionStatus</name> <name>Status</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>friend</name> <name>ASTStmtReader</name></expr>;
<expr><name>friend</name> <name>ASTStmtWriter</name></expr>;





<expr><call><name>TypeRequirement</name><argument_list>(<argument><expr><name>TypeSourceInfo</name> <operator>*</operator><name>T</name></expr></argument>)</argument_list></call></expr>;



<expr><call><name>TypeRequirement</name><argument_list>(<argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator><name>Diagnostic</name></expr></argument>)</argument_list></call> <operator>:</operator>
<call><name>Requirement</name><argument_list>(<argument><expr><name>RK_Type</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Value</name><argument_list>(<argument><expr><name>Diagnostic</name></expr></argument>)</argument_list></call></expr>,
<macro><name>Status</name><argument_list>(<argument>SS_SubstitutionFailure</argument>)</argument_list></macro> <expr><block>{}</block>

<name>SatisfactionStatus</name> <macro><name>getSatisfactionStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Status</name></expr>;</return> }</block>
<name>void</name> <macro><name>setSatisfactionStatus</name><argument_list>(<argument>SatisfactionStatus Status</argument>)</argument_list></macro> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>Status</name></name> <operator>=</operator> <name>Status</name></expr>;
}</block>

<name>bool</name> <macro><name>isSubstitutionFailure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Status</name> <operator>==</operator> <name>SS_SubstitutionFailure</name></expr>;</return>
}</block>

<name>SubstitutionDiagnostic</name> <operator>*</operator><macro><name>getSubstitutionDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Status</name> <operator>==</operator> <name>SS_SubstitutionFailure</name> <operator>&amp;&amp;</operator>
<literal type="string">"Attempted to get substitution diagnostic when there has been no "</literal>
<literal type="string">"substitution failure."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Value</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>SubstitutionDiagnostic</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<name>TypeSourceInfo</name> <operator>*</operator><macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isSubstitutionFailure</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Attempted to get type when there has been a substitution failure."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Value</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>TypeSourceInfo</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Requirement *R</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>R</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>RK_Type</name></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>ExprRequirement</name> <operator>:</operator> <name>public</name> <name>Requirement</name> <block>{
<expr><name>public</name><operator>:</operator>
enum <name>SatisfactionStatus</name> <block>{
<expr><name>SS_Dependent</name></expr>,
<expr><name>SS_ExprSubstitutionFailure</name></expr>,
<expr><name>SS_NoexceptNotMet</name></expr>,
<expr><name>SS_TypeRequirementSubstitutionFailure</name></expr>,
<expr><name>SS_ConstraintsNotSatisfied</name></expr>,
<expr><name>SS_Satisfied</name></expr>
}</block></expr>;
<expr><name>class</name> <name>ReturnTypeRequirement</name> <block>{
<expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;
<argument><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name> <operator>*</operator></expr></argument>, <argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name>
<name>TypeConstraintInfo</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>friend</name> <name>ASTStmtReader</name></expr>;
<expr><name>friend</name> <name>ASTStmtWriter</name></expr>;


<expr><call><name>ReturnTypeRequirement</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>TypeConstraintInfo</name><argument_list>(<argument>nullptr</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>



<call><name>ReturnTypeRequirement</name><argument_list>(<argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator><name>SubstDiag</name></expr></argument>)</argument_list></call> <operator>:</operator>
<macro><name>TypeConstraintInfo</name><argument_list>(<argument>SubstDiag</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>







<call><name>ReturnTypeRequirement</name><argument_list>(<argument><expr><name>TemplateParameterList</name> <operator>*</operator><name>TPL</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>isDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TypeConstraintInfo</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>containsUnexpandedParameterPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isTypeConstraint</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>getTypeConstraintTemplateParameterList</name><argument_list>()</argument_list></call>
<operator>-&gt;</operator><call><name>containsUnexpandedParameterPack</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>TypeConstraintInfo</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isSubstitutionFailure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>TypeConstraintInfo</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>is</name><argument_list type="generic">&lt;<argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isTypeConstraint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>TypeConstraintInfo</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>is</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>SubstitutionDiagnostic</name> <operator>*</operator><macro><name>getSubstitutionDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isSubstitutionFailure</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>TypeConstraintInfo</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>TypeConstraint</name> <operator>*</operator><macro><name>getTypeConstraint</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>TemplateParameterList</name> <operator>*</operator><macro><name>getTypeConstraintTemplateParameterList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isTypeConstraint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>TypeConstraintInfo</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>TemplateParameterList</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;
<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Value</name></expr>;
<expr><name>SourceLocation</name> <name>NoexceptLoc</name></expr>;
<expr><name>ReturnTypeRequirement</name> <name>TypeReq</name></expr>;
<expr><name>ConceptSpecializationExpr</name> <operator>*</operator><name>SubstitutedConstraintExpr</name></expr>;
<expr><name>SatisfactionStatus</name> <name>Status</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>friend</name> <name>ASTStmtReader</name></expr>;
<expr><name>friend</name> <name>ASTStmtWriter</name></expr>;








<macro><name>ExprRequirement</name><argument_list>(
<argument>Expr *E</argument>, <argument>bool IsSimple</argument>, <argument>SourceLocation NoexceptLoc</argument>,
<argument>ReturnTypeRequirement Req</argument>, <argument>SatisfactionStatus Status</argument>,
<argument>ConceptSpecializationExpr *SubstitutedConstraintExpr = nullptr</argument>)</argument_list></macro>;










<macro><name>ExprRequirement</name><argument_list>(<argument>SubstitutionDiagnostic *E</argument>, <argument>bool IsSimple</argument>,
<argument>SourceLocation NoexceptLoc</argument>, <argument>ReturnTypeRequirement Req = {}</argument>)</argument_list></macro>;

<expr><name>bool</name> <macro><name>isSimple</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RK_Simple</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isCompound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>RK_Compound</name></expr>;</return> }</block>

<name>bool</name> <macro><name>hasNoexceptRequirement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>NoexceptLoc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getNoexceptLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NoexceptLoc</name></expr>;</return> }</block>

<name>SatisfactionStatus</name> <macro><name>getSatisfactionStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Status</name></expr>;</return> }</block>

<name>bool</name> <macro><name>isExprSubstitutionFailure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Status</name> <operator>==</operator> <name>SS_ExprSubstitutionFailure</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>ReturnTypeRequirement</name> <operator>&amp;</operator><macro><name>getReturnTypeRequirement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>TypeReq</name></expr>;</return>
}</block>

<name>ConceptSpecializationExpr</name> <operator>*</operator>
<macro><name>getReturnTypeRequirementSubstitutedConstraintExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Status</name> <operator>&gt;=</operator> <name>SS_TypeRequirementSubstitutionFailure</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>SubstitutedConstraintExpr</name></expr>;</return>
}</block>

<name>SubstitutionDiagnostic</name> <operator>*</operator><macro><name>getExprSubstitutionDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isExprSubstitutionFailure</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Attempted to get expression substitution diagnostic when there has "</literal>
<literal type="string">"been no expression substitution failure"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Value</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>SubstitutionDiagnostic</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<name>Expr</name> <operator>*</operator><macro><name>getExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isExprSubstitutionFailure</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"ExprRequirement has no expression because there has been a "</literal>
<literal type="string">"substitution failure."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Value</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>Expr</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Requirement *R</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>R</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>RK_Compound</name> <operator>||</operator> <call><name><name>R</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>RK_Simple</name></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>NestedRequirement</name> <operator>:</operator> <name>public</name> <name>Requirement</name> <block>{
<expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Value</name></expr>;
<expr><specifier>const</specifier> <name>ASTConstraintSatisfaction</name> <operator>*</operator><name>Satisfaction</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>friend</name> <name>ASTStmtReader</name></expr>;
<expr><name>friend</name> <name>ASTStmtWriter</name></expr>;

<expr><call><name>NestedRequirement</name><argument_list>(<argument><expr><name>SubstitutionDiagnostic</name> <operator>*</operator><name>SubstDiag</name></expr></argument>)</argument_list></call> <operator>:</operator>
<call><name>Requirement</name><argument_list>(<argument><expr><name>RK_Nested</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>Value</name><argument_list>(<argument>SubstDiag</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>NestedRequirement</name><argument_list>(<argument><expr><name>Expr</name> <operator>*</operator><name>Constraint</name></expr></argument>)</argument_list></call> <operator>:</operator>
<call><name>Requirement</name><argument_list>(<argument><expr><name>RK_Nested</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><call><name><name>Constraint</name><operator>-&gt;</operator><name>containsUnexpandedParameterPack</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>Value</name><argument_list>(<argument>Constraint</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Constraint</name><operator>-&gt;</operator><name>isInstantiationDependent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Nested requirement with non-dependent constraint must be "</literal>
<literal type="string">"constructed with a ConstraintSatisfaction object"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>NestedRequirement</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Expr</name> <operator>*</operator><name>Constraint</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ConstraintSatisfaction</name> <operator>&amp;</operator><name>Satisfaction</name></expr></argument>)</argument_list></call> <operator>:</operator>
<call><name>Requirement</name><argument_list>(<argument><expr><name>RK_Nested</name></expr></argument>, <argument><expr><call><name><name>Constraint</name><operator>-&gt;</operator><name>isInstantiationDependent</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Constraint</name><operator>-&gt;</operator><name>containsUnexpandedParameterPack</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>Satisfaction</name><operator>.</operator><name>IsSatisfied</name></name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Value</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr>,
<macro><name>Satisfaction</name><argument_list>(<argument>ASTConstraintSatisfaction::Create(C, Satisfaction)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isSubstitutionFailure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Value</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>SubstitutionDiagnostic</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<name>SubstitutionDiagnostic</name> <operator>*</operator><macro><name>getSubstitutionDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isSubstitutionFailure</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"getSubstitutionDiagnostic() may not be called when there was no "</literal>
<literal type="string">"substitution failure."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Value</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>SubstitutionDiagnostic</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<name>Expr</name> <operator>*</operator><macro><name>getConstraintExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isSubstitutionFailure</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"getConstraintExpr() may not be called "</literal>
<literal type="string">"on nested requirements with "</literal>
<literal type="string">"substitution failures."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Value</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>Expr</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<specifier>const</specifier> <name>ASTConstraintSatisfaction</name> <operator>&amp;</operator><macro><name>getConstraintSatisfaction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isSubstitutionFailure</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"getConstraintSatisfaction() may not be "</literal>
<literal type="string">"called on nested requirements with "</literal>
<literal type="string">"substitution failures."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>Satisfaction</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Requirement *R</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>R</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>RK_Nested</name></expr>;</return>
}</block>
}</expr>;

}</block>







<name>class</name> <name>RequiresExpr</name> <name>final</name> <operator>:</operator> <name>public</name> <name>Expr</name></expr>,
<expr><name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>RequiresExpr</name></expr></argument>, <argument><expr><name>ParmVarDecl</name> <operator>*</operator></expr></argument>,
<argument><expr><name>concepts</name><operator>::</operator><name>Requirement</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>TrailingObjects</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;

<expr><name>unsigned</name> <name>NumLocalParameters</name></expr>;
<expr><name>unsigned</name> <name>NumRequirements</name></expr>;
<expr><name>RequiresExprBodyDecl</name> <operator>*</operator><name>Body</name></expr>;
<expr><name>SourceLocation</name> <name>RBraceLoc</name></expr>;

<expr><name>unsigned</name> <macro><name>numTrailingObjects</name><argument_list>(<argument>OverloadToken&lt;ParmVarDecl *&gt;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumLocalParameters</name></expr>;</return>
}</block>

<name>unsigned</name> <macro><name>numTrailingObjects</name><argument_list>(<argument>OverloadToken&lt;concepts::Requirement *&gt;</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumRequirements</name></expr>;</return>
}</block>

<macro><name>RequiresExpr</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>SourceLocation RequiresKWLoc</argument>,
<argument>RequiresExprBodyDecl *Body</argument>,
<argument>ArrayRef&lt;ParmVarDecl *&gt; LocalParameters</argument>,
<argument>ArrayRef&lt;concepts::Requirement *&gt; Requirements</argument>,
<argument>SourceLocation RBraceLoc</argument>)</argument_list></macro></expr>;
<macro><name>RequiresExpr</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>EmptyShell Empty</argument>, <argument>unsigned NumLocalParameters</argument>,
<argument>unsigned NumRequirements</argument>)</argument_list></macro>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>RequiresExpr</name> <operator>*</operator>
<macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>SourceLocation RequiresKWLoc</argument>,
<argument>RequiresExprBodyDecl *Body</argument>, <argument>ArrayRef&lt;ParmVarDecl *&gt; LocalParameters</argument>,
<argument>ArrayRef&lt;concepts::Requirement *&gt; Requirements</argument>,
<argument>SourceLocation RBraceLoc</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>RequiresExpr</name> <operator>*</operator>
<macro><name>Create</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>EmptyShell Empty</argument>, <argument>unsigned NumLocalParameters</argument>,
<argument>unsigned NumRequirements</argument>)</argument_list></macro></expr>;

<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getLocalParameters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ParmVarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>, <expr><name>NumLocalParameters</name></expr>}</block></expr>;</return>
}</block>

<name>RequiresExprBodyDecl</name> <operator>*</operator><macro><name>getBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Body</name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>concepts</name><operator>::</operator><name>Requirement</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getRequirements</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>concepts</name><operator>::</operator><name>Requirement</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>, <expr><name>NumRequirements</name></expr>}</block></expr>;</return>
}</block>



<name>bool</name> <macro><name>isSatisfied</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isValueDependent</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <literal type="string">"isSatisfied called on a dependent RequiresExpr"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>RequiresExprBits</name><operator>.</operator><name>IsSatisfied</name></name></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getRequiresKWLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>RequiresExprBits</name><operator>.</operator><name>RequiresKWLoc</name></name></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getRBraceLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RBraceLoc</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>RequiresExprClass</name></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name><name>RequiresExprBits</name><operator>.</operator><name>RequiresKWLoc</name></name></expr>;</return>
}</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>RBraceLoc</name></expr>;</return>
}</block>


<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><call><name>child_iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>child_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><call><name>const_child_iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>const_child_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
