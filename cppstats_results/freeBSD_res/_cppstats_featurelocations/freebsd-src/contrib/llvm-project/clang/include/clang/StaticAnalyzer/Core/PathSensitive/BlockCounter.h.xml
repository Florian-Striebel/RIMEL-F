<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/BlockCounter.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_BLOCKCOUNTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_BLOCKCOUNTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>StackFrameContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>BlockCounter</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BlockCounter</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Data</name><argument_list>(<argument>D</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<call><name>BlockCounter</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Data</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<name>unsigned</name> <macro><name>getNumVisited</name><argument_list>(<argument>const StackFrameContext *CallSite</argument>,
<argument>unsigned BlockID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Factory</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>F</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Factory</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name><operator>&amp;</operator> <name>Alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>Factory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>BlockCounter</name></type> <name>GetEmptyCounter</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>BlockCounter</name></type> <name>IncrementCount</name><parameter_list>(<parameter><decl><type><name>BlockCounter</name></type> <name>BC</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>StackFrameContext</name> <modifier>*</modifier></type><name>CallSite</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>BlockID</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Factory</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
