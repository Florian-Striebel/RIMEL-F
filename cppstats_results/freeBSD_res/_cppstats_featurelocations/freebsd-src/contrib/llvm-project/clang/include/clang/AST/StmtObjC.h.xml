<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/StmtObjC.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_STMTOBJC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_STMTOBJC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>ObjCForCollectionStmt</name> <range>: <expr><name>public</name> <name>Stmt</name> <block>{
enum <expr><block>{ <expr><name>ELEM</name></expr>, <expr><name>COLLECTION</name></expr>, <expr><name>BODY</name></expr>, <expr><name>END_EXPR</name></expr> }</block></expr>;
<expr><name>Stmt</name><operator>*</operator> <name><name>SubExprs</name><index>[<expr><name>END_EXPR</name></expr>]</index></name></expr>;
<expr><name>SourceLocation</name> <name>ForLoc</name></expr>;
<expr><name>SourceLocation</name> <name>RParenLoc</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>ObjCForCollectionStmt</name><argument_list>(<argument>Stmt *Elem</argument>, <argument>Expr *Collect</argument>, <argument>Stmt *Body</argument>,
<argument>SourceLocation FCL</argument>, <argument>SourceLocation RPL</argument>)</argument_list></macro></expr>;
<expr><name>explicit</name> <macro><name>ObjCForCollectionStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro> <operator>:</operator>
<macro><name>Stmt</name><argument_list>(<argument>ObjCForCollectionStmtClass</argument>, <argument>Empty</argument>)</argument_list></macro> <block>{ }</block>

<name>Stmt</name> <operator>*</operator><macro><name>getElement</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>ELEM</name></expr>]</index></name></expr>;</return> }</block>
<name>Expr</name> <operator>*</operator><macro><name>getCollection</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>COLLECTION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>Stmt</name> <operator>*</operator><macro><name>getBody</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name></expr>;</return> }</block>

<specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getElement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>ELEM</name></expr>]</index></name></expr>;</return> }</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getCollection</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>COLLECTION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name></expr>;</return> }</block>

<name>void</name> <macro><name>setElement</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>ELEM</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>
<name>void</name> <macro><name>setCollection</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{
<expr><name><name>SubExprs</name><index>[<expr><name>COLLECTION</name></expr>]</index></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setBody</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getForLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ForLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setForLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>ForLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>
<name>SourceLocation</name> <macro><name>getRParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RParenLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setRParenLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>RParenLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>ForLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjCForCollectionStmtClass</name></expr>;</return>
}</block>


<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>END_EXPR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>END_EXPR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>ObjCAtCatchStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>VarDecl</name> <operator>*</operator><name>ExceptionDecl</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>Body</name></expr>;
<expr><name>SourceLocation</name> <name>AtCatchLoc</name></expr>, <expr><name>RParenLoc</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ObjCAtCatchStmt</name><argument_list>(<argument>SourceLocation atCatchLoc</argument>, <argument>SourceLocation rparenloc</argument>,
<argument>VarDecl *catchVarDecl</argument>,
<argument>Stmt *atCatchStmt</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>ObjCAtCatchStmtClass</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ExceptionDecl</name><argument_list>(<argument><expr><name>catchVarDecl</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Body</name><argument_list>(<argument><expr><name>atCatchStmt</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AtCatchLoc</name><argument_list>(<argument><expr><name>atCatchLoc</name></expr></argument>)</argument_list></call></expr>, <macro><name>RParenLoc</name><argument_list>(<argument>rparenloc</argument>)</argument_list></macro> <expr><block>{ }</block>

<name>explicit</name> <macro><name>ObjCAtCatchStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro> <operator>:</operator>
<macro><name>Stmt</name><argument_list>(<argument>ObjCAtCatchStmtClass</argument>, <argument>Empty</argument>)</argument_list></macro> <block>{ }</block>

<specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getCatchBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Body</name></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>getCatchBody</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Body</name></expr>;</return> }</block>
<name>void</name> <macro><name>setCatchBody</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name>Body</name> <operator>=</operator> <name>S</name></expr>; }</block>

<specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><macro><name>getCatchParamDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExceptionDecl</name></expr>;</return>
}</block>
<name>VarDecl</name> <operator>*</operator><macro><name>getCatchParamDecl</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>ExceptionDecl</name></expr>;</return>
}</block>
<name>void</name> <macro><name>setCatchParamDecl</name><argument_list>(<argument>VarDecl *D</argument>)</argument_list></macro> <block>{ <expr><name>ExceptionDecl</name> <operator>=</operator> <name>D</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getAtCatchLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AtCatchLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setAtCatchLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>AtCatchLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>
<name>SourceLocation</name> <macro><name>getRParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RParenLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setRParenLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>RParenLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>AtCatchLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><call><name><name>Body</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>bool</name> <macro><name>hasEllipsis</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getCatchParamDecl</name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjCAtCatchStmtClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Body</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Body</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Body</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Body</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>ObjCAtFinallyStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>SourceLocation</name> <name>AtFinallyLoc</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>AtFinallyStmt</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ObjCAtFinallyStmt</name><argument_list>(<argument>SourceLocation atFinallyLoc</argument>, <argument>Stmt *atFinallyStmt</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>ObjCAtFinallyStmtClass</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AtFinallyLoc</name><argument_list>(<argument><expr><name>atFinallyLoc</name></expr></argument>)</argument_list></call></expr>,
<macro><name>AtFinallyStmt</name><argument_list>(<argument>atFinallyStmt</argument>)</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <macro><name>ObjCAtFinallyStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro> <operator>:</operator>
<macro><name>Stmt</name><argument_list>(<argument>ObjCAtFinallyStmtClass</argument>, <argument>Empty</argument>)</argument_list></macro> <block>{ }</block>

<specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getFinallyBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AtFinallyStmt</name></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>getFinallyBody</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>AtFinallyStmt</name></expr>;</return> }</block>
<name>void</name> <macro><name>setFinallyBody</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name>AtFinallyStmt</name> <operator>=</operator> <name>S</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>AtFinallyLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name><name>AtFinallyStmt</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getAtFinallyLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AtFinallyLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setAtFinallyLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>AtFinallyLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjCAtFinallyStmtClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>AtFinallyStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AtFinallyStmt</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>AtFinallyStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AtFinallyStmt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>ObjCAtTryStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>private</name><operator>:</operator>

<name>SourceLocation</name> <name>AtTryLoc</name></expr>;


<expr><name>unsigned</name> <name>NumCatchStmts</name> <operator>:</operator> <literal type="number">16</literal></expr>;


<expr><name>bool</name> <name>HasFinally</name> <operator>:</operator> <literal type="number">1</literal></expr>;






<expr><name>Stmt</name> <operator>*</operator><operator>*</operator><macro><name>getStmts</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>Stmt</name><operator>*</operator> <specifier>const</specifier> <operator>*</operator><macro><name>getStmts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator> <specifier>const</specifier><operator>*</operator></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<macro><name>ObjCAtTryStmt</name><argument_list>(<argument>SourceLocation atTryLoc</argument>, <argument>Stmt *atTryStmt</argument>,
<argument>Stmt **CatchStmts</argument>, <argument>unsigned NumCatchStmts</argument>,
<argument>Stmt *atFinallyStmt</argument>)</argument_list></macro></expr>;

<expr><name>explicit</name> <macro><name>ObjCAtTryStmt</name><argument_list>(<argument>EmptyShell Empty</argument>, <argument>unsigned NumCatchStmts</argument>,
<argument>bool HasFinally</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>ObjCAtTryStmtClass</name></expr></argument>, <argument><expr><name>Empty</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>NumCatchStmts</name><argument_list>(<argument><expr><name>NumCatchStmts</name></expr></argument>)</argument_list></call></expr>,
<macro><name>HasFinally</name><argument_list>(<argument>HasFinally</argument>)</argument_list></macro> <expr><block>{ }</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>ObjCAtTryStmt</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>const ASTContext &amp;Context</argument>,
<argument>SourceLocation atTryLoc</argument>, <argument>Stmt *atTryStmt</argument>,
<argument>Stmt **CatchStmts</argument>, <argument>unsigned NumCatchStmts</argument>,
<argument>Stmt *atFinallyStmt</argument>)</argument_list></macro></expr>;
<expr><specifier>static</specifier> <name>ObjCAtTryStmt</name> <operator>*</operator><macro><name>CreateEmpty</name><argument_list>(<argument>const ASTContext &amp;Context</argument>,
<argument>unsigned NumCatchStmts</argument>, <argument>bool HasFinally</argument>)</argument_list></macro></expr>;


<expr><name>SourceLocation</name> <macro><name>getAtTryLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AtTryLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setAtTryLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>AtTryLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>


<specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getTryBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>getTryBody</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return> }</block>
<name>void</name> <macro><name>setTryBody</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name>S</name></expr>; }</block>



<name>unsigned</name> <macro><name>getNumCatchStmts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumCatchStmts</name></expr>;</return> }</block>


<specifier>const</specifier> <name>ObjCAtCatchStmt</name> <operator>*</operator><macro><name>getCatchStmt</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <name>NumCatchStmts</name> <operator>&amp;&amp;</operator> <literal type="string">"Out-of-bounds @catch index"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>ObjCAtCatchStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><name>I</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>ObjCAtCatchStmt</name> <operator>*</operator><macro><name>getCatchStmt</name><argument_list>(<argument>unsigned I</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <name>NumCatchStmts</name> <operator>&amp;&amp;</operator> <literal type="string">"Out-of-bounds @catch index"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>ObjCAtCatchStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><name>I</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>void</name> <macro><name>setCatchStmt</name><argument_list>(<argument>unsigned I</argument>, <argument>ObjCAtCatchStmt *S</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&lt;</operator> <name>NumCatchStmts</name> <operator>&amp;&amp;</operator> <literal type="string">"Out-of-bounds @catch index"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><name>I</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>S</name></expr>;
}</block>


<specifier>const</specifier> <name>ObjCAtFinallyStmt</name> <operator>*</operator><macro><name>getFinallyStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HasFinally</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>ObjCAtFinallyStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>NumCatchStmts</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>ObjCAtFinallyStmt</name> <operator>*</operator><macro><name>getFinallyStmt</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HasFinally</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>ObjCAtFinallyStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>NumCatchStmts</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>void</name> <macro><name>setFinallyStmt</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>HasFinally</name> <operator>&amp;&amp;</operator> <literal type="string">"@try does not have a @finally slot!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>NumCatchStmts</name></expr>]</index> <operator>=</operator> <name>S</name></expr>;
}</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>AtTryLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjCAtTryStmtClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>NumCatchStmts</name> <operator>+</operator> <name>HasFinally</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>ObjCAtTryStmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>children</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;









<expr><name>class</name> <name>ObjCAtSynchronizedStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>SourceLocation</name> <name>AtSynchronizedLoc</name></expr>;
enum <expr><block>{ <expr><name>SYNC_EXPR</name></expr>, <expr><name>SYNC_BODY</name></expr>, <expr><name>END_EXPR</name></expr> }</block></expr>;
<expr><name>Stmt</name><operator>*</operator> <name><name>SubStmts</name><index>[<expr><name>END_EXPR</name></expr>]</index></name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ObjCAtSynchronizedStmt</name><argument_list>(<argument>SourceLocation atSynchronizedLoc</argument>, <argument>Stmt *synchExpr</argument>,
<argument>Stmt *synchBody</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Stmt</name><argument_list>(<argument>ObjCAtSynchronizedStmtClass</argument>)</argument_list></macro> <block>{
<expr><name><name>SubStmts</name><index>[<expr><name>SYNC_EXPR</name></expr>]</index></name> <operator>=</operator> <name>synchExpr</name></expr>;
<expr><name><name>SubStmts</name><index>[<expr><name>SYNC_BODY</name></expr>]</index></name> <operator>=</operator> <name>synchBody</name></expr>;
<expr><name>AtSynchronizedLoc</name> <operator>=</operator> <name>atSynchronizedLoc</name></expr>;
}</block>
<name>explicit</name> <macro><name>ObjCAtSynchronizedStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro> <operator>:</operator>
<macro><name>Stmt</name><argument_list>(<argument>ObjCAtSynchronizedStmtClass</argument>, <argument>Empty</argument>)</argument_list></macro> <block>{ }</block>

<name>SourceLocation</name> <macro><name>getAtSynchronizedLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AtSynchronizedLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setAtSynchronizedLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>AtSynchronizedLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>

<specifier>const</specifier> <name>CompoundStmt</name> <operator>*</operator><macro><name>getSynchBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CompoundStmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubStmts</name><index>[<expr><name>SYNC_BODY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>CompoundStmt</name> <operator>*</operator><macro><name>getSynchBody</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CompoundStmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubStmts</name><index>[<expr><name>SYNC_BODY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>void</name> <macro><name>setSynchBody</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubStmts</name><index>[<expr><name>SYNC_BODY</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>

<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getSynchExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubStmts</name><index>[<expr><name>SYNC_EXPR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>Expr</name> <operator>*</operator><macro><name>getSynchExpr</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubStmts</name><index>[<expr><name>SYNC_EXPR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>void</name> <macro><name>setSynchExpr</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubStmts</name><index>[<expr><name>SYNC_EXPR</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>AtSynchronizedLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name>getSynchBody</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjCAtSynchronizedStmtClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubStmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubStmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name>END_EXPR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubStmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubStmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>END_EXPR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>ObjCAtThrowStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>SourceLocation</name> <name>AtThrowLoc</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>Throw</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ObjCAtThrowStmt</name><argument_list>(<argument>SourceLocation atThrowLoc</argument>, <argument>Stmt *throwExpr</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>ObjCAtThrowStmtClass</name></expr></argument>)</argument_list></call></expr>, <macro><name>Throw</name><argument_list>(<argument>throwExpr</argument>)</argument_list></macro> <expr><block>{
<expr><name>AtThrowLoc</name> <operator>=</operator> <name>atThrowLoc</name></expr>;
}</block>
<name>explicit</name> <macro><name>ObjCAtThrowStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro> <operator>:</operator>
<macro><name>Stmt</name><argument_list>(<argument>ObjCAtThrowStmtClass</argument>, <argument>Empty</argument>)</argument_list></macro> <block>{ }</block>

<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getThrowExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Throw</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>Expr</name> <operator>*</operator><macro><name>getThrowExpr</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Throw</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>setThrowExpr</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name>Throw</name> <operator>=</operator> <name>S</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getThrowLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>AtThrowLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setThrowLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>AtThrowLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>AtThrowLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>Throw</name> <operator>?</operator> <call><name><name>Throw</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>AtThrowLoc</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjCAtThrowStmtClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Throw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Throw</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Throw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Throw</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>ObjCAutoreleasePoolStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>SourceLocation</name> <name>AtLoc</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>SubStmt</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ObjCAutoreleasePoolStmt</name><argument_list>(<argument>SourceLocation atLoc</argument>, <argument>Stmt *subStmt</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>ObjCAutoreleasePoolStmtClass</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AtLoc</name><argument_list>(<argument><expr><name>atLoc</name></expr></argument>)</argument_list></call></expr>, <macro><name>SubStmt</name><argument_list>(<argument>subStmt</argument>)</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <macro><name>ObjCAutoreleasePoolStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro> <operator>:</operator>
<macro><name>Stmt</name><argument_list>(<argument>ObjCAutoreleasePoolStmtClass</argument>, <argument>Empty</argument>)</argument_list></macro> <block>{ }</block>

<specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getSubStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SubStmt</name></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>getSubStmt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>SubStmt</name></expr>;</return> }</block>
<name>void</name> <macro><name>setSubStmt</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name>SubStmt</name> <operator>=</operator> <name>S</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>AtLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name><name>SubStmt</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getAtLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AtLoc</name></expr>;</return> }</block>
<name>void</name> <macro><name>setAtLoc</name><argument_list>(<argument>SourceLocation Loc</argument>)</argument_list></macro> <block>{ <expr><name>AtLoc</name> <operator>=</operator> <name>Loc</name></expr>; }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ObjCAutoreleasePoolStmtClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SubStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SubStmt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SubStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SubStmt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
