<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ConstraintManager.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_CONSTRAINTMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_CONSTRAINTMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/SaveAndRestore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>APSInt</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ProgramStateManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExprEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolReaper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConditionTruthVal</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>Val</name></decl>;</decl_stmt>

<label><name>public</name>:</label>


<macro><name>ConditionTruthVal</name><argument_list>(<argument>bool constraint</argument>)</argument_list></macro> : <macro><name>Val</name><argument_list>(<argument>constraint</argument>)</argument_list></macro> <block>{<block_content/>}</block>


<expr_stmt><expr><call><name>ConditionTruthVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name>Val</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isConstrainedTrue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Val</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Val</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isConstrainedFalse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Val</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Val</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isConstrained</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Val</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isUnderconstrained</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name><name>Val</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConstraintManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ConstraintManager</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ConstraintManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>haveEqualConstraints</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>S1</name></expr></argument>,
<argument><expr><name>ProgramStateRef</name> <name>S2</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>ProgramStateRef</name></type> <name>assume</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>DefinedSVal</name></type> <name>Cond</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>Assumption</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>using</name></type> <name>ProgramStatePair</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ProgramStateRef</name></expr></argument>, <argument><expr><name>ProgramStateRef</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<function><type><name>ProgramStatePair</name></type> <name>assumeDual</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>DefinedSVal</name></type> <name>Cond</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>StTrue</name> <init>= <expr><call><name>assume</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Cond</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>StTrue</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXPENSIVE_CHECKS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>assume</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Cond</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"System is over constrained."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>ProgramStatePair</name><argument_list>(<argument><expr><operator>(</operator><name>ProgramStateRef</name><operator>)</operator><name>nullptr</name></expr></argument>, <argument><expr><name>State</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>StFalse</name> <init>= <expr><call><name>assume</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Cond</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>StFalse</name></expr>)</condition> <block>{<block_content>



<return>return <expr><call><name>ProgramStatePair</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><operator>(</operator><name>ProgramStateRef</name><operator>)</operator><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ProgramStatePair</name><argument_list>(<argument><expr><name>StTrue</name></expr></argument>, <argument><expr><name>StFalse</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>virtual</name> <name>ProgramStateRef</name></type> <name>assumeInclusiveRange</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>,
<argument><expr><name>NonLoc</name> <name>Value</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>From</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>To</name></expr></argument>,
<argument><expr><name>bool</name> <name>InBound</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>ProgramStatePair</name></type> <name>assumeInclusiveRangeDual</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>,
<argument><expr><name>NonLoc</name> <name>Value</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>From</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>To</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>StInRange</name> <init>=
<expr><call><name>assumeInclusiveRange</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>From</name></expr></argument>, <argument><expr><name>To</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>StInRange</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>ProgramStatePair</name><argument_list>(<argument><expr><operator>(</operator><name>ProgramStateRef</name><operator>)</operator><name>nullptr</name></expr></argument>, <argument><expr><name>State</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>StOutOfRange</name> <init>=
<expr><call><name>assumeInclusiveRange</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>From</name></expr></argument>, <argument><expr><name>To</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>StOutOfRange</name></expr>)</condition> <block>{<block_content>



<return>return <expr><call><name>ProgramStatePair</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><operator>(</operator><name>ProgramStateRef</name><operator>)</operator><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ProgramStatePair</name><argument_list>(<argument><expr><name>StInRange</name></expr></argument>, <argument><expr><name>StOutOfRange</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<expr_stmt><expr><name>virtual</name> <specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>*</operator> <macro><name>getSymVal</name><argument_list>(<argument>ProgramStateRef state</argument>,
<argument>SymbolRef sym</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>



<function_decl><type><name>virtual</name> <name>ProgramStateRef</name></type> <name>removeDeadBindings</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><name>SymbolReaper</name><modifier>&amp;</modifier></type> <name>SymReaper</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>printJson</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>, <argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>NL</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>Space</name></expr></argument>,
<argument><expr><name>bool</name> <name>IsDot</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<function><type><name>ConditionTruthVal</name></type> <name>isNull</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>SaveAndRestore</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>DisableNotify</name><argument_list>(<argument><expr><name>NotifyAssumeClients</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<return>return <expr><call><name>checkNull</name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>Sym</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>protected</name>:</label>






<decl_stmt><decl><type><name>bool</name></type> <name>NotifyAssumeClients</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>canReasonAbout</name><argument_list>(<argument><expr><name>SVal</name> <name>X</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<function_decl><type><name>virtual</name> <name>ConditionTruthVal</name></type> <name>checkNull</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ConstraintManager</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateRangeConstraintManager</name><argument_list>(<argument><expr><name>ProgramStateManager</name> <operator>&amp;</operator><name>statemgr</name></expr></argument>,
<argument><expr><name>ExprEngine</name> <operator>*</operator><name>exprengine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ConstraintManager</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateZ3ConstraintManager</name><argument_list>(<argument><expr><name>ProgramStateManager</name> <operator>&amp;</operator><name>statemgr</name></expr></argument>,
<argument><expr><name>ExprEngine</name> <operator>*</operator><name>exprengine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
