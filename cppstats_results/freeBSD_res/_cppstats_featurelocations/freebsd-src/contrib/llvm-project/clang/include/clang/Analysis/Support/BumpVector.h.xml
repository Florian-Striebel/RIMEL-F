<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Support/BumpVector.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_SUPPORT_BUMPVECTOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_SUPPORT_BUMPVECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BumpVectorContext</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Alloc</name></expr>;</expr_stmt>

<label><name>public</name>:</label>


<expr_stmt><expr><call><name>BumpVectorContext</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Alloc</name><argument_list>(<argument>new llvm::BumpPtrAllocator()</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro> <block>{}</block>

<call><name>BumpVectorContext</name><argument_list>(<argument><expr><name>BumpVectorContext</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Alloc</name><argument_list>(<argument>Other.Alloc</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Other</name><operator>.</operator><name>Alloc</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Other</name><operator>.</operator><name>Alloc</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;
}</block>




<call><name>BumpVectorContext</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Alloc</name><argument_list>(<argument>&amp;A</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>BumpVectorContext</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Alloc</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<function_decl><type><name>delete</name></type> <name><name>Alloc</name><operator>.</operator><name>getPointer</name></name><parameter_list>()</parameter_list>;</function_decl></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><macro><name>getAllocator</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><call><name><name>Alloc</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>BumpVector</name> <block>{<block_content>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>Begin</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>End</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>Capacity</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<function><type><name>explicit</name></type> <name>BumpVector</name><parameter_list>(<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>reserve</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><operator>~</operator><macro><name>BumpVector</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><name><name>is_class</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>destroy_range</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

using size_type = size_t</block><empty_stmt>;</empty_stmt></if></if_stmt>
<name>using</name> <name>difference_type</name> <operator>=</operator> <name>ptrdiff_t</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>value_type</name> <init>= <expr><name>T</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>T</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>const_reverse_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>const_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>reverse_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>reference</name> <init>= <expr><name>T</name> <operator>&amp;</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_reference</name> <init>= <expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>pointer</name> <init>= <expr><name>T</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_pointer</name> <init>= <expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></init></decl>;</decl_stmt>


<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Begin</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Begin</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>End</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>End</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>reverse_iterator</name></type> <name>rbegin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier><block>{ <return>return <expr><call><name>const_reverse_iterator</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>reverse_iterator</name></type> <name>rend</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_reverse_iterator</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Begin</name> <operator>==</operator> <name>End</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>End</name><operator>-</operator><name>Begin</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>reference</name></type> <name>operator</name>[]<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Begin</name> <operator>+</operator> <name>idx</name> <operator>&lt;</operator> <name>End</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Begin</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><name>const_reference</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>unsigned</name> <name>idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Begin</name> <operator>+</operator> <name>idx</name> <operator>&lt;</operator> <name>End</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Begin</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>reference</name></type> <name>front</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>begin</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>const_reference</name> <macro><name>front</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>begin</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>reference</name></type> <name>back</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>end</name><argument_list>()</argument_list></call><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><name>const_reference</name> <macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>end</name><argument_list>()</argument_list></call><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>pop_back</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>End</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>End</name><operator>-&gt;</operator><name/></name>~<call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>T</name></type> <name>pop_back_val</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>T</name></type> <name>Result</name> <init>= <expr><call><name>back</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><name><name>is_class</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>destroy_range</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>End</name> <operator>=</operator> <name>Begin</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>pointer</name></type> <name>data</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>pointer</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>const_pointer</name> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_pointer</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>const_reference</name></type> <name>Elt</name></decl></parameter>, <parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>End</name> <operator>&lt;</operator> <name>Capacity</name></expr>)</condition> <block>{<block_content>
<label><name>Retry</name>:</label>
<macro><name>new</name> <argument_list>(<argument>End</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><name>Elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>End</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>grow</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>Retry</name>;</goto>
</block_content>}</block></function>



<function><type><name>iterator</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>Cnt</name></decl></parameter>, <parameter><decl><type><name>const_reference</name></type> <name>E</name></decl></parameter>,
<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>&gt;=</operator> <name>Begin</name> <operator>&amp;&amp;</operator> <name>I</name> <operator>&lt;=</operator> <name>End</name> <operator>&amp;&amp;</operator> <literal type="string">"Iterator out of bounds."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>End</name> <operator>+</operator> <name>Cnt</name> <operator>&lt;=</operator> <name>Capacity</name></expr>)</condition> <block>{<block_content>
<label><name>Retry</name>:</label>
<expr_stmt><expr><call><name>move_range_right</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>End</name></expr></argument>, <argument><expr><name>Cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>construct_range</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name> <operator>+</operator> <name>Cnt</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>End</name> <operator>+=</operator> <name>Cnt</name></expr>;</expr_stmt>
<return>return <expr><name>I</name> <operator>+</operator> <name>Cnt</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>D</name> <init>= <expr><name>I</name> <operator>-</operator> <name>Begin</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>grow</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <name>Cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>I</name> <operator>=</operator> <name>Begin</name> <operator>+</operator> <name>D</name></expr>;</expr_stmt>
<goto>goto <name>Retry</name>;</goto>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>reserve</name><parameter_list>(<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unsigned</name><argument_list>(<argument><expr><name>Capacity</name><operator>-</operator><name>Begin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>N</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>grow</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>size_t</name> <macro><name>capacity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Capacity</name> <operator>-</operator> <name>Begin</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>


<function_decl><type><name>void</name></type> <name>grow</name><parameter_list>(<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>size_type</name></type> <name>MinSize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>construct_range</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Elt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>S</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>S</name></expr></incr>)</control><block type="pseudo"><block_content>
<macro><name>new</name> <argument_list>(<argument>S</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><name>Elt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroy_range</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<while>while <condition>(<expr><name>S</name> <operator>!=</operator> <name>E</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>E</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>-&gt;</operator><name/></name>~<call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>move_range_right</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><name>T</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>E</name> <operator>+</operator> <name>D</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IL</name> <init>= <expr><name>S</name> <operator>+</operator> <name>D</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>IL</name></expr>;</condition> <incr><expr><operator>--</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>E</name></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>I</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><operator>*</operator><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>E</name><operator>-&gt;</operator><name/></name>~<call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>void</name> <name><name>BumpVector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>grow</name><argument_list>(<argument>BumpVectorContext &amp;C</argument>, <argument>size_t MinSize</argument>)</argument_list></macro> <block>{
<expr><name>size_t</name> <name>CurCapacity</name> <operator>=</operator> <name>Capacity</name><operator>-</operator><name>Begin</name></expr>;
<expr><name>size_t</name> <name>CurSize</name> <operator>=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;
<expr><name>size_t</name> <name>NewCapacity</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>CurCapacity</name></expr>;
<if_stmt><if>if <condition>(<expr><name>NewCapacity</name> <operator>&lt;</operator> <name>MinSize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NewCapacity</name> <operator>=</operator> <name>MinSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<name>T</name> <operator>*</operator><name>NewElts</name> <operator>=</operator> <call><name><name>C</name><operator>.</operator><name>getAllocator</name></name><argument_list>()</argument_list></call><operator>.</operator><name>template</name> <call><name><name>Allocate</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>NewCapacity</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>Begin</name> <operator>!=</operator> <name>End</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><name><name>is_class</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>uninitialized_copy</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>End</name></expr></argument>, <argument><expr><name>NewElts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_range</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>NewElts</name></expr></argument>, <argument><expr><name>Begin</name></expr></argument>, <argument><expr><name>CurSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>Begin</name> <operator>=</operator> <name>NewElts</name></expr>;</expr_stmt>
<expr_stmt><expr><name>End</name> <operator>=</operator> <name>NewElts</name><operator>+</operator><name>CurSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Capacity</name> <operator>=</operator> <name>Begin</name><operator>+</operator><name>NewCapacity</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
