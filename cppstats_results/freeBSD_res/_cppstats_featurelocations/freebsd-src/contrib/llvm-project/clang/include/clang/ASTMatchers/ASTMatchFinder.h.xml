<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h">






































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ASTMATCHERS_ASTMATCHFINDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ASTMATCHERS_ASTMATCHFINDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Timer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>ast_matchers</name> <block>{<block_content>

















<decl_stmt><decl><type><name>class</name></type> <name>MatchFinder</name> <block>{<block_content>
<label><name>public</name>:</label>




<struct>struct <name>MatchResult</name> <block>{
<expr_stmt><expr><call><name>MatchResult</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BoundNodes</name> <operator>&amp;</operator><name>Nodes</name></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>ASTContext</name> <operator>*</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>BoundNodes</name></type> <name>Nodes</name></decl>;</decl_stmt>



<expr_stmt><expr><name>clang</name><operator>::</operator><name>ASTContext</name> <operator>*</operator> <specifier>const</specifier> <name>Context</name></expr>;</expr_stmt>
<expr_stmt><expr><name>clang</name><operator>::</operator><name>SourceManager</name> <operator>*</operator> <specifier>const</specifier> <name>SourceManager</name></expr>;</expr_stmt>

}</block>;</struct>



<decl_stmt><decl><type><name>class</name></type> <name>MatchCallback</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>MatchCallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MatchResult</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>




<function><type><name>virtual</name> <name>void</name></type> <name>onStartOfTranslationUnit</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>onEndOfTranslationUnit</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>





<expr_stmt><expr><name>virtual</name> <name>StringRef</name> <macro><name>getID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>TraversalKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getCheckTraversalKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ParsingDoneTestCallback</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ParsingDoneTestCallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>MatchFinderOptions</name> <block>{
<struct>struct <name>Profiling</name> <block>{
<expr_stmt><expr><call><name>Profiling</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>TimeRecord</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Records</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Records</name><argument_list>(<argument>Records</argument>)</argument_list></macro> <block>{}</block>


<name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>TimeRecord</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Records</name></expr>;</expr_stmt>
}</block>;</struct>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Profiling</name></expr></argument>&gt;</argument_list></name> <name>CheckProfiling</name></expr>;</expr_stmt>
}</block>;</struct>

<macro><name>MatchFinder</name><argument_list>(<argument>MatchFinderOptions Options = MatchFinderOptions()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>MatchFinder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>









<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclarationMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StatementMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NestedNameSpecifierMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NestedNameSpecifierLocMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeLocMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXCtorInitializerMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentLocMatcher</name> <modifier>&amp;</modifier></type><name>NodeMatch</name></decl></parameter>,
<parameter><decl><type><name>MatchCallback</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>










<decl_stmt><decl><type><name>bool</name></type> <name>addDynamicMatcher</name><argument_list>(<argument><expr><specifier>const</specifier> <name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <operator>&amp;</operator><name>NodeMatch</name></expr></argument>,
<argument><expr><name>MatchCallback</name> <operator>*</operator><name>Action</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <call><name>newASTConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>







<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>match</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>DynTypedNode</name><operator>::</operator><call><name>create</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>void</name></type> <name>match</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>DynTypedNode</name> <operator>&amp;</operator><name>Node</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>matchAST</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>registerTestCallbackAfterParsing</name><parameter_list>(<parameter><decl><type><name>ParsingDoneTestCallback</name> <modifier>*</modifier></type><name>ParsingDone</name></decl></parameter>)</parameter_list>;</function_decl>



<struct>struct <name>MatchersByType</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>internal</name><operator>::</operator><name>DynTypedMatcher</name></expr></argument>, <argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>DeclOrStmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>TypeMatcher</name></expr></argument>, <argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierMatcher</name></expr></argument>, <argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>NestedNameSpecifier</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLocMatcher</name></expr></argument>, <argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>NestedNameSpecifierLoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>TypeLocMatcher</name></expr></argument>, <argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>TypeLoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorInitializerMatcher</name></expr></argument>, <argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>CtorInit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLocMatcher</name></expr></argument>, <argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>TemplateArgumentLoc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><name>MatchCallback</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>AllCallbacks</name></expr>;</expr_stmt>
}</block>;</struct>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>MatchersByType</name></type> <name>Matchers</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MatchFinderOptions</name></type> <name>Options</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ParsingDoneTestCallback</name> <modifier>*</modifier></type><name>ParsingDone</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>















<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MatcherT</name></expr></argument>, <argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type>
<name>match</name><parameter_list>(<parameter><decl><type><name>MatcherT</name></type> <name>Matcher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NodeT</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MatcherT</name></expr></argument>&gt;</argument_list></name>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>MatcherT</name></type> <name>Matcher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DynTypedNode</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>,
<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MatcherT</name></expr></argument>&gt;</argument_list></name>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>MatcherT</name></type> <name>Matcher</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list>;</function_decl>











<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>NodeT</name> <modifier>*</modifier></type>
<name>selectFirst</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>BoundTo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Results</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>BoundNodes</name> <modifier>&amp;</modifier></type><name>N</name> <range>: <expr><name>Results</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>NodeT</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><name><name>N</name><operator>.</operator><name>getNodeAs</name></name><operator>&lt;</operator><name>NodeT</name><operator>&gt;</operator><operator>(</operator><name>BoundTo</name><operator>)</operator></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Node</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CollectMatchesCallback</name> <range>: <expr><name>public</name> <name>MatchFinder</name><operator>::</operator><name>MatchCallback</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>run</name><argument_list>(<argument>const MatchFinder::MatchResult &amp;Result</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>Nodes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>Result</name><operator>.</operator><name>Nodes</name></name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>TraversalKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getCheckTraversalKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><name>None</name></expr>;</return>
}</block>

<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Nodes</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MatcherT</name></expr></argument>&gt;</argument_list></name>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>MatcherT</name></type> <name>Matcher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DynTypedNode</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>,
<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>internal</name><operator>::</operator><name>CollectMatchesCallback</name> <name>Callback</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MatchFinder</name></type> <name>Finder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>addMatcher</name></name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Callback</name><operator>.</operator><name>Nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MatcherT</name></expr></argument>, <argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type>
<name>match</name><parameter_list>(<parameter><decl><type><name>MatcherT</name></type> <name>Matcher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NodeT</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>match</name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>, <argument><expr><name>DynTypedNode</name><operator>::</operator><call><name>create</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>MatcherT</name></expr></argument>&gt;</argument_list></name>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type>
<name>match</name><parameter_list>(<parameter><decl><type><name>MatcherT</name></type> <name>Matcher</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>internal</name><operator>::</operator><name>CollectMatchesCallback</name> <name>Callback</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MatchFinder</name></type> <name>Finder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>addMatcher</name></name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>matchAST</name></name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Callback</name><operator>.</operator><name>Nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>inline</specifier> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type>
<name>matchDynamic</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <name>Matcher</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>DynTypedNode</name> <operator>&amp;</operator><name>Node</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>internal</name><operator>::</operator><name>CollectMatchesCallback</name> <name>Callback</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MatchFinder</name></type> <name>Finder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>addDynamicMatcher</name></name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>Node</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Callback</name><operator>.</operator><name>Nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name>
<name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>matchDynamic</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <name>Matcher</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NodeT</name> <operator>&amp;</operator><name>Node</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>matchDynamic</name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>, <argument><expr><name>DynTypedNode</name><operator>::</operator><call><name>create</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>BoundNodes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type>
<name>matchDynamic</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><name>DynTypedMatcher</name> <name>Matcher</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>internal</name><operator>::</operator><name>CollectMatchesCallback</name> <name>Callback</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MatchFinder</name></type> <name>Finder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>addDynamicMatcher</name></name><argument_list>(<argument><expr><name>Matcher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Finder</name><operator>.</operator><name>matchAST</name></name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Callback</name><operator>.</operator><name>Nodes</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
