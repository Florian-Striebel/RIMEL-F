<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/DependencyOutputOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_DEPENDENCYOUTPUTOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_DEPENDENCYOUTPUTOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ShowIncludesDestination</name> <block>{<block_content> <expr_stmt><expr><name>None</name></expr><operator>,</operator> <expr><name>Stdout</name></expr><operator>,</operator> <expr><name>Stderr</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>DependencyOutputFormat</name> <block>{<block_content> <expr_stmt><expr><name>Make</name></expr><operator>,</operator> <expr><name>NMake</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<enum>enum <name>ExtraDepKind</name> <block>{
<decl><name>EDK_SanitizeIgnorelist</name></decl>,
<decl><name>EDK_ProfileList</name></decl>,
<decl><name>EDK_ModuleFile</name></decl>,
<decl><name>EDK_DepFileEntry</name></decl>,
}</block>;</enum>



<decl_stmt><decl><type><name>class</name></type> <name>DependencyOutputOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IncludeSystemHeaders</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ShowHeaderIncludes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>UsePhonyTargets</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>AddMissingHeaderDeps</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IncludeModuleFiles</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ShowSkippedHeaderIncludes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>ShowIncludesDestination</name></type> <name>ShowIncludesDest</name> <init>= <expr><name>ShowIncludesDestination</name><operator>::</operator><name>None</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DependencyOutputFormat</name></type> <name>OutputFormat</name> <init>= <expr><name>DependencyOutputFormat</name><operator>::</operator><name>Make</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OutputFile</name></expr>;</expr_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>HeaderIncludeOutputFile</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Targets</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>ExtraDepKind</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ExtraDeps</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ShowIncludesPretendHeader</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>DOTOutputFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleDependencyOutputDir</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DependencyOutputOptions</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>IncludeSystemHeaders</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ShowHeaderIncludes</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UsePhonyTargets</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>AddMissingHeaderDeps</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IncludeModuleFiles</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ShowSkippedHeaderIncludes</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
