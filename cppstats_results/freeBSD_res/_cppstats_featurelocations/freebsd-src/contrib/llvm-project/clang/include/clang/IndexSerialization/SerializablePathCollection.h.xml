<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/IndexSerialization/SerializablePathCollection.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_INDEX_SerializablePathCollection_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_INDEX_SerializablePathCollection_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>index</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>StringPool</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">512</literal></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<struct>struct <name>StringOffsetSize</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <name>Offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <name>Size</name></expr>;</expr_stmt>

<macro><name>StringOffsetSize</name><argument_list>(<argument>size_t Offset</argument>, <argument>size_t Size</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Offset</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Size</name><argument_list>(<argument>Size</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<function_decl><type><name>StringOffsetSize</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>StringRef</name> <macro><name>getBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Buffer</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>PathPool</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>RootDirKind</name> <block>{<block_content>
<expr_stmt><expr><name>Regular</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>CurrentWorkDir</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>SysRoot</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>DirPath</name> <block>{
<decl_stmt><decl><type><name>RootDirKind</name></type> <name>Root</name></decl>;</decl_stmt>
<expr_stmt><expr><name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <name>Path</name></expr>;</expr_stmt>

<macro><name>DirPath</name><argument_list>(<argument>RootDirKind Root</argument>, <argument>const StringPool::StringOffsetSize &amp;Path</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Root</name><argument_list>(<argument><expr><name>Root</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Path</name><argument_list>(<argument>Path</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>FilePath</name> <block>{
<decl_stmt><decl><type><name>DirPath</name></type> <name>Dir</name></decl>;</decl_stmt>
<expr_stmt><expr><name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <name>Filename</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FilePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DirPath</name> <operator>&amp;</operator><name>Dir</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <operator>&amp;</operator><name>Filename</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Dir</name><argument_list>(<argument><expr><name>Dir</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Filename</name><argument_list>(<argument>Filename</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>size_t</name></type> <name>addFilePath</name><argument_list>(<argument><expr><name>RootDirKind</name> <name>Root</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <operator>&amp;</operator><name>Dir</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>Filename</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <macro><name>addDirPath</name><argument_list>(<argument>StringRef Dir</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FilePath</name></expr></argument>&gt;</argument_list></name> <macro><name>getFilePaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getPaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>StringPool</name></type> <name>Paths</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FilePath</name></expr></argument>&gt;</argument_list></name> <name>FilePaths</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>SerializablePathCollection</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>WorkDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>SysRoot</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PathPool</name></type> <name>Paths</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>UniqueFiles</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>PathPool</name><operator>::</operator><name>DirPath</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name> <name>UniqueDirs</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><specifier>const</specifier> <name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <name>WorkDirPath</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <name>SysRootPath</name></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <name>OutputFilePath</name></expr>;</expr_stmt>

<macro><name>SerializablePathCollection</name><argument_list>(<argument>llvm::StringRef CurrentWorkDir</argument>,
<argument>llvm::StringRef SysRoot</argument>,
<argument>llvm::StringRef OutputFile</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getPathsBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>getPaths</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PathPool</name><operator>::</operator><name>FilePath</name></expr></argument>&gt;</argument_list></name> <macro><name>getFilePaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Paths</name><operator>.</operator><name>getFilePaths</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>size_t</name></type> <name>tryStoreFilePath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>FileEntry</name> <operator>&amp;</operator><name>FE</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>



<expr_stmt><expr><name>StringPool</name><operator>::</operator><name>StringOffsetSize</name> <macro><name>storePath</name><argument_list>(<argument>llvm::StringRef Path</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>PathPool</name><operator>::</operator><name>DirPath</name> <macro><name>tryStoreDirPath</name><argument_list>(<argument>llvm::StringRef dirStr</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
