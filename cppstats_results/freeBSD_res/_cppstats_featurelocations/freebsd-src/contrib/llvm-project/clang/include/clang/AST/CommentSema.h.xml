<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CommentSema.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMMENTSEMA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMMENTSEMA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Comment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>comments</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandTraits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Sema</name> <block>{<block_content>
<expr_stmt><expr><call><name>Sema</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Sema</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Sema</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CommandTraits</name> <modifier>&amp;</modifier></type><name>Traits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Preprocessor</name> <modifier>*</modifier></type><name>PP</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DeclInfo</name> <modifier>*</modifier></type><name>ThisDeclInfo</name></decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>TParamCommandComment</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>TemplateParameterDocs</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>BriefCommand</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>HeaderfileCommand</name></decl>;</decl_stmt>

<function><type><name>DiagnosticBuilder</name></type> <name>Diag</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Diags</name><operator>.</operator><name>Report</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>DiagID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>HTMLStartTagComment</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>HTMLOpenTags</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Sema</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>, <argument><expr><name>CommandTraits</name> <operator>&amp;</operator><name>Traits</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Preprocessor</name> <operator>*</operator><name>PP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>copyArray</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Source</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Source</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>Allocator</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>ParagraphComment</name> <modifier>*</modifier></type><name>actOnParagraphComment</name><parameter_list>(
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>InlineContentComment</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Content</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BlockCommandComment</name> <modifier>*</modifier></type><name>actOnBlockCommandStart</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEnd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>,
<parameter><decl><type><name>CommandMarkerKind</name></type> <name>CommandMarker</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnBlockCommandArgs</name><parameter_list>(<parameter><decl><type><name>BlockCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>BlockCommandComment</name><operator>::</operator><name>Argument</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnBlockCommandFinish</name><parameter_list>(<parameter><decl><type><name>BlockCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>,
<parameter><decl><type><name>ParagraphComment</name> <modifier>*</modifier></type><name>Paragraph</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ParamCommandComment</name> <modifier>*</modifier></type><name>actOnParamCommandStart</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEnd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>,
<parameter><decl><type><name>CommandMarkerKind</name></type> <name>CommandMarker</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnParamCommandDirectionArg</name><parameter_list>(<parameter><decl><type><name>ParamCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocEnd</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnParamCommandParamNameArg</name><parameter_list>(<parameter><decl><type><name>ParamCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocEnd</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnParamCommandFinish</name><parameter_list>(<parameter><decl><type><name>ParamCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>,
<parameter><decl><type><name>ParagraphComment</name> <modifier>*</modifier></type><name>Paragraph</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TParamCommandComment</name> <modifier>*</modifier></type><name>actOnTParamCommandStart</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEnd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>,
<parameter><decl><type><name>CommandMarkerKind</name></type> <name>CommandMarker</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnTParamCommandParamNameArg</name><parameter_list>(<parameter><decl><type><name>TParamCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocEnd</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnTParamCommandFinish</name><parameter_list>(<parameter><decl><type><name>TParamCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>,
<parameter><decl><type><name>ParagraphComment</name> <modifier>*</modifier></type><name>Paragraph</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>InlineCommandComment</name> <modifier>*</modifier></type><name>actOnInlineCommand</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>CommandLocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>CommandLocEnd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>InlineCommandComment</name> <modifier>*</modifier></type><name>actOnInlineCommand</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>CommandLocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>CommandLocEnd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ArgLocEnd</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>InlineContentComment</name> <modifier>*</modifier></type><name>actOnUnknownCommand</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEnd</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>CommandName</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>InlineContentComment</name> <modifier>*</modifier></type><name>actOnUnknownCommand</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEnd</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>TextComment</name> <modifier>*</modifier></type><name>actOnText</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEnd</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VerbatimBlockComment</name> <modifier>*</modifier></type><name>actOnVerbatimBlockStart</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VerbatimBlockLineComment</name> <modifier>*</modifier></type><name>actOnVerbatimBlockLine</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnVerbatimBlockFinish</name><parameter_list>(<parameter><decl><type><name>VerbatimBlockComment</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>CloseNameLocBegin</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>CloseName</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>VerbatimBlockLineComment</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Lines</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>VerbatimLineComment</name> <modifier>*</modifier></type><name>actOnVerbatimLine</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>TextBegin</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HTMLStartTagComment</name> <modifier>*</modifier></type><name>actOnHTMLStartTagStart</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>TagName</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>actOnHTMLStartTagFinish</name><parameter_list>(<parameter><decl><type><name>HTMLStartTagComment</name> <modifier>*</modifier></type><name>Tag</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>HTMLStartTagComment</name><operator>::</operator><name>Attribute</name></expr></argument>&gt;</argument_list></name></type> <name>Attrs</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>GreaterLoc</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsSelfClosing</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>HTMLEndTagComment</name> <modifier>*</modifier></type><name>actOnHTMLEndTag</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LocBegin</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEnd</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>TagName</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FullComment</name> <modifier>*</modifier></type><name>actOnFullComment</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>BlockContentComment</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Blocks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>checkBlockCommandEmptyParagraph</name><parameter_list>(<parameter><decl><type><name>BlockCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>checkReturnsCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>checkBlockCommandDuplicate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>Command</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>checkDeprecatedCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>Comment</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>checkFunctionDeclVerbatimLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>Comment</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>checkContainerDeclVerbatimLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>Comment</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>checkContainerDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockCommandComment</name> <modifier>*</modifier></type><name>Comment</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>resolveParamCommandIndexes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FullComment</name> <modifier>*</modifier></type><name>FC</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isFunctionDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isAnyFunctionDecl</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>isFunctionPointerVarDecl</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>bool</name></type> <name>isFunctionOrBlockPointerVarLikeDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isFunctionOrMethodVariadic</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isObjCMethodDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isObjCPropertyDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isTemplateOrSpecialization</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isRecordLikeDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isClassOrStructDecl</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isClassOrStructOrTagTypedefDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isUnionDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isObjCInterfaceDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isObjCProtocolDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isClassTemplateDecl</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isFunctionTemplateDecl</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>getParamVars</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>inspectThisDecl</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>unsigned</name></type> <name>resolveParmVarReference</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>ParamVars</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>unsigned</name></type> <name>correctTypoInParmVarReference</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Typo</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>ParamVars</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>resolveTParamReference</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TemplateParameterList</name> <modifier>*</modifier></type><name>TemplateParameters</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>Position</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StringRef</name></type> <name>correctTypoInTParamReference</name><parameter_list>(
<parameter><decl><type><name>StringRef</name></type> <name>Typo</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TemplateParameterList</name> <modifier>*</modifier></type><name>TemplateParameters</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>InlineCommandComment</name><operator>::</operator><name>RenderKind</name>
<macro><name>getInlineCommandRenderKind</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
