<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/ParsedTemplate.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_PARSEDTEMPLATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_PARSEDTEMPLATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OperatorKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TemplateKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/DeclSpec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Ownership.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;new&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ParsedTemplateArgument</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <name>KindType</name> <block>{

<decl><name>Type</name></decl>,

<decl><name>NonType</name></decl>,

<decl><name>Template</name></decl>
}</block>;</enum>




<expr_stmt><expr><call><name>ParsedTemplateArgument</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Arg</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{ }</block>





<macro><name>ParsedTemplateArgument</name><argument_list>(<argument>KindType Kind</argument>, <argument>void *Arg</argument>, <argument>SourceLocation Loc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Arg</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Loc</name><argument_list>(<argument>Loc</argument>)</argument_list></macro> <expr><block>{ }</block>










<macro><name>ParsedTemplateArgument</name><argument_list>(<argument>const CXXScopeSpec &amp;SS</argument>,
<argument>ParsedTemplateTy Template</argument>,
<argument>SourceLocation TemplateLoc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>ParsedTemplateArgument</name><operator>::</operator><name>Template</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Arg</name><argument_list>(<argument><expr><call><name><name>Template</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SS</name><argument_list>(<argument><expr><name>SS</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Loc</name><argument_list>(<argument><expr><name>TemplateLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>EllipsisLoc</name><argument_list>()</argument_list></macro> <expr><block>{ }</block>


<name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Arg</name> <operator>==</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>KindType</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>ParsedType</name> <macro><name>getAsType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Type</name> <operator>&amp;&amp;</operator> <literal type="string">"Not a template type argument"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ParsedType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getAsExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>NonType</name> <operator>&amp;&amp;</operator> <literal type="string">"Not a non-type template argument"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>ParsedTemplateTy</name> <macro><name>getAsTemplate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Template</name> <operator>&amp;&amp;</operator> <literal type="string">"Not a template template argument"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ParsedTemplateTy</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>CXXScopeSpec</name> <operator>&amp;</operator><macro><name>getScopeSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Template</name> <operator>&amp;&amp;</operator>
<literal type="string">"Only template template arguments can have a scope specifier"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>SS</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEllipsisLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Template</name> <operator>&amp;&amp;</operator>
<literal type="string">"Only template template arguments can have an ellipsis"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>EllipsisLoc</name></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>ParsedTemplateArgument</name></type> <name>getTemplatePackExpansion</name><argument_list>(
<argument><expr><name>SourceLocation</name> <name>EllipsisLoc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>KindType</name></type> <name>Kind</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Arg</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXXScopeSpec</name></type> <name>SS</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>SourceLocation</name></type> <name>EllipsisLoc</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>












<decl_stmt><decl><type><name><name>struct</name> <name>TemplateIdAnnotation</name></name></type> <name>final</name>
<range>: <expr><name>private</name> <name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>TemplateIdAnnotation</name></expr></argument>,
<argument><expr><name>ParsedTemplateArgument</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>TrailingObjects</name></expr>;


<expr><name>SourceLocation</name> <name>TemplateKWLoc</name></expr>;



<expr><name>SourceLocation</name> <name>TemplateNameLoc</name></expr>;


<expr><name>IdentifierInfo</name> <operator>*</operator><name>Name</name></expr>;


<expr><name>OverloadedOperatorKind</name> <name>Operator</name></expr>;



<expr><name>ParsedTemplateTy</name> <name>Template</name></expr>;




<expr><name>TemplateNameKind</name> <name>Kind</name></expr>;



<expr><name>SourceLocation</name> <name>LAngleLoc</name></expr>;



<expr><name>SourceLocation</name> <name>RAngleLoc</name></expr>;


<expr><name>unsigned</name> <name>NumArgs</name></expr>;



<expr><name>bool</name> <name>ArgsInvalid</name></expr>;


<expr><name>ParsedTemplateArgument</name> <operator>*</operator><macro><name>getTemplateArgs</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ParsedTemplateArgument</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>



<specifier>static</specifier> <name>TemplateIdAnnotation</name> <operator>*</operator>
<macro><name>Create</name><argument_list>(<argument>SourceLocation TemplateKWLoc</argument>, <argument>SourceLocation TemplateNameLoc</argument>,
<argument>IdentifierInfo *Name</argument>, <argument>OverloadedOperatorKind OperatorKind</argument>,
<argument>ParsedTemplateTy OpaqueTemplateName</argument>, <argument>TemplateNameKind TemplateKind</argument>,
<argument>SourceLocation LAngleLoc</argument>, <argument>SourceLocation RAngleLoc</argument>,
<argument>ArrayRef&lt;ParsedTemplateArgument&gt; TemplateArgs</argument>, <argument>bool ArgsInvalid</argument>,
<argument>SmallVectorImpl&lt;TemplateIdAnnotation *&gt; &amp;CleanupList</argument>)</argument_list></macro> <block>{
<expr><name>TemplateIdAnnotation</name> <operator>*</operator><name>TemplateId</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>llvm::safe_malloc(
totalSizeToAlloc&lt;ParsedTemplateArgument&gt;(TemplateArgs.size()))</argument>)</argument_list></macro>
<call><name>TemplateIdAnnotation</name><argument_list>(<argument><expr><name>TemplateKWLoc</name></expr></argument>, <argument><expr><name>TemplateNameLoc</name></expr></argument>, <argument><expr><name>Name</name></expr></argument>,
<argument><expr><name>OperatorKind</name></expr></argument>, <argument><expr><name>OpaqueTemplateName</name></expr></argument>, <argument><expr><name>TemplateKind</name></expr></argument>,
<argument><expr><name>LAngleLoc</name></expr></argument>, <argument><expr><name>RAngleLoc</name></expr></argument>, <argument><expr><name>TemplateArgs</name></expr></argument>, <argument><expr><name>ArgsInvalid</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>CleanupList</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>TemplateId</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TemplateId</name></expr>;</return>
}</block>

<name>void</name> <macro><name>Destroy</name><argument_list>()</argument_list></macro> <block>{
<expr><name>std</name><operator>::</operator><call><name>for_each</name><argument_list>(
<argument><expr><call><name>getTemplateArgs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getTemplateArgs</name><argument_list>()</argument_list></call> <operator>+</operator> <name>NumArgs</name></expr></argument>,
<argument><expr><index>[]</index><operator>(</operator><name>ParsedTemplateArgument</name> <operator>&amp;</operator><name>A</name><operator>)</operator> <block>{ <expr><name><name>A</name><operator>.</operator><name/></name>~<call><name>ParsedTemplateArgument</name><argument_list>()</argument_list></call></expr>; }</block></expr></argument>)</argument_list></call></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name/></name>~<call><name>TemplateIdAnnotation</name><argument_list>()</argument_list></call></expr>;
<expr><call><name>free</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>bool</name> <macro><name>mightBeType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>==</operator> <name>TNK_Non_template</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>TNK_Type_template</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>TNK_Dependent_template_name</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>TNK_Undeclared_template</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>hasInvalidName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>TNK_Non_template</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasInvalidArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ArgsInvalid</name></expr>;</return> }</block>

<name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>hasInvalidName</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>hasInvalidArgs</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<call><name>TemplateIdAnnotation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateIdAnnotation</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;

<macro><name>TemplateIdAnnotation</name><argument_list>(<argument>SourceLocation TemplateKWLoc</argument>,
<argument>SourceLocation TemplateNameLoc</argument>, <argument>IdentifierInfo *Name</argument>,
<argument>OverloadedOperatorKind OperatorKind</argument>,
<argument>ParsedTemplateTy OpaqueTemplateName</argument>,
<argument>TemplateNameKind TemplateKind</argument>,
<argument>SourceLocation LAngleLoc</argument>, <argument>SourceLocation RAngleLoc</argument>,
<argument>ArrayRef&lt;ParsedTemplateArgument&gt; TemplateArgs</argument>,
<argument>bool ArgsInvalid</argument>)</argument_list></macro> <expr><name>noexcept</name>
<operator>:</operator> <call><name>TemplateKWLoc</name><argument_list>(<argument><expr><name>TemplateKWLoc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>TemplateNameLoc</name><argument_list>(<argument><expr><name>TemplateNameLoc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Name</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Operator</name><argument_list>(<argument><expr><name>OperatorKind</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Template</name><argument_list>(<argument><expr><name>OpaqueTemplateName</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Kind</name><argument_list>(<argument><expr><name>TemplateKind</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>LAngleLoc</name><argument_list>(<argument><expr><name>LAngleLoc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>RAngleLoc</name><argument_list>(<argument><expr><name>RAngleLoc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>NumArgs</name><argument_list>(<argument><expr><call><name><name>TemplateArgs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>ArgsInvalid</name><argument_list>(<argument>ArgsInvalid</argument>)</argument_list></macro> <expr><block>{

<expr><name>std</name><operator>::</operator><call><name>uninitialized_copy</name><argument_list>(<argument><expr><call><name><name>TemplateArgs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>TemplateArgs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getTemplateArgs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>
<operator>~</operator><call><name>TemplateIdAnnotation</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
}</block></expr></range></decl>;</decl_stmt>


<function_decl><type><name>SourceRange</name></type> <name>getTemplateParamsRange</name><parameter_list>(<parameter><decl><type><name>TemplateParameterList</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>Params</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>NumParams</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
