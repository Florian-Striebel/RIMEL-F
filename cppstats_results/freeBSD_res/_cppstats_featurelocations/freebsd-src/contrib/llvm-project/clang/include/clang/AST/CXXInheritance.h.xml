<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CXXInheritance.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_CXXINHERITANCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_CXXINHERITANCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeOrdering.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/MapVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>








<struct>struct <name>CXXBasePathElement</name> <block>{



<decl_stmt><decl><type><specifier>const</specifier> <name>CXXBaseSpecifier</name> <modifier>*</modifier></type><name>Base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Class</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>int</name></type> <name>SubobjectNumber</name></decl>;</decl_stmt>
}</block>;</struct>









<decl_stmt><decl><type><name>class</name></type> <name>CXXBasePath</name> <range>: <expr><name>public</name> <name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CXXBasePathElement</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>



<name>AccessSpecifier</name> <name>Access</name> <operator>=</operator> <name>AS_public</name></expr>;

<expr><call><name>CXXBasePath</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;


<expr><name>DeclContext</name><operator>::</operator><name>lookup_iterator</name> <name>Decls</name></expr>;

<expr><name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>CXXBasePathElement</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;
<expr><name>Access</name> <operator>=</operator> <name>AS_public</name></expr>;
}</block></expr>
}</block></expr></range></decl>;</decl_stmt>






























<decl_stmt><decl><type><name>class</name></type> <name>CXXBasePaths</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Origin</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CXXBasePath</name></expr></argument>&gt;</argument_list></name> <name>Paths</name></expr>;</expr_stmt>







<struct>struct <name>IsVirtBaseAndNumberNonVirtBases</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsVirtBase</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumberOfNonVirtBases</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>, <argument><expr><name>IsVirtBaseAndNumberNonVirtBases</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name>
<name>ClassSubobjects</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallPtrSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>VisitedDependentRecords</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>RecordType</name> <modifier>*</modifier></type><name>DetectedVirtual</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>CXXBasePath</name></type> <name>ScratchPath</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>FindAmbiguities</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>RecordPaths</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>DetectVirtual</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>lookupInBases</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><name>Record</name></expr></argument>,
<argument><expr><name>CXXRecordDecl</name><operator>::</operator><name>BaseMatchesCallback</name> <name>BaseMatches</name></expr></argument>,
<argument><expr><name>bool</name> <name>LookupInDependent</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>paths_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CXXBasePath</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_paths_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CXXBasePath</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>decl_iterator</name> <init>= <expr><name>NamedDecl</name> <operator>*</operator><operator>*</operator></expr></init></decl>;</decl_stmt>



<macro><name>explicit</name></macro> <macro><name>CXXBasePaths</name><argument_list>(<argument>bool FindAmbiguities = true</argument>, <argument>bool RecordPaths = true</argument>,
<argument>bool DetectVirtual = true</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>FindAmbiguities</name><argument_list>(<argument><expr><name>FindAmbiguities</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RecordPaths</name><argument_list>(<argument><expr><name>RecordPaths</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>DetectVirtual</name><argument_list>(<argument>DetectVirtual</argument>)</argument_list></macro> <expr><block>{}</block>

<name>paths_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>paths_iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_paths_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_paths_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>CXXBasePath</name><modifier>&amp;</modifier></type> <name>front</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>CXXBasePath</name><operator>&amp;</operator> <macro><name>front</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Paths</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>decl_range</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>decl_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<function_decl><type><name>bool</name></type> <name>isAmbiguous</name><parameter_list>(<parameter><decl><type><name>CanQualType</name></type> <name>BaseType</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isFindingAmbiguities</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FindAmbiguities</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isRecordingPaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RecordPaths</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setRecordingPaths</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>RP</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>RecordPaths</name> <operator>=</operator> <name>RP</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isDetectingVirtual</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DetectVirtual</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>RecordType</name><operator>*</operator> <macro><name>getDetectedVirtual</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>DetectedVirtual</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><macro><name>getOrigin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Origin</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setOrigin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Rec</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Origin</name> <operator>=</operator> <name>Rec</name></expr>;</expr_stmt> </block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>CXXBasePaths</name> <modifier>&amp;</modifier></type><name>Other</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<struct>struct <name>UniqueVirtualMethod</name> <block>{

<decl_stmt><decl><type><name>CXXMethodDecl</name> <modifier>*</modifier></type><name>Method</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Subobject</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>InVirtualSubobject</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UniqueVirtualMethod</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>UniqueVirtualMethod</name><argument_list>(<argument>CXXMethodDecl *Method</argument>, <argument>unsigned Subobject</argument>,
<argument>const CXXRecordDecl *InVirtualSubobject</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Method</name><argument_list>(<argument><expr><name>Method</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Subobject</name><argument_list>(<argument><expr><name>Subobject</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>InVirtualSubobject</name><argument_list>(<argument>InVirtualSubobject</argument>)</argument_list></macro> <expr><block>{}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>UniqueVirtualMethod</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>UniqueVirtualMethod</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>Method</name></name> <operator>==</operator> <name><name>Y</name><operator>.</operator><name>Method</name></name> <operator>&amp;&amp;</operator> <name><name>X</name><operator>.</operator><name>Subobject</name></name> <operator>==</operator> <name><name>Y</name><operator>.</operator><name>Subobject</name></name> <operator>&amp;&amp;</operator>
<name><name>X</name><operator>.</operator><name>InVirtualSubobject</name></name> <operator>==</operator> <name><name>Y</name><operator>.</operator><name>InVirtualSubobject</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>UniqueVirtualMethod</name> <operator>&amp;</operator><name>X</name><operator>,</operator>
<specifier>const</specifier> <name>UniqueVirtualMethod</name> <operator>&amp;</operator><name>Y</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>X</name> <operator>==</operator> <name>Y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>








<decl_stmt><decl><type><name>class</name></type> <name>OverridingMethods</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>ValuesT</name> <init>= <expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>UniqueVirtualMethod</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>MapType</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>ValuesT</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MapType</name></type> <name>Overrides</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>MapType</name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>MapType</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Overrides</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Overrides</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Overrides</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Overrides</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Overrides</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>overriding_iterator</name> <init>=
<expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>UniqueVirtualMethod</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>overriding_const_iterator</name> <init>=
<expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>UniqueVirtualMethod</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>OverriddenSubobject</name></decl></parameter>, <parameter><decl><type><name>UniqueVirtualMethod</name></type> <name>Overriding</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OverridingMethods</name> <modifier>&amp;</modifier></type><name>Other</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>replaceAll</name><parameter_list>(<parameter><decl><type><name>UniqueVirtualMethod</name></type> <name>Overriding</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




















































<decl_stmt><decl><type><name>class</name></type> <name>CXXFinalOverriderMap</name>
<range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>MapVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXMethodDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>OverridingMethods</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CXXIndirectPrimaryBaseSet</name>
<range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>SmallSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXRecordDecl</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>bool</name></type>
<name>inheritanceModelHasVBPtrOffsetField</name><parameter_list>(<parameter><decl><type><name>MSInheritanceModel</name></type> <name>Inheritance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Inheritance</name> <operator>==</operator> <name>MSInheritanceModel</name><operator>::</operator><name>Unspecified</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>inheritanceModelHasNVOffsetField</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsMemberFunction</name></decl></parameter>,
<parameter><decl><type><name>MSInheritanceModel</name></type> <name>Inheritance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>IsMemberFunction</name> <operator>&amp;&amp;</operator> <name>Inheritance</name> <operator>&gt;=</operator> <name>MSInheritanceModel</name><operator>::</operator><name>Multiple</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type>
<name>inheritanceModelHasVBTableOffsetField</name><parameter_list>(<parameter><decl><type><name>MSInheritanceModel</name></type> <name>Inheritance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Inheritance</name> <operator>&gt;=</operator> <name>MSInheritanceModel</name><operator>::</operator><name>Virtual</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>inheritanceModelHasOnlyOneField</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsMemberFunction</name></decl></parameter>,
<parameter><decl><type><name>MSInheritanceModel</name></type> <name>Inheritance</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>IsMemberFunction</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Inheritance</name> <operator>&lt;=</operator> <name>MSInheritanceModel</name><operator>::</operator><name>Single</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Inheritance</name> <operator>&lt;=</operator> <name>MSInheritanceModel</name><operator>::</operator><name>Multiple</name></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
