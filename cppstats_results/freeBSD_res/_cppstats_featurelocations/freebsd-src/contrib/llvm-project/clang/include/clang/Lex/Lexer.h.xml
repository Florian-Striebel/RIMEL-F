<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/Lexer.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_LEXER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_LEXER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PreprocessorLexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryBufferRef</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>



<enum>enum <name>ConflictMarkerKind</name> <block>{

<decl><name>CMK_None</name></decl>,



<decl><name>CMK_Normal</name></decl>,



<decl><name>CMK_Perforce</name></decl>
}</block>;</enum>




<struct>struct <name>PreambleBounds</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>Size</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>PreambleEndsAtStartOfLine</name></decl>;</decl_stmt>

<macro><name>PreambleBounds</name><argument_list>(<argument>unsigned Size</argument>, <argument>bool PreambleEndsAtStartOfLine</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Size</name><argument_list>(<argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>PreambleEndsAtStartOfLine</name><argument_list>(<argument>PreambleEndsAtStartOfLine</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>





<decl_stmt><decl><type><name>class</name></type> <name>Lexer</name> <range>: <expr><name>public</name> <name>PreprocessorLexer</name> <block>{
<expr><name>friend</name> <name>class</name> <name>Preprocessor</name></expr>;

<expr><name>void</name> <macro><name>anchor</name><argument_list>()</argument_list></macro> <name>override</name></expr>;





<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BufferStart</name></expr>;


<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BufferEnd</name></expr>;


<expr><name>SourceLocation</name> <name>FileLoc</name></expr>;


<expr><name>LangOptions</name> <name>LangOpts</name></expr>;


<expr><name>bool</name> <name>Is_PragmaLexer</name></expr>;












<expr><name>unsigned</name> <name>char</name> <name>ExtendedTokenMode</name></expr>;








<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BufferPtr</name></expr>;



<expr><name>bool</name> <name>IsAtStartOfLine</name></expr>;

<expr><name>bool</name> <name>IsAtPhysicalStartOfLine</name></expr>;

<expr><name>bool</name> <name>HasLeadingSpace</name></expr>;

<expr><name>bool</name> <name>HasLeadingEmptyMacro</name></expr>;



<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>NewLinePtr</name></expr>;


<expr><name>ConflictMarkerKind</name> <name>CurrentConflictMarkerState</name></expr>;

<expr><name>void</name> <call><name>InitLexer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BufStart</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BufPtr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BufEnd</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>




<macro><name>Lexer</name><argument_list>(<argument>FileID FID</argument>, <argument>const llvm::MemoryBufferRef &amp;InputFile</argument>, <argument>Preprocessor &amp;PP</argument>)</argument_list></macro></expr>;




<macro><name>Lexer</name><argument_list>(<argument>SourceLocation FileLoc</argument>, <argument>const LangOptions &amp;LangOpts</argument>,
<argument>const char *BufStart</argument>, <argument>const char *BufPtr</argument>, <argument>const char *BufEnd</argument>)</argument_list></macro>;




<macro><name>Lexer</name><argument_list>(<argument>FileID FID</argument>, <argument>const llvm::MemoryBufferRef &amp;FromFile</argument>,
<argument>const SourceManager &amp;SM</argument>, <argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro>;

<expr><call><name>Lexer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Lexer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>Lexer</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Lexer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;




<expr><specifier>static</specifier> <name>Lexer</name> <operator>*</operator><macro><name>Create_PragmaLexer</name><argument_list>(<argument>SourceLocation SpellingLoc</argument>,
<argument>SourceLocation ExpansionLocStart</argument>,
<argument>SourceLocation ExpansionLocEnd</argument>,
<argument>unsigned TokLen</argument>, <argument>Preprocessor &amp;PP</argument>)</argument_list></macro></expr>;



<expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LangOpts</name></expr>;</return> }</block>





<name>SourceLocation</name> <macro><name>getFileLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FileLoc</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>


<name>bool</name> <call><name>Lex</name><argument_list>(<argument><expr><name>Token</name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>

<name>bool</name> <macro><name>isPragmaLexer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Is_PragmaLexer</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>


<name>void</name> <macro><name>IndirectLex</name><argument_list>(<argument>Token &amp;Result</argument>)</argument_list></macro> <name>override</name> <block>{ <expr><call><name>Lex</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>public</name><operator>:</operator>



<name>bool</name> <macro><name>LexFromRawLexer</name><argument_list>(<argument>Token &amp;Result</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>LexingRawMode</name> <operator>&amp;&amp;</operator> <literal type="string">"Not already in raw mode!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>Lex</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>;


<return>return <expr><name>BufferPtr</name> <operator>==</operator> <name>BufferEnd</name></expr>;</return>
}</block>





<name>bool</name> <macro><name>isKeepWhitespaceMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExtendedTokenMode</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
}</block>



<name>void</name> <macro><name>SetKeepWhitespaceMode</name><argument_list>(<argument>bool Val</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>Val</name> <operator>||</operator> <name>LexingRawMode</name> <operator>||</operator> <name><name>LangOpts</name><operator>.</operator><name>TraditionalCPP</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Can only retain whitespace in raw mode or -traditional-cpp"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>ExtendedTokenMode</name> <operator>=</operator> <ternary><condition><expr><name>Val</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;
}</block>



<name>bool</name> <macro><name>inKeepCommentMode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExtendedTokenMode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
}</block>




<name>void</name> <macro><name>SetCommentRetentionState</name><argument_list>(<argument>bool Mode</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isKeepWhitespaceMode</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Can't play with comment retention state when retaining whitespace"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>ExtendedTokenMode</name> <operator>=</operator> <ternary><condition><expr><name>Mode</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;
}</block>







<name>void</name> <call><name>resetExtendedTokenMode</name><argument_list>()</argument_list></call></expr>;


<expr><name>StringRef</name> <macro><name>getBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>BufferStart</name></expr></argument>, <argument><expr><name>BufferEnd</name> <operator>-</operator> <name>BufferStart</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>void</name> <call><name>ReadToEndOfLine</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Result</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;




<expr><name>DiagnosticBuilder</name> <macro><name>Diag</name><argument_list>(<argument>const char *Loc</argument>, <argument>unsigned DiagID</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>SourceLocation</name> <macro><name>getSourceLocation</name><argument_list>(<argument>const char *Loc</argument>, <argument>unsigned TokLen = <literal type="number">1</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>SourceLocation</name> <macro><name>getSourceLocation</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name>getSourceLocation</name><argument_list>(<argument><expr><name>BufferPtr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getBufferLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BufferPtr</name></expr>;</return> }</block>


<name>unsigned</name> <macro><name>getCurrentBufferOffset</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>BufferPtr</name> <operator>&gt;=</operator> <name>BufferStart</name> <operator>&amp;&amp;</operator> <literal type="string">"Invalid buffer state"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>BufferPtr</name> <operator>-</operator> <name>BufferStart</name></expr>;</return>
}</block>








<name>bool</name> <macro><name>skipOver</name><argument_list>(<argument>unsigned NumBytes</argument>)</argument_list></macro></expr>;




<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>Stringify</name><argument_list>(<argument>StringRef Str</argument>, <argument>bool Charify = false</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>void</name> <call><name>Stringify</name><argument_list>(<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Str</name></expr></argument>)</argument_list></call></expr>;











<expr><specifier>static</specifier> <name>unsigned</name> <call><name>getSpelling</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>Tok</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>&amp;</operator><name>Buffer</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;






<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>getSpelling</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>Tok</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><name>bool</name> <operator>*</operator><name>Invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;









<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>getSpelling</name><argument_list>(<argument>SourceLocation loc</argument>,
<argument>SmallVectorImpl&lt;char&gt; &amp;buffer</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;options</argument>,
<argument>bool *invalid = nullptr</argument>)</argument_list></macro></expr>;





<expr><specifier>static</specifier> <name>unsigned</name> <macro><name>MeasureTokenLength</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>bool</name> <macro><name>getRawToken</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>Token &amp;Result</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>,
<argument>bool IgnoreWhiteSpace = false</argument>)</argument_list></macro></expr>;




<expr><specifier>static</specifier> <name>SourceLocation</name> <macro><name>GetBeginningOfToken</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>unsigned</name> <macro><name>getTokenPrefixLength</name><argument_list>(<argument>SourceLocation TokStart</argument>,
<argument>unsigned CharNo</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;




<expr><specifier>static</specifier> <name>SourceLocation</name> <macro><name>AdvanceToTokenCharacter</name><argument_list>(<argument>SourceLocation TokStart</argument>,
<argument>unsigned Characters</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>TokStart</name><operator>.</operator><name>getLocWithOffset</name></name><argument_list>(
<argument><expr><call><name>getTokenPrefixLength</name><argument_list>(<argument><expr><name>TokStart</name></expr></argument>, <argument><expr><name>Characters</name></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
















<specifier>static</specifier> <name>SourceLocation</name> <macro><name>getLocForEndOfToken</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>unsigned Offset</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;





<expr><specifier>static</specifier> <name>CharSourceRange</name> <macro><name>getAsCharRange</name><argument_list>(<argument>SourceRange Range</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro> <block>{
<expr><name>SourceLocation</name> <name>End</name> <operator>=</operator> <call><name>getLocForEndOfToken</name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name><name>End</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>CharSourceRange</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><name>CharSourceRange</name><operator>::</operator><call><name>getCharRange</name><argument_list>(
<argument><expr><call><name><name>Range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>End</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block>
<specifier>static</specifier> <name>CharSourceRange</name> <macro><name>getAsCharRange</name><argument_list>(<argument>CharSourceRange Range</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro> <block>{
<return>return <expr><ternary><condition><expr><call><name><name>Range</name><operator>.</operator><name>isTokenRange</name></name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><call><name>getAsCharRange</name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>getAsRange</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr>
</then><else>: <expr><name>Range</name></expr></else></ternary></expr>;</return>
}</block>






<specifier>static</specifier> <name>bool</name> <macro><name>isAtStartOfMacroExpansion</name><argument_list>(<argument>SourceLocation loc</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>,
<argument>SourceLocation *MacroBegin = nullptr</argument>)</argument_list></macro></expr>;






<expr><specifier>static</specifier> <name>bool</name> <macro><name>isAtEndOfMacroExpansion</name><argument_list>(<argument>SourceLocation loc</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>,
<argument>SourceLocation *MacroEnd = nullptr</argument>)</argument_list></macro></expr>;



























<expr><specifier>static</specifier> <name>CharSourceRange</name> <macro><name>makeFileCharRange</name><argument_list>(<argument>CharSourceRange Range</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;


<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>getSourceText</name><argument_list>(<argument>CharSourceRange Range</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>,
<argument>bool *Invalid = nullptr</argument>)</argument_list></macro></expr>;








<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>getImmediateMacroName</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;


















<expr><specifier>static</specifier> <name>StringRef</name> <macro><name>getImmediateMacroNameForDiagnostics</name><argument_list>(
<argument>SourceLocation Loc</argument>, <argument>const SourceManager &amp;SM</argument>, <argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;
















<expr><specifier>static</specifier> <name>PreambleBounds</name> <macro><name>ComputePreamble</name><argument_list>(<argument>StringRef Buffer</argument>,
<argument>const LangOptions &amp;LangOpts</argument>,
<argument>unsigned MaxLines = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;




<expr><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <macro><name>findNextToken</name><argument_list>(<argument>SourceLocation Loc</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;






<expr><specifier>static</specifier> <name>SourceLocation</name> <macro><name>findLocationAfterToken</name><argument_list>(<argument>SourceLocation loc</argument>,
<argument>tok::TokenKind TKind</argument>,
<argument>const SourceManager &amp;SM</argument>,
<argument>const LangOptions &amp;LangOpts</argument>,
<argument>bool SkipTrailingWhitespaceAndNewLine</argument>)</argument_list></macro></expr>;


<expr><specifier>static</specifier> <name>bool</name> <macro><name>isIdentifierBodyChar</name><argument_list>(<argument>char c</argument>, <argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>bool</name> <call><name>isNewLineEscaped</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BufferStart</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Str</name></expr></argument>)</argument_list></call></expr>;



<expr><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <macro><name>getCharAndSizeNoWarn</name><argument_list>(<argument>const char *Ptr</argument>, <argument>unsigned &amp;Size</argument>,
<argument>const LangOptions &amp;LangOpts</argument>)</argument_list></macro> <block>{


<if_stmt><if>if <condition>(<expr><call><name>isObviouslySimpleCharacter</name><argument_list>(<argument><expr><name><name>Ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>Ptr</name></expr>;</return>
<expr_stmt/>}</block_content>

Size = 0</block><empty_stmt>;</empty_stmt></if></if_stmt></block></expr>
<return>return <expr><call><name>getCharAndSizeSlowNoWarn</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>



<function_decl><type><specifier>static</specifier> <name>StringRef</name></type> <name>getIndentationForLine</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>






<function_decl><type><name>bool</name></type> <name>LexTokenInternal</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>TokAtPhysicalStartOfLine</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>CheckUnicodeWhitespace</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>LexUnicode</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>void</name></type> <name>FormTokenWithChars</name><argument_list>(<argument><expr><name>Token</name> <operator>&amp;</operator><name>Result</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>TokEnd</name></expr></argument>,
<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>TokLen</name> <init>= <expr><name>TokEnd</name><operator>-</operator><name>BufferPtr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><name>TokLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>setLocation</name></name><argument_list>(<argument><expr><call><name>getSourceLocation</name><argument_list>(<argument><expr><name>BufferPtr</name></expr></argument>, <argument><expr><name>TokLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>setKind</name></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>BufferPtr</name> <operator>=</operator> <name>TokEnd</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<function_decl><type><name>unsigned</name></type> <name>isNextPPTokenLParen</name><parameter_list>()</parameter_list>;</function_decl>























<function><type><specifier>static</specifier> <name>bool</name></type> <name>isObviouslySimpleCharacter</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>C</name> <operator>!=</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>C</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>inline</specifier> <name>char</name></type> <name>getAndAdvanceChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>isObviouslySimpleCharacter</name><argument_list>(<argument><expr><name><name>Ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>*</operator><name>Ptr</name><operator>++</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>C</name> <init>= <expr><call><name>getCharAndSizeSlow</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tok</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Ptr</name> <operator>+=</operator> <name>Size</name></expr>;</expr_stmt>
<return>return <expr><name>C</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ConsumeChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Ptr</name><operator>+</operator><name>Size</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>Size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>getCharAndSizeSlow</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Ptr</name><operator>+</operator><name>Size</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>inline</specifier> <name>char</name></type> <name>getCharAndSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Size</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>isObviouslySimpleCharacter</name><argument_list>(<argument><expr><name><name>Ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>Ptr</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>getCharAndSizeSlow</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name>char</name></type> <name>getCharAndSizeSlow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Size</name></decl></parameter>,
<parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>Tok</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>getEscapedNewLineSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SkipEscapedNewLines</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>char</name></type> <name>getCharAndSizeSlowNoWarn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Size</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>SetByteOffset</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>StartOfLine</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PropagateLineStartLeadingSpaceInfo</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>LexUDSuffix</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsStringLiteral</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>LexIdentifier</name> <parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>LexNumericConstant</name> <parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>LexStringLiteral</name> <argument_list>(<argument><expr><name>Token</name> <operator>&amp;</operator><name>Result</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>CurPtr</name></expr></argument>,
<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>LexRawStringLiteral</name> <argument_list>(<argument><expr><name>Token</name> <operator>&amp;</operator><name>Result</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>CurPtr</name></expr></argument>,
<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>LexAngledStringLiteral</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>LexCharConstant</name> <argument_list>(<argument><expr><name>Token</name> <operator>&amp;</operator><name>Result</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>CurPtr</name></expr></argument>,
<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>LexEndOfFile</name> <parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SkipWhitespace</name> <parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>TokAtPhysicalStartOfLine</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SkipLineComment</name> <parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>TokAtPhysicalStartOfLine</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SkipBlockComment</name> <parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>TokAtPhysicalStartOfLine</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SaveLineComment</name> <parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsStartOfConflictMarker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>HandleEndOfConflictMarker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>lexEditorPlaceholder</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>isCodeCompletionPoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>CurPtr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function><type><name>void</name></type> <name>cutOffLexing</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>BufferPtr</name> <operator>=</operator> <name>BufferEnd</name></expr>;</expr_stmt> </block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>isHexaLiteral</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>codeCompleteIncludedFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PathStart</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CompletionPoint</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsAngled</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>uint32_t</name></type> <name>tryReadUCN</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>StartPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SlashLoc</name></decl></parameter>, <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>bool</name></type> <name>tryConsumeIdentifierUCN</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>CurPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Size</name></decl></parameter>,
<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>bool</name></type> <name>tryConsumeIdentifierUTF8Char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>CurPtr</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
