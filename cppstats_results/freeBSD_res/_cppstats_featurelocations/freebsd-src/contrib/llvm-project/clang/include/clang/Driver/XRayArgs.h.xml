<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/XRayArgs.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_XRAYARGS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_XRAYARGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/XRayInstr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Arg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/ArgList.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ToolChain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>XRayArgs</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>AlwaysInstrumentFiles</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>NeverInstrumentFiles</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>AttrListFiles</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ExtraDeps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Modes</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>XRayInstrSet</name></type> <name>InstrumentationBundle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>XRayInstrument</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>InstructionThreshold</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>XRayAlwaysEmitCustomEvents</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>XRayAlwaysEmitTypedEvents</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>XRayRT</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>XRayIgnoreLoops</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>XRayFunctionIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>XRayFunctionGroups</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>XRaySelectedFunctionGroup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>XRayArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>addArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ToolChain</name> <operator>&amp;</operator><name>TC</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CmdArgs</name></expr></argument>, <argument><expr><name>types</name><operator>::</operator><name>ID</name> <name>InputType</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>needsXRayRt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>XRayInstrument</name> <operator>&amp;&amp;</operator> <name>XRayRT</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>modeList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Modes</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>XRayInstrSet</name> <macro><name>instrumentationBundle</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>InstrumentationBundle</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
