<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/ASTDiff/ASTDiffInternal.h">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_ASTDIFF_ASTDIFFINTERNAL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_ASTDIFF_ASTDIFFINTERNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTTypeTraits.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>diff</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>DynTypedNode</name> <init>= <expr><name>DynTypedNode</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SyntaxTree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SyntaxTreeImpl</name></decl>;</decl_stmt>
<struct_decl>struct <name>ComparisonOptions</name>;</struct_decl>


<struct>struct <name>NodeId</name> <block>{
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>InvalidNodeId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>int</name></type> <name>Id</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>NodeId</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Id</name><argument_list>(<argument>InvalidNodeId</argument>)</argument_list></macro> <block>{}</block>
<macro><name>NodeId</name><argument_list>(<argument>int Id</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Id</name><argument_list>(<argument>Id</argument>)</argument_list></macro> <block>{}</block>

<name>operator</name> <macro><name>int</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Id</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>NodeId</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{ <return>return <expr><operator>++</operator><name>Id</name></expr><operator>,</operator> <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>NodeId</name> <operator>&amp;</operator><name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <block>{ <return>return <expr><operator>--</operator><name>Id</name></expr><operator>,</operator> <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>NodeId</name> <modifier>&amp;</modifier></type><name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Id</name> <operator>!=</operator> <name>InvalidNodeId</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Id</name> <operator>==</operator> <name>InvalidNodeId</name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
