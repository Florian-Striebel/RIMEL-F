<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CommentCommandTraits.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMMENTCOMMANDTRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMMENTCOMMANDTRAITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/CommentOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>comments</name> <block>{<block_content>





<struct>struct <name>CommandInfo</name> <block>{
<expr_stmt><expr><name>unsigned</name> <macro><name>getID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ID</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>EndCommandName</name></decl>;</decl_stmt>


<enum>enum <block>{ <decl><name>NumCommandIDBits</name> <init>= <expr><literal type="number">20</literal></expr></init></decl> }</block>;</enum>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ID</name> <range>: <expr><name>NumCommandIDBits</name></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumArgs</name> <range>: <expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsInlineCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsBlockCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsBriefCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsReturnsCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsParamCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsTParamCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsThrowsCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsDeprecatedCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsHeaderfileCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsEmptyParagraphAllowed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>IsVerbatimBlockCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsVerbatimBlockEndCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>IsVerbatimLineCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>








<decl_stmt><decl><type><name>unsigned</name></type> <name>IsDeclarationCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFunctionDeclarationCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsRecordLikeDetailCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsRecordLikeDeclarationCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>IsUnknownCommand</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>class</name></type> <name>CommandTraits</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>KnownCommandIDs</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT_COMMAND</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KCI_##NAME,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentCommandList.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMMENT_COMMAND</name></cpp:undef>
<decl><name>KCI_Last</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>CommandTraits</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CommentOptions</name> <operator>&amp;</operator><name>CommentOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>registerCommentOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommentOptions</name> <modifier>&amp;</modifier></type><name>CommentOptions</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getCommandInfoOrNULL</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getCommandInfo</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>Info</name> <init>= <expr><call><name>getCommandInfoOrNULL</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Info</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"the command should be known"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getTypoCorrectCommandInfo</name><argument_list>(<argument><expr><name>StringRef</name> <name>Typo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getCommandInfo</name><argument_list>(<argument><expr><name>unsigned</name> <name>CommandID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>registerUnknownCommand</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>CommandName</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>registerBlockCommand</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>CommandName</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getBuiltinCommandInfo</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getBuiltinCommandInfo</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>CommandID</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>CommandTraits</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CommandTraits</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CommandTraits</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getRegisteredCommandInfo</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>getRegisteredCommandInfo</name><argument_list>(<argument><expr><name>unsigned</name> <name>CommandID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function_decl><type><name>CommandInfo</name> <modifier>*</modifier></type><name>createCommandInfoWithName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>CommandName</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unsigned</name></type> <name>NextID</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CommandInfo</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>RegisteredCommands</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
