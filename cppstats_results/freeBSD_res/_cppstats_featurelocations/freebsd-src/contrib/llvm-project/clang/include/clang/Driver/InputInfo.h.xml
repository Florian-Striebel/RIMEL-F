<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/InputInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_INPUTINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_INPUTINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Action.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Arg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>InputInfo</name> <block>{<block_content>






<enum>enum <name>Class</name> <block>{
<decl><name>Nothing</name></decl>,
<decl><name>Filename</name></decl>,
<decl><name>InputArg</name></decl>,
<decl><name>Pipe</name></decl>
}</block>;</enum>

<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Filename</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator><name>InputArg</name></expr>;</expr_stmt>
}</block> <decl><name>Data</name></decl>;</union>
<decl_stmt><decl><type><name>Class</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Action</name><modifier>*</modifier></type> <name>Act</name></decl>;</decl_stmt>
<expr_stmt><expr><name>types</name><operator>::</operator><name>ID</name> <name>Type</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BaseInput</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>types</name><operator>::</operator><name>ID</name> <macro><name>GetActionType</name><argument_list>(<argument>const Action *A</argument>)</argument_list></macro> <block>{
<return>return <expr><name>A</name> <operator>!=</operator> <name>nullptr</name> <operator>?</operator> <call><name><name>A</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>types</name><operator>::</operator><name>TY_Nothing</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>InputInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>InputInfo</name><argument_list>(<argument>nullptr</argument>, <argument>nullptr</argument>)</argument_list></macro> <block>{}</block>
<call><name>InputInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>_BaseInput</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>Nothing</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Act</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Type</name><argument_list>(<argument><expr><call><name>GetActionType</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>BaseInput</name><argument_list>(<argument>_BaseInput</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>InputInfo</name><argument_list>(<argument>types::ID _Type</argument>, <argument>const char *_Filename</argument>, <argument>const char *_BaseInput</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Act</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Type</name><argument_list>(<argument><expr><name>_Type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>BaseInput</name><argument_list>(<argument>_BaseInput</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>Data</name><operator>.</operator><name>Filename</name></name> <operator>=</operator> <name>_Filename</name></expr>;
}</block>
<call><name>InputInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>_Filename</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>_BaseInput</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Act</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Type</name><argument_list>(<argument><expr><call><name>GetActionType</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>BaseInput</name><argument_list>(<argument>_BaseInput</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>Data</name><operator>.</operator><name>Filename</name></name> <operator>=</operator> <name>_Filename</name></expr>;
}</block>

<macro><name>InputInfo</name><argument_list>(<argument>types::ID _Type</argument>, <argument>const llvm::opt::Arg *_InputArg</argument>,
<argument>const char *_BaseInput</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>InputArg</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Act</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Type</name><argument_list>(<argument><expr><name>_Type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>BaseInput</name><argument_list>(<argument>_BaseInput</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>Data</name><operator>.</operator><name>InputArg</name></name> <operator>=</operator> <name>_InputArg</name></expr>;
}</block>
<call><name>InputInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator><name>A</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>*</operator><name>_InputArg</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>_BaseInput</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>InputArg</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Act</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Type</name><argument_list>(<argument><expr><call><name>GetActionType</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>BaseInput</name><argument_list>(<argument>_BaseInput</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>Data</name><operator>.</operator><name>InputArg</name></name> <operator>=</operator> <name>_InputArg</name></expr>;
}</block>

<name>bool</name> <macro><name>isNothing</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>Nothing</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isFilename</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>Filename</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInputArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>InputArg</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>types</name><operator>::</operator><name>ID</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Type</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getBaseInput</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BaseInput</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Action</name> <operator>*</operator><macro><name>getAction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Act</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Action</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Act</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getFilename</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFilename</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Data</name><operator>.</operator><name>Filename</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>Arg</name> <operator>&amp;</operator><macro><name>getInputArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isInputArg</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name><name>Data</name><operator>.</operator><name>InputArg</name></name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isFilename</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getFilename</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'"'</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>isInputArg</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"(input arg)"</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="string">"(nothing)"</literal></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
