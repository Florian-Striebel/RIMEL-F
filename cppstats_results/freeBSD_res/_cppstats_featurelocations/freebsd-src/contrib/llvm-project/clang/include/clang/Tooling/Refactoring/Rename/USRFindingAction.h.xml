<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/Rename/USRFindingAction.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_RENAME_USR_FINDING_ACTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_RENAME_USR_FINDING_ACTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>








<function_decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>getCanonicalSymbolDeclaration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>FoundDecl</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>getUSRsForDeclaration</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ND</name></expr></argument>,
<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>USRFindingAction</name> <block>{
<macro><name>USRFindingAction</name><argument_list>(<argument>ArrayRef&lt;unsigned&gt; SymbolOffsets</argument>,
<argument>ArrayRef&lt;std::string&gt; QualifiedNames</argument>, <argument>bool Force</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>SymbolOffsets</name><argument_list>(<argument><expr><name>SymbolOffsets</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>QualifiedNames</name><argument_list>(<argument><expr><name>QualifiedNames</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ErrorOccurred</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Force</name><argument_list>(<argument>Force</argument>)</argument_list></macro> <expr><block>{}</block>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <call><name>newASTConsumer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>getUSRSpellings</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>SpellingNames</name></expr>;</return> </block_content>}</block></function>
<function><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>getUSRList</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>USRList</name></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name>errorOccurred</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>ErrorOccurred</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>SymbolOffsets</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>QualifiedNames</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SpellingNames</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>USRList</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ErrorOccurred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Force</name></decl>;</decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
