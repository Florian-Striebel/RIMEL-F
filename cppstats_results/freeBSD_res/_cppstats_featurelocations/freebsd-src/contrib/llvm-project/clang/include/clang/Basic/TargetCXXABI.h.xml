<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/TargetCXXABI.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_TARGETCXXABI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_TARGETCXXABI_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>TargetCXXABI</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <name>Kind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CXXABI</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Name,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TargetCXXABI.def"</cpp:file></cpp:include>
}</block>;</enum>

<label><name>private</name>:</label>



<decl_stmt><decl><type><name>Kind</name></type> <name>TheKind</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>getABIMap</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>&gt;</argument_list></name> <name>ABIMap</name> <operator>=</operator> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CXXABI</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{Str, Name},</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TargetCXXABI.def"</cpp:file></cpp:include>
}</block></expr>;</expr_stmt>
<return>return <expr><name>ABIMap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>getSpellingMap</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>Kind</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SpellingMap</name> <operator>=</operator> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CXXABI</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{Name, Str},</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TargetCXXABI.def"</cpp:file></cpp:include>
}</block></expr>;</expr_stmt>
<return>return <expr><name>SpellingMap</name></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><specifier>static</specifier> <name>Kind</name></type> <name>getKind</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>getABIMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>lookup</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>getSpelling</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>ABIKind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getSpellingMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>ABIKind</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isABI</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getABIMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>getABIMap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>usesRelativeVTables</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isOSFuchsia</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><call><name>TargetCXXABI</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>TheKind</name><argument_list>(<argument>GenericItanium</argument>)</argument_list></macro> <block>{}</block>

<macro><name>TargetCXXABI</name><argument_list>(<argument>Kind kind</argument>)</argument_list></macro> <operator>:</operator> <macro><name>TheKind</name><argument_list>(<argument>kind</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>set</name><argument_list>(<argument>Kind kind</argument>)</argument_list></macro> <block>{
<expr><name>TheKind</name> <operator>=</operator> <name>kind</name></expr>;
}</block>

<name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TheKind</name></expr>;</return> }</block></expr></expr_stmt>






<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isSupportedCXXABI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>Kind</name> <name>Kind</name></expr></argument>)</argument_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>Kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>GenericARM</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isARM</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>.</operator><name>isAArch64</name></name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<case>case <expr><name>AppleARM64</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isOSDarwin</name></name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>Fuchsia</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isOSFuchsia</name></name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>GenericAArch64</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isAArch64</name></name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>GenericMIPS</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isMIPS</name></name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>WebAssembly</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isWasm</name></name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>XL</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isOSAIX</name></name><argument_list>()</argument_list></call></expr>;</return>

<case>case <expr><name>GenericItanium</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>Microsoft</name></expr>:</case>
<return>return <expr><call><name><name>T</name><operator>.</operator><name>isKnownWindowsMSVCEnvironment</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"invalid CXXABI kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isItaniumFamily</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CXXABI</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITANIUM_CXXABI</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case Name:</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TargetCXXABI.def"</cpp:file></cpp:include>
<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("bad ABI kind"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isMicrosoft</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CXXABI</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICROSOFT_CXXABI</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case Name:</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"TargetCXXABI.def"</cpp:file></cpp:include>
<return>return <expr><name>true</name></expr>;</return>

<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("bad ABI kind"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>










<expr_stmt><expr><name>bool</name> <macro><name>areMemberFunctionsAligned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>WebAssembly</name></expr>:</case>

<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>AppleARM64</name></expr>:</case>
<case>case <expr><name>Fuchsia</name></expr>:</case>
<case>case <expr><name>GenericARM</name></expr>:</case>
<case>case <expr><name>GenericAArch64</name></expr>:</case>
<case>case <expr><name>GenericMIPS</name></expr>:</case>



<case>case <expr><name>GenericItanium</name></expr>:</case>
<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<case>case <expr><name>Microsoft</name></expr>:</case>
<case>case <expr><name>XL</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad ABI kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}








bool <macro><name>areArgsDestroyedLeftToRightInCallee</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><call><name>isMicrosoft</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasConstructorVariants</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isItaniumFamily</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasPrimaryVBases</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isItaniumFamily</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>hasKeyFunctions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isItaniumFamily</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





























<expr_stmt><expr><name>bool</name> <macro><name>canKeyFunctionBeInline</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AppleARM64</name></expr>:</case>
<case>case <expr><name>Fuchsia</name></expr>:</case>
<case>case <expr><name>GenericARM</name></expr>:</case>
<case>case <expr><name>WebAssembly</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>

<case>case <expr><name>GenericAArch64</name></expr>:</case>
<case>case <expr><name>GenericItanium</name></expr>:</case>
<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>Microsoft</name></expr>:</case>
<case>case <expr><name>GenericMIPS</name></expr>:</case>
<case>case <expr><name>XL</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad ABI kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}










enum <macro><name>TailPaddingUseRules</name></macro> <block>{<block_content>


<expr_stmt><expr><name>AlwaysUseTailPadding</name></expr><operator>,</operator>



<expr><name>UseTailPaddingUnlessPOD03</name></expr><operator>,</operator>



<expr><name>UseTailPaddingUnlessPOD11</name></expr></expr_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>TailPaddingUseRules</name> <macro><name>getTailPaddingUseRules</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>



<case>case <expr><name>GenericItanium</name></expr>:</case>
<case>case <expr><name>GenericAArch64</name></expr>:</case>
<case>case <expr><name>GenericARM</name></expr>:</case>
<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>GenericMIPS</name></expr>:</case>
<case>case <expr><name>XL</name></expr>:</case>
<return>return <expr><name>UseTailPaddingUnlessPOD03</name></expr>;</return>



<case>case <expr><name>AppleARM64</name></expr>:</case>
<case>case <expr><name>Fuchsia</name></expr>:</case>
<case>case <expr><name>WebAssembly</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>UseTailPaddingUnlessPOD11</name></expr>;</return>



<case>case <expr><name>Microsoft</name></expr>:</case>
<return>return <expr><name>AlwaysUseTailPadding</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad ABI kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

friend <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>TargetCXXABI</name> <operator>&amp;</operator><name>left</name><operator>,</operator> <specifier>const</specifier> <name>TargetCXXABI</name> <operator>&amp;</operator><name>right</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>left</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>right</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>TargetCXXABI</name> <operator>&amp;</operator><name>left</name><operator>,</operator> <specifier>const</specifier> <name>TargetCXXABI</name> <operator>&amp;</operator><name>right</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>left</name> <operator>==</operator> <name>right</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
