<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/TemplateBase.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_TEMPLATEBASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_TEMPLATEBASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DependenceFlags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/NestedNameSpecifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/None.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/TrailingObjects.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FoldingSetNodeID</name></decl>;</decl_stmt>




<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>clang::Expr *P</argument>)</argument_list></macro> <block>{ <return>return <expr><name>P</name></expr>;</return> }</block>
<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator><macro><name>getFromVoidPointer</name><argument_list>(<argument>void *P</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>constexpr</name> <name>int</name> <name>NumLowBitsAvailable</name> <operator>=</operator> <literal type="number">2</literal></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<struct_decl>struct <name>PrintingPolicy</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>TypeSourceInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ValueDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>TemplateArgument</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <name>ArgKind</name> <block>{


<decl><name>Null</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>Type</name></decl>,



<decl><name>Declaration</name></decl>,



<decl><name>NullPtr</name></decl>,



<decl><name>Integral</name></decl>,



<decl><name>Template</name></decl>,



<decl><name>TemplateExpansion</name></decl>,





<decl><name>Expression</name></decl>,



<decl><name>Pack</name></decl>
}</block>;</enum>

<label><name>private</name>:</label>


<struct>struct <name>DA</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>QT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ValueDecl</name> <modifier>*</modifier></type><name>D</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>I</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>BitWidth</name> <range>: <expr><literal type="number">31</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsUnsigned</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<union>union <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>VAL</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
}</block>;</union>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Type</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>A</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumArgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>*</modifier></type><name>Args</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>TA</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumExpansions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Name</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>TV</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>V</name></decl>;</decl_stmt>
}</block>;</struct>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>DA</name></name></type> <name>DeclArg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>I</name></name></type> <name>Integer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>A</name></name></type> <name>Args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TA</name></name></type> <name>TemplateArg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>TV</name></name></type> <name>TypeOrValue</name></decl>;</decl_stmt>
}</block>;</union>

<label><name>public</name>:</label>

<macro><name>constexpr</name></macro> <expr_stmt><expr><call><name>TemplateArgument</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>TypeOrValue</name><argument_list>(<argument>{Null</argument>, <argument><literal type="number">0</literal>}</argument>)</argument_list></macro> <block>{}</block>


<macro><name>TemplateArgument</name><argument_list>(<argument>QualType T</argument>, <argument>bool isNullPtr = false</argument>)</argument_list></macro> <block>{
<expr><name><name>TypeOrValue</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>isNullPtr</name> <operator>?</operator> <name>NullPtr</name> <operator>:</operator> <name>Type</name></expr>;
<expr><name><name>TypeOrValue</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>




<macro><name>TemplateArgument</name><argument_list>(<argument>ValueDecl *D</argument>, <argument>QualType QT</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>D</name> <operator>&amp;&amp;</operator> <literal type="string">"Expected decl"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name><name>DeclArg</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>Declaration</name></expr>;
<expr><name><name>DeclArg</name><operator>.</operator><name>QT</name></name> <operator>=</operator> <call><name><name>QT</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;
<expr><name><name>DeclArg</name><operator>.</operator><name>D</name></name> <operator>=</operator> <name>D</name></expr>;
}</block>



<macro><name>TemplateArgument</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>const llvm::APSInt &amp;Value</argument>, <argument>QualType Type</argument>)</argument_list></macro></expr>;</expr_stmt>



<macro><name>TemplateArgument</name><argument_list>(<argument>const TemplateArgument &amp;Other</argument>, <argument>QualType Type</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>Integer</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>Integer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Integer</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <call><name><name>Type</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>









<macro><name>TemplateArgument</name><argument_list>(<argument>TemplateName Name</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>TemplateArg</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>Template</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TemplateArg</name><operator>.</operator><name>Name</name></name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>getAsVoidPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TemplateArg</name><operator>.</operator><name>NumExpansions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>












<macro><name>TemplateArgument</name><argument_list>(<argument>TemplateName Name</argument>, <argument>Optional&lt;unsigned&gt; NumExpansions</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>TemplateArg</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>TemplateExpansion</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TemplateArg</name><operator>.</operator><name>Name</name></name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>getAsVoidPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>NumExpansions</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>TemplateArg</name><operator>.</operator><name>NumExpansions</name></name> <operator>=</operator> <operator>*</operator><name>NumExpansions</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>TemplateArg</name><operator>.</operator><name>NumExpansions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>






<macro><name>TemplateArgument</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>TypeOrValue</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>Expression</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>TypeOrValue</name><operator>.</operator><name>V</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>





<function><type><name>explicit</name></type> <name>TemplateArgument</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Args</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>Pack</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Args</name><operator>.</operator><name>Args</name></name> <operator>=</operator> <call><name><name>Args</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Args</name><operator>.</operator><name>NumArgs</name></name> <operator>=</operator> <call><name><name>Args</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>TemplateArgument</name><argument_list>(<argument><expr><name>TemplateName</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>TemplateArgument</name></type> <name>getEmptyPack</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>TemplateArgument</name><argument_list>(<argument><expr><name>None</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>



<function_decl><type><specifier>static</specifier> <name>TemplateArgument</name></type> <name>CreatePackCopy</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>ArgKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>ArgKind</name><operator>)</operator><name><name>TypeOrValue</name><operator>.</operator><name>Kind</name></name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Null</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>TemplateArgumentDependence</name> <macro><name>getDependence</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isInstantiationDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>containsUnexpandedParameterPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isPackExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>QualType</name> <macro><name>getAsType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Type</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>TypeOrValue</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>ValueDecl</name> <operator>*</operator><macro><name>getAsDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Declaration</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>DeclArg</name><operator>.</operator><name>D</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>QualType</name> <macro><name>getParamTypeForDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Declaration</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name><name>DeclArg</name><operator>.</operator><name>QT</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>QualType</name> <macro><name>getNullPtrType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NullPtr</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>TypeOrValue</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>TemplateName</name> <macro><name>getAsTemplate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Template</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>TemplateName</name><operator>::</operator><call><name>getFromVoidPointer</name><argument_list>(<argument><expr><name><name>TemplateArg</name><operator>.</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>TemplateName</name> <macro><name>getAsTemplateOrTemplatePattern</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Template</name> <operator>||</operator> <call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateExpansion</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;

<return>return <expr><name>TemplateName</name><operator>::</operator><call><name>getFromVoidPointer</name><argument_list>(<argument><expr><name><name>TemplateArg</name><operator>.</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getNumTemplateExpansions</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>getAsIntegral</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Integral</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;

<expr><name>using</name> <name>namespace</name> <name>llvm</name></expr>;

<if_stmt><if>if <condition>(<expr><name><name>Integer</name><operator>.</operator><name>BitWidth</name></name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>APSInt</name><argument_list>(<argument><expr><call><name>APInt</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>BitWidth</name></name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>VAL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>IsUnsigned</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<name>unsigned</name> <name>NumWords</name> <operator>=</operator> <name>APInt</name><operator>::</operator><call><name>getNumWords</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>BitWidth</name></name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<return>return <expr><call><name>APSInt</name><argument_list>(<argument><expr><call><name>APInt</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>BitWidth</name></name></expr></argument>, <argument><expr><call><name>makeArrayRef</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>pVal</name></name></expr></argument>, <argument><expr><name>NumWords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>Integer</name><operator>.</operator><name>IsUnsigned</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>QualType</name> <macro><name>getIntegralType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Integral</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>Type</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setIntegralType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Integral</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Integer</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <call><name><name>T</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>QualType</name> <macro><name>getNonTypeTemplateArgumentType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getAsExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Expression</name> <operator>&amp;&amp;</operator> <literal type="string">"Unexpected kind"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>TypeOrValue</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>pack_iterator</name> <init>= <expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>*</operator></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>pack_iterator</name> <macro><name>pack_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Pack</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Args</name><operator>.</operator><name>Args</name></name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>pack_iterator</name> <macro><name>pack_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Pack</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Args</name><operator>.</operator><name>Args</name></name> <operator>+</operator> <name><name>Args</name><operator>.</operator><name>NumArgs</name></name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <macro><name>pack_elements</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><call><name>pack_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pack_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>pack_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Pack</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Args</name><operator>.</operator><name>NumArgs</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <macro><name>getPackAsArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Pack</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name><name>Args</name><operator>.</operator><name>Args</name></name></expr></argument>, <argument><expr><name><name>Args</name><operator>.</operator><name>NumArgs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>structurallyEquals</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>TemplateArgument</name> <macro><name>getPackExpansionPattern</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PrintingPolicy</name> <operator>&amp;</operator><name>Policy</name></expr></argument>, <argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>,
<argument><expr><name>bool</name> <name>IncludeType</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>TemplateArgumentLocInfo</name> <block>{
<label><name>private</name>:</label>
<struct>struct <name>TemplateTemplateArgLocInfo</name> <block>{


<decl_stmt><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>Qualifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>QualifierLocData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>TemplateNameLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>EllipsisLoc</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>TemplateTemplateArgLocInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><name>TypeSourceInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<name>Pointer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>TemplateTemplateArgLocInfo</name> <operator>*</operator><macro><name>getTemplate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Pointer</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>TemplateTemplateArgLocInfo</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<label><name>public</name>:</label>
<macro><name>TemplateArgumentLocInfo</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>TemplateArgumentLocInfo</name><argument_list>(<argument>TypeSourceInfo *Declarator</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>Pointer</name> <operator>=</operator> <name>Declarator</name></expr>;</expr_stmt> </block_content>}</block>

<macro><name>TemplateArgumentLocInfo</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><name>Pointer</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt> </block_content>}</block>


<macro><name>TemplateArgumentLocInfo</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>NestedNameSpecifierLoc QualifierLoc</argument>,
<argument>SourceLocation TemplateNameLoc</argument>,
<argument>SourceLocation EllipsisLoc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>TypeSourceInfo</name> <operator>*</operator><macro><name>getAsTypeSourceInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Pointer</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>TypeSourceInfo</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getAsExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Pointer</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>Expr</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>NestedNameSpecifierLoc</name> <macro><name>getTemplateQualifierLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>auto</name> <operator>*</operator><name>Template</name> <operator>=</operator> <call><name>getTemplate</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><call><name>NestedNameSpecifierLoc</name><argument_list>(<argument><expr><name><name>Template</name><operator>-&gt;</operator><name>Qualifier</name></name></expr></argument>,
<argument><expr><name><name>Template</name><operator>-&gt;</operator><name>QualifierLocData</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getTemplateNameLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getTemplate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>TemplateNameLoc</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getTemplateEllipsisLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getTemplate</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>EllipsisLoc</name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>class</name></type> <name>TemplateArgumentLoc</name> <block>{<block_content>
<decl_stmt><decl><type><name>TemplateArgument</name></type> <name>Argument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TemplateArgumentLocInfo</name></type> <name>LocInfo</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>TemplateArgumentLoc</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

<macro><name>TemplateArgumentLoc</name><argument_list>(<argument>const TemplateArgument &amp;Argument</argument>,
<argument>TemplateArgumentLocInfo Opaque</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Argument</name><argument_list>(<argument><expr><name>Argument</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>LocInfo</name><argument_list>(<argument>Opaque</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>TemplateArgumentLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><name>Argument</name></expr></argument>, <argument><expr><name>TypeSourceInfo</name> <operator>*</operator><name>TInfo</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Argument</name><argument_list>(<argument><expr><name>Argument</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>LocInfo</name><argument_list>(<argument>TInfo</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Type</name></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>TemplateArgumentLoc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><name>Argument</name></expr></argument>, <argument><expr><name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Argument</name><argument_list>(<argument><expr><name>Argument</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>LocInfo</name><argument_list>(<argument>E</argument>)</argument_list></macro> <expr><block>{



<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>NullPtr</name> <operator>||</operator>
<call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Integral</name> <operator>||</operator>
<call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Declaration</name> <operator>||</operator>
<call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Expression</name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>TemplateArgumentLoc</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>const TemplateArgument &amp;Argument</argument>,
<argument>NestedNameSpecifierLoc QualifierLoc</argument>,
<argument>SourceLocation TemplateNameLoc</argument>,
<argument>SourceLocation EllipsisLoc = SourceLocation()</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Argument</name><argument_list>(<argument><expr><name>Argument</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>LocInfo</name><argument_list>(<argument>Ctx</argument>, <argument>QualifierLoc</argument>, <argument>TemplateNameLoc</argument>, <argument>EllipsisLoc</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Template</name> <operator>||</operator>
<call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>TemplateExpansion</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Template</name> <operator>||</operator>
<call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>TemplateExpansion</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getTemplateNameLoc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name>getSourceRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBegin</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><macro><name>getArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Argument</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>TemplateArgumentLocInfo</name> <macro><name>getLocInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LocInfo</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>TypeSourceInfo</name> <operator>*</operator><macro><name>getTypeSourceInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TemplateArgument</name><operator>::</operator><name>Type</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getAsTypeSourceInfo</name></name><argument_list>()</argument_list></call></expr>;</return>
}

Expr <expr_stmt><expr><operator>*</operator><macro><name>getSourceExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Expression</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getAsExpr</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getSourceDeclExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Declaration</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getAsExpr</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getSourceNullPtrExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>NullPtr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getAsExpr</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getSourceIntegralExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>TemplateArgument</name><operator>::</operator><name>Integral</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getAsExpr</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>NestedNameSpecifierLoc</name> <macro><name>getTemplateQualifierLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TemplateArgument</name><operator>::</operator><name>Template</name> <operator>&amp;&amp;</operator>
<call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TemplateArgument</name><operator>::</operator><name>TemplateExpansion</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>NestedNameSpecifierLoc</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getTemplateQualifierLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}

SourceLocation <macro><name>getTemplateNameLoc</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TemplateArgument</name><operator>::</operator><name>Template</name> <operator>&amp;&amp;</operator>
<call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TemplateArgument</name><operator>::</operator><name>TemplateExpansion</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getTemplateNameLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}

SourceLocation <macro><name>getTemplateEllipsisLoc</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Argument</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TemplateArgument</name><operator>::</operator><name>TemplateExpansion</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>LocInfo</name><operator>.</operator><name>getTemplateEllipsisLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}
}<empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>TemplateArgumentListInfo</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLoc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>Arguments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>LAngleLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>RAngleLoc</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TemplateArgumentListInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>TemplateArgumentListInfo</name><argument_list>(<argument>SourceLocation LAngleLoc</argument>,
<argument>SourceLocation RAngleLoc</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>LAngleLoc</name><argument_list>(<argument><expr><name>LAngleLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>RAngleLoc</name><argument_list>(<argument>RAngleLoc</argument>)</argument_list></macro> <expr><block>{}</block>



<name>void</name> <operator>*</operator><name>operator</name> <macro><name>new</name><argument_list>(<argument>size_t bytes</argument>, <argument>ASTContext &amp;C</argument>)</argument_list></macro> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLAngleLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LAngleLoc</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getRAngleLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RAngleLoc</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setLAngleLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>LAngleLoc</name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setRAngleLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>RAngleLoc</name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Arguments</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>TemplateArgumentLoc</name> <operator>*</operator><macro><name>getArgumentArray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Arguments</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLoc</name></expr></argument>&gt;</argument_list></name> <macro><name>arguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Arguments</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TemplateArgumentLoc</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>unsigned</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name><name>Arguments</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>TemplateArgumentLoc</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>Arguments</name><index>[<expr><name>I</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentLoc</name> <modifier>&amp;</modifier></type><name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Arguments</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>struct</name> <name>ASTTemplateArgumentListInfo</name></name></type> <name>final</name>
<range>: <expr><name>private</name> <name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>ASTTemplateArgumentListInfo</name></expr></argument>,
<argument><expr><name>TemplateArgumentLoc</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>ASTNodeImporter</name></expr>;
<expr><name>friend</name> <name>TrailingObjects</name></expr>;

<expr><call><name>ASTTemplateArgumentListInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateArgumentListInfo</name> <operator>&amp;</operator><name>List</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>

<name>SourceLocation</name> <name>LAngleLoc</name></expr>;


<expr><name>SourceLocation</name> <name>RAngleLoc</name></expr>;


<expr><name>unsigned</name> <name>NumTemplateArgs</name></expr>;

<expr><name>SourceLocation</name> <macro><name>getLAngleLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LAngleLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getRAngleLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RAngleLoc</name></expr>;</return> }</block>


<specifier>const</specifier> <name>TemplateArgumentLoc</name> <operator>*</operator><macro><name>getTemplateArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>unsigned</name> <macro><name>getNumTemplateArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumTemplateArgs</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLoc</name></expr></argument>&gt;</argument_list></name> <macro><name>arguments</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><call><name>getTemplateArgs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getNumTemplateArgs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>TemplateArgumentLoc</name> <operator>&amp;</operator><name><name>operator</name><index>[]</index></name><operator>(</operator><name>unsigned</name> <name>I</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getTemplateArgs</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>const</specifier> <name>ASTTemplateArgumentListInfo</name> <operator>*</operator>
<call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TemplateArgumentListInfo</name> <operator>&amp;</operator><name>List</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>








<struct>struct <macro><name>alignas</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <name>ASTTemplateKWAndArgsInfo</name> <block>{

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>LAngleLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>RAngleLoc</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>SourceLocation</name></type> <name>TemplateKWLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumTemplateArgs</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>initializeFrom</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>TemplateKWLoc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentListInfo</name> <modifier>&amp;</modifier></type><name>List</name></decl></parameter>,
<parameter><decl><type><name>TemplateArgumentLoc</name> <modifier>*</modifier></type><name>OutArgArray</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>initializeFrom</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>TemplateKWLoc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentListInfo</name> <modifier>&amp;</modifier></type><name>List</name></decl></parameter>,
<parameter><decl><type><name>TemplateArgumentLoc</name> <modifier>*</modifier></type><name>OutArgArray</name></decl></parameter>,
<parameter><decl><type><name>TemplateArgumentDependence</name> <modifier>&amp;</modifier></type><name>Deps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initializeFrom</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>TemplateKWLoc</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>copyInto</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TemplateArgumentLoc</name> <operator>*</operator><name>ArgArray</name></expr></argument>,
<argument><expr><name>TemplateArgumentListInfo</name> <operator>&amp;</operator><name>List</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><name>Arg</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>TemplateSpecializationType</name><operator>::</operator><name>iterator</name>
<name>TemplateSpecializationType</name><operator>::</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getArgs</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getNumArgs</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>DependentTemplateSpecializationType</name><operator>::</operator><name>iterator</name>
<name>DependentTemplateSpecializationType</name><operator>::</operator><macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getArgs</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getNumArgs</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator>
<name>TemplateSpecializationType</name><operator>::</operator><macro><name>getArg</name><argument_list>(<argument>unsigned Idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name>getNumArgs</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Template argument out of range"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getArgs</name><argument_list>()</argument_list></call><index>[<expr><name>Idx</name></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator>
<name>DependentTemplateSpecializationType</name><operator>::</operator><macro><name>getArg</name><argument_list>(<argument>unsigned Idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name>getNumArgs</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Template argument out of range"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getArgs</name><argument_list>()</argument_list></call><index>[<expr><name>Idx</name></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>TemplateArgument</name> <operator>&amp;</operator><name>AutoType</name><operator>::</operator><macro><name>getArg</name><argument_list>(<argument>unsigned Idx</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name>getNumArgs</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Template argument out of range"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getArgs</name><argument_list>()</argument_list></call><index>[<expr><name>Idx</name></expr>]</index></expr>;</return>
}</block></expr></expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
