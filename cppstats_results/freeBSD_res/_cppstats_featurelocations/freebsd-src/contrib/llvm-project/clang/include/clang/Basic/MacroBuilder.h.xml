<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/MacroBuilder.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_MACROBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_MACROBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Twine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MacroBuilder</name> <block>{<block_content>
<decl_stmt><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>Out</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MacroBuilder</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Output</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Out</name><argument_list>(<argument>Output</argument>)</argument_list></macro> <block>{}</block>


<name>void</name> <macro><name>defineMacro</name><argument_list>(<argument>const Twine &amp;Name</argument>, <argument>const Twine &amp;Value = <literal type="string">"1"</literal></argument>)</argument_list></macro> <block>{
<expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"#define "</literal> <operator>&lt;&lt;</operator> <name>Name</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>Value</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;
}</block>



<name>void</name> <macro><name>undefineMacro</name><argument_list>(<argument>const Twine &amp;Name</argument>)</argument_list></macro> <block>{
<expr><name>Out</name> <operator>&lt;&lt;</operator> <literal type="string">"#undef "</literal> <operator>&lt;&lt;</operator> <name>Name</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;
}</block>


<name>void</name> <macro><name>append</name><argument_list>(<argument>const Twine &amp;Str</argument>)</argument_list></macro> <block>{
<expr><name>Out</name> <operator>&lt;&lt;</operator> <name>Str</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
