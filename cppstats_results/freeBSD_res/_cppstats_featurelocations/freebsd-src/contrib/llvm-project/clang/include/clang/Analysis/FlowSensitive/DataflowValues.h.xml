<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/FlowSensitive/DataflowValues.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSES_DATAFLOW_VALUES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSES_DATAFLOW_VALUES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/ProgramPoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>







<decl_stmt><decl><type><name>namespace</name></type> <name>dataflow</name> <block>{<block_content>
<struct>struct <name>forward_analysis_tag</name> <block>{}</block>;</struct>
<struct>struct <name>backward_analysis_tag</name> <block>{}</block>;</struct>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ValueTypes</name></expr></argument>,
<argument><expr><name>typename</name> <name>_AnalysisDirTag</name> <operator>=</operator> <name>dataflow</name><operator>::</operator><name>forward_analysis_tag</name></expr></argument> &gt;</argument_list></name>
<name>class</name></type> <name>DataflowValues</name> <block>{<block_content>





<label><name>public</name>:</label>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>ValueTypes</name><operator>::</operator><name>ValTy</name> <name>ValTy</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>typename</name> <name>ValueTypes</name><operator>::</operator><name>AnalysisDataTy</name> <name>AnalysisDataTy</name></expr>;</expr_stmt></typedef>
<typedef>typedef <type><name>_AnalysisDirTag</name></type> <name>AnalysisDirTag</name>;</typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>ProgramPoint</name></expr></argument>, <argument><expr><name>ValTy</name></expr></argument>&gt;</argument_list></name> <name>EdgeDataMapTy</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CFGBlock</name><operator>*</operator></expr></argument>, <argument><expr><name>ValTy</name></expr></argument>&gt;</argument_list></name> <name>BlockDataMapTy</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Stmt</name><operator>*</operator></expr></argument>, <argument><expr><name>ValTy</name></expr></argument>&gt;</argument_list></name> <name>StmtDataMapTy</name></expr>;</expr_stmt></typedef>





<label><name>public</name>:</label>


<function><type><name>bool</name></type> <name>isForwardAnalysis</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>isForwardAnalysis</name><argument_list>(<argument><expr><call><name>AnalysisDirTag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>



<function><type><name>bool</name></type> <name>isBackwardAnalysis</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><call><name>isForwardAnalysis</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>isForwardAnalysis</name><argument_list>(<argument><expr><name>dataflow</name><operator>::</operator><name>forward_analysis_tag</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isForwardAnalysis</name><argument_list>(<argument><expr><name>dataflow</name><operator>::</operator><name>backward_analysis_tag</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>





<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DataflowValues</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>StmtDataMap</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <block>{}</block>
<operator>~</operator><macro><name>DataflowValues</name><argument_list>()</argument_list></macro> <block>{ <expr><name>delete</name> <name>StmtDataMap</name></expr>; }</block>



<name>void</name> <macro><name>InitializeValues</name><argument_list>(<argument>const CFG&amp; cfg</argument>)</argument_list></macro> <block>{}</block>




<name>ValTy</name><operator>&amp;</operator> <macro><name>getEdgeData</name><argument_list>(<argument>const BlockEdge &amp;E</argument>)</argument_list></macro> <block>{
<expr><name>typename</name> <name>EdgeDataMapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>EdgeDataMap</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name> <argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <call><name><name>EdgeDataMap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No data associated with Edge."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ValTy</name><modifier>&amp;</modifier></type> <name>getEdgeData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BlockEdge</name> <operator>&amp;</operator><name>E</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>DataflowValues</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getEdgeData</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<function><type><name>ValTy</name><modifier>&amp;</modifier></type> <name>getBlockData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>typename</name> <name>BlockDataMapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>BlockDataMap</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <call><name><name>BlockDataMap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No data associated with block."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ValTy</name><modifier>&amp;</modifier></type> <name>getBlockData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><name>B</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DataflowValues</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getBlockData</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<function><type><name>ValTy</name><modifier>&amp;</modifier></type> <name>getStmtData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>StmtDataMap</name> <operator>&amp;&amp;</operator> <literal type="string">"Dataflow values were not computed for statements."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>typename</name> <name>StmtDataMapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>StmtDataMap</name><operator>-&gt;</operator><name>find</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <call><name><name>StmtDataMap</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No data associated with statement."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ValTy</name><modifier>&amp;</modifier></type> <name>getStmtData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DataflowValues</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getStmtData</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<function><type><name>EdgeDataMapTy</name><modifier>&amp;</modifier></type> <name>getEdgeDataMap</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>EdgeDataMap</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>EdgeDataMapTy</name><operator>&amp;</operator> <macro><name>getEdgeDataMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>EdgeDataMap</name></expr>;</return> }</block></expr></expr_stmt>






<function><type><name>BlockDataMapTy</name><modifier>&amp;</modifier></type> <name>getBlockDataMap</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>BlockDataMap</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>BlockDataMapTy</name><operator>&amp;</operator> <macro><name>getBlockDataMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BlockDataMap</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>StmtDataMapTy</name><modifier>&amp;</modifier></type> <name>getStmtDataMap</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>StmtDataMap</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>StmtDataMap</name> <operator>=</operator> <name>new</name> <call><name>StmtDataMapTy</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>*</operator><name>StmtDataMap</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>StmtDataMapTy</name><operator>&amp;</operator> <macro><name>getStmtDataMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DataflowValues</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getStmtDataMap</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<function><type><name>AnalysisDataTy</name><modifier>&amp;</modifier></type> <name>getAnalysisData</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>AnalysisData</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>AnalysisDataTy</name><operator>&amp;</operator> <macro><name>getAnalysisData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AnalysisData</name></expr>;</return> }</block></expr></expr_stmt>





<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>EdgeDataMapTy</name></type> <name>EdgeDataMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockDataMapTy</name></type> <name>BlockDataMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StmtDataMapTy</name><modifier>*</modifier></type> <name>StmtDataMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AnalysisDataTy</name></type> <name>AnalysisData</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
