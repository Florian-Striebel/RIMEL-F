<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/ObjCRuntime.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_OBJCRUNTIME_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_OBJCRUNTIME_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>ObjCRuntime</name> <block>{<block_content>
<label><name>public</name>:</label>

<enum>enum <name>Kind</name> <block>{



<decl><name>MacOSX</name></decl>,




<decl><name>FragileMacOSX</name></decl>,




<decl><name>iOS</name></decl>,



<decl><name>WatchOS</name></decl>,



<decl><name>GCC</name></decl>,


<decl><name>GNUstep</name></decl>,


<decl><name>ObjFW</name></decl>
}</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>TheKind</name> <init>= <expr><name>MacOSX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VersionTuple</name></type> <name>Version</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>ObjCRuntime</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>ObjCRuntime</name><argument_list>(<argument>Kind kind</argument>, <argument>const VersionTuple &amp;version</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>TheKind</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Version</name><argument_list>(<argument>version</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>set</name><argument_list>(<argument>Kind kind</argument>, <argument>VersionTuple version</argument>)</argument_list></macro> <block>{
<expr><name>TheKind</name> <operator>=</operator> <name>kind</name></expr>;
<expr><name>Version</name> <operator>=</operator> <name>version</name></expr>;
}</block>

<name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TheKind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>VersionTuple</name> <operator>&amp;</operator><macro><name>getVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Version</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isNonFragile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("bad kind"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isFragile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isNonFragile</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isLegacyDispatchDefaultForArch</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ArchType</name> <name>Arch</name></expr></argument>)</argument_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>GNUstep</name> <operator>&amp;&amp;</operator> <call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Arch</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>arm</name> <operator>||</operator>
<name>Arch</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86</name> <operator>||</operator>
<name>Arch</name> <operator>==</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>MacOSX</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isNonFragile</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Arch</name> <operator>!=</operator> <name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>x86_64</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isGNUFamily</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>
<case>case <expr><name>MacOSX</name></expr>:</case>
<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case>
<case>case <expr><name>GNUstep</name></expr>:</case>
<case>case <expr><name>ObjFW</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
llvm_unreachable("bad kind"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isNeXTFamily</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<return>return <expr><operator>!</operator><call><name>isGNUFamily</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>allowsARC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>

<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}






bool <macro><name>hasNativeARC</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


















bool <macro><name>shouldUseARCFunctionsForRetainRelease</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

















bool <macro><name>shouldUseRuntimeFunctionsForAlloc</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>GCC</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}




bool <macro><name>shouldUseRuntimeFunctionForCombinedAllocInit</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MacOSX</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr></expr_stmt>
}


bool <macro><name>hasOptimizedSetter</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MacOSX</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case>
<return>return <expr><operator>(</operator><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr></expr_stmt>
}


bool <macro><name>allowsWeak</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><call><name>hasNativeWeak</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasNativeWeak</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<return>return <expr><call><name>hasNativeARC</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>hasSubscripting</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>




<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


bool <macro><name>allowsSizeofAlignof</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><call><name>isFragile</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>allowsPointerArithmetic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>
<case>case <expr><name>GCC</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case>
<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<case>case <expr><name>GNUstep</name></expr>:</case>
<case>case <expr><name>ObjFW</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


bool <macro><name>isSubscriptPointerArithmetic</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<return>return <expr><call><name>allowsPointerArithmetic</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name>bool</name> <macro><name>hasTerminate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


bool <macro><name>hasWeakClassImport</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>FragileMacOSX</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


bool <macro><name>hasUnwindExceptions</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>FragileMacOSX</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

bool <macro><name>hasAtomicCopyHelper</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>
<case>case <expr><name>MacOSX</name></expr>:</case>
<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default> <return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr></expr_stmt>
}


bool <macro><name>hasARCUnsafeClaimAutoreleasedReturnValue</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MacOSX</name></expr>:</case>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr></expr_stmt>
}


bool <macro><name>hasEmptyCollections</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><call><name>getVersion</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block></expr></expr_stmt>
}



bool <macro><name>allowsClassStubs</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case>
<case>case <expr><name>GCC</name></expr>:</case>
<case>case <expr><name>GNUstep</name></expr>:</case>
<case>case <expr><name>ObjFW</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case>
<case>case <expr><name>iOS</name></expr>:</case>
<case>case <expr><name>WatchOS</name></expr>:</case>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


bool <macro><name>allowsDirectDispatch</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FragileMacOSX</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>MacOSX</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>iOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>WatchOS</name></expr>:</case> <return>return <expr><name>true</name></expr>;</return>
<case>case <expr><name>GCC</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>GNUstep</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>ObjFW</name></expr>:</case> <return>return <expr><name>false</name></expr>;</return>
<expr_stmt/></block_content></block></switch>}</block>
<call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}





bool <macro><name>tryParse</name><argument_list>(<argument>StringRef input</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ObjCRuntime</name> <operator>&amp;</operator><name>left</name><operator>,</operator> <specifier>const</specifier> <name>ObjCRuntime</name> <operator>&amp;</operator><name>right</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>left</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>right</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>left</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>right</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ObjCRuntime</name> <operator>&amp;</operator><name>left</name><operator>,</operator> <specifier>const</specifier> <name>ObjCRuntime</name> <operator>&amp;</operator><name>right</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>left</name> <operator>==</operator> <name>right</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>hash_value</name><argument_list>(<argument>const ObjCRuntime &amp;OCR</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_combine</name><argument_list>(<argument><expr><call><name><name>OCR</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>OCR</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};

<expr_stmt><expr><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>out</name><operator>,</operator> <specifier>const</specifier> <name>ObjCRuntime</name> <operator>&amp;</operator><name>value</name><operator>)</operator></expr>;</expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
