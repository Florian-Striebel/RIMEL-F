<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SVals.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/None.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>





<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclaratorDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LabelDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BasicValueFactory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompoundValData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LazyCompoundValData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemRegion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PointerToMemberData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SValBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypedValueRegion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>nonloc</name> <block>{<block_content>


<enum>enum <name>Kind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONLOC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Id ##Kind,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"</cpp:file></cpp:include>
}</block>;</enum>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>loc</name> <block>{<block_content>


<enum>enum <name>Kind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Id ##Kind,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"</cpp:file></cpp:include>
}</block>;</enum>

</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>SVal</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>BaseKind</name> <block>{

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASIC_SVAL</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Id ##Kind,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_SVAL_WITH_KIND</name><parameter_list>(<parameter><type><name>Id</name></type></parameter>, <parameter><type><name>Parent</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Id ##Kind,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"</cpp:file></cpp:include>
}</block>;</enum>
<enum>enum <block>{ <decl><name>BaseBits</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><name>BaseMask</name> <init>= <expr><literal type="number">0b11</literal></expr></init></decl> }</block>;</enum>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <macro><name>SVal</name><argument_list>(<argument>const void *d</argument>, <argument>bool isLoc</argument>, <argument>unsigned ValKind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Data</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>(isLoc ? LocKind : NonLocKind) | (ValKind &lt;&lt; BaseBits)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <macro><name>SVal</name><argument_list>(<argument>BaseKind k</argument>, <argument>const void *D = nullptr</argument>)</argument_list></macro> <operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>k</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>explicit</name> <call><name>SVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <macro><name>castAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>T</name><operator>::</operator><call><name>isKind</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>getAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>T</name><operator>::</operator><call><name>isKind</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>None</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getRawKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>BaseKind</name> <macro><name>getBaseKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>BaseKind</name><operator>)</operator> <operator>(</operator><name>Kind</name> <operator>&amp;</operator> <name>BaseMask</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getSubKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>&gt;&gt;</operator> <name>BaseBits</name></expr>;</return> }</block></expr></expr_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>getRawKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SVal</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRawKind</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R</name><operator>.</operator><name>getRawKind</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Data</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>Data</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SVal</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>R</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUnknown</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRawKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>UnknownValKind</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRawKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>UndefinedValKind</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUnknownOrUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRawKind</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>UnknownValKind</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRawKind</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>UnknownValKind</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isConstant</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isConstant</name><argument_list>(<argument><expr><name>int</name> <name>I</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isZeroConstant</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasConjuredSymbol</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><macro><name>getAsFunctionDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<decl_stmt><decl><type><name>SymbolRef</name></type> <name>getAsLocSymbol</name><argument_list>(<argument><expr><name>bool</name> <name>IncludeBaseRegions</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>SymbolRef</name> <macro><name>getLocSymbolInBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<decl_stmt><decl><type><name>SymbolRef</name></type> <name>getAsSymbol</name><argument_list>(<argument><expr><name>bool</name> <name>IncludeBaseRegions</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><macro><name>getAsRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>printJson</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>, <argument><expr><name>bool</name> <name>AddQuotes</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>dumpToStream</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>SymExpr</name><operator>::</operator><name>symbol_iterator</name> <macro><name>symbol_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><name>SE</name> <operator>=</operator> <call><name>getAsSymbol</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>SE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>SE</name><operator>-&gt;</operator><name>symbol_begin</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>SymExpr</name><operator>::</operator><call><name>symbol_iterator</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SymExpr</name><operator>::</operator><name>symbol_iterator</name> <macro><name>symbol_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SymExpr</name><operator>::</operator><call><name>symbol_end</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>












<decl_stmt><decl><type><name>QualType</name></type> <name>getType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>os</name><operator>,</operator> <name>clang</name><operator>::</operator><name>ento</name><operator>::</operator><name>SVal</name> <name>V</name><operator>)</operator> <block>{
<expr><call><name><name>V</name><operator>.</operator><name>dumpToStream</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>os</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>UndefinedVal</name> <range>: <expr><name>public</name> <name>SVal</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>UndefinedVal</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>SVal</name><argument_list>(<argument>UndefinedValKind</argument>)</argument_list></macro> <block>{}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>UndefinedValKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>DefinedOrUnknownSVal</name> <operator>:</operator> <name>public</name> <name>SVal</name> <block>{
<expr><name>public</name><operator>:</operator>


<name>bool</name> <macro><name>isUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <name>delete</name></expr>;
<expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <name>delete</name></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>DefinedOrUnknownSVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <macro><name>DefinedOrUnknownSVal</name><argument_list>(<argument>const void *d</argument>, <argument>bool isLoc</argument>, <argument>unsigned ValKind</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>SVal</name><argument_list>(<argument>d</argument>, <argument>isLoc</argument>, <argument>ValKind</argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <macro><name>DefinedOrUnknownSVal</name><argument_list>(<argument>BaseKind k</argument>, <argument>void *D = nullptr</argument>)</argument_list></macro> <operator>:</operator> <macro><name>SVal</name><argument_list>(<argument>k</argument>, <argument>D</argument>)</argument_list></macro> <block>{}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>!</operator><call><name><name>V</name><operator>.</operator><name>isUndef</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>UnknownVal</name> <operator>:</operator> <name>public</name> <name>DefinedOrUnknownSVal</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>UnknownVal</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>DefinedOrUnknownSVal</name><argument_list>(<argument>UnknownValKind</argument>)</argument_list></macro> <block>{}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal &amp;V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>UnknownValKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>DefinedSVal</name> <operator>:</operator> <name>public</name> <name>DefinedOrUnknownSVal</name> <block>{
<expr><name>public</name><operator>:</operator>


<name>bool</name> <macro><name>isUnknown</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <name>delete</name></expr>;
<expr><name>bool</name> <macro><name>isUnknownOrUndef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <name>delete</name></expr>;
<expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <name>delete</name></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>DefinedSVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <macro><name>DefinedSVal</name><argument_list>(<argument>const void *d</argument>, <argument>bool isLoc</argument>, <argument>unsigned ValKind</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>DefinedOrUnknownSVal</name><argument_list>(<argument>d</argument>, <argument>isLoc</argument>, <argument>ValKind</argument>)</argument_list></macro> <block>{}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>!</operator><call><name><name>V</name><operator>.</operator><name>isUnknownOrUndef</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>KnownSVal</name> <operator>:</operator> <name>public</name> <name>SVal</name> <block>{
<expr><name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>KnownSVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal &amp;V</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>!</operator><call><name><name>V</name><operator>.</operator><name>isUnknown</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<call><name>KnownSVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DefinedSVal</name> <operator>&amp;</operator><name>V</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SVal</name><argument_list>(<argument>V</argument>)</argument_list></macro> <block>{}</block>
<call><name>KnownSVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UndefinedVal</name> <operator>&amp;</operator><name>V</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SVal</name><argument_list>(<argument>V</argument>)</argument_list></macro> <block>{}</block>
}</expr>;

<expr><name>class</name> <name>NonLoc</name> <operator>:</operator> <name>public</name> <name>DefinedSVal</name> <block>{
<expr><name>protected</name><operator>:</operator>
<call><name>NonLoc</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <macro><name>NonLoc</name><argument_list>(<argument>unsigned SubKind</argument>, <argument>const void *d</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>DefinedSVal</name><argument_list>(<argument>d</argument>, <argument>false</argument>, <argument>SubKind</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<name>void</name> <macro><name>dumpToStream</name><argument_list>(<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isCompoundType</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>isArrayType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isRecordType</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name><name>T</name><operator>-&gt;</operator><name>isAnyComplexType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isVectorType</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NonLocKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>Loc</name> <operator>:</operator> <name>public</name> <name>DefinedSVal</name> <block>{
<expr><name>protected</name><operator>:</operator>
<call><name>Loc</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <macro><name>Loc</name><argument_list>(<argument>unsigned SubKind</argument>, <argument>const void *D</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>DefinedSVal</name><argument_list>(<argument>const_cast&lt;void *&gt;(D)</argument>, <argument>true</argument>, <argument>SubKind</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<name>void</name> <macro><name>dumpToStream</name><argument_list>(<argument>raw_ostream &amp;Out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isLocType</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>isAnyPointerType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isBlockPointerType</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name><name>T</name><operator>-&gt;</operator><name>isReferenceType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>T</name><operator>-&gt;</operator><name>isNullPtrType</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LocKind</name></expr>;</return>
}</block>
}</expr>;





<expr><name>namespace</name> <name>nonloc</name> <block>{


<expr><name>class</name> <name>SymbolVal</name> <operator>:</operator> <name>public</name> <name>NonLoc</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>SymbolVal</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<macro><name>SymbolVal</name><argument_list>(<argument>SymbolRef sym</argument>)</argument_list></macro> <operator>:</operator> <macro><name>NonLoc</name><argument_list>(<argument>SymbolValKind</argument>, <argument>sym</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Loc</name><operator>::</operator><call><name>isLocType</name><argument_list>(<argument><expr><call><name><name>sym</name><operator>-&gt;</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>SymbolRef</name> <macro><name>getSymbol</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>SymExpr</name> <operator>*</operator><operator>)</operator> <name>Data</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isExpression</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>SymbolData</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getSymbol</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NonLocKind</name> <operator>&amp;&amp;</operator>
<call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SymbolValKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const NonLoc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SymbolValKind</name></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>ConcreteInt</name> <operator>:</operator> <name>public</name> <name>NonLoc</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>ConcreteInt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <name>V</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>NonLoc</name><argument_list>(<argument>ConcreteIntKind</argument>, <argument>&amp;V</argument>)</argument_list></macro> <block>{}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>SVal</name> <macro><name>evalBinOp</name><argument_list>(<argument>SValBuilder &amp;svalBuilder</argument>, <argument>BinaryOperator::Opcode Op</argument>,
<argument>const ConcreteInt&amp; R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ConcreteInt</name> <macro><name>evalComplement</name><argument_list>(<argument>SValBuilder &amp;svalBuilder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>ConcreteInt</name> <macro><name>evalMinus</name><argument_list>(<argument>SValBuilder &amp;svalBuilder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>ConcreteInt</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NonLocKind</name> <operator>&amp;&amp;</operator>
<call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConcreteIntKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const NonLoc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConcreteIntKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>LocAsInteger</name> <operator>:</operator> <name>public</name> <name>NonLoc</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ento</name><operator>::</operator><name>SValBuilder</name></expr>;

<expr><name>explicit</name> <call><name>LocAsInteger</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>NonLoc</name><argument_list>(<argument>LocAsIntegerKind</argument>, <argument>&amp;data</argument>)</argument_list></macro> <block>{


<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>first</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LocKind</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name><name>data</name><operator>.</operator><name>first</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>loc</name><operator>::</operator><name>MemRegionValKind</name> <operator>||</operator>
<call><name><name>data</name><operator>.</operator><name>first</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>loc</name><operator>::</operator><name>GotoLabelKind</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<name>Loc</name> <macro><name>getLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>D</name> <operator>=</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>D</name><operator>-&gt;</operator><name>first</name><operator>.</operator><name>castAs</name></name><operator>&lt;</operator><name>Loc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<name>Loc</name> <macro><name>getPersistentLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>D</name> <operator>=</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>SVal</name><operator>&amp;</operator> <name>V</name> <operator>=</operator> <name><name>D</name><operator>-&gt;</operator><name>first</name></name></expr>;
<return>return <expr><name><name>V</name><operator>.</operator><name>castAs</name></name><operator>&lt;</operator><name>Loc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block>

<name>unsigned</name> <macro><name>getNumBits</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>D</name> <operator>=</operator>
<call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>D</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>LocAsInteger</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NonLocKind</name> <operator>&amp;&amp;</operator>
<call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LocAsIntegerKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const NonLoc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LocAsIntegerKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>CompoundVal</name> <operator>:</operator> <name>public</name> <name>NonLoc</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ento</name><operator>::</operator><name>SValBuilder</name></expr>;

<expr><name>explicit</name> <call><name>CompoundVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompoundValData</name><operator>*</operator> <name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>NonLoc</name><argument_list>(<argument>CompoundValKind</argument>, <argument>D</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>CompoundValData</name><operator>*</operator> <macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CompoundValData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>CompoundVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NonLocKind</name> <operator>&amp;&amp;</operator> <call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CompoundValKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const NonLoc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CompoundValKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>LazyCompoundVal</name> <operator>:</operator> <name>public</name> <name>NonLoc</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ento</name><operator>::</operator><name>SValBuilder</name></expr>;

<expr><name>explicit</name> <call><name>LazyCompoundVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LazyCompoundValData</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>NonLoc</name><argument_list>(<argument>LazyCompoundValKind</argument>, <argument>D</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>LazyCompoundValData</name> <operator>*</operator><macro><name>getCVData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>LazyCompoundValData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>getStore</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><specifier>const</specifier> <name>TypedValueRegion</name> <operator>*</operator><macro><name>getRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>LazyCompoundVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NonLocKind</name> <operator>&amp;&amp;</operator>
<call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyCompoundValKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const NonLoc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LazyCompoundValKind</name></expr>;</return>
}</block>
}</expr>;











<expr><name>class</name> <name>PointerToMember</name> <operator>:</operator> <name>public</name> <name>NonLoc</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ento</name><operator>::</operator><name>SValBuilder</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>PTMDataType</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>PointerToMemberData</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>const</specifier> <name>PTMDataType</name> <macro><name>getPTMData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>PTMDataType</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isNullMemberPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>AdjustedDecl</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>AdjustedDecl</name> <operator>*</operator><macro><name>getDeclAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>AdjustedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>PointerToMember</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <macro><name>PointerToMember</name><argument_list>(<argument>const PTMDataType D</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>NonLoc</name><argument_list>(<argument>PointerToMemberKind</argument>, <argument>D.getOpaqueValue()</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NonLocKind</name> <operator>&amp;&amp;</operator>
<call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>PointerToMemberKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const NonLoc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>PointerToMemberKind</name></expr>;</return>
}</block>
}</expr>;

}</block>





<name>namespace</name> <name>loc</name> <block>{

<expr><name>class</name> <name>GotoLabel</name> <operator>:</operator> <name>public</name> <name>Loc</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>GotoLabel</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LabelDecl</name> <operator>*</operator><name>Label</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Loc</name><argument_list>(<argument>GotoLabelKind</argument>, <argument>Label</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Label</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>LabelDecl</name> <operator>*</operator><macro><name>getLabel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>LabelDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>GotoLabel</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LocKind</name> <operator>&amp;&amp;</operator> <call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>GotoLabelKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const Loc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>GotoLabelKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>MemRegionVal</name> <operator>:</operator> <name>public</name> <name>Loc</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>MemRegionVal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MemRegion</name><operator>*</operator> <name>r</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Loc</name><argument_list>(<argument>MemRegionValKind</argument>, <argument>r</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;
}</block>


<specifier>const</specifier> <name>MemRegion</name> <operator>*</operator><macro><name>getRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<specifier>const</specifier> <name>MemRegion</name><operator>*</operator> <macro><name>stripCasts</name><argument_list>(<argument>bool StripBaseCasts = true</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>REGION</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>REGION</name><operator>*</operator> <macro><name>getRegionAs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>REGION</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getRegion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>MemRegionVal</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRegion</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>MemRegionVal</name> <operator>&amp;</operator><name>R</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getRegion</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>R</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>MemRegionVal</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LocKind</name> <operator>&amp;&amp;</operator>
<call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MemRegionValKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const Loc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MemRegionValKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>ConcreteInt</name> <operator>:</operator> <name>public</name> <name>Loc</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>ConcreteInt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <name>V</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Loc</name><argument_list>(<argument>ConcreteIntKind</argument>, <argument>&amp;V</argument>)</argument_list></macro> <block>{}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>SVal</name> <macro><name>evalBinOp</name><argument_list>(<argument>BasicValueFactory&amp; BasicVals</argument>, <argument>BinaryOperator::Opcode Op</argument>,
<argument>const ConcreteInt&amp; R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>SVal</name></expr>;

<expr><call><name>ConcreteInt</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const SVal&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getBaseKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LocKind</name> <operator>&amp;&amp;</operator>
<call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConcreteIntKind</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isKind</name><argument_list>(<argument>const Loc&amp; V</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>V</name><operator>.</operator><name>getSubKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ConcreteIntKind</name></expr>;</return>
}</block>
}</expr>;

}</block></expr>

}</block></expr>

}</block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
