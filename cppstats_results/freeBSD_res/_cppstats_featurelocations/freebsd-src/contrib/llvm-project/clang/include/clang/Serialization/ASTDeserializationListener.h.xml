<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ASTDeserializationListener.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_ASTDESERIALIZATIONLISTENER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_ASTDESERIALIZATIONLISTENER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTBitCodes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroDefinitionRecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ASTDeserializationListener</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ASTDeserializationListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>virtual</name> <name>void</name></type> <name>ReaderInitialized</name><parameter_list>(<parameter><decl><type><name>ASTReader</name> <modifier>*</modifier></type><name>Reader</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>


<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>IdentifierRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>IdentID</name> <name>ID</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>II</name></expr></argument>)</argument_list> <block>{<block_content> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>MacroRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>MacroID</name> <name>ID</name></expr></argument>, <argument><expr><name>MacroInfo</name> <operator>*</operator><name>MI</name></expr></argument>)</argument_list> <block>{<block_content> </block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>TypeRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>TypeIdx</name> <name>Idx</name></expr></argument>, <argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> <block>{<block_content> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>DeclRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>DeclID</name> <name>ID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> <block>{<block_content> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>SelectorRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>SelectorID</name> <name>iD</name></expr></argument>, <argument><expr><name>Selector</name> <name>Sel</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>MacroDefinitionRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>PreprocessedEntityID</name></expr></argument>,
<argument><expr><name>MacroDefinitionRecord</name> <operator>*</operator><name>MD</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>ModuleRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>SubmoduleID</name> <name>ID</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><name>Mod</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>ModuleImportRead</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>SubmoduleID</name> <name>ID</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <name>ImportLoc</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
