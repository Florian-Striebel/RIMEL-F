<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/SemaConcept.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_SEMACONCEPT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_SEMACONCEPT_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConcept.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>

<struct>struct <name>AtomicConstraint</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>ConstraintExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name><name>MutableArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLoc</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ParameterMapping</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AtomicConstraint</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>ConstraintExpr</name></expr></argument>)</argument_list></call> <operator>:</operator>
<macro><name>ConstraintExpr</name><argument_list>(<argument>ConstraintExpr</argument>)</argument_list></macro> <block>{ }</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasMatchingParameterMapping</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>AtomicConstraint</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ParameterMapping</name> <operator>!=</operator> <operator>!</operator><name><name>Other</name><operator>.</operator><name>ParameterMapping</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ParameterMapping</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>ParameterMapping</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>Other</name><operator>.</operator><name>ParameterMapping</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>S</name> <init>= <expr><call><name><name>ParameterMapping</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>&lt;</operator> <name>S</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <name>IDA</name></expr><operator>,</operator> <expr><name>IDB</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>getCanonicalTemplateArgument</name></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ParameterMapping</name><operator>)</operator><index>[<expr><name>I</name></expr>]</index><operator>.</operator><call><name>getArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Profile</name><argument_list>(<argument><expr><name>IDA</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>getCanonicalTemplateArgument</name></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name><name>Other</name><operator>.</operator><name>ParameterMapping</name></name><operator>)</operator><index>[<expr><name>I</name></expr>]</index><operator>.</operator><call><name>getArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Profile</name><argument_list>(<argument><expr><name>IDB</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IDA</name> <operator>!=</operator> <name>IDB</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>subsumes</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>AtomicConstraint</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list> const <block>{<block_content>












<if_stmt><if>if <condition>(<expr><name>ConstraintExpr</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>ConstraintExpr</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name>hasMatchingParameterMapping</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block>;</struct>




<struct>struct <name>NormalizedConstraint</name> <block>{
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Sema</name></decl>;</decl_stmt>

<enum>enum <name>CompoundConstraintKind</name> <block>{ <decl><name>CCK_Conjunction</name></decl>, <decl><name>CCK_Disjunction</name></decl> }</block>;</enum>

<decl_stmt><decl><type><name>using</name></type> <name>CompoundConstraint</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedConstraint</name></expr></argument>, <argument><expr><name>NormalizedConstraint</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>CompoundConstraintKind</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>AtomicConstraint</name> <operator>*</operator></expr></argument>, <argument><expr><name>CompoundConstraint</name></expr></argument>&gt;</argument_list></name> <name>Constraint</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NormalizedConstraint</name><argument_list>(<argument><expr><name>AtomicConstraint</name> <operator>*</operator><name>C</name></expr></argument>)</argument_list></call><operator>:</operator> <name>Constraint</name><block>{<expr><name>C</name></expr>}</block> <block>{ }</block></expr>;</expr_stmt>
<macro><name>NormalizedConstraint</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>NormalizedConstraint LHS</argument>,
<argument>NormalizedConstraint RHS</argument>, <argument>CompoundConstraintKind Kind</argument>)</argument_list></macro>
: <macro><name>Constraint</name></macro><block>{<block_content><macro><name>CompoundConstraint</name></macro><block>{<block_content>
<macro><name>new</name> <argument_list>(<argument>C</argument>)</argument_list></macro> <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedConstraint</name></expr></argument>, <argument><expr><name>NormalizedConstraint</name></expr></argument>&gt;</argument_list></name><block>{
<expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>LHS</name></expr></argument>)</argument_list></call></expr>, <expr><name>std</name><operator>::</operator><macro><name>move</name><argument_list>(<argument>RHS</argument>)</argument_list></macro></expr>}</block></expr><operator>,</operator> <expr><name>Kind</name></expr></block_content>}</block></block_content>}</block> <block>{<block_content> </block_content>}</block><empty_stmt>;</empty_stmt>

<macro><name>NormalizedConstraint</name><argument_list>(<argument>ASTContext &amp;C</argument>, <argument>const NormalizedConstraint &amp;Other</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Other</name><operator>.</operator><name>isAtomic</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Constraint</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>C</argument>)</argument_list></macro> <call><name>AtomicConstraint</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>Other</name><operator>.</operator><name>getAtomicConstraint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>Constraint</name> <operator>=</operator> <macro><name>CompoundConstraint</name><argument_list>(
<argument>new (C) std::pair&lt;NormalizedConstraint</argument>, <argument>NormalizedConstraint&gt;{
NormalizedConstraint(C, Other.getLHS())</argument>,
<argument>NormalizedConstraint(C, Other.getRHS())}</argument>,
<argument>Other.getCompoundKind()</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>NormalizedConstraint</name><argument_list>(<argument><expr><name>NormalizedConstraint</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call><operator>:</operator>
<macro><name>Constraint</name><argument_list>(<argument>Other.Constraint</argument>)</argument_list></macro> <block>{
<expr><name><name>Other</name><operator>.</operator><name>Constraint</name></name> <operator>=</operator> <name>nullptr</name></expr>;
}</block>
<name>NormalizedConstraint</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>NormalizedConstraint</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>NormalizedConstraint</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>NormalizedConstraint</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>Other</name> <operator>!=</operator> <name>this</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>NormalizedConstraint</name></type> <name>Temp</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>, <argument><expr><name><name>Temp</name><operator>.</operator><name>Constraint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></init></decl></decl_stmt>

<expr_stmt><expr><name>CompoundConstraintKind</name> <macro><name>getCompoundKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAtomic</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"getCompoundKind called on atomic constraint."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Constraint</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>CompoundConstraint</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isAtomic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Constraint</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>AtomicConstraint</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>NormalizedConstraint</name> <operator>&amp;</operator><macro><name>getLHS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAtomic</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"getLHS called on atomic constraint."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Constraint</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>CompoundConstraint</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>getPointer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>NormalizedConstraint</name> <operator>&amp;</operator><macro><name>getRHS</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAtomic</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"getRHS called on atomic constraint."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Constraint</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>CompoundConstraint</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>getPointer</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>AtomicConstraint</name> <operator>*</operator><macro><name>getAtomicConstraint</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAtomic</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"getAtomicConstraint called on non-atomic constraint."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Constraint</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>AtomicConstraint</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedConstraint</name></expr></argument>&gt;</argument_list></name></type>
<name>fromConstraintExprs</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedConstraint</name></expr></argument>&gt;</argument_list></name></type>
<name>fromConstraintExpr</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
