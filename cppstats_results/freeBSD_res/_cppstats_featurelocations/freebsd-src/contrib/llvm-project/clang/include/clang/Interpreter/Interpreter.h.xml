<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Interpreter/Interpreter.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_INTERPRETER_INTERPRETER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_INTERPRETER_INTERPRETER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Interpreter/PartialTranslationUnit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>orc</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ThreadSafeContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclGroupRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IncrementalExecutor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IncrementalParser</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>IncrementalCompilerBuilder</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilerInstance</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>create</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ClangArgv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Interpreter</name> <block>{<block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>orc</name><operator>::</operator><name>ThreadSafeContext</name></expr></argument>&gt;</argument_list></name> <name>TSCtx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IncrementalParser</name></expr></argument>&gt;</argument_list></name> <name>IncrParser</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IncrementalExecutor</name></expr></argument>&gt;</argument_list></name> <name>IncrExecutor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Interpreter</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilerInstance</name></expr></argument>&gt;</argument_list></name> <name>CI</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Error</name> <operator>&amp;</operator><name>Err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><operator>~</operator><call><name>Interpreter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Interpreter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>create</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilerInstance</name></expr></argument>&gt;</argument_list></name> <name>CI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>CompilerInstance</name> <operator>*</operator><macro><name>getCompilerInstance</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>PartialTranslationUnit</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name> <macro><name>Parse</name><argument_list>(<argument>llvm::StringRef Code</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>Execute</name><argument_list>(<argument><expr><name>PartialTranslationUnit</name> <operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>ParseAndExecute</name><argument_list>(<argument>llvm::StringRef Code</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>PTU</name> <operator>=</operator> <call><name>Parse</name><argument_list>(<argument><expr><name>Code</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PTU</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>PTU</name><operator>.</operator><name>takeError</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>PTU</name><operator>-&gt;</operator><name>TheModule</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>Execute</name><argument_list>(<argument><expr><operator>*</operator><name>PTU</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><name>Error</name><operator>::</operator><call><name>success</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
