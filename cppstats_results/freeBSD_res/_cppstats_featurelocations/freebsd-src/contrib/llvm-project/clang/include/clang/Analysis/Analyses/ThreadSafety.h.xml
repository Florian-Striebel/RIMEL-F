<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafety.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisDeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>threadSafety</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BeforeSet</name></decl>;</decl_stmt>



<enum>enum <name>ProtectedOperationKind</name> <block>{

<decl><name>POK_VarDereference</name></decl>,


<decl><name>POK_VarAccess</name></decl>,


<decl><name>POK_FunctionCall</name></decl>,


<decl><name>POK_PassByRef</name></decl>,


<decl><name>POK_PtPassByRef</name></decl>
}</block>;</enum>




<enum>enum <name>LockKind</name> <block>{

<decl><name>LK_Shared</name></decl>,


<decl><name>LK_Exclusive</name></decl>,


<decl><name>LK_Generic</name></decl>
}</block>;</enum>



<enum>enum <name>AccessKind</name> <block>{

<decl><name>AK_Read</name></decl>,


<decl><name>AK_Written</name></decl>
}</block>;</enum>









<enum>enum <name>LockErrorKind</name> <block>{
<decl><name>LEK_LockedSomeLoopIterations</name></decl>,
<decl><name>LEK_LockedSomePredecessors</name></decl>,
<decl><name>LEK_LockedAtEndOfFunction</name></decl>,
<decl><name>LEK_NotLockedAtEndOfFunction</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>class</name></type> <name>ThreadSafetyHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>Name</name> <init>= <expr><name>StringRef</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ThreadSafetyHandler</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ThreadSafetyHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<function><type><name>virtual</name> <name>void</name></type> <name>handleInvalidLockExp</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>








<function><type><name>virtual</name> <name>void</name></type> <name>handleUnmatchedUnlock</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocPreviousUnlock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>











<function><type><name>virtual</name> <name>void</name></type> <name>handleIncorrectUnlockKind</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>,
<parameter><decl><type><name>LockKind</name></type> <name>Expected</name></decl></parameter>, <parameter><decl><type><name>LockKind</name></type> <name>Received</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocLocked</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocUnlock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>







<function><type><name>virtual</name> <name>void</name></type> <name>handleDoubleLock</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocLocked</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocDoubleLock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>














<function><type><name>virtual</name> <name>void</name></type> <name>handleMutexHeldEndOfScope</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocLocked</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LocEndOfScope</name></decl></parameter>,
<parameter><decl><type><name>LockErrorKind</name></type> <name>LEK</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>









<function><type><name>virtual</name> <name>void</name></type> <name>handleExclusiveAndShared</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc1</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc2</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>







<function><type><name>virtual</name> <name>void</name></type> <name>handleNoMutexHeld</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>ProtectedOperationKind</name></type> <name>POK</name></decl></parameter>, <parameter><decl><type><name>AccessKind</name></type> <name>AK</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>










<function><type><name>virtual</name> <name>void</name></type> <name>handleMutexNotHeld</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>ProtectedOperationKind</name></type> <name>POK</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>,
<parameter><decl><type><name>LockKind</name></type> <name>LK</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>Name</name> <modifier>*</modifier></type><name>PossibleMatch</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>








<function><type><name>virtual</name> <name>void</name></type> <name>handleNegativeNotHeld</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>Neg</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>






<function><type><name>virtual</name> <name>void</name></type> <name>handleNegativeNotHeld</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>








<function><type><name>virtual</name> <name>void</name></type> <name>handleFunExcludesLock</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>FunName</name></decl></parameter>,
<parameter><decl><type><name>Name</name></type> <name>LockName</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>handleLockAcquiredBefore</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Kind</name></decl></parameter>, <parameter><decl><type><name>Name</name></type> <name>L1Name</name></decl></parameter>,
<parameter><decl><type><name>Name</name></type> <name>L2Name</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>handleBeforeAfterCycle</name><parameter_list>(<parameter><decl><type><name>Name</name></type> <name>L1Name</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>enterFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>


<function><type><name>virtual</name> <name>void</name></type> <name>leaveFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>bool</name></type> <name>issueBetaWarnings</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>IssueBetaWarnings</name></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setIssueBetaWarnings</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IssueBetaWarnings</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>IssueBetaWarnings</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<function_decl><type><name>void</name></type> <name>runThreadSafetyAnalysis</name><parameter_list>(<parameter><decl><type><name>AnalysisDeclContext</name> <modifier>&amp;</modifier></type><name>AC</name></decl></parameter>,
<parameter><decl><type><name>ThreadSafetyHandler</name> <modifier>&amp;</modifier></type><name>Handler</name></decl></parameter>,
<parameter><decl><type><name>BeforeSet</name> <modifier>*</modifier><modifier>*</modifier></type><name>Bset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>threadSafetyCleanup</name><parameter_list>(<parameter><decl><type><name>BeforeSet</name> <modifier>*</modifier></type><name>Cache</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>LockKind</name></type> <name>getLockKindFromAccessKind</name><parameter_list>(<parameter><decl><type><name>AccessKind</name></type> <name>AK</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
