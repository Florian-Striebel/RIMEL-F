<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Checkers/MPIFunctionClassifier.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPIFUNCTIONCLASSIFIER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPIFUNCTIONCLASSIFIER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>mpi</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MPIFunctionClassifier</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MPIFunctionClassifier</name><argument_list>(<argument>ASTContext &amp;ASTCtx</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>identifierInit</name><argument_list>(<argument><expr><name>ASTCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>


<decl_stmt><decl><type><name>bool</name></type> <name>isMPIType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isNonBlockingType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isPointToPointType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isCollectiveType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isCollToColl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isScatterType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isGatherType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isAllgatherType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isAlltoallType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isReduceType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isBcastType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isMPI_Wait</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isMPI_Waitall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isWaitType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <name>IdentInfo</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>identifierInit</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>ASTCtx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initPointToPointIdentifiers</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>ASTCtx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initCollectiveIdentifiers</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>ASTCtx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>initAdditionalIdentifiers</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>ASTCtx</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>&gt;</argument_list></name> <name>MPINonBlockingTypes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>&gt;</argument_list></name> <name>MPIPointToPointTypes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>MPICollectiveTypes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>MPIPointToCollTypes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>MPICollToPointTypes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>&gt;</argument_list></name> <name>MPICollToCollTypes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name> <name>MPIType</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>IdentInfo_MPI_Send</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Isend</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Ssend</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Issend</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Bsend</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Ibsend</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Rsend</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Irsend</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Recv</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Irecv</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>IdentInfo_MPI_Scatter</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Iscatter</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Gather</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Igather</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Allgather</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Iallgather</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Bcast</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Ibcast</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Reduce</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Ireduce</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Allreduce</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Iallreduce</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Alltoall</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Ialltoall</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Barrier</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>IdentInfo_MPI_Comm_rank</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Comm_size</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Wait</name> <init>= <expr><name>nullptr</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>IdentInfo_MPI_Waitall</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
