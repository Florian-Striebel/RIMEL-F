<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/TokenKinds.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_TOKENKINDS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_TOKENKINDS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>tok</name> <block>{<block_content>


<enum>enum <name>TokenKind</name> : <type><name>unsigned</name> <name>short</name></type> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOK</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.def"</cpp:file></cpp:include>
<decl><name>NUM_TOKENS</name></decl>
}</block>;</enum>



<enum>enum <name>PPKeywordKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPKEYWORD</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pp_##X,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.def"</cpp:file></cpp:include>
<decl><name>NUM_PP_KEYWORDS</name></decl>
}</block>;</enum>



<enum>enum <name>ObjCKeywordKind</name> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJC_AT_KEYWORD</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>objc_##X,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.def"</cpp:file></cpp:include>
<decl><name>NUM_OBJC_KEYWORDS</name></decl>
}</block>;</enum>


<enum>enum <name>OnOffSwitch</name> <block>{
<decl><name>OOS_ON</name></decl>, <decl><name>OOS_OFF</name></decl>, <decl><name>OOS_DEFAULT</name></decl>
}</block>;</enum>





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getTokenName</name><argument_list>(<argument><expr><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list> <name>LLVM_READNONE</name></decl>;</decl_stmt>








<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getPunctuatorSpelling</name><argument_list>(<argument><expr><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list> <name>LLVM_READNONE</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getKeywordSpelling</name><argument_list>(<argument><expr><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list> <name>LLVM_READNONE</name></decl>;</decl_stmt>


<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isAnyIdentifier</name><parameter_list>(<parameter><decl><type><name>TokenKind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>identifier</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>raw_identifier</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isStringLiteral</name><parameter_list>(<parameter><decl><type><name>TokenKind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>string_literal</name> <operator>||</operator> <name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>wide_string_literal</name> <operator>||</operator>
<name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf8_string_literal</name> <operator>||</operator> <name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf16_string_literal</name> <operator>||</operator>
<name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf32_string_literal</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isLiteral</name><parameter_list>(<parameter><decl><type><name>TokenKind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>numeric_constant</name> <operator>||</operator> <name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>char_constant</name> <operator>||</operator>
<name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>wide_char_constant</name> <operator>||</operator> <name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf8_char_constant</name> <operator>||</operator>
<name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf16_char_constant</name> <operator>||</operator> <name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>utf32_char_constant</name> <operator>||</operator>
<call><name>isStringLiteral</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>K</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>header_name</name></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>bool</name></type> <name>isAnnotation</name><parameter_list>(<parameter><decl><type><name>TokenKind</name></type> <name>K</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isPragmaAnnotation</name><parameter_list>(<parameter><decl><type><name>TokenKind</name></type> <name>K</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tok</name><operator>::</operator><name>PPKeywordKind</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>tok</name><operator>::</operator><name>PPKeywordKind</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>tok</name><operator>::</operator><name>PPKeywordKind</name><operator>::</operator><name>pp_not_keyword</name></expr>;</return>
}</block>
<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>tok</name><operator>::</operator><name>PPKeywordKind</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>tok</name><operator>::</operator><name>PPKeywordKind</name><operator>::</operator><name>NUM_PP_KEYWORDS</name></expr>;</return>
}</block>
<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>const clang::tok::PPKeywordKind &amp;Val</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>const clang::tok::PPKeywordKind &amp;LHS</argument>,
<argument>const clang::tok::PPKeywordKind &amp;RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;
}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
