<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_DARWIN_SDK_INFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_DARWIN_SDK_INFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>json</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Object</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>DarwinSDKInfo</name> <block>{<block_content>
<label><name>public</name>:</label>


<struct>struct <name>OSEnvPair</name> <block>{
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>StorageType</name> <init>= <expr><name>uint64_t</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>constexpr</name></type> <name>OSEnvPair</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>OSType</name> <name>FromOS</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>EnvironmentType</name> <name>FromEnv</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>OSType</name> <name>ToOS</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>EnvironmentType</name> <name>ToEnv</name></expr></argument>)</argument_list>
<range>: <macro><name>Value</name><argument_list>(<argument>((StorageType(FromOS) * StorageType(llvm::Triple::LastOSType) +
StorageType(FromEnv))
&lt;&lt; <literal type="number">32ull</literal>) |
(StorageType(ToOS) * StorageType(llvm::Triple::LastOSType) +
StorageType(ToEnv))</argument>)</argument_list></macro> <expr><block>{}</block>



<specifier>static</specifier> <specifier>inline</specifier> <name>constexpr</name> <name>OSEnvPair</name> <macro><name>macOStoMacCatalystPair</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>OSEnvPair</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>MacOSX</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>UnknownEnvironment</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>IOS</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>MacABI</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>constexpr</name> <name>OSEnvPair</name></type> <name>macCatalystToMacOSPair</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>OSEnvPair</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>IOS</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>MacABI</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>MacOSX</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>UnknownEnvironment</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>StorageType</name></type> <name>Value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DarwinSDKInfo</name></decl>;</decl_stmt>
}</block>;</struct>






<decl_stmt><decl><type><name>class</name></type> <name>RelatedTargetVersionMapping</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>RelatedTargetVersionMapping</name><argument_list>(
<argument>VersionTuple MinimumKeyVersion</argument>, <argument>VersionTuple MaximumKeyVersion</argument>,
<argument>VersionTuple MinimumValue</argument>, <argument>VersionTuple MaximumValue</argument>,
<argument>llvm::DenseMap&lt;VersionTuple</argument>, <argument>VersionTuple&gt; Mapping</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>MinimumKeyVersion</name><argument_list>(<argument><expr><name>MinimumKeyVersion</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MaximumKeyVersion</name><argument_list>(<argument><expr><name>MaximumKeyVersion</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MinimumValue</name><argument_list>(<argument><expr><name>MinimumValue</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MaximumValue</name><argument_list>(<argument><expr><name>MaximumValue</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Mapping</name><argument_list>(<argument>Mapping</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>this</name><operator>-&gt;</operator><name>Mapping</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"unexpected empty mapping"</literal></expr></argument>)</argument_list></call></expr>;
}</block>


<specifier>const</specifier> <name>VersionTuple</name> <operator>&amp;</operator><macro><name>getMinimumValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MinimumValue</name></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>VersionTuple</name></expr></argument>&gt;</argument_list></name></type> <name>map</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VersionTuple</name> <operator>&amp;</operator><name>Key</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>VersionTuple</name> <operator>&amp;</operator><name>MinimumValue</name></expr></argument>,
<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>VersionTuple</name></expr></argument>&gt;</argument_list></name> <name>MaximumValue</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>RelatedTargetVersionMapping</name></expr></argument>&gt;</argument_list></name></type>
<name>parseJSON</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>json</name><operator>::</operator><name>Object</name> <operator>&amp;</operator><name>Obj</name></expr></argument>,
<argument><expr><name>VersionTuple</name> <name>MaximumDeploymentTarget</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>VersionTuple</name></type> <name>MinimumKeyVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VersionTuple</name></type> <name>MaximumKeyVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VersionTuple</name></type> <name>MinimumValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VersionTuple</name></type> <name>MaximumValue</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>VersionTuple</name></expr></argument>, <argument><expr><name>VersionTuple</name></expr></argument>&gt;</argument_list></name> <name>Mapping</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>DarwinSDKInfo</name><argument_list>(<argument>VersionTuple Version</argument>, <argument>VersionTuple MaximumDeploymentTarget</argument>,
<argument>llvm::DenseMap&lt;OSEnvPair::StorageType</argument>,
<argument>Optional&lt;RelatedTargetVersionMapping&gt;&gt;
VersionMappings =
llvm::DenseMap&lt;OSEnvPair::StorageType</argument>,
<argument>Optional&lt;RelatedTargetVersionMapping&gt;&gt;()</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Version</name><argument_list>(<argument><expr><name>Version</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MaximumDeploymentTarget</name><argument_list>(<argument><expr><name>MaximumDeploymentTarget</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>VersionMappings</name><argument_list>(<argument>std::move(VersionMappings)</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <operator>&amp;</operator><macro><name>getVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Version</name></expr>;</return> }</block></expr></expr_stmt>












<decl_stmt><decl><type><specifier>const</specifier> <name>RelatedTargetVersionMapping</name> <modifier>*</modifier></type><name>getVersionMapping</name><argument_list>(<argument><expr><name>OSEnvPair</name> <name>Kind</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>Mapping</name> <init>= <expr><call><name><name>VersionMappings</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>Kind</name><operator>.</operator><name>Value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>Mapping</name> <operator>==</operator> <call><name><name>VersionMappings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><call><name><name>Mapping</name><operator>-&gt;</operator><name>getSecond</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasValue</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Mapping</name><operator>-&gt;</operator><name>getSecond</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPointer</name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DarwinSDKInfo</name></expr></argument>&gt;</argument_list></name></type>
<name>parseDarwinSDKSettingsJSON</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>json</name><operator>::</operator><name>Object</name> <operator>*</operator><name>Obj</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>VersionTuple</name></type> <name>Version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VersionTuple</name></type> <name>MaximumDeploymentTarget</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>OSEnvPair</name><operator>::</operator><name>StorageType</name></expr></argument>, <argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>RelatedTargetVersionMapping</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>VersionMappings</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DarwinSDKInfo</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>parseDarwinSDKInfo</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>&amp;</operator><name>VFS</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>SDKRootPath</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
