<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/DiagnosticsYaml.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_DIAGNOSTICSYAML_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_DIAGNOSTICSYAML_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Core/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/ReplacementsYaml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/YAMLTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<macro><name>LLVM_YAML_IS_SEQUENCE_VECTOR</name><argument_list>(<argument>clang::tooling::Diagnostic</argument>)</argument_list></macro>
<macro><name>LLVM_YAML_IS_SEQUENCE_VECTOR</name><argument_list>(<argument>clang::tooling::DiagnosticMessage</argument>)</argument_list></macro>
<macro><name>LLVM_YAML_IS_SEQUENCE_VECTOR</name><argument_list>(<argument>clang::tooling::FileByteRange</argument>)</argument_list></macro>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>yaml</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>MappingTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>FileByteRange</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>mapping</name><argument_list>(<argument>IO &amp;Io</argument>, <argument>clang::tooling::FileByteRange &amp;R</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"FilePath"</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>FilePath</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"FileOffset"</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>FileOffset</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"Length"</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>Length</name></name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>MappingTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>DiagnosticMessage</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>mapping</name><argument_list>(<argument>IO &amp;Io</argument>, <argument>clang::tooling::DiagnosticMessage &amp;M</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"Message"</literal></expr></argument>, <argument><expr><name><name>M</name><operator>.</operator><name>Message</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapOptional</name></name><argument_list>(<argument><expr><literal type="string">"FilePath"</literal></expr></argument>, <argument><expr><name><name>M</name><operator>.</operator><name>FilePath</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapOptional</name></name><argument_list>(<argument><expr><literal type="string">"FileOffset"</literal></expr></argument>, <argument><expr><name><name>M</name><operator>.</operator><name>FileOffset</name></name></expr></argument>)</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Replacement</name></expr></argument>&gt;</argument_list></name> <name>Fixes</name></expr>;
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>Replacements</name> <operator>:</operator> <name><name>M</name><operator>.</operator><name>Fix</name></name></expr></init>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>Replacement</name> <operator>:</operator> <name><name>Replacements</name><operator>.</operator><name>second</name></name></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Fixes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt/>}</block_content>
Io.mapRequired("Replacements"</block><operator>,</operator> <expr_stmt><expr><name>Fixes</name></expr></expr_stmt></for>)</block></expr>;
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>Fix</name> <operator>:</operator> <name>Fixes</name></expr></init>)</control> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <name>Err</name> <operator>=</operator> <name><name>M</name><operator>.</operator><name>Fix</name><index>[<expr><call><name><name>Fix</name><operator>.</operator><name>getFilePath</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>Fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Fix conflicts with existing fix: "</literal>
<operator>&lt;&lt;</operator> <name>llvm</name><operator>::</operator><call><name>toString</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
Io.mapOptional("Ranges"</block><operator>,</operator> <expr_stmt><expr><name><name>M</name><operator>.</operator><name>Ranges</name></name></expr></expr_stmt></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></for>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>MappingTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name></expr></argument>&gt;</argument_list></name> <block>{


<expr><name>class</name> <name>NormalizedDiagnostic</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>NormalizedDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IO</name> <operator>&amp;</operator></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DiagLevel</name><argument_list>(<argument>clang::tooling::Diagnostic::Level::Warning</argument>)</argument_list></macro> <block>{}</block>

<call><name>NormalizedDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IO</name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name> <operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>DiagnosticName</name><argument_list>(<argument><expr><name><name>D</name><operator>.</operator><name>DiagnosticName</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Message</name><argument_list>(<argument><expr><name><name>D</name><operator>.</operator><name>Message</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Notes</name><argument_list>(<argument><expr><name><name>D</name><operator>.</operator><name>Notes</name></name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DiagLevel</name><argument_list>(<argument><expr><name><name>D</name><operator>.</operator><name>DiagLevel</name></name></expr></argument>)</argument_list></call></expr>, <macro><name>BuildDirectory</name><argument_list>(<argument>D.BuildDirectory</argument>)</argument_list></macro> <expr><block>{}</block>

<name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name> <macro><name>denormalize</name><argument_list>(<argument>const IO &amp;</argument>)</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><call><name>Diagnostic</name><argument_list>(<argument><expr><name>DiagnosticName</name></expr></argument>, <argument><expr><name>Message</name></expr></argument>, <argument><expr><name>Notes</name></expr></argument>,
<argument><expr><name>DiagLevel</name></expr></argument>, <argument><expr><name>BuildDirectory</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>std</name><operator>::</operator><name>string</name> <name>DiagnosticName</name></expr>;
<expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>DiagnosticMessage</name> <name>Message</name></expr>;
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>DiagnosticMessage</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Notes</name></expr>;
<expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name><operator>::</operator><name>Level</name> <name>DiagLevel</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>BuildDirectory</name></expr>;
}</block></expr>;

<expr><specifier>static</specifier> <name>void</name> <macro><name>mapping</name><argument_list>(<argument>IO &amp;Io</argument>, <argument>clang::tooling::Diagnostic &amp;D</argument>)</argument_list></macro> <block>{
<expr><name><name>MappingNormalization</name><argument_list type="generic">&lt;<argument><expr><name>NormalizedDiagnostic</name></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name></expr></argument>&gt;</argument_list></name> <call><name>Keys</name><argument_list>(
<argument><expr><name>Io</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"DiagnosticName"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>DiagnosticName</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"DiagnosticMessage"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>Message</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapOptional</name></name><argument_list>(<argument><expr><literal type="string">"Notes"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>Notes</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapOptional</name></name><argument_list>(<argument><expr><literal type="string">"Level"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>DiagLevel</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapOptional</name></name><argument_list>(<argument><expr><literal type="string">"BuildDirectory"</literal></expr></argument>, <argument><expr><name><name>Keys</name><operator>-&gt;</operator><name>BuildDirectory</name></name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>MappingTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>TranslationUnitDiagnostics</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>mapping</name><argument_list>(<argument>IO &amp;Io</argument>, <argument>clang::tooling::TranslationUnitDiagnostics &amp;Doc</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"MainSourceFile"</literal></expr></argument>, <argument><expr><name><name>Doc</name><operator>.</operator><name>MainSourceFile</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Io</name><operator>.</operator><name>mapRequired</name></name><argument_list>(<argument><expr><literal type="string">"Diagnostics"</literal></expr></argument>, <argument><expr><name><name>Doc</name><operator>.</operator><name>Diagnostics</name></name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>ScalarEnumerationTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name><operator>::</operator><name>Level</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <macro><name>enumeration</name><argument_list>(<argument>IO &amp;IO</argument>, <argument>clang::tooling::Diagnostic::Level &amp;Value</argument>)</argument_list></macro> <block>{
<expr><call><name><name>IO</name><operator>.</operator><name>enumCase</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>, <argument><expr><literal type="string">"Warning"</literal></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name><operator>::</operator><name>Warning</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>IO</name><operator>.</operator><name>enumCase</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name><operator>::</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>IO</name><operator>.</operator><name>enumCase</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>, <argument><expr><literal type="string">"Remark"</literal></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>tooling</name><operator>::</operator><name>Diagnostic</name><operator>::</operator><name>Remark</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
