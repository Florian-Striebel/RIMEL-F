<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/CodeCompletionHandler.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_CODECOMPLETIONHANDLER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_CODECOMPLETIONHANDLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroInfo</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CodeCompletionHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CodeCompletionHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>









<function><type><name>virtual</name> <name>void</name></type> <name>CodeCompleteDirective</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>InConditional</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>CodeCompleteInConditionalExclusion</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>






<function><type><name>virtual</name> <name>void</name></type> <name>CodeCompleteMacroName</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>IsDefinition</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>CodeCompletePreprocessorExpression</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>







<function><type><name>virtual</name> <name>void</name></type> <name>CodeCompleteMacroArgument</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>Macro</name></decl></parameter>,
<parameter><decl><type><name>MacroInfo</name> <modifier>*</modifier></type><name>MacroInfo</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>ArgumentIndex</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>




<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>CodeCompleteIncludedFile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Dir</name></expr></argument>, <argument><expr><name>bool</name> <name>IsAngled</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>




<function><type><name>virtual</name> <name>void</name></type> <name>CodeCompleteNaturalLanguage</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
