<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CommentParser.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMMENTPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMMENTPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Comment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentLexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentSema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>comments</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CommandTraits</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Parser</name> <block>{<block_content>
<expr_stmt><expr><call><name>Parser</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Parser</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Parser</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TextTokenRetokenizer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Lexer</name> <modifier>&amp;</modifier></type><name>L</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>

<function><type><name>DiagnosticBuilder</name></type> <name>Diag</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Diags</name><operator>.</operator><name>Report</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>DiagID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandTraits</name> <modifier>&amp;</modifier></type><name>Traits</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Token</name></type> <name>Tok</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>MoreLATokens</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>consumeToken</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>MoreLATokens</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>lex</name></name><argument_list>(<argument><expr><name>Tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Tok</name> <operator>=</operator> <call><name><name>MoreLATokens</name><operator>.</operator><name>pop_back_val</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>putBack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Token</name> <modifier>&amp;</modifier></type><name>OldTok</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>MoreLATokens</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Tok</name> <operator>=</operator> <name>OldTok</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>putBack</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name></type> <name>Toks</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>Toks</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>MoreLATokens</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>MoreLATokens</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Toks</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>prev</name><argument_list>(<argument><expr><call><name><name>Toks</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Tok</name> <operator>=</operator> <name><name>Toks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isTokBlockCommand</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><call><name><name>Tok</name><operator>.</operator><name>is</name></name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>backslash_command</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Tok</name><operator>.</operator><name>is</name></name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>at_command</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name><name>Traits</name><operator>.</operator><name>getCommandInfo</name></name><argument_list>(<argument><expr><call><name><name>Tok</name><operator>.</operator><name>getCommandID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>IsBlockCommand</name></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Parser</name><argument_list>(<argument><expr><name>Lexer</name> <operator>&amp;</operator><name>L</name></expr></argument>, <argument><expr><name>Sema</name> <operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CommandTraits</name> <operator>&amp;</operator><name>Traits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>parseParamCommandArgs</name><parameter_list>(<parameter><decl><type><name>ParamCommandComment</name> <modifier>*</modifier></type><name>PC</name></decl></parameter>,
<parameter><decl><type><name>TextTokenRetokenizer</name> <modifier>&amp;</modifier></type><name>Retokenizer</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>parseTParamCommandArgs</name><parameter_list>(<parameter><decl><type><name>TParamCommandComment</name> <modifier>*</modifier></type><name>TPC</name></decl></parameter>,
<parameter><decl><type><name>TextTokenRetokenizer</name> <modifier>&amp;</modifier></type><name>Retokenizer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>parseBlockCommandArgs</name><parameter_list>(<parameter><decl><type><name>BlockCommandComment</name> <modifier>*</modifier></type><name>BC</name></decl></parameter>,
<parameter><decl><type><name>TextTokenRetokenizer</name> <modifier>&amp;</modifier></type><name>Retokenizer</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>NumArgs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>BlockCommandComment</name> <modifier>*</modifier></type><name>parseBlockCommand</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>InlineCommandComment</name> <modifier>*</modifier></type><name>parseInlineCommand</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>HTMLStartTagComment</name> <modifier>*</modifier></type><name>parseHTMLStartTag</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>HTMLEndTagComment</name> <modifier>*</modifier></type><name>parseHTMLEndTag</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>BlockContentComment</name> <modifier>*</modifier></type><name>parseParagraphOrBlockCommand</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>VerbatimBlockComment</name> <modifier>*</modifier></type><name>parseVerbatimBlock</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>VerbatimLineComment</name> <modifier>*</modifier></type><name>parseVerbatimLine</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>BlockContentComment</name> <modifier>*</modifier></type><name>parseBlockContent</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>FullComment</name> <modifier>*</modifier></type><name>parseFullComment</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
