<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/FileManager.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_FILEMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_FILEMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DirectoryEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileEntry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileSystemOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileSystemStatCache</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>FileManager</name> <range>: <expr><name>public</name> <name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>FileManager</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>FS</name></expr>;
<expr><name>FileSystemOptions</name> <name>FileSystemOpts</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>UniqueID</name></expr></argument>, <argument><expr><name>DirectoryEntry</name></expr></argument>&gt;</argument_list></name> <name>UniqueRealDirs</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>fs</name><operator>::</operator><name>UniqueID</name></expr></argument>, <argument><expr><name>FileEntry</name></expr></argument>&gt;</argument_list></name> <name>UniqueRealFiles</name></expr>;





<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntry</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>VirtualDirectoryEntries</name></expr>;

<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FileEntry</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>VirtualFileEntries</name></expr>;



<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FileEntry</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name> <name>BypassFileEntries</name></expr>;










<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntry</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name>
<name>SeenDirEntries</name></expr>;






<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name><operator>::</operator><name>MapValue</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name>
<name>SeenFileEntries</name></expr>;





<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name><operator>::</operator><name>MapValue</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>SeenBypassFileEntries</name></expr>;


<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <name>STDIN</name></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>CanonicalNames</name></expr>;


<expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>CanonicalNameStorage</name></expr>;



<expr><name>unsigned</name> <name>NextFileUID</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FileSystemStatCache</name></expr></argument>&gt;</argument_list></name> <name>StatCache</name></expr>;

<expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>getStatValue</name><argument_list>(<argument>StringRef Path</argument>, <argument>llvm::vfs::Status &amp;Status</argument>,
<argument>bool isFile</argument>,
<argument>std::unique_ptr&lt;llvm::vfs::File&gt; *F</argument>)</argument_list></macro></expr>;



<expr><name>void</name> <macro><name>addAncestorsAsVirtualDirs</name><argument_list>(<argument>StringRef Path</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <macro><name>fillRealPathName</name><argument_list>(<argument>FileEntry *UFE</argument>, <argument>llvm::StringRef FileName</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>




<call><name>FileManager</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileSystemOptions</name> <operator>&amp;</operator><name>FileSystemOpts</name></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>FS</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><call><name>FileManager</name><argument_list>()</argument_list></call></expr>;








<expr><name>void</name> <call><name>setStatCache</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FileSystemStatCache</name></expr></argument>&gt;</argument_list></name> <name>statCache</name></expr></argument>)</argument_list></call></expr>;


<expr><name>void</name> <call><name>clearStatCache</name><argument_list>()</argument_list></call></expr>;


<expr><name>size_t</name> <macro><name>getNumUniqueRealFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>UniqueRealFiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>











<name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getDirectoryRef</name><argument_list>(<argument>StringRef DirName</argument>,
<argument>bool CacheFailure = true</argument>)</argument_list></macro></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name>
<macro><name>getOptionalDirectoryRef</name><argument_list>(<argument>StringRef DirName</argument>, <argument>bool CacheFailure = true</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>expectedToOptional</name><argument_list>(<argument><expr><call><name>getDirectoryRef</name><argument_list>(<argument><expr><name>DirName</name></expr></argument>, <argument><expr><name>CacheFailure</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>














<name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>getDirectory</name><argument_list>(<argument>StringRef DirName</argument>, <argument>bool CacheFailure = true</argument>)</argument_list></macro></expr>;















<expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>getFile</name><argument_list>(<argument>StringRef Filename</argument>, <argument>bool OpenFile = false</argument>, <argument>bool CacheFailure = true</argument>)</argument_list></macro></expr>;















<expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getFileRef</name><argument_list>(<argument>StringRef Filename</argument>,
<argument>bool OpenFile = false</argument>,
<argument>bool CacheFailure = true</argument>)</argument_list></macro></expr>;







<expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <call><name>getSTDIN</name><argument_list>()</argument_list></call></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getOptionalFileRef</name><argument_list>(<argument>StringRef Filename</argument>,
<argument>bool OpenFile = false</argument>,
<argument>bool CacheFailure = true</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>expectedToOptional</name><argument_list>(
<argument><expr><call><name>getFileRef</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>, <argument><expr><name>OpenFile</name></expr></argument>, <argument><expr><name>CacheFailure</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>FileSystemOptions</name> <operator>&amp;</operator><macro><name>getFileSystemOpts</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>FileSystemOpts</name></expr>;</return> }</block>
<specifier>const</specifier> <name>FileSystemOptions</name> <operator>&amp;</operator><macro><name>getFileSystemOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FileSystemOpts</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>&amp;</operator><macro><name>getVirtualFileSystem</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>FS</name></expr>;</return> }</block>

<name>void</name> <macro><name>setVirtualFileSystem</name><argument_list>(<argument>IntrusiveRefCntPtr&lt;llvm::vfs::FileSystem&gt; FS</argument>)</argument_list></macro> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>FS</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>FS</name></expr></argument>)</argument_list></call></expr>;
}</block>





<name>FileEntryRef</name> <macro><name>getVirtualFileRef</name><argument_list>(<argument>StringRef Filename</argument>, <argument>off_t Size</argument>,
<argument>time_t ModificationTime</argument>)</argument_list></macro></expr>;

<expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><macro><name>getVirtualFile</name><argument_list>(<argument>StringRef Filename</argument>, <argument>off_t Size</argument>,
<argument>time_t ModificationTime</argument>)</argument_list></macro></expr>;









<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getBypassFile</name><argument_list>(<argument>FileEntryRef VFE</argument>)</argument_list></macro></expr>;



<expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>getBufferForFile</name><argument_list>(<argument>const FileEntry *Entry</argument>, <argument>bool isVolatile = false</argument>,
<argument>bool RequiresNullTerminator = true</argument>)</argument_list></macro></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>getBufferForFile</name><argument_list>(<argument>StringRef Filename</argument>, <argument>bool isVolatile = false</argument>,
<argument>bool RequiresNullTerminator = true</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getBufferForFileImpl</name><argument_list>(<argument><expr><name>Filename</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>isVolatile</name></expr></argument>,
<argument><expr><name>RequiresNullTerminator</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>getBufferForFileImpl</name><argument_list>(<argument>StringRef Filename</argument>, <argument>int64_t FileSize</argument>, <argument>bool isVolatile</argument>,
<argument>bool RequiresNullTerminator</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>






<name>std</name><operator>::</operator><name>error_code</name> <macro><name>getNoncachedStatValue</name><argument_list>(<argument>StringRef Path</argument>,
<argument>llvm::vfs::Status &amp;Result</argument>)</argument_list></macro></expr>;





<expr><name>bool</name> <macro><name>FixupRelativePath</name><argument_list>(<argument>SmallVectorImpl&lt;char&gt; &amp;path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>bool</name> <macro><name>makeAbsolutePath</name><argument_list>(<argument>SmallVectorImpl&lt;char&gt; &amp;Path</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>void</name> <macro><name>GetUniqueIDMapping</name><argument_list>(
<argument>SmallVectorImpl&lt;const FileEntry *&gt; &amp;UIDToFiles</argument>)</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>StringRef</name> <call><name>getCanonicalName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><name>Dir</name></expr></argument>)</argument_list></call></expr>;






<expr><name>StringRef</name> <call><name>getCanonicalName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><name>File</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
