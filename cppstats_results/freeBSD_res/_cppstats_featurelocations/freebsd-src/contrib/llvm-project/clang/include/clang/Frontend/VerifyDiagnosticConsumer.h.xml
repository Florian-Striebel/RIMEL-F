<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/VerifyDiagnosticConsumer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_VERIFYDIAGNOSTICCONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_VERIFYDIAGNOSTICCONSUMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TextDiagnosticBuffer</name></decl>;</decl_stmt>


























































































































































<decl_stmt><decl><type><name>class</name></type> <name>VerifyDiagnosticConsumer</name><range>: <expr><name>public</name> <name>DiagnosticConsumer</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>CommentHandler</name> <block>{<block_content>
<label><name>public</name>:</label>


<decl_stmt><decl><type><name>class</name></type> <name>Directive</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Directive</name></expr></argument>&gt;</argument_list></name>
<macro><name>create</name><argument_list>(<argument>bool RegexKind</argument>, <argument>SourceLocation DirectiveLoc</argument>,
<argument>SourceLocation DiagnosticLoc</argument>, <argument>bool MatchAnyFileAndLine</argument>,
<argument>bool MatchAnyLine</argument>, <argument>StringRef Text</argument>, <argument>unsigned Min</argument>, <argument>unsigned Max</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>public</name>:</label>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>MaxCount</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>DirectiveLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>DiagnosticLoc</name></decl>;</decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>Text</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Min</name></decl>, <decl><type ref="prev"/><name>Max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>MatchAnyLine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>MatchAnyFileAndLine</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Directive</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Directive</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Directive</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Directive</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Directive</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isValid</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Error</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><name>virtual</name> <name>bool</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>S</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>protected</name>:</label>
<macro><name>Directive</name><argument_list>(<argument>SourceLocation DirectiveLoc</argument>, <argument>SourceLocation DiagnosticLoc</argument>,
<argument>bool MatchAnyFileAndLine</argument>, <argument>bool MatchAnyLine</argument>, <argument>StringRef Text</argument>,
<argument>unsigned Min</argument>, <argument>unsigned Max</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>DirectiveLoc</name><argument_list>(<argument><expr><name>DirectiveLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DiagnosticLoc</name><argument_list>(<argument><expr><name>DiagnosticLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Text</name><argument_list>(<argument><expr><name>Text</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Min</name><argument_list>(<argument><expr><name>Min</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Max</name><argument_list>(<argument><expr><name>Max</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MatchAnyLine</name><argument_list>(<argument><expr><name>MatchAnyLine</name> <operator>||</operator> <name>MatchAnyFileAndLine</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>MatchAnyFileAndLine</name><argument_list>(<argument>MatchAnyFileAndLine</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>DirectiveLoc</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"DirectiveLoc is invalid!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><call><name><name>DiagnosticLoc</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>MatchAnyLine</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"DiagnosticLoc is invalid!"</literal></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>DirectiveList</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Directive</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<struct>struct <name>ExpectedData</name> <block>{
<decl_stmt><decl><type><name>DirectiveList</name></type> <name>Errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DirectiveList</name></type> <name>Warnings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DirectiveList</name></type> <name>Remarks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DirectiveList</name></type> <name>Notes</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Reset</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Errors</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Warnings</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Remarks</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Notes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
}</block>;</struct>

<enum>enum <name>DirectiveStatus</name> <block>{
<decl><name>HasNoDirectives</name></decl>,
<decl><name>HasNoDirectivesReported</name></decl>,
<decl><name>HasExpectedNoDiagnostics</name></decl>,
<decl><name>HasOtherExpectedDirectives</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>MarkerTracker</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DiagnosticConsumer</name> <modifier>*</modifier></type><name>PrimaryClient</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>PrimaryClientOwner</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TextDiagnosticBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MarkerTracker</name></expr></argument>&gt;</argument_list></name> <name>Markers</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Preprocessor</name> <modifier>*</modifier></type><name>CurrentPreprocessor</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>*</modifier></type><name>LangOpts</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>*</modifier></type><name>SrcManager</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ActiveSourceFiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DirectiveStatus</name></type> <name>Status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExpectedData</name></type> <name>ED</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>CheckDiagnostics</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>setSourceManager</name><parameter_list>(<parameter><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>SrcManager</name> <operator>||</operator> <name>SrcManager</name> <operator>==</operator> <operator>&amp;</operator><name>SM</name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"SourceManager changed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>SrcManager</name> <operator>=</operator> <operator>&amp;</operator><name>SM</name></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>class</name></type> <name>UnparsedFileStatus</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>Data</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>UnparsedFileStatus</name><argument_list>(<argument>const FileEntry *File</argument>, <argument>bool FoundDirectives</argument>)</argument_list></macro>
: <macro><name>Data</name><argument_list>(<argument>File</argument>, <argument>FoundDirectives</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator><macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>foundDirectives</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>ParsedFilesMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>FileEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>UnparsedFilesMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>UnparsedFileStatus</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParsedFilesMap</name></type> <name>ParsedFiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UnparsedFilesMap</name></type> <name>UnparsedFiles</name></decl>;</decl_stmt>

<label><name>public</name>:</label>



<expr_stmt><expr><call><name>VerifyDiagnosticConsumer</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>VerifyDiagnosticConsumer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>BeginSourceFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Preprocessor</name> <operator>*</operator><name>PP</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>EndSourceFile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;</expr_stmt>

<enum>enum <name>ParsedStatus</name> <block>{

<decl><name>IsParsed</name></decl>,


<decl><name>IsUnparsed</name></decl>,


<decl><name>IsUnparsedNoDirectives</name></decl>
}</block>;</enum>


<function_decl><type><name>void</name></type> <name>UpdateParsedFileStatus</name><parameter_list>(<parameter><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>, <parameter><decl><type><name>FileID</name></type> <name>FID</name></decl></parameter>, <parameter><decl><type><name>ParsedStatus</name></type> <name>PS</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>HandleComment</name><argument_list>(<argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>, <argument><expr><name>SourceRange</name> <name>Comment</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>HandleDiagnostic</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>DiagLevel</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Diagnostic</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
