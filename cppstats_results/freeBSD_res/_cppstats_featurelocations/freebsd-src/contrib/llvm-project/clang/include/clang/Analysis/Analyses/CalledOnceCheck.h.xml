<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/CalledOnceCheck.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_CALLEDONCECHECK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_CALLEDONCECHECK_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisDeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFG</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ParmVarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>NeverCalledReason</name> <block>{<block_content>
<expr_stmt><expr><name>IfThen</name></expr><operator>,</operator>
<expr><name>IfElse</name></expr><operator>,</operator>
<expr><name>Switch</name></expr><operator>,</operator>
<expr><name>SwitchSkipped</name></expr><operator>,</operator>
<expr><name>LoopEntered</name></expr><operator>,</operator>
<expr><name>LoopSkipped</name></expr><operator>,</operator>
<expr><name>FallbackReason</name></expr><operator>,</operator>
<expr><name>LARGEST_VALUE</name> <operator>=</operator> <name>FallbackReason</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CalledOnceCheckHandler</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CalledOnceCheckHandler</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CalledOnceCheckHandler</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>








<function><type><name>virtual</name> <name>void</name></type> <name>handleDoubleCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>Parameter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>PrevCall</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsCompletionHandler</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>Poised</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type> <name>handleNeverCalled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>Parameter</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsCompletionHandler</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>handleCapturedNeverCalled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>Parameter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Where</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsCompletionHandler</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>













<function><type><name>virtual</name> <name>void</name></type> <name>handleNeverCalled</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>Parameter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Where</name></decl></parameter>,
<parameter><decl><type><name>NeverCalledReason</name></type> <name>Reason</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsCalledDirectly</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsCompletionHandler</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>




<function><type><name>virtual</name> <name>void</name></type>
<name>handleBlockThatIsGuaranteedToBeCalledOnce</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>





<function><type><name>virtual</name> <name>void</name></type> <name>handleBlockWithNoGuarantees</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockDecl</name> <modifier>*</modifier></type><name>Block</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>













<function_decl><type><name>void</name></type> <name>checkCalledOnceParameters</name><parameter_list>(<parameter><decl><type><name>AnalysisDeclContext</name> <modifier>&amp;</modifier></type><name>AC</name></decl></parameter>,
<parameter><decl><type><name>CalledOnceCheckHandler</name> <modifier>&amp;</modifier></type><name>Handler</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>CheckConventionalParameters</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
