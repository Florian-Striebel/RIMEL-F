<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Cuda.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_CUDA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_CUDA_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StringRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Twine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VersionTuple</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>CudaVersion</name> <block>{<block_content>
<expr_stmt><expr><name>UNKNOWN</name></expr><operator>,</operator>
<expr><name>CUDA_70</name></expr><operator>,</operator>
<expr><name>CUDA_75</name></expr><operator>,</operator>
<expr><name>CUDA_80</name></expr><operator>,</operator>
<expr><name>CUDA_90</name></expr><operator>,</operator>
<expr><name>CUDA_91</name></expr><operator>,</operator>
<expr><name>CUDA_92</name></expr><operator>,</operator>
<expr><name>CUDA_100</name></expr><operator>,</operator>
<expr><name>CUDA_101</name></expr><operator>,</operator>
<expr><name>CUDA_102</name></expr><operator>,</operator>
<expr><name>CUDA_110</name></expr><operator>,</operator>
<expr><name>CUDA_111</name></expr><operator>,</operator>
<expr><name>CUDA_112</name></expr><operator>,</operator>
<expr><name>LATEST</name> <operator>=</operator> <name>CUDA_112</name></expr><operator>,</operator>
<expr><name>LATEST_SUPPORTED</name> <operator>=</operator> <name>CUDA_101</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CudaVersionToString</name><parameter_list>(<parameter><decl><type><name>CudaVersion</name></type> <name>V</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>CudaVersion</name></type> <name>CudaStringToVersion</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>CudaArch</name> <block>{<block_content>
<expr_stmt><expr><name>UNUSED</name></expr><operator>,</operator>
<expr><name>UNKNOWN</name></expr><operator>,</operator>
<expr><name>SM_20</name></expr><operator>,</operator>
<expr><name>SM_21</name></expr><operator>,</operator>
<expr><name>SM_30</name></expr><operator>,</operator>
<expr><name>SM_32</name></expr><operator>,</operator>
<expr><name>SM_35</name></expr><operator>,</operator>
<expr><name>SM_37</name></expr><operator>,</operator>
<expr><name>SM_50</name></expr><operator>,</operator>
<expr><name>SM_52</name></expr><operator>,</operator>
<expr><name>SM_53</name></expr><operator>,</operator>
<expr><name>SM_60</name></expr><operator>,</operator>
<expr><name>SM_61</name></expr><operator>,</operator>
<expr><name>SM_62</name></expr><operator>,</operator>
<expr><name>SM_70</name></expr><operator>,</operator>
<expr><name>SM_72</name></expr><operator>,</operator>
<expr><name>SM_75</name></expr><operator>,</operator>
<expr><name>SM_80</name></expr><operator>,</operator>
<expr><name>SM_86</name></expr><operator>,</operator>
<expr><name>GFX600</name></expr><operator>,</operator>
<expr><name>GFX601</name></expr><operator>,</operator>
<expr><name>GFX602</name></expr><operator>,</operator>
<expr><name>GFX700</name></expr><operator>,</operator>
<expr><name>GFX701</name></expr><operator>,</operator>
<expr><name>GFX702</name></expr><operator>,</operator>
<expr><name>GFX703</name></expr><operator>,</operator>
<expr><name>GFX704</name></expr><operator>,</operator>
<expr><name>GFX705</name></expr><operator>,</operator>
<expr><name>GFX801</name></expr><operator>,</operator>
<expr><name>GFX802</name></expr><operator>,</operator>
<expr><name>GFX803</name></expr><operator>,</operator>
<expr><name>GFX805</name></expr><operator>,</operator>
<expr><name>GFX810</name></expr><operator>,</operator>
<expr><name>GFX900</name></expr><operator>,</operator>
<expr><name>GFX902</name></expr><operator>,</operator>
<expr><name>GFX904</name></expr><operator>,</operator>
<expr><name>GFX906</name></expr><operator>,</operator>
<expr><name>GFX908</name></expr><operator>,</operator>
<expr><name>GFX909</name></expr><operator>,</operator>
<expr><name>GFX90a</name></expr><operator>,</operator>
<expr><name>GFX90c</name></expr><operator>,</operator>
<expr><name>GFX1010</name></expr><operator>,</operator>
<expr><name>GFX1011</name></expr><operator>,</operator>
<expr><name>GFX1012</name></expr><operator>,</operator>
<expr><name>GFX1013</name></expr><operator>,</operator>
<expr><name>GFX1030</name></expr><operator>,</operator>
<expr><name>GFX1031</name></expr><operator>,</operator>
<expr><name>GFX1032</name></expr><operator>,</operator>
<expr><name>GFX1033</name></expr><operator>,</operator>
<expr><name>GFX1034</name></expr><operator>,</operator>
<expr><name>GFX1035</name></expr><operator>,</operator>
<expr><name>LAST</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsNVIDIAGpuArch</name><parameter_list>(<parameter><decl><type><name>CudaArch</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>A</name> <operator>&gt;=</operator> <name>CudaArch</name><operator>::</operator><name>SM_20</name> <operator>&amp;&amp;</operator> <name>A</name> <operator>&lt;</operator> <name>CudaArch</name><operator>::</operator><name>GFX600</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsAMDGpuArch</name><parameter_list>(<parameter><decl><type><name>CudaArch</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>A</name> <operator>&gt;=</operator> <name>CudaArch</name><operator>::</operator><name>GFX600</name> <operator>&amp;&amp;</operator> <name>A</name> <operator>&lt;</operator> <name>CudaArch</name><operator>::</operator><name>LAST</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CudaArchToString</name><parameter_list>(<parameter><decl><type><name>CudaArch</name></type> <name>A</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CudaArchToVirtualArchString</name><parameter_list>(<parameter><decl><type><name>CudaArch</name></type> <name>A</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>CudaArch</name></type> <name>StringToCudaArch</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>S</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>CudaVersion</name></type> <name>MinVersionForCudaArch</name><parameter_list>(<parameter><decl><type><name>CudaArch</name></type> <name>A</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>CudaVersion</name></type> <name>MaxVersionForCudaArch</name><parameter_list>(<parameter><decl><type><name>CudaArch</name></type> <name>A</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>CudaFeature</name> <block>{<block_content>

<expr_stmt><expr><name>CUDA_USES_NEW_LAUNCH</name></expr><operator>,</operator>

<expr><name>CUDA_USES_FATBIN_REGISTER_END</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>CudaVersion</name></type> <name>ToCudaVersion</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>VersionTuple</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CudaFeatureEnabled</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>VersionTuple</name></expr></argument>, <argument><expr><name>CudaFeature</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>CudaFeatureEnabled</name><parameter_list>(<parameter><decl><type><name>CudaVersion</name></type></decl></parameter>, <parameter><decl><type><name>CudaFeature</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
