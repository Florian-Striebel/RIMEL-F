<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/DirectoryLookup.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_DIRECTORYLOOKUP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_DIRECTORYLOOKUP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/ModuleMap.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>DirectoryLookup</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>LookupType_t</name> <block>{
<decl><name>LT_NormalDir</name></decl>,
<decl><name>LT_Framework</name></decl>,
<decl><name>LT_HeaderMap</name></decl>
}</block>;</enum>
<label><name>private</name>:</label>
<union>union <name>DLU</name> <block>{


<decl_stmt><decl><type><name>DirectoryEntryRef</name></type> <name>Dir</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>HeaderMap</name> <modifier>*</modifier></type><name>Map</name></decl>;</decl_stmt>

<macro><name>DLU</name><argument_list>(<argument>DirectoryEntryRef Dir</argument>)</argument_list></macro> : <macro><name>Dir</name><argument_list>(<argument>Dir</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<expr_stmt><expr><call><name>DLU</name><argument_list>(<argument><expr><specifier>const</specifier> <name>HeaderMap</name> <operator>*</operator><name>Map</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Map</name><argument_list>(<argument>Map</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block> <decl><name>u</name></decl>;</union>



<decl_stmt><decl><type><name>unsigned</name></type> <name>DirCharacteristic</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>LookupType</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsIndexHeaderMap</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>SearchedAllModuleMaps</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>

<macro><name>DirectoryLookup</name><argument_list>(<argument>DirectoryEntryRef Dir</argument>, <argument>SrcMgr::CharacteristicKind DT</argument>,
<argument>bool isFramework</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><name>Dir</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DirCharacteristic</name><argument_list>(<argument><expr><name>DT</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>LookupType</name><argument_list>(<argument><expr><ternary><condition><expr><name>isFramework</name></expr> ?</condition><then> <expr><name>LT_Framework</name></expr> </then><else>: <expr><name>LT_NormalDir</name></expr></else></ternary></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsIndexHeaderMap</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SearchedAllModuleMaps</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>


<macro><name>DirectoryLookup</name><argument_list>(<argument>const HeaderMap *Map</argument>, <argument>SrcMgr::CharacteristicKind DT</argument>,
<argument>bool isIndexHeaderMap</argument>)</argument_list></macro>
<operator>:</operator> <call><name>u</name><argument_list>(<argument><expr><name>Map</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DirCharacteristic</name><argument_list>(<argument><expr><name>DT</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LookupType</name><argument_list>(<argument><expr><name>LT_HeaderMap</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsIndexHeaderMap</name><argument_list>(<argument><expr><name>isIndexHeaderMap</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SearchedAllModuleMaps</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>



<name>LookupType_t</name> <macro><name>getLookupType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>LookupType_t</name><operator>)</operator><name>LookupType</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><macro><name>getDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isNormalDir</name><argument_list>()</argument_list></call> <operator>?</operator> <operator>&amp;</operator><call><name><name>u</name><operator>.</operator><name>Dir</name><operator>.</operator><name>getDirEntry</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>DirectoryEntry</name> <operator>*</operator><macro><name>getFrameworkDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isFramework</name><argument_list>()</argument_list></call> <operator>?</operator> <operator>&amp;</operator><call><name><name>u</name><operator>.</operator><name>Dir</name><operator>.</operator><name>getDirEntry</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getFrameworkDirRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isFramework</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryEntryRef</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>Dir</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <name>None</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>HeaderMap</name> <operator>*</operator><macro><name>getHeaderMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isHeaderMap</name><argument_list>()</argument_list></call> <operator>?</operator> <name><name>u</name><operator>.</operator><name>Map</name></name> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isNormalDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getLookupType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>LT_NormalDir</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isFramework</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getLookupType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>LT_Framework</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isHeaderMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getLookupType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>LT_HeaderMap</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>haveSearchedAllModuleMaps</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SearchedAllModuleMaps</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setSearchedAllModuleMaps</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>SAMM</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>SearchedAllModuleMaps</name> <operator>=</operator> <name>SAMM</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name> <macro><name>getDirCharacteristic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>SrcMgr</name><operator>::</operator><name>CharacteristicKind</name><operator>)</operator><name>DirCharacteristic</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isSystemHeaderDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getDirCharacteristic</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SrcMgr</name><operator>::</operator><name>C_User</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isIndexHeaderMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isHeaderMap</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>IsIndexHeaderMap</name></expr>;</return>
}</block></expr></expr_stmt>


































<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></type>
<name>LookupFile</name><argument_list>(<argument><expr><name>StringRef</name> <operator>&amp;</operator><name>Filename</name></expr></argument>, <argument><expr><name>HeaderSearch</name> <operator>&amp;</operator><name>HS</name></expr></argument>, <argument><expr><name>SourceLocation</name> <name>IncludeLoc</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>SearchPath</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>RelativePath</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><name>RequestingModule</name></expr></argument>,
<argument><expr><name>ModuleMap</name><operator>::</operator><name>KnownHeader</name> <operator>*</operator><name>SuggestedModule</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>InUserSpecifiedSystemFramework</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>IsFrameworkFound</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>IsInHeaderMap</name></expr></argument>, <argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>MappedName</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>FileEntryRef</name></expr></argument>&gt;</argument_list></name></type> <name>DoFrameworkLookup</name><argument_list>(
<argument><expr><name>StringRef</name> <name>Filename</name></expr></argument>, <argument><expr><name>HeaderSearch</name> <operator>&amp;</operator><name>HS</name></expr></argument>, <argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>SearchPath</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>RelativePath</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><name>RequestingModule</name></expr></argument>,
<argument><expr><name>ModuleMap</name><operator>::</operator><name>KnownHeader</name> <operator>*</operator><name>SuggestedModule</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>InUserSpecifiedSystemFramework</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>IsFrameworkFound</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
