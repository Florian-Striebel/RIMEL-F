<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_OPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_OPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringActionRuleRequirements.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringOption.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Refactoring/RefactoringOptionVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>,
<argument><expr><name>typename</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>traits</name><operator>::</operator><name><name>IsValidOptionType</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>OptionalRefactoringOption</name> <range>: <expr><name>public</name> <name>RefactoringOption</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>void</name> <macro><name>passToVisitor</name><argument_list>(<argument>RefactoringOptionVisitor &amp;Visitor</argument>)</argument_list></macro> <name>final</name> <name>override</name> <block>{
<expr><call><name><name>Visitor</name><operator>.</operator><name>visit</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>isRequired</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>using</name> <name>ValueType</name> <operator>=</operator> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>const</specifier> <name>ValueType</name> <operator>&amp;</operator><macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Value</name></expr>;</return> }</block>

<name>protected</name><operator>:</operator>
<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>Value</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>,
<argument><expr><name>typename</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>traits</name><operator>::</operator><name><name>IsValidOptionType</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>RequiredRefactoringOption</name> <range>: <expr><name>public</name> <name><name>OptionalRefactoringOption</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>ValueType</name> <operator>=</operator> <name>T</name></expr>;

<expr><specifier>const</specifier> <name>ValueType</name> <operator>&amp;</operator><macro><name>getValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name><name>OptionalRefactoringOption</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Value</name></expr>;</return>
}</block>
<name>bool</name> <macro><name>isRequired</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>final</name> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
