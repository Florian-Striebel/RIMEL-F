<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/DirectoryWatcher/DirectoryWatcher.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DIRECTORYWATCHER_DIRECTORYWATCHER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DIRECTORYWATCHER_DIRECTORYWATCHER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>












































<decl_stmt><decl><type><name>class</name></type> <name>DirectoryWatcher</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>Event</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>EventKind</name> <block>{<block_content>
<expr_stmt><expr><name>Removed</name></expr><operator>,</operator>

<expr><name>Modified</name></expr><operator>,</operator>

<expr><name>WatchedDirRemoved</name></expr><operator>,</operator>

















<expr><name>WatcherGotInvalidated</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>EventKind</name></type> <name>Kind</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Filename</name></expr>;</expr_stmt>

<macro><name>Event</name><argument_list>(<argument>EventKind Kind</argument>, <argument>llvm::StringRef Filename</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Filename</name><argument_list>(<argument>Filename</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>





<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DirectoryWatcher</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>create</name><argument_list>(<argument>llvm::StringRef Path</argument>,
<argument>std::function&lt;void(llvm::ArrayRef&lt;DirectoryWatcher::Event&gt; Events,
bool IsInitial)&gt;
Receiver</argument>,
<argument>bool WaitForInitialSync</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DirectoryWatcher</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>DirectoryWatcher</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DirectoryWatcher</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DirectoryWatcher</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DirectoryWatcher</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DirectoryWatcher</name><argument_list>(<argument><expr><name>DirectoryWatcher</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>DirectoryWatcher</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
