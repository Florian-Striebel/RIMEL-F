<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Transformer/MatchConsumer.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_TRANSFORMER_MATCH_CONSUMER_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_TRANSFORMER_MATCH_CONSUMER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchFinder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Errc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>transformer</name> <block>{<block_content>







<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>MatchConsumer</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>(</operator><specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchResult</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>notBoundError</name><argument_list>(<argument>llvm::StringRef Id</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringError</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>errc</name><operator>::</operator><name>invalid_argument</name></expr></argument>,
<argument><expr><literal type="string">"Id not bound: "</literal> <operator>+</operator> <name>Id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>MatchConsumer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>ifBound</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>, <argument><expr><name><name>MatchConsumer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>TrueC</name></expr></argument>,
<argument><expr><name><name>MatchConsumer</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>FalseC</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><index>[<expr><operator>=</operator></expr>]</index><operator>(</operator><specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchResult</name> <operator>&amp;</operator><name>Result</name><operator>)</operator> <block>{
<expr><name>auto</name> <operator>&amp;</operator><name>Map</name> <operator>=</operator> <call><name><name>Result</name><operator>.</operator><name>Nodes</name><operator>.</operator><name>getMap</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name><name>Map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>TrueC</name></expr> </then><else>: <expr><name>FalseC</name></expr></else></ternary><operator>)</operator><operator>(</operator><name>Result</name><operator>)</operator></expr>;</return>
}</block></expr></return><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>










<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>MatchComputation</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>MatchComputation</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>eval</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;Match</argument>,
<argument>T *Result</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>eval</name><argument_list>(<argument>const ast_matchers::MatchFinder::MatchResult &amp;R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>MatchComputation</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<expr_stmt><expr><call><name>MatchComputation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MatchComputation</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>MatchComputation</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MatchComputation</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name><name>MatchComputation</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><macro><name>eval</name><argument_list>(
<argument>const ast_matchers::MatchFinder::MatchResult &amp;R</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>T</name> <name>Output</name></expr>;
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>Err</name> <init>= <expr><call><name>eval</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Output</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>Output</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
