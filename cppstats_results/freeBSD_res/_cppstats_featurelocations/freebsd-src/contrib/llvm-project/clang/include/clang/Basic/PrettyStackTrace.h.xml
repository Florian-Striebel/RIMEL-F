<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/PrettyStackTrace.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_PRETTYSTACKTRACE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_PRETTYSTACKTRACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/PrettyStackTrace.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>PrettyStackTraceLoc</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>PrettyStackTraceEntry</name> <block>{
<expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr>;
<expr><name>SourceLocation</name> <name>Loc</name></expr>;
<expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Message</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>PrettyStackTraceLoc</name><argument_list>(<argument>SourceManager &amp;sm</argument>, <argument>SourceLocation L</argument>, <argument>const char *Msg</argument>)</argument_list></macro>
<operator>:</operator> <call><name>SM</name><argument_list>(<argument><expr><name>sm</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Loc</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>, <macro><name>Message</name><argument_list>(<argument>Msg</argument>)</argument_list></macro> <expr><block>{}</block>
<name>void</name> <macro><name>print</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
