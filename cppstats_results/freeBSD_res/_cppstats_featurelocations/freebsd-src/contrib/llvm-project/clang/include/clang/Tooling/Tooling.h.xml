<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Tooling.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_TOOLING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_TOOLING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/FrontendAction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/PCHContainerOperations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/ArgumentsAdjusters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Twine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/Option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInvocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Compilation</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CompilationDatabase</name></decl>;</decl_stmt>





<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>*</operator>
<call><name>getCC1Arguments</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>Diagnostics</name></expr></argument>,
<argument><expr><name>driver</name><operator>::</operator><name>Compilation</name> <operator>*</operator><name>Compilation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>ToolAction</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ToolAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type>
<name>runInvocation</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilerInvocation</name></expr></argument>&gt;</argument_list></name> <name>Invocation</name></expr></argument>,
<argument><expr><name>FileManager</name> <operator>*</operator><name>Files</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr></argument>,
<argument><expr><name>DiagnosticConsumer</name> <operator>*</operator><name>DiagConsumer</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>FrontendActionFactory</name> <range>: <expr><name>public</name> <name>ToolAction</name> <block>{
<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>FrontendActionFactory</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


<expr><name>bool</name> <macro><name>runInvocation</name><argument_list>(<argument>std::shared_ptr&lt;CompilerInvocation&gt; Invocation</argument>,
<argument>FileManager *Files</argument>,
<argument>std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps</argument>,
<argument>DiagnosticConsumer *DiagConsumer</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <call><name>create</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>








<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendActionFactory</name></expr></argument>&gt;</argument_list></name> <call><name>newFrontendActionFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>SourceFileCallbacks</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>SourceFileCallbacks</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<function><type><name>virtual</name> <name>bool</name></type> <name>handleBeginSource</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>virtual</name> <name>void</name></type> <name>handleEndSource</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>












<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FactoryT</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendActionFactory</name></expr></argument>&gt;</argument_list></name> <call><name>newFrontendActionFactory</name><argument_list>(
<argument><expr><name>FactoryT</name> <operator>*</operator><name>ConsumerFactory</name></expr></argument>, <argument><expr><name>SourceFileCallbacks</name> <operator>*</operator><name>Callbacks</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<decl_stmt><decl><type><name>bool</name></type> <name>runToolOnCode</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>ToolAction</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Code</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>FileName</name> <operator>=</operator> <literal type="string">"input.cc"</literal></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>FileContentMappings</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>














<decl_stmt><decl><type><name>bool</name></type> <name>runToolOnCodeWithArgs</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>ToolAction</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Code</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>FileName</name> <operator>=</operator> <literal type="string">"input.cc"</literal></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>ToolName</name> <operator>=</operator> <literal type="string">"clang-tool"</literal></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><specifier>const</specifier> <name>FileContentMappings</name> <operator>&amp;</operator><name>VirtualMappedFiles</name> <operator>=</operator> <call><name>FileContentMappings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>runToolOnCodeWithArgs</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>ToolAction</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Code</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>VFS</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>FileName</name> <operator>=</operator> <literal type="string">"input.cc"</literal></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>ToolName</name> <operator>=</operator> <literal type="string">"clang-tool"</literal></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>









<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name></expr></argument>&gt;</argument_list></name>
<macro><name>buildASTFromCode</name><argument_list>(<argument>StringRef Code</argument>, <argument>StringRef FileName = <literal type="string">"input.cc"</literal></argument>,
<argument>std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps =
std::make_shared&lt;PCHContainerOperations&gt;()</argument>)</argument_list></macro></expr>;</expr_stmt>














<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name></expr></argument>&gt;</argument_list></name> <macro><name>buildASTFromCodeWithArgs</name><argument_list>(
<argument>StringRef Code</argument>, <argument>const std::vector&lt;std::string&gt; &amp;Args</argument>,
<argument>StringRef FileName = <literal type="string">"input.cc"</literal></argument>, <argument>StringRef ToolName = <literal type="string">"clang-tool"</literal></argument>,
<argument>std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps =
std::make_shared&lt;PCHContainerOperations&gt;()</argument>,
<argument>ArgumentsAdjuster Adjuster = getClangStripDependencyFileAdjuster()</argument>,
<argument>const FileContentMappings &amp;VirtualMappedFiles = FileContentMappings()</argument>,
<argument>DiagnosticConsumer *DiagConsumer = nullptr</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ToolInvocation</name> <block>{<block_content>
<label><name>public</name>:</label>











<expr_stmt><expr><call><name>ToolInvocation</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CommandLine</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>FAction</name></expr></argument>, <argument><expr><name>FileManager</name> <operator>*</operator><name>Files</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><call><name>ToolInvocation</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CommandLine</name></expr></argument>, <argument><expr><name>ToolAction</name> <operator>*</operator><name>Action</name></expr></argument>,
<argument><expr><name>FileManager</name> <operator>*</operator><name>Files</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ToolInvocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>void</name></type> <name>setDiagnosticConsumer</name><parameter_list>(<parameter><decl><type><name>DiagnosticConsumer</name> <modifier>*</modifier></type><name>DiagConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>DiagConsumer</name></name> <operator>=</operator> <name>DiagConsumer</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function_decl><type><name>bool</name></type> <name>run</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>runInvocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>BinaryName</name></expr></argument>,
<argument><expr><name>driver</name><operator>::</operator><name>Compilation</name> <operator>*</operator><name>Compilation</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilerInvocation</name></expr></argument>&gt;</argument_list></name> <name>Invocation</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CommandLine</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ToolAction</name> <modifier>*</modifier></type><name>Action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>OwnsAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileManager</name> <modifier>*</modifier></type><name>Files</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DiagnosticConsumer</name> <modifier>*</modifier></type><name>DiagConsumer</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>ClangTool</name> <block>{<block_content>
<label><name>public</name>:</label>












<expr_stmt><expr><call><name>ClangTool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilationDatabase</name> <operator>&amp;</operator><name>Compilations</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SourcePaths</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name> <operator>=</operator>
<name>std</name><operator>::</operator><call><name><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>BaseFS</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><call><name>getRealFileSystem</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>FileManager</name></expr></argument>&gt;</argument_list></name> <name>Files</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>~</operator><call><name>ClangTool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function><type><name>void</name></type> <name>setDiagnosticConsumer</name><parameter_list>(<parameter><decl><type><name>DiagnosticConsumer</name> <modifier>*</modifier></type><name>DiagConsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>DiagConsumer</name></name> <operator>=</operator> <name>DiagConsumer</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function_decl><type><name>void</name></type> <name>mapVirtualFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FilePath</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Content</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>appendArgumentsAdjuster</name><parameter_list>(<parameter><decl><type><name>ArgumentsAdjuster</name></type> <name>Adjuster</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>clearArgumentsAdjusters</name><parameter_list>()</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>ToolAction</name> <modifier>*</modifier></type><name>Action</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>int</name></type> <name>buildASTs</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>ASTs</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<function_decl><type><name>void</name></type> <name>setRestoreWorkingDir</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>RestoreCWD</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>setPrintErrorMessage</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>PrintErrorMessage</name></decl></parameter>)</parameter_list>;</function_decl>




<function><type><name>FileManager</name> <modifier>&amp;</modifier></type><name>getFiles</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>Files</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getSourcePaths</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SourcePaths</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>CompilationDatabase</name> <modifier>&amp;</modifier></type><name>Compilations</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>SourcePaths</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PCHContainerOperations</name></expr></argument>&gt;</argument_list></name> <name>PCHContainerOps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>OverlayFileSystem</name></expr></argument>&gt;</argument_list></name> <name>OverlayFileSystem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>InMemoryFileSystem</name></expr></argument>&gt;</argument_list></name> <name>InMemoryFileSystem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>FileManager</name></expr></argument>&gt;</argument_list></name> <name>Files</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>, <argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>MappedFileContents</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>SeenWorkingDirectories</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ArgumentsAdjuster</name></type> <name>ArgsAdjuster</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DiagnosticConsumer</name> <modifier>*</modifier></type><name>DiagConsumer</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>RestoreCWD</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>PrintErrorMessage</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendActionFactory</name></expr></argument>&gt;</argument_list></name> <macro><name>newFrontendActionFactory</name><argument_list>()</argument_list></macro> <block>{
<expr><name>class</name> <name>SimpleFrontendActionFactory</name> <operator>:</operator> <name>public</name> <name>FrontendActionFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <macro><name>create</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

<return>return <expr><name>std</name><operator>::</operator><macro><name>unique_ptr</name></macro><operator>&lt;</operator><name>FrontendActionFactory</name><operator>&gt;</operator><operator>(</operator>
<name>new</name> <name>SimpleFrontendActionFactory</name><operator>)</operator></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>FactoryT</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendActionFactory</name></expr></argument>&gt;</argument_list></name> <macro><name>newFrontendActionFactory</name><argument_list>(
<argument>FactoryT *ConsumerFactory</argument>, <argument>SourceFileCallbacks *Callbacks</argument>)</argument_list></macro> <block>{
<expr><name>class</name> <name>FrontendActionFactoryAdapter</name> <operator>:</operator> <name>public</name> <name>FrontendActionFactory</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>FrontendActionFactoryAdapter</name><argument_list>(<argument><expr><name>FactoryT</name> <operator>*</operator><name>ConsumerFactory</name></expr></argument>,
<argument><expr><name>SourceFileCallbacks</name> <operator>*</operator><name>Callbacks</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ConsumerFactory</name><argument_list>(<argument><expr><name>ConsumerFactory</name></expr></argument>)</argument_list></call></expr>, <macro><name>Callbacks</name><argument_list>(<argument>Callbacks</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <macro><name>create</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>ConsumerFactoryAdaptor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ConsumerFactory</name></expr></argument>,
<argument><expr><name>Callbacks</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>private</name><operator>:</operator>
<name>class</name> <name>ConsumerFactoryAdaptor</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ConsumerFactoryAdaptor</name><argument_list>(<argument><expr><name>FactoryT</name> <operator>*</operator><name>ConsumerFactory</name></expr></argument>,
<argument><expr><name>SourceFileCallbacks</name> <operator>*</operator><name>Callbacks</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ConsumerFactory</name><argument_list>(<argument><expr><name>ConsumerFactory</name></expr></argument>)</argument_list></call></expr>, <macro><name>Callbacks</name><argument_list>(<argument>Callbacks</argument>)</argument_list></macro> <expr><block>{}</block>

<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;</argument>, <argument>StringRef</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name><name>ConsumerFactory</name><operator>-&gt;</operator><name>newASTConsumer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>
<name>bool</name> <macro><name>BeginSourceFileAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ASTFrontendAction</name><operator>::</operator><call><name>BeginSourceFileAction</name><argument_list>(<argument><expr><name>CI</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>Callbacks</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Callbacks</name><operator>-&gt;</operator><name>handleBeginSource</name></name><argument_list>(<argument><expr><name>CI</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>void</name> <macro><name>EndSourceFileAction</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<if_stmt><if>if <condition>(<expr><name>Callbacks</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>Callbacks</name><operator>-&gt;</operator><name>handleEndSource</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<name>ASTFrontendAction</name><operator>::</operator><call><name>EndSourceFileAction</name><argument_list>()</argument_list></call></block></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>FactoryT</name> <operator>*</operator><name>ConsumerFactory</name></expr>;
<expr><name>SourceFileCallbacks</name> <operator>*</operator><name>Callbacks</name></expr>;
}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>FactoryT</name> <modifier>*</modifier></type><name>ConsumerFactory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceFileCallbacks</name> <modifier>*</modifier></type><name>Callbacks</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<return>return <expr><name>std</name><operator>::</operator><macro><name>unique_ptr</name></macro><operator>&lt;</operator><name>FrontendActionFactory</name><operator>&gt;</operator><operator>(</operator>
<name>new</name> <call><name>FrontendActionFactoryAdapter</name><argument_list>(<argument><expr><name>ConsumerFactory</name></expr></argument>, <argument><expr><name>Callbacks</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>













<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getAbsolutePath</name><argument_list>(<argument>StringRef File</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getAbsolutePath</name><argument_list>(<argument>llvm::vfs::FileSystem &amp;FS</argument>,
<argument>StringRef File</argument>)</argument_list></macro></expr>;</expr_stmt>





















<decl_stmt><decl><type><name>void</name></type> <name>addTargetAndModeForProgramName</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>CommandLine</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>InvokedAs</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CompilerInvocation</name> <modifier>*</modifier></type><name>newInvocation</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>Diagnostics</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgStringList</name> <operator>&amp;</operator><name>CC1Args</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <name>BinaryName</name></expr></argument>)</argument_list></decl>;</decl_stmt>

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
