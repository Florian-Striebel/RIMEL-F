<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTContextAllocate.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTCONTEXTALLOCATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTCONTEXTALLOCATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><name>operator</name></type> <name>new</name><argument_list>(<argument><expr><name>size_t</name> <name>Bytes</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><name>size_t</name> <name>Alignment</name> <operator>=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><name>operator</name></type> <name><name>new</name><index>[]</index></name><argument_list>(<argument><expr><name>size_t</name> <name>Bytes</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>,
<argument><expr><name>size_t</name> <name>Alignment</name> <operator>=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name> <name>operator</name></type> <name>delete</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <name>operator</name></type> <name><name>delete</name><index>[]</index></name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>Ptr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
