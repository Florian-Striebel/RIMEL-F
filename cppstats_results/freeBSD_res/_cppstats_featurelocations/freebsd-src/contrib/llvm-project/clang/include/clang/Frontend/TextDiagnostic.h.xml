<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/TextDiagnostic.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_TEXTDIAGNOSTIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_TEXTDIAGNOSTIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/DiagnosticRenderer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>













<decl_stmt><decl><type><name>class</name></type> <name>TextDiagnostic</name> <range>: <expr><name>public</name> <name>DiagnosticRenderer</name> <block>{
<expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>TextDiagnostic</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><name>DiagnosticOptions</name> <operator>*</operator><name>DiagOpts</name></expr></argument>)</argument_list></call></expr>;

<expr><operator>~</operator><macro><name>TextDiagnostic</name><argument_list>()</argument_list></macro> <name>override</name></expr>;








<expr><specifier>static</specifier> <name>void</name> <macro><name>printDiagnosticLevel</name><argument_list>(<argument>raw_ostream &amp;OS</argument>,
<argument>DiagnosticsEngine::Level Level</argument>,
<argument>bool ShowColors</argument>)</argument_list></macro></expr>;

















<expr><specifier>static</specifier> <name>void</name> <macro><name>printDiagnosticMessage</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>bool IsSupplemental</argument>,
<argument>StringRef Message</argument>, <argument>unsigned CurrentColumn</argument>,
<argument>unsigned Columns</argument>, <argument>bool ShowColors</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>emitDiagnosticMessage</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>,
<argument>DiagnosticsEngine::Level Level</argument>, <argument>StringRef Message</argument>,
<argument>ArrayRef&lt;CharSourceRange&gt; Ranges</argument>,
<argument>DiagOrStoredDiag D</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>emitDiagnosticLoc</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>,
<argument>DiagnosticsEngine::Level Level</argument>,
<argument>ArrayRef&lt;CharSourceRange&gt; Ranges</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>emitCodeContext</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>DiagnosticsEngine::Level Level</argument>,
<argument>SmallVectorImpl&lt;CharSourceRange&gt; &amp;Ranges</argument>,
<argument>ArrayRef&lt;FixItHint&gt; Hints</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><call><name>emitSnippetAndCaret</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>Level</name></expr></argument>, <argument><expr><name>Ranges</name></expr></argument>, <argument><expr><name>Hints</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>emitIncludeLocation</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>emitImportLocation</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>,
<argument>StringRef ModuleName</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>emitBuildingModuleLocation</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>PresumedLoc PLoc</argument>,
<argument>StringRef ModuleName</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>void</name> <macro><name>emitFilename</name><argument_list>(<argument>StringRef Filename</argument>, <argument>const SourceManager &amp;SM</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>emitSnippetAndCaret</name><argument_list>(<argument>FullSourceLoc Loc</argument>, <argument>DiagnosticsEngine::Level Level</argument>,
<argument>SmallVectorImpl&lt;CharSourceRange&gt; &amp;Ranges</argument>,
<argument>ArrayRef&lt;FixItHint&gt; Hints</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>emitSnippet</name><argument_list>(<argument>StringRef SourceLine</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <call><name>emitParseableFixits</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>Hints</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
