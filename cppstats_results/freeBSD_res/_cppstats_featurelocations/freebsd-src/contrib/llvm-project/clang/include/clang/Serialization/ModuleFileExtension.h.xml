<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ModuleFileExtension.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_MODULEFILEEXTENSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_MODULEFILEEXTENSION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ExtensibleRTTI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>BitstreamCursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BitstreamWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>hash_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ModuleFile</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>


<struct>struct <name>ModuleFileExtensionMetadata</name> <block>{




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>BlockName</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>MajorVersion</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>MinorVersion</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>UserInfo</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ModuleFileExtensionReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ModuleFileExtensionWriter</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>ModuleFileExtension</name>
<range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>RTTIExtends</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFileExtension</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>RTTIRoot</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>

<specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>ModuleFileExtension</name><argument_list>()</argument_list></call></expr>;


<expr><name>virtual</name> <name>ModuleFileExtensionMetadata</name> <macro><name>getExtensionMetadata</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;














<expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>hashExtension</name><argument_list>(<argument>llvm::hash_code c</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFileExtensionWriter</name></expr></argument>&gt;</argument_list></name>
<call><name>createExtensionWriter</name><argument_list>(<argument><expr><name>ASTWriter</name> <operator>&amp;</operator><name>Writer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;







<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFileExtensionReader</name></expr></argument>&gt;</argument_list></name>
<call><name>createExtensionReader</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ModuleFileExtensionMetadata</name> <operator>&amp;</operator><name>Metadata</name></expr></argument>,
<argument><expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr></argument>, <argument><expr><name>serialization</name><operator>::</operator><name>ModuleFile</name> <operator>&amp;</operator><name>Mod</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <operator>&amp;</operator><name>Stream</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ModuleFileExtensionWriter</name> <block>{<block_content>
<decl_stmt><decl><type><name>ModuleFileExtension</name> <modifier>*</modifier></type><name>Extension</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>ModuleFileExtensionWriter</name><argument_list>(<argument><expr><name>ModuleFileExtension</name> <operator>*</operator><name>Extension</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Extension</name><argument_list>(<argument>Extension</argument>)</argument_list></macro> <block>{ }</block>

<name>public</name><operator>:</operator>
<name>virtual</name> <operator>~</operator><call><name>ModuleFileExtensionWriter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>ModuleFileExtension</name> <operator>*</operator><macro><name>getExtension</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Extension</name></expr>;</return> }</block></expr></expr_stmt>






<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>writeExtensionContents</name><argument_list>(<argument><expr><name>Sema</name> <operator>&amp;</operator><name>SemaRef</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BitstreamWriter</name> <operator>&amp;</operator><name>Stream</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>ModuleFileExtensionReader</name> <block>{<block_content>
<decl_stmt><decl><type><name>ModuleFileExtension</name> <modifier>*</modifier></type><name>Extension</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>ModuleFileExtensionReader</name><argument_list>(<argument><expr><name>ModuleFileExtension</name> <operator>*</operator><name>Extension</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Extension</name><argument_list>(<argument>Extension</argument>)</argument_list></macro> <block>{ }</block>

<name>public</name><operator>:</operator>


<name>ModuleFileExtension</name> <operator>*</operator><macro><name>getExtension</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Extension</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ModuleFileExtensionReader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
