<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DependentDiagnostic.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DEPENDENTDIAGNOSTIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DEPENDENTDIAGNOSTIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclContextInternals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PartialDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DependentDiagnostic</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>AccessNonce</name> <block>{ <decl><name>Access</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> }</block>;</enum>

<function><type><specifier>static</specifier> <name>DependentDiagnostic</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>,
<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>Parent</name></decl></parameter>,
<parameter><decl><type><name>AccessNonce</name></type> <name>_</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>IsMemberAccess</name></decl></parameter>,
<parameter><decl><type><name>AccessSpecifier</name></type> <name>AS</name></decl></parameter>,
<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>TargetDecl</name></decl></parameter>,
<parameter><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>NamingClass</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>BaseObjectType</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>PartialDiagnostic</name> <modifier>&amp;</modifier></type><name>PDiag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DependentDiagnostic</name> <modifier>*</modifier></type><name>DD</name> <init>= <expr><call><name>Create</name><argument_list>(<argument><expr><name>Context</name></expr></argument>, <argument><expr><name>Parent</name></expr></argument>, <argument><expr><name>PDiag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>DD</name><operator>-&gt;</operator><name>AccessData</name><operator>.</operator><name>Loc</name></name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>-&gt;</operator><name>AccessData</name><operator>.</operator><name>IsMember</name></name> <operator>=</operator> <name>IsMemberAccess</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>-&gt;</operator><name>AccessData</name><operator>.</operator><name>Access</name></name> <operator>=</operator> <name>AS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>-&gt;</operator><name>AccessData</name><operator>.</operator><name>TargetDecl</name></name> <operator>=</operator> <name>TargetDecl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>-&gt;</operator><name>AccessData</name><operator>.</operator><name>NamingClass</name></name> <operator>=</operator> <name>NamingClass</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>-&gt;</operator><name>AccessData</name><operator>.</operator><name>BaseObjectType</name></name> <operator>=</operator> <call><name><name>BaseObjectType</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DD</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Access</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isAccessToMember</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Access</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>AccessData</name><operator>.</operator><name>IsMember</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>AccessSpecifier</name> <macro><name>getAccess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Access</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>AccessSpecifier</name><argument_list>(<argument><expr><name><name>AccessData</name><operator>.</operator><name>Access</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getAccessLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Access</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>AccessData</name><operator>.</operator><name>Loc</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getAccessTarget</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Access</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>AccessData</name><operator>.</operator><name>TargetDecl</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getAccessNamingClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Access</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>AccessData</name><operator>.</operator><name>NamingClass</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>QualType</name> <macro><name>getAccessBaseObjectType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call> <operator>==</operator> <name>Access</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name><name>AccessData</name><operator>.</operator><name>BaseObjectType</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><macro><name>getDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Diag</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>DeclContext</name><operator>::</operator><name>ddiag_iterator</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DependentStoredDeclsMap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DependentDiagnostic</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><name>PDiag</name></expr></argument>,
<argument><expr><name>DiagnosticStorage</name> <operator>*</operator><name>Storage</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Diag</name><argument_list>(<argument>PDiag</argument>, <argument>Storage</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>DependentDiagnostic</name> <operator>*</operator><call><name>Create</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>DeclContext</name> <operator>*</operator><name>Parent</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><name>PDiag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DependentDiagnostic</name> <modifier>*</modifier></type><name>NextDiagnostic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PartialDiagnostic</name></type> <name>Diag</name></decl>;</decl_stmt>

<struct>struct <block>{
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Access</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsMember</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>TargetDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>NamingClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>BaseObjectType</name></decl>;</decl_stmt>
}</block> <decl><name>AccessData</name></decl>;</struct>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>class</name> <name>DeclContext</name><operator>::</operator><name>ddiag_iterator</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ddiag_iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <call><name>ddiag_iterator</name><argument_list>(<argument><expr><name>DependentDiagnostic</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>Ptr</argument>)</argument_list></macro> <block>{}</block>

<name>using</name> <name>value_type</name> <operator>=</operator> <name>DependentDiagnostic</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>reference</name> <operator>=</operator> <name>DependentDiagnostic</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>pointer</name> <operator>=</operator> <name>DependentDiagnostic</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>difference_type</name> <operator>=</operator> <name>int</name></expr>;
<expr><name>using</name> <name>iterator_category</name> <operator>=</operator> <name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr>;

<expr><name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name></expr>;</return> }</block>

<name>ddiag_iterator</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Ptr</name> <operator>&amp;&amp;</operator> <literal type="string">"attempt to increment past end of diag list"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>Ptr</name> <operator>=</operator> <name><name>Ptr</name><operator>-&gt;</operator><name>NextDiagnostic</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block>

<name>ddiag_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>ddiag_iterator</name> <name>tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><operator>++</operator><operator>*</operator><name>this</name></expr>;
<return>return <expr><name>tmp</name></expr>;</return>
}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>ddiag_iterator</name> <name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Ptr</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block>

<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>ddiag_iterator</name> <name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Ptr</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block>

<name>ddiag_iterator</name> <operator>&amp;</operator><name>operator</name><operator>+=</operator><operator>(</operator><name>difference_type</name> <name>N</name><operator>)</operator> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>N</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"cannot rewind a DeclContext::ddiag_iterator"</literal></expr></argument>)</argument_list></call></expr>;
<while>while <condition>(<expr><name>N</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>this</name></expr>;</expr_stmt></block_content></block></while></block></expr>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ddiag_iterator</name> <name>operator</name><operator>+</operator><operator>(</operator><name>difference_type</name> <name>N</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><name>ddiag_iterator</name> <name>tmp</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
<expr><name>tmp</name> <operator>+=</operator> <name>N</name></expr>;
<return>return <expr><name>tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>DependentDiagnostic</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>DeclContext</name><operator>::</operator><name>ddiag_range</name> <name>DeclContext</name><operator>::</operator><macro><name>ddiags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isDependentContext</name><argument_list>()</argument_list></call>
<operator>&amp;&amp;</operator> <literal type="string">"cannot iterate dependent diagnostics of non-dependent context"</literal></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>DependentStoredDeclsMap</name> <operator>*</operator><name>Map</name>
<operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DependentStoredDeclsMap</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPrimaryContext</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getLookupPtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Map</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ddiag_range</name><argument_list>(<argument><expr><call><name>ddiag_iterator</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ddiag_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name>ddiag_range</name><argument_list>(<argument><expr><call><name>ddiag_iterator</name><argument_list>(<argument><expr><name><name>Map</name><operator>-&gt;</operator><name>FirstDiagnostic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ddiag_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
