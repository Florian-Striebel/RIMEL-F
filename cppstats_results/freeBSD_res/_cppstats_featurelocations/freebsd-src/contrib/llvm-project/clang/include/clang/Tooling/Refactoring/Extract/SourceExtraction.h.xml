<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/Extract/SourceExtraction.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTORING_EXTRACT_SOURCE_EXTRACTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTORING_EXTRACT_SOURCE_EXTRACTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<decl_stmt><decl><type><name>class</name></type> <name>ExtractionSemicolonPolicy</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>bool</name> <macro><name>isNeededInExtractedFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IsNeededInExtractedFunction</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isNeededInOriginalFunction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsNeededInOriginalFunction</name></expr>;</return> }</block></expr></expr_stmt>



<function_decl><type><specifier>static</specifier> <name>ExtractionSemicolonPolicy</name></type> <name>compute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name> <modifier>&amp;</modifier></type><name>ExtractedRange</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<macro><name>ExtractionSemicolonPolicy</name><argument_list>(<argument>bool IsNeededInExtractedFunction</argument>,
<argument>bool IsNeededInOriginalFunction</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>IsNeededInExtractedFunction</name><argument_list>(<argument><expr><name>IsNeededInExtractedFunction</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>IsNeededInOriginalFunction</name><argument_list>(<argument>IsNeededInOriginalFunction</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <name>IsNeededInExtractedFunction</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsNeededInOriginalFunction</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
