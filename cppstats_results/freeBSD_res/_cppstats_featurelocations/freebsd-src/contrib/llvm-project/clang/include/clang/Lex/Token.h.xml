<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/Token.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_TOKEN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_TOKEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>Token</name> <block>{<block_content>

<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>Loc</name></expr>;</expr_stmt>









<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>UintData</name></expr>;</expr_stmt>















<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>PtrData</name></decl>;</decl_stmt>


<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>Flags</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<enum>enum <name>TokenFlags</name> <block>{
<decl><name>StartOfLine</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>LeadingSpace</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>DisableExpand</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>NeedsCleaning</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>LeadingEmptyMacro</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>HasUDSuffix</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>HasUCN</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>IgnoredComma</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
<decl><name>StringifiedInMacro</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,

<decl><name>CommaAfterElided</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,
<decl><name>IsEditorPlaceholder</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,
<decl><name>IsReinjected</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>,


}</block>;</enum>

<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setKind</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>Kind</name> <operator>=</operator> <name>K</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Kind</name> <operator>==</operator> <name>K</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isNot</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Kind</name> <operator>!=</operator> <name>K</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isOneOf</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K1</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K2</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>is</name><argument_list>(<argument><expr><name>K1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is</name><argument_list>(<argument><expr><name>K2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>isOneOf</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K1</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K2</name></expr></argument>, <argument><expr><name>Ts</name><operator>...</operator> <name>Ks</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>is</name><argument_list>(<argument><expr><name>K1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isOneOf</name><argument_list>(<argument><expr><name>K2</name></expr></argument>, <argument><expr><name>Ks</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isAnyIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>tok</name><operator>::</operator><call><name>isAnyIdentifier</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isLiteral</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>tok</name><operator>::</operator><call><name>isLiteral</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isAnnotation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>tok</name><operator>::</operator><call><name>isAnnotation</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Annotation tokens have no length field"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>UintData</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setLocation</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Loc</name> <operator>=</operator> <call><name><name>L</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setLength</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Annotation tokens have no length field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UintData</name> <operator>=</operator> <name>Len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getAnnotationEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Used AnnotEndLocID on non-annotation token"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>SourceLocation</name><operator>::</operator><call><name>getFromRawEncoding</name><argument_list>(<argument><expr><ternary><condition><expr><name>UintData</name></expr> ?</condition><then> <expr><name>UintData</name></expr> </then><else>: <expr><name>Loc</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAnnotationEndLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Used AnnotEndLocID on non-annotation token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>UintData</name> <operator>=</operator> <call><name><name>L</name><operator>.</operator><name>getRawEncoding</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLastLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getAnnotationEndLoc</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>getLocation</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getAnnotationEndLoc</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>getLocation</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocWithOffset</name><argument_list>(<argument><expr><call><name>getLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceRange</name> <macro><name>getAnnotationRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>SourceRange</name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getAnnotationEndLoc</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAnnotationRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>setLocation</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setAnnotationEndLoc</name><argument_list>(<argument><expr><call><name><name>R</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>tok</name><operator>::</operator><call><name>getTokenName</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>startToken</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Kind</name> <operator>=</operator> <name>tok</name><operator>::</operator><name>unknown</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrData</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>UintData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>Loc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRawEncoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getIdentifierInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isNot</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>raw_identifier</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"getIdentifierInfo() on a tok::raw_identifier token!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"getIdentifierInfo() on an annotation token!"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name>isLiteral</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>eof</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>IdentifierInfo</name><operator>*</operator><operator>)</operator> <name>PtrData</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>void</name></type> <name>setIdentifierInfo</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>II</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>PtrData</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>II</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>getEofData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>eof</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>PtrData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setEofData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>eof</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>PtrData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrData</name> <operator>=</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>StringRef</name> <macro><name>getRawIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>raw_identifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>PtrData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setRawIdentifierData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>raw_identifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrData</name> <operator>=</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getLiteralData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isLiteral</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Cannot get literal data of non-literal"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>PtrData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setLiteralData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isLiteral</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Cannot set literal data of non-literal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrData</name> <operator>=</operator> <call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>getAnnotationValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Used AnnotVal on non-annotation token"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>PtrData</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setAnnotationValue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isAnnotation</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Used AnnotVal on non-annotation token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PtrData</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>setFlag</name><parameter_list>(<parameter><decl><type><name>TokenFlags</name></type> <name>Flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Flags</name> <operator>|=</operator> <name>Flag</name></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>bool</name></type> <name>getFlag</name><argument_list>(<argument><expr><name>TokenFlags</name> <name>Flag</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><name>Flags</name> <operator>&amp;</operator> <name>Flag</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>clearFlag</name><parameter_list>(<parameter><decl><type><name>TokenFlags</name></type> <name>Flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Flags</name> <operator>&amp;=</operator> <operator>~</operator><name>Flag</name></expr>;</expr_stmt>
</block_content>}</block></function>





<expr_stmt><expr><name>unsigned</name> <macro><name>getFlags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Flags</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setFlagValue</name><parameter_list>(<parameter><decl><type><name>TokenFlags</name></type> <name>Flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setFlag</name><argument_list>(<argument><expr><name>Flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clearFlag</name><argument_list>(<argument><expr><name>Flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>isAtStartOfLine</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>StartOfLine</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasLeadingSpace</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>LeadingSpace</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isExpandDisabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>DisableExpand</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isObjCAtKeyword</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>ObjCKeywordKind</name> <name>objcKey</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>tok</name><operator>::</operator><name>ObjCKeywordKind</name> <macro><name>getObjCKeywordID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>needsCleaning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>NeedsCleaning</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasLeadingEmptyMacro</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>LeadingEmptyMacro</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasUDSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>HasUDSuffix</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasUCN</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>HasUCN</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>stringifiedInMacro</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>StringifiedInMacro</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>commaAfterElided</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>CommaAfterElided</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>isEditorPlaceholder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFlag</name><argument_list>(<argument><expr><name>IsEditorPlaceholder</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<struct>struct <name>PPConditionalInfo</name> <block>{

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>IfLoc</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>WasSkipping</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>FoundNonSkip</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>FoundElse</name></decl>;</decl_stmt>
}</block>;</struct>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
