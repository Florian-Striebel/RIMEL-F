<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CharUnits.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_CHARUNITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_CHARUNITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Alignment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DataTypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MathExtras.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
















<decl_stmt><decl><type><name>class</name></type> <name>CharUnits</name> <block>{<block_content>
<label><name>public</name>:</label>
<typedef>typedef <type><name>int64_t</name></type> <name>QuantityType</name>;</typedef>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>QuantityType</name></type> <name>Quantity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <macro><name>CharUnits</name><argument_list>(<argument>QuantityType C</argument>)</argument_list></macro> : <macro><name>Quantity</name><argument_list>(<argument>C</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>public</name>:</label>


<expr_stmt><expr><call><name>CharUnits</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function><type><specifier>static</specifier> <name>CharUnits</name></type> <name>Zero</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CharUnits</name></type> <name>One</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CharUnits</name></type> <name>fromQuantity</name><parameter_list>(<parameter><decl><type><name>QuantityType</name></type> <name>Quantity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>CharUnits</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>Quantity</name> <operator>+=</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name><operator>&amp;</operator> <name>operator</name><operator>++</operator> <operator>(</operator><operator>)</operator> <block>{
<expr><operator>++</operator><name>Quantity</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <name>operator</name><operator>++</operator> <operator>(</operator><name>int</name><operator>)</operator> <block>{
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>Quantity</name> <operator>-=</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name><operator>&amp;</operator> <name>operator</name><operator>--</operator> <operator>(</operator><operator>)</operator> <block>{
<expr><operator>--</operator><name>Quantity</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <name>operator</name><operator>--</operator> <operator>(</operator><name>int</name><operator>)</operator> <block>{
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name><operator>--</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>!=</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;=</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>&lt;=</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>&gt;</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;=</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>&gt;=</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isZero</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Quantity</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isOne</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Quantity</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isPositive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Quantity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isNegative</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Quantity</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isPowerOfTwo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><name>Quantity</name> <operator>&amp;</operator> <operator>-</operator><name>Quantity</name><operator>)</operator> <operator>==</operator> <name>Quantity</name></expr>;</return>
}</block></expr></expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>isMultipleOf</name><argument_list>(<argument><expr><name>CharUnits</name> <name>N</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>this</name> <operator>%</operator> <name>N</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>operator</name><modifier>*</modifier> <argument_list>(<argument><expr><name>QuantityType</name> <name>N</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name> <operator>*</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>CharUnits</name> <operator>&amp;</operator><name>operator</name><operator>*=</operator> <operator>(</operator><name>QuantityType</name> <name>N</name><operator>)</operator> <block>{
<expr><name>Quantity</name> <operator>*=</operator> <name>N</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <name>operator</name><operator>/</operator> <operator>(</operator><name>QuantityType</name> <name>N</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name> <operator>/</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <operator>&amp;</operator><name>operator</name><operator>/=</operator> <operator>(</operator><name>QuantityType</name> <name>N</name><operator>)</operator> <block>{
<expr><name>Quantity</name> <operator>/=</operator> <name>N</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>QuantityType</name> <name>operator</name><operator>/</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>/</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <name>operator</name><operator>%</operator> <operator>(</operator><name>QuantityType</name> <name>N</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name> <operator>%</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>QuantityType</name> <name>operator</name><operator>%</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>Quantity</name> <operator>%</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <name>operator</name><operator>+</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name> <operator>+</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <name>operator</name><operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>Quantity</name> <operator>-</operator> <name><name>Other</name><operator>.</operator><name>Quantity</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CharUnits</name> <name>operator</name><operator>-</operator> <operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><operator>-</operator><name>Quantity</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name>QuantityType</name> <macro><name>getQuantity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Quantity</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Align</name> <macro><name>getAsAlign</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>llvm</name><operator>::</operator><call><name>Align</name><argument_list>(<argument><expr><name>Quantity</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name>CharUnits</name></type> <name>alignTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CharUnits</name> <operator>&amp;</operator><name>Align</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>alignTo</name><argument_list>(<argument><expr><name>Quantity</name></expr></argument>, <argument><expr><name><name>Align</name><operator>.</operator><name>Quantity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>alignmentAtOffset</name><argument_list>(<argument><expr><name>CharUnits</name> <name>offset</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Quantity</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"offsetting from unknown alignment?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>CharUnits</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>MinAlign</name><argument_list>(<argument><expr><name>Quantity</name></expr></argument>, <argument><expr><name><name>offset</name><operator>.</operator><name>Quantity</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>CharUnits</name></type> <name>alignmentOfArrayElement</name><argument_list>(<argument><expr><name>CharUnits</name> <name>elementSize</name></expr></argument>)</argument_list> const <block>{<block_content>



<return>return <expr><call><name>alignmentAtOffset</name><argument_list>(<argument><expr><name>elementSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>clang</name><operator>::</operator><name>CharUnits</name> <name>operator</name><operator>*</operator> <operator>(</operator><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><name>QuantityType</name> <name>Scale</name><operator>,</operator>
<specifier>const</specifier> <name>clang</name><operator>::</operator><name>CharUnits</name> <operator>&amp;</operator><name>CU</name><operator>)</operator> <block>{
<return>return <expr><name>CU</name> <operator>*</operator> <name>Scale</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CharUnits</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>CharUnits</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><name>QuantityType</name> <name>Quantity</name> <operator>=</operator>
<name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><name>QuantityType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr>;

<return>return <expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>Quantity</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>CharUnits</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><name>QuantityType</name> <name>Quantity</name> <operator>=</operator>
<name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><name>QuantityType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr>;

<return>return <expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name>Quantity</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>const clang::CharUnits &amp;CU</argument>)</argument_list></macro> <block>{
<expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><name>QuantityType</name> <name>Quantity</name> <operator>=</operator> <call><name><name>CU</name><operator>.</operator><name>getQuantity</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><name>QuantityType</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name>Quantity</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>const clang::CharUnits &amp;LHS</argument>,
<argument>const clang::CharUnits &amp;RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
