<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/PreprocessorOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_PREPROCESSOROPTIONS_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_PREPROCESSOROPTIONS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/BitmaskEnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PreprocessorExcludedConditionalDirectiveSkipMapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<enum>enum <name>ObjCXXARCStandardLibraryKind</name> <block>{
<decl><name>ARCXX_nolib</name></decl>,


<decl><name>ARCXX_libcxx</name></decl>,


<decl><name>ARCXX_libstdcxx</name></decl>
}</block>;</enum>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>DisableValidationForModuleKind</name> <block>{<block_content>

<expr_stmt><expr><name>None</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>


<expr><name>PCH</name> <operator>=</operator> <literal type="number">0x1</literal></expr><operator>,</operator>


<expr><name>Module</name> <operator>=</operator> <literal type="number">0x2</literal></expr><operator>,</operator>


<expr><name>All</name> <operator>=</operator> <name>PCH</name> <operator>|</operator> <name>Module</name></expr><operator>,</operator>

<macro><name>LLVM_MARK_AS_BITMASK_ENUM</name><argument_list>(<argument>Module</argument>)</argument_list></macro></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Macros</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Includes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>MacroIncludes</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>UsePredefines</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>DetailedRecord</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>PCHWithHdrStop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>PCHWithHdrStopCreate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>PCHThroughHeader</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ImplicitPCHInclude</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ChainedIncludes</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>DisableValidationForModuleKind</name></type> <name>DisablePCHOrModuleValidation</name> <init>=
<expr><name>DisableValidationForModuleKind</name><operator>::</operator><name>None</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>AllowPCHWithCompilerErrors</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>AllowPCHWithDifferentModulesCachePath</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>DumpDeserializedPCHDecls</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>DeserializedPCHDeclsToErrorOn</name></expr>;</expr_stmt>






<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>PrecompiledPreambleBytes</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>GeneratePreamble</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>WriteCommentListToPCH</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>SingleFileParseMode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>LexEditorPlaceholders</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>RemappedFilesKeepOriginalName</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>RemappedFiles</name></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>RemappedFileBuffers</name></expr>;</expr_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>RetainRemappedFileBuffers</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>RetainExcludedConditionalBlocks</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ObjCXXARCStandardLibraryKind</name></type> <name>ObjCXXARCStandardLibrary</name> <init>= <expr><name>ARCXX_nolib</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FailedModulesSet</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>Failed</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<function><type><name>bool</name></type> <name>hasAlreadyFailed</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Failed</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addFailed</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Failed</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FailedModulesSet</name></expr></argument>&gt;</argument_list></name> <name>FailedModules</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>ExcludedPreprocessorDirectiveSkipMapping</name>
<modifier>*</modifier></type><name>ExcludedConditionalDirectiveSkipMappings</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>SetUpStaticAnalyzer</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>DisablePragmaDebugCrash</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>PreprocessorOptions</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>PrecompiledPreambleBytes</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>false</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>addMacroDef</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Macros</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>addMacroUndef</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Macros</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>addRemappedFile</name><argument_list>(<argument>StringRef From</argument>, <argument>StringRef To</argument>)</argument_list></macro> <block>{
<expr><call><name><name>RemappedFiles</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>To</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>addRemappedFile</name><argument_list>(<argument>StringRef From</argument>, <argument>llvm::MemoryBuffer *To</argument>)</argument_list></macro> <block>{
<expr><call><name><name>RemappedFileBuffers</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>To</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>clearRemappedFiles</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>RemappedFiles</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>RemappedFileBuffers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>



<name>void</name> <macro><name>resetNonModularOptions</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>Includes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>MacroIncludes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>ChainedIncludes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>DumpDeserializedPCHDecls</name> <operator>=</operator> <name>false</name></expr>;
<expr><call><name><name>ImplicitPCHInclude</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<expr><name>SingleFileParseMode</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>LexEditorPlaceholders</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>RetainRemappedFileBuffers</name> <operator>=</operator> <name>true</name></expr>;
<expr><name><name>PrecompiledPreambleBytes</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>PrecompiledPreambleBytes</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>false</name></expr>;
<expr><name>RetainExcludedConditionalBlocks</name> <operator>=</operator> <name>false</name></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
