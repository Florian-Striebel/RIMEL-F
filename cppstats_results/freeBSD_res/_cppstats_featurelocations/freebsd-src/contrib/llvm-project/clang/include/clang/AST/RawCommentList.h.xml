<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/RawCommentList.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_RAWCOMMENTLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_RAWCOMMENTLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/CommentOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>comments</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FullComment</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>RawComment</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>CommentKind</name> <block>{
<decl><name>RCK_Invalid</name></decl>,
<decl><name>RCK_OrdinaryBCPL</name></decl>,
<decl><name>RCK_OrdinaryC</name></decl>,
<decl><name>RCK_BCPLSlash</name></decl>,
<decl><name>RCK_BCPLExcl</name></decl>,
<decl><name>RCK_JavaDoc</name></decl>,
<decl><name>RCK_Qt</name></decl>,
<decl><name>RCK_Merged</name></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>RawComment</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Kind</name><argument_list>(<argument><expr><name>RCK_Invalid</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsAlmostTrailingComment</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{ }</block>

<macro><name>RawComment</name><argument_list>(<argument>const SourceManager &amp;SourceMgr</argument>, <argument>SourceRange SR</argument>,
<argument>const CommentOptions &amp;CommentOpts</argument>, <argument>bool Merged</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>CommentKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><operator>(</operator><name>CommentKind</name><operator>)</operator> <name>Kind</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>Kind</name> <operator>==</operator> <name>RCK_Invalid</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isMerged</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>Kind</name> <operator>==</operator> <name>RCK_Merged</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isAttached</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>IsAttached</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setAttached</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IsAttached</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>






<expr_stmt><expr><name>bool</name> <macro><name>isTrailingComment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>IsTrailingComment</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>bool</name> <macro><name>isAlmostTrailingComment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name>IsAlmostTrailingComment</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isOrdinary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><operator>(</operator><operator>(</operator><name>Kind</name> <operator>==</operator> <name>RCK_OrdinaryBCPL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>Kind</name> <operator>==</operator> <name>RCK_OrdinaryC</name><operator>)</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isDocumentation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><operator>!</operator><call><name>isInvalid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isOrdinary</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>getRawText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>RawTextValid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>RawText</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>RawText</name> <operator>=</operator> <call><name>getRawTextSlow</name><argument_list>(<argument><expr><name>SourceMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>RawTextValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>RawText</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>Range</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><call><name><name>Range</name><operator>.</operator><name>getBegin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><call><name><name>Range</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getBriefText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>BriefTextValid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BriefText</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>extractBriefText</name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






















<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getFormattedText</name><argument_list>(<argument>const SourceManager &amp;SourceMgr</argument>,
<argument>DiagnosticsEngine &amp;Diags</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>comments</name><operator>::</operator><name>FullComment</name> <operator>*</operator><macro><name>parse</name><argument_list>(<argument>const ASTContext &amp;Context</argument>,
<argument>const Preprocessor *PP</argument>, <argument>const Decl *D</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>SourceRange</name></type> <name>Range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>StringRef</name></type> <name>RawText</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BriefText</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>RawTextValid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>BriefTextValid</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsAttached</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsTrailingComment</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsAlmostTrailingComment</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<macro><name>RawComment</name><argument_list>(<argument>SourceRange SR</argument>, <argument>CommentKind K</argument>, <argument>bool IsTrailingComment</argument>,
<argument>bool IsAlmostTrailingComment</argument>)</argument_list></macro> :
<expr_stmt><expr><call><name>Range</name><argument_list>(<argument><expr><name>SR</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RawTextValid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>BriefTextValid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsAttached</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsTrailingComment</name><argument_list>(<argument><expr><name>IsTrailingComment</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>IsAlmostTrailingComment</name><argument_list>(<argument>IsAlmostTrailingComment</argument>)</argument_list></macro>
<expr><block>{ }</block>

<name>StringRef</name> <macro><name>getRawTextSlow</name><argument_list>(<argument>const SourceManager &amp;SourceMgr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extractBriefText</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>RawCommentList</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>RawCommentList</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SourceMgr</name><argument_list>(<argument>SourceMgr</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <call><name>addComment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RawComment</name> <operator>&amp;</operator><name>RC</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CommentOptions</name> <operator>&amp;</operator><name>CommentOpts</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>RawComment</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>*</operator><macro><name>getCommentsInFile</name><argument_list>(<argument>FileID File</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>getCommentBeginLine</name><argument_list>(<argument><expr><name>RawComment</name> <operator>*</operator><name>C</name></expr></argument>, <argument><expr><name>FileID</name> <name>File</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>Offset</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>getCommentEndOffset</name><argument_list>(<argument><expr><name>RawComment</name> <operator>*</operator><name>C</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>RawComment</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>OrderedComments</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>RawComment</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>CommentBeginLine</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>RawComment</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>CommentEndOffset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTWriter</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
