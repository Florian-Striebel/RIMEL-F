<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/RangedConstraintManager.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_STATICANALYZER_CORE_RANGEDCONSTRAINTMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_STATICANALYZER_CORE_RANGEDCONSTRAINTMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SimpleConstraintManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>Range</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Range</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>From</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>To</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Impl</name><argument_list>(<argument>&amp;From</argument>, <argument>&amp;To</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>From</name> <operator>&lt;=</operator> <name>To</name></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>Range</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Point</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Range</name><argument_list>(<argument>Point</argument>, <argument>Point</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>Includes</name><argument_list>(<argument>const llvm::APSInt &amp;Point</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>From</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>Point</name> <operator>&amp;&amp;</operator> <name>Point</name> <operator>&lt;=</operator> <call><name>To</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>From</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name><name>Impl</name><operator>.</operator><name>first</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>To</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name><name>Impl</name><operator>.</operator><name>second</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator><macro><name>getConcreteValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>&amp;</operator><call><name>From</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><call><name>To</name><argument_list>()</argument_list></call> <operator>?</operator> <operator>&amp;</operator><call><name>From</name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>From</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>To</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>Range</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name>From</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>RHS</name><operator>.</operator><name>From</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Range</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Impl</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Impl</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>Range</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>operator</name><operator>==</operator><operator>(</operator><name>RHS</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Impl</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>RangeSet</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>Factory</name></decl>;</decl_stmt>

<label><name>private</name>:</label>



















<decl_stmt><decl><type><name>using</name></type> <name>ImplType</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Range</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ContainerType</name></name></type> <range>: <expr><name>public</name> <name>ImplType</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>llvm</name>::<name>FoldingSetNode</name> <block>{<block_content>
<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<for>for <control>(<init><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type><name>It</name> <range>: <expr><operator>*</operator><name>this</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>It</name><operator>.</operator><name>Profile</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>UnderlyingType</name> <init>= <expr><specifier>const</specifier> <name>ContainerType</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UnderlyingType</name></type> <name>Impl</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>ImplType</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Impl</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Impl</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Impl</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Impl</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Factory</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Factory</name><argument_list>(<argument><expr><name>BasicValueFactory</name> <operator>&amp;</operator><name>BV</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ValueFactory</name><argument_list>(<argument>BV</argument>)</argument_list></macro> <block>{}</block>






<name>RangeSet</name> <macro><name>add</name><argument_list>(<argument>RangeSet LHS</argument>, <argument>RangeSet RHS</argument>)</argument_list></macro></expr>;</expr_stmt>





<function_decl><type><name>RangeSet</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>RangeSet</name></type> <name>Original</name></decl></parameter>, <parameter><decl><type><name>Range</name></type> <name>Element</name></decl></parameter>)</parameter_list>;</function_decl>





<decl_stmt><decl><type><name>RangeSet</name></type> <name>add</name><argument_list>(<argument><expr><name>RangeSet</name> <name>Original</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Point</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>RangeSet</name></type> <name>getEmptySet</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name>EmptySet</name></expr>;</return> </block_content>}</block></function>



<function_decl><type><name>RangeSet</name></type> <name>getRangeSet</name><parameter_list>(<parameter><decl><type><name>Range</name></type> <name>Origin</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>RangeSet</name></type> <name>getRangeSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>From</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>To</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getRangeSet</name><argument_list>(<argument><expr><call><name>Range</name><argument_list>(<argument><expr><name>From</name></expr></argument>, <argument><expr><name>To</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>RangeSet</name></type> <name>getRangeSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Origin</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>getRangeSet</name><argument_list>(<argument><expr><name>Origin</name></expr></argument>, <argument><expr><name>Origin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<function_decl><type><name>RangeSet</name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><name>RangeSet</name></type> <name>LHS</name></decl></parameter>, <parameter><decl><type><name>RangeSet</name></type> <name>RHS</name></decl></parameter>)</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>RangeSet</name></type> <name>intersect</name><argument_list>(<argument><expr><name>RangeSet</name> <name>What</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>Lower</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>Upper</name></expr></argument>)</argument_list></decl>;</decl_stmt>







<decl_stmt><decl><type><name>RangeSet</name></type> <name>intersect</name><argument_list>(<argument><expr><name>RangeSet</name> <name>What</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>Point</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>RangeSet</name></type> <name>deletePoint</name><argument_list>(<argument><expr><name>RangeSet</name> <name>From</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Point</name></expr></argument>)</argument_list></decl>;</decl_stmt>



























<function_decl><type><name>RangeSet</name></type> <name>negate</name><parameter_list>(<parameter><decl><type><name>RangeSet</name></type> <name>What</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>BasicValueFactory</name> <operator>&amp;</operator><macro><name>getValueFactory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ValueFactory</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>RangeSet</name></type> <name>makePersistent</name><argument_list>(<argument><expr><name>ContainerType</name> <operator>&amp;&amp;</operator><name>From</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ContainerType</name> <modifier>*</modifier></type><name>construct</name><argument_list>(<argument><expr><name>ContainerType</name> <operator>&amp;&amp;</operator><name>From</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>RangeSet</name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ContainerType</name> <modifier>&amp;</modifier></type><name>LHS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ContainerType</name> <modifier>&amp;</modifier></type><name>RHS</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>BasicValueFactory</name> <modifier>&amp;</modifier></type><name>ValueFactory</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SpecificBumpPtrAllocator</name><argument_list type="generic">&lt;<argument><expr><name>ContainerType</name></expr></argument>&gt;</argument_list></name> <name>Arena</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>ContainerType</name></expr></argument>&gt;</argument_list></name> <name>Cache</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ContainerType</name></type> <name>EmptySet</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>RangeSet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RangeSet</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>RangeSet</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>RangeSet</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>RangeSet</name><argument_list>(<argument><expr><name>RangeSet</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>RangeSet</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>RangeSet</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>RangeSet</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<expr_stmt><expr><call><name>RangeSet</name><argument_list>(<argument><expr><name>Factory</name> <operator>&amp;</operator><name>F</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>From</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>To</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>RangeSet</name><argument_list>(<argument>F.getRangeSet(From, To)</argument>)</argument_list></macro> <block>{}</block>


<call><name>RangeSet</name><argument_list>(<argument><expr><name>Factory</name> <operator>&amp;</operator><name>F</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Point</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>RangeSet</name><argument_list>(<argument>F.getRangeSet(Point)</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>, <argument>const RangeSet &amp;RS</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name><name>RS</name><operator>.</operator><name>Impl</name></name></expr></argument>)</argument_list></call></expr>;
}</block>



<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; }</block>




<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>*</operator><macro><name>getConcreteValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Impl</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>?</operator> <call><name>begin</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getConcreteValue</name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMinValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMaxValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>contains</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>Point</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>containsImpl</name><argument_list>(<argument><expr><name>Point</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>RangeSet</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>Impl</name> <operator>==</operator> <operator>*</operator><name><name>Other</name><operator>.</operator><name>Impl</name></name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>RangeSet</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>Other</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>RangeSet</name><argument_list>(<argument><expr><name>ContainerType</name> <operator>*</operator><name>RawContainer</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Impl</name><argument_list>(<argument>RawContainer</argument>)</argument_list></macro> <block>{}</block>
<macro><name>RangeSet</name><argument_list>(<argument>UnderlyingType Ptr</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Impl</name><argument_list>(<argument>Ptr</argument>)</argument_list></macro> <block>{}</block>











<name>bool</name> <macro><name>pin</name><argument_list>(<argument>llvm::APSInt &amp;Lower</argument>, <argument>llvm::APSInt &amp;Upper</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>pin</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Point</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>containsImpl</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Point</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Factory</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>ConstraintMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><expr><name>SymbolRef</name></expr></argument>, <argument><expr><name>RangeSet</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<function_decl><type><name>ConstraintMap</name></type> <name>getConstraintMap</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>RangedConstraintManager</name> <range>: <expr><name>public</name> <name>SimpleConstraintManager</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>RangedConstraintManager</name><argument_list>(<argument><expr><name>ExprEngine</name> <operator>*</operator><name>EE</name></expr></argument>, <argument><expr><name>SValBuilder</name> <operator>&amp;</operator><name>SB</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>SimpleConstraintManager</name><argument_list>(<argument>EE</argument>, <argument>SB</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>RangedConstraintManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;





<expr><name>ProgramStateRef</name> <macro><name>assumeSym</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>bool Assumption</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ProgramStateRef</name> <macro><name>assumeSymInclusiveRange</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;From</argument>,
<argument>const llvm::APSInt &amp;To</argument>,
<argument>bool InRange</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ProgramStateRef</name> <macro><name>assumeSymUnsupported</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>bool Assumption</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymRel</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>BinaryOperator::Opcode op</argument>,
<argument>const llvm::APSInt &amp;Int</argument>)</argument_list></macro></expr>;








<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymNE</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;V</argument>,
<argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymEQ</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;V</argument>,
<argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymLT</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;V</argument>,
<argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymGT</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;V</argument>,
<argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymLE</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;V</argument>,
<argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymGE</name><argument_list>(<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>,
<argument>const llvm::APSInt &amp;V</argument>,
<argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymWithinInclusiveRange</name><argument_list>(
<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>, <argument>const llvm::APSInt &amp;From</argument>,
<argument>const llvm::APSInt &amp;To</argument>, <argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>ProgramStateRef</name> <macro><name>assumeSymOutsideInclusiveRange</name><argument_list>(
<argument>ProgramStateRef State</argument>, <argument>SymbolRef Sym</argument>, <argument>const llvm::APSInt &amp;From</argument>,
<argument>const llvm::APSInt &amp;To</argument>, <argument>const llvm::APSInt &amp;Adjustment</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;




<expr><name>private</name><operator>:</operator>
<specifier>static</specifier> <name>void</name> <call><name>computeAdjustment</name><argument_list>(<argument><expr><name>SymbolRef</name> <operator>&amp;</operator><name>Sym</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Adjustment</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>




<function_decl><type><name>SymbolRef</name></type> <name>simplify</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SymbolRef</name></type> <name>Sym</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<macro><name>REGISTER_FACTORY_WITH_PROGRAMSTATE</name><argument_list>(<argument>ConstraintMap</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
