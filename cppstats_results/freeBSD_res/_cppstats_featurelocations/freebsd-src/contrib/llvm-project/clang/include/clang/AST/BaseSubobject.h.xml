<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/BaseSubobject.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_BASESUBOBJECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_BASESUBOBJECT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/type_traits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>BaseSubobject</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Base</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CharUnits</name></type> <name>BaseOffset</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>BaseSubobject</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>BaseSubobject</name><argument_list>(<argument>const CXXRecordDecl *Base</argument>, <argument>CharUnits BaseOffset</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Base</name><argument_list>(<argument><expr><name>Base</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>BaseOffset</name><argument_list>(<argument>BaseOffset</argument>)</argument_list></macro> <expr><block>{}</block>


<specifier>const</specifier> <name>CXXRecordDecl</name> <operator>*</operator><macro><name>getBase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Base</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>CharUnits</name> <macro><name>getBaseOffset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BaseOffset</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>BaseSubobject</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>BaseSubobject</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Base</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Base</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>BaseOffset</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>BaseOffset</name></name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>BaseSubobject</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>BaseSubobject</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>BaseSubobject</name><argument_list>(
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>BaseSubobject</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>BaseSubobject</name><argument_list>(
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXRecordDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>CharUnits</name><operator>::</operator><call><name>fromQuantity</name><argument_list>(<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>const clang::BaseSubobject &amp;Base</argument>)</argument_list></macro> <block>{
<expr><name>using</name> <name>PairTy</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CXXRecordDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>CharUnits</name></expr></argument>&gt;</argument_list></name></expr>;

<return>return <expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>PairTy</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><call><name>PairTy</name><argument_list>(<argument><expr><call><name><name>Base</name><operator>.</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Base</name><operator>.</operator><name>getBaseOffset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>const clang::BaseSubobject &amp;LHS</argument>,
<argument>const clang::BaseSubobject &amp;RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
