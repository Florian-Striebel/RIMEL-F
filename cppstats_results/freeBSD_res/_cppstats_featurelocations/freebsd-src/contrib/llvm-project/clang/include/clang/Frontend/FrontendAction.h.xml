<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/FrontendAction.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_FRONTENDACTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_FRONTENDACTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/ASTUnit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/FrontendOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTMergeAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FrontendAction</name> <block>{<block_content>
<decl_stmt><decl><type><name>FrontendInputFile</name></type> <name>CurrentInput</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name></expr></argument>&gt;</argument_list></name> <name>CurrentASTUnit</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CompilerInstance</name> <modifier>*</modifier></type><name>Instance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTMergeAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>WrapperFrontendAction</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateWrappedASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>protected</name>:</label>







<function><type><name>virtual</name> <name>bool</name></type> <name>PrepareToExecuteAction</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>














<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>







<function><type><name>virtual</name> <name>bool</name></type> <name>BeginInvocation</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>





<function><type><name>virtual</name> <name>bool</name></type> <name>BeginSourceFileAction</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>






<function_decl><type><name>virtual</name> <name>void</name></type> <name>ExecuteAction</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function><type><name>virtual</name> <name>void</name></type> <name>EndSourceFileAction</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>







<function_decl><type><name>virtual</name> <name>bool</name></type> <name>shouldEraseOutputFiles</name><parameter_list>()</parameter_list>;</function_decl>



<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FrontendAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>FrontendAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>CompilerInstance</name> <operator>&amp;</operator><macro><name>getCompilerInstance</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Instance</name> <operator>&amp;&amp;</operator> <literal type="string">"Compiler instance not registered!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>Instance</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setCompilerInstance</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Instance</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt> </block_content>}</block></function>





<expr_stmt><expr><name>bool</name> <macro><name>isCurrentFileAST</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>CurrentInput</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No current file!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>(</operator><name>bool</name><operator>)</operator><name>CurrentASTUnit</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>FrontendInputFile</name> <operator>&amp;</operator><macro><name>getCurrentInput</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>CurrentInput</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getCurrentFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>CurrentInput</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No current file!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>CurrentInput</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getCurrentFileOrBufferName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>CurrentInput</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No current file!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name><name>CurrentInput</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>
?</condition><then> <expr><call><name><name>CurrentInput</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr>
</then><else>: <expr><call><name><name>CurrentInput</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBufferIdentifier</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>InputKind</name> <macro><name>getCurrentFileKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>CurrentInput</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No current file!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>CurrentInput</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ASTUnit</name> <operator>&amp;</operator><macro><name>getCurrentASTUnit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>CurrentASTUnit</name> <operator>&amp;&amp;</operator> <literal type="string">"No current AST unit!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>CurrentASTUnit</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Module</name> <operator>*</operator><macro><name>getCurrentModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name></expr></argument>&gt;</argument_list></name> <macro><name>takeCurrentASTUnit</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>CurrentASTUnit</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setCurrentInput</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FrontendInputFile</name> <operator>&amp;</operator><name>CurrentInput</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name></expr></argument>&gt;</argument_list></name> <name>AST</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>










<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>isModelParsingAction</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<function><type><name>virtual</name> <name>TranslationUnitKind</name></type> <name>getTranslationUnitKind</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>TU_Complete</name></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasPCHSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasASTFileSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasIRSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasCodeCompletionSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>






<function><type><name>bool</name></type> <name>PrepareToExecute</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>PrepareToExecuteAction</name><argument_list>(<argument><expr><name>CI</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




















<function_decl><type><name>bool</name></type> <name>BeginSourceFile</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FrontendInputFile</name> <modifier>&amp;</modifier></type><name>Input</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>Execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>EndSourceFile</name><parameter_list>()</parameter_list>;</function_decl>


</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ASTFrontendAction</name> <range>: <expr><name>public</name> <name>FrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>





<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ASTFrontendAction</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>PluginASTAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>public</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name> <operator>=</operator> <literal type="number">0</literal></expr>;







<expr><name>virtual</name> <name>bool</name> <call><name>ParseArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerInstance</name> <operator>&amp;</operator><name>CI</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

enum <expr><name>ActionType</name> <block>{
<expr><name>Cmdline</name></expr>,
<expr><name>ReplaceAction</name></expr>,
<expr><name>AddBeforeMainAction</name></expr>,
<expr><name>AddAfterMainAction</name></expr>
}</block></expr>;





<expr><name>virtual</name> <name>ActionType</name> <macro><name>getActionType</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Cmdline</name></expr>;</return> }</block>
}</expr>;


<expr><name>class</name> <name>PreprocessorFrontendAction</name> <operator>:</operator> <name>public</name> <name>FrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>


<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;







<expr><name>class</name> <name>WrapperFrontendAction</name> <operator>:</operator> <name>public</name> <name>FrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>WrappedAction</name></expr>;

<expr><name>bool</name> <macro><name>PrepareToExecuteAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>BeginInvocation</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>BeginSourceFileAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>EndSourceFile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>EndSourceFileAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>shouldEraseOutputFiles</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>


<call><name>WrapperFrontendAction</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>WrappedAction</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>TranslationUnitKind</name> <macro><name>getTranslationUnitKind</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasPCHSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasASTFileSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasIRSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasCodeCompletionSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

}</block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
