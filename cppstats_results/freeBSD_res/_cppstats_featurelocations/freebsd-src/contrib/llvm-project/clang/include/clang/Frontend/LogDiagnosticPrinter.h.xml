<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/LogDiagnosticPrinter.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_LOGDIAGNOSTICPRINTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_LOGDIAGNOSTICPRINTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LogDiagnosticPrinter</name> <range>: <expr><name>public</name> <name>DiagnosticConsumer</name> <block>{
struct <expr><name>DiagEntry</name> <block>{

<expr><name>std</name><operator>::</operator><name>string</name> <name>Message</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>Filename</name></expr>;


<expr><name>unsigned</name> <name>Line</name></expr>;


<expr><name>unsigned</name> <name>Column</name></expr>;


<expr><name>unsigned</name> <name>DiagnosticID</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>WarningOption</name></expr>;


<expr><name>DiagnosticsEngine</name><operator>::</operator><name>Level</name> <name>DiagnosticLevel</name></expr>;
}</block></expr>;

<expr><name>void</name> <call><name>EmitDiagEntry</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LogDiagnosticPrinter</name><operator>::</operator><name>DiagEntry</name> <operator>&amp;</operator><name>DE</name></expr></argument>)</argument_list></call></expr>;




<expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>raw_ostream</name></expr></argument>&gt;</argument_list></name> <name>StreamOwner</name></expr>;
<expr><specifier>const</specifier> <name>LangOptions</name> <operator>*</operator><name>LangOpts</name></expr>;
<expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticOptions</name></expr></argument>&gt;</argument_list></name> <name>DiagOpts</name></expr>;

<expr><name>SourceLocation</name> <name>LastWarningLoc</name></expr>;
<expr><name>FullSourceLoc</name> <name>LastLoc</name></expr>;

<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DiagEntry</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>Entries</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>MainFilename</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>DwarfDebugFlags</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>LogDiagnosticPrinter</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><name>DiagnosticOptions</name> <operator>*</operator><name>Diags</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>raw_ostream</name></expr></argument>&gt;</argument_list></name> <name>StreamOwner</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>setDwarfDebugFlags</name><argument_list>(<argument>StringRef Value</argument>)</argument_list></macro> <block>{
<expr><name>DwarfDebugFlags</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>BeginSourceFile</name><argument_list>(<argument>const LangOptions &amp;LO</argument>, <argument>const Preprocessor *PP</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name>LangOpts</name> <operator>=</operator> <operator>&amp;</operator><name>LO</name></expr>;
}</block>

<name>void</name> <macro><name>EndSourceFile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>HandleDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level DiagLevel</argument>,
<argument>const Diagnostic &amp;Info</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
