<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/IdentifierTable.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_IDENTIFIERTABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_IDENTIFIERTABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/PointerLikeTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/type_traits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DeclarationName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclarationNameTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MultiKeywordSelector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceLocation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ReservedIdentifierStatus</name> <block>{<block_content>
<expr_stmt><expr><name>NotReserved</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>StartsWithUnderscoreAtGlobalScope</name></expr><operator>,</operator>
<expr><name>StartsWithDoubleUnderscore</name></expr><operator>,</operator>
<expr><name>StartsWithUnderscoreFollowedByCapitalLetter</name></expr><operator>,</operator>
<expr><name>ContainsDoubleUnderscore</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>using</name></type> <name>IdentifierLocPair</name> <init>= <expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<enum>enum <block>{ <decl><name>IdentifierInfoAlignment</name> <init>= <expr><literal type="number">8</literal></expr></init></decl> }</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>ObjCOrBuiltinIDBits</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>







<function><type><name>class</name></type> <name>alignas</name><parameter_list>(<parameter><decl><type><name>IdentifierInfoAlignment</name></type></decl></parameter>)</parameter_list> IdentifierInfo <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>IdentifierTable</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TokenID</name> <range>: <expr><literal type="number">9</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>ObjCOrBuiltinID</name> <range>: <expr><name>ObjCOrBuiltinIDBits</name></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>HasMacro</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>HadMacro</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsExtension</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFutureCompatKeyword</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsPoisoned</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsCPPOperatorKeyword</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NeedsHandleIdentifier</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFromAST</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ChangedAfterLoad</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>FEChangedAfterLoad</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>RevertedTokenID</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>OutOfDate</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsModulesImport</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsMangledOpenMPVariantName</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>FETokenInfo</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMapEntry</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>*</operator><name>Entry</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IdentifierInfo</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>TokenID</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>identifier</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ObjCOrBuiltinID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>HasMacro</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>HadMacro</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsExtension</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsFutureCompatKeyword</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsPoisoned</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsCPPOperatorKeyword</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NeedsHandleIdentifier</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsFromAST</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ChangedAfterLoad</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>FEChangedAfterLoad</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RevertedTokenID</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OutOfDate</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>IsModulesImport</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsMangledOpenMPVariantName</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<call><name>IdentifierInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>IdentifierInfo</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>IdentifierInfo</name><argument_list>(<argument><expr><name>IdentifierInfo</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>IdentifierInfo</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>size_t</name> <name>StrLen</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>isStr</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>char</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Str</name></expr></argument>)</argument_list></call><index>[<expr><name>StrLen</name></expr>]</index></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getLength</name><argument_list>()</argument_list></call> <operator>==</operator> <name>StrLen</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><call><name>getNameStart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Str</name></expr></argument>, <argument><expr><name>StrLen</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isStr</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Str</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <call><name>ThisStr</name><argument_list>(<argument><expr><call><name>getNameStart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ThisStr</name> <operator>==</operator> <name>Str</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getNameStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getKeyData</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Entry</name><operator>-&gt;</operator><name>getKeyLength</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><call><name>getNameStart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasMacroDefinition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>HasMacro</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setHasMacroDefinition</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>HasMacro</name> <operator>==</operator> <name>Val</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>HasMacro</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NeedsHandleIdentifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>HadMacro</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>RecomputeNeedsHandleIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>hadMacroDefinition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>HadMacro</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <macro><name>getTokenID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>tok</name><operator>::</operator><name>TokenKind</name><operator>)</operator><name>TokenID</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>hasRevertedTokenIDToIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RevertedTokenID</name></expr>;</return> }</block></expr></expr_stmt>







<function><type><name>void</name></type> <name>revertTokenIDToIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>TokenID</name> <operator>!=</operator> <name>tok</name><operator>::</operator><name>identifier</name> <operator>&amp;&amp;</operator> <literal type="string">"Already at tok::identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TokenID</name> <operator>=</operator> <name>tok</name><operator>::</operator><name>identifier</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RevertedTokenID</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><name>void</name></type> <name>revertIdentifierToTokenID</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>TK</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>TokenID</name> <operator>==</operator> <name>tok</name><operator>::</operator><name>identifier</name> <operator>&amp;&amp;</operator> <literal type="string">"Should be at tok::identifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TokenID</name> <operator>=</operator> <name>TK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>RevertedTokenID</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>




<expr_stmt><expr><name>tok</name><operator>::</operator><name>PPKeywordKind</name> <macro><name>getPPKeywordID</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>tok</name><operator>::</operator><name>ObjCKeywordKind</name> <macro><name>getObjCKeywordID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ObjCOrBuiltinID</name> <operator>&lt;</operator> <name>tok</name><operator>::</operator><name>NUM_OBJC_KEYWORDS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tok</name><operator>::</operator><call><name>ObjCKeywordKind</name><argument_list>(<argument><expr><name>ObjCOrBuiltinID</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>tok</name><operator>::</operator><name>objc_not_keyword</name></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setObjCKeywordID</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>ObjCKeywordKind</name> <name>ID</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>ObjCOrBuiltinID</name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>




<expr_stmt><expr><name>unsigned</name> <macro><name>getBuiltinID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>ObjCOrBuiltinID</name> <operator>&gt;=</operator> <name>tok</name><operator>::</operator><name>NUM_OBJC_KEYWORDS</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ObjCOrBuiltinID</name> <operator>-</operator> <name>tok</name><operator>::</operator><name>NUM_OBJC_KEYWORDS</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setBuiltinID</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ObjCOrBuiltinID</name> <operator>=</operator> <name>ID</name> <operator>+</operator> <name>tok</name><operator>::</operator><name>NUM_OBJC_KEYWORDS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ObjCOrBuiltinID</name> <operator>-</operator> <call><name>unsigned</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>NUM_OBJC_KEYWORDS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ID</name>
<operator>&amp;&amp;</operator> <literal type="string">"ID too large for field!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getObjCOrBuiltinID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ObjCOrBuiltinID</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setObjCOrBuiltinID</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>ObjCOrBuiltinID</name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt> </block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>isExtensionToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsExtension</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setIsExtensionToken</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IsExtension</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NeedsHandleIdentifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RecomputeNeedsHandleIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<expr_stmt><expr><name>bool</name> <macro><name>isFutureCompatKeyword</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsFutureCompatKeyword</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setIsFutureCompatKeyword</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IsFutureCompatKeyword</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NeedsHandleIdentifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RecomputeNeedsHandleIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>setIsPoisoned</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IsPoisoned</name> <operator>=</operator> <name>Value</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Value</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NeedsHandleIdentifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RecomputeNeedsHandleIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isPoisoned</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPoisoned</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setIsCPlusPlusOperatorKeyword</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IsCPPOperatorKeyword</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>isCPlusPlusOperatorKeyword</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsCPPOperatorKeyword</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isKeyword</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isCPlusPlusKeyword</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>getFETokenInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FETokenInfo</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setFETokenInfo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>FETokenInfo</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt> </block_content>}</block></function>






<expr_stmt><expr><name>bool</name> <macro><name>isHandleIdentifierCase</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NeedsHandleIdentifier</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isFromAST</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsFromAST</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setIsFromAST</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsFromAST</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>hasChangedSinceDeserialization</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ChangedAfterLoad</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setChangedSinceDeserialization</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ChangedAfterLoad</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>hasFETokenInfoChangedSinceDeserialization</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FEChangedAfterLoad</name></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setFETokenInfoChangedSinceDeserialization</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>FEChangedAfterLoad</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>isOutOfDate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>OutOfDate</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>setOutOfDate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>OOD</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>OutOfDate</name> <operator>=</operator> <name>OOD</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>OOD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NeedsHandleIdentifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RecomputeNeedsHandleIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isModulesImport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsModulesImport</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setModulesImport</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IsModulesImport</name> <operator>=</operator> <name>I</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>NeedsHandleIdentifier</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RecomputeNeedsHandleIdentifier</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isMangledOpenMPVariantName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsMangledOpenMPVariantName</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setMangledOpenMPVariantName</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsMangledOpenMPVariantName</name> <operator>=</operator> <name>I</name></expr>;</expr_stmt> </block_content>}</block></function>










<expr_stmt><expr><name>bool</name> <macro><name>isEditorPlaceholder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startswith</name><argument_list>(<argument><expr><literal type="string">"&lt;#"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>endswith</name><argument_list>(<argument><expr><literal type="string">"#&gt;"</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>ReservedIdentifierStatus</name></type> <name>isReserved</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>IdentifierInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getName</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>RHS</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>






<function><type><name>void</name></type> <name>RecomputeNeedsHandleIdentifier</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>NeedsHandleIdentifier</name> <operator>=</operator> <call><name>isPoisoned</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>hasMacroDefinition</name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name>isExtensionToken</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isFutureCompatKeyword</name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name>isOutOfDate</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isModulesImport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></function><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>PoisonIdentifierRAIIObject</name> <block>{<block_content>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>II</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>OldValue</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>PoisonIdentifierRAIIObject</name><argument_list>(<argument>IdentifierInfo *II</argument>, <argument>bool NewValue</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>II</name><argument_list>(<argument><expr><name>II</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>OldValue</name><argument_list>(<argument>II ? II-&gt;isPoisoned() : false</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if<condition>(<expr><name>II</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>II</name><operator>-&gt;</operator><name>setIsPoisoned</name></name><argument_list>(<argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>PoisonIdentifierRAIIObject</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if<condition>(<expr><name>II</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>II</name><operator>-&gt;</operator><name>setIsPoisoned</name></name><argument_list>(<argument><expr><name>OldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>











<decl_stmt><decl><type><name>class</name></type> <name>IdentifierIterator</name> <block>{<block_content>
<label><name>protected</name>:</label>
<expr_stmt><expr><call><name>IdentifierIterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>IdentifierIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierIterator</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>IdentifierIterator</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>IdentifierIterator</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>IdentifierIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<function_decl><type><name>virtual</name> <name>StringRef</name></type> <name>Next</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfoLookup</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>IdentifierInfoLookup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>






<function_decl><type><name>virtual</name> <name>IdentifierInfo</name><modifier>*</modifier></type> <name>get</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>











<function_decl><type><name>virtual</name> <name>IdentifierIterator</name> <modifier>*</modifier></type><name>getIdentifiers</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>IdentifierTable</name> <block>{<block_content>


<decl_stmt><decl><type><name>using</name></type> <name>HashTableTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HashTableTy</name></type> <name>HashTable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IdentifierInfoLookup</name><modifier>*</modifier></type> <name>ExternalLookup</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<function_decl><type><name>explicit</name></type> <name>IdentifierTable</name><parameter_list>(<parameter><decl><type><name>IdentifierInfoLookup</name> <modifier>*</modifier></type><name>ExternalLookup</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>explicit</name></type> <name>IdentifierTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>,
<parameter><decl><type><name>IdentifierInfoLookup</name> <modifier>*</modifier></type><name>ExternalLookup</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>setExternalIdentifierLookup</name><parameter_list>(<parameter><decl><type><name>IdentifierInfoLookup</name> <modifier>*</modifier></type><name>IILookup</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>ExternalLookup</name> <operator>=</operator> <name>IILookup</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>IdentifierInfoLookup</name> <operator>*</operator><macro><name>getExternalIdentifierLookup</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ExternalLookup</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name><operator>&amp;</operator> <macro><name>getAllocator</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>HashTable</name><operator>.</operator><name>getAllocator</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>get</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>Entry</name> <operator>=</operator> <operator>*</operator><call><name><name>HashTable</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>Name</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>II</name> <init>= <expr><name><name>Entry</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>II</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>*</operator><name>II</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>ExternalLookup</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>II</name> <operator>=</operator> <call><name><name>ExternalLookup</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>II</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>II</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Mem</name> <init>= <expr><call><name>getAllocator</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>Allocate</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>II</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>Mem</argument>)</argument_list></macro> <call><name>IdentifierInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>II</name><operator>-&gt;</operator><name>Entry</name></name> <operator>=</operator> <operator>&amp;</operator><name>Entry</name></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>II</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>get</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>TokenCode</name></expr></argument>)</argument_list> <block>{<block_content>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>II</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>II</name><operator>.</operator><name>TokenID</name></name> <operator>=</operator> <name>TokenCode</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>II</name><operator>.</operator><name>TokenID</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>TokenCode</name> <operator>&amp;&amp;</operator> <literal type="string">"TokenCode too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>II</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<function><type><name>IdentifierInfo</name> <modifier>&amp;</modifier></type><name>getOwn</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>Entry</name> <operator>=</operator> <operator>*</operator><call><name><name>HashTable</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>Name</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>II</name> <init>= <expr><name><name>Entry</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>II</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>II</name></expr>;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Mem</name> <init>= <expr><call><name>getAllocator</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>Allocate</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>II</name> <operator>=</operator> <macro><name>new</name> <argument_list>(<argument>Mem</argument>)</argument_list></macro> <call><name>IdentifierInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>II</name><operator>-&gt;</operator><name>Entry</name></name> <operator>=</operator> <operator>&amp;</operator><name>Entry</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>Name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"import"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>II</name><operator>-&gt;</operator><name>setModulesImport</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name>II</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>HashTableTy</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>HashTableTy</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>HashTable</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>HashTable</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>HashTable</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>iterator</name></type> <name>find</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>HashTable</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><name>void</name></type> <name>AddKeywords</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


















<enum>enum <name>ObjCMethodFamily</name> <block>{

<decl><name>OMF_None</name></decl>,





<decl><name>OMF_alloc</name></decl>,
<decl><name>OMF_copy</name></decl>,
<decl><name>OMF_init</name></decl>,
<decl><name>OMF_mutableCopy</name></decl>,
<decl><name>OMF_new</name></decl>,



<decl><name>OMF_autorelease</name></decl>,
<decl><name>OMF_dealloc</name></decl>,
<decl><name>OMF_finalize</name></decl>,
<decl><name>OMF_release</name></decl>,
<decl><name>OMF_retain</name></decl>,
<decl><name>OMF_retainCount</name></decl>,
<decl><name>OMF_self</name></decl>,
<decl><name>OMF_initialize</name></decl>,


<decl><name>OMF_performSelector</name></decl>
}</block>;</enum>



<enum>enum <block>{ <decl><name>ObjCMethodFamilyBitWidth</name> <init>= <expr><literal type="number">4</literal></expr></init></decl> }</block>;</enum>


<enum>enum <block>{ <decl><name>InvalidObjCMethodFamily</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ObjCMethodFamilyBitWidth</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> }</block>;</enum>





<enum>enum <name>ObjCInstanceTypeFamily</name> <block>{
<decl><name>OIT_None</name></decl>,
<decl><name>OIT_Array</name></decl>,
<decl><name>OIT_Dictionary</name></decl>,
<decl><name>OIT_Singleton</name></decl>,
<decl><name>OIT_Init</name></decl>,
<decl><name>OIT_ReturnsSelf</name></decl>
}</block>;</enum>

<enum>enum <name>ObjCStringFormatFamily</name> <block>{
<decl><name>SFF_None</name></decl>,
<decl><name>SFF_NSString</name></decl>,
<decl><name>SFF_CFString</name></decl>
}</block>;</enum>








<decl_stmt><decl><type><name>class</name></type> <name>Selector</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Diagnostic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>SelectorTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>DeclarationName</name></decl>;</decl_stmt>

<enum>enum <name>IdentifierInfoFlag</name> <block>{


<decl><name>ZeroArg</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>OneArg</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>MultiArg</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>,
<decl><name>ArgFlags</name> <init>= <expr><literal type="number">0x07</literal></expr></init></decl>
}</block>;</enum>





<decl_stmt><decl><type><name>uintptr_t</name></type> <name>InfoPtr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>Selector</name><argument_list>(<argument>IdentifierInfo *II</argument>, <argument>unsigned nArgs</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>InfoPtr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>InfoPtr</name> <operator>&amp;</operator> <name>ArgFlags</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator><literal type="string">"Insufficiently aligned IdentifierInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nArgs</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="string">"nArgs not equal to 0/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>InfoPtr</name> <operator>|=</operator> <name>nArgs</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>Selector</name><argument_list>(<argument>MultiKeywordSelector *SI</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>InfoPtr</name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>SI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>InfoPtr</name> <operator>&amp;</operator> <name>ArgFlags</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator><literal type="string">"Insufficiently aligned IdentifierInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>InfoPtr</name> <operator>|=</operator> <name>MultiArg</name></expr>;</expr_stmt>
</block_content>}</block>

<expr_stmt><expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getAsIdentifierInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>getIdentifierInfoFlag</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>MultiArg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>InfoPtr</name> <operator>&amp;</operator> <operator>~</operator><name>ArgFlags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>MultiKeywordSelector</name> <operator>*</operator><macro><name>getMultiKeywordSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>MultiKeywordSelector</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>InfoPtr</name> <operator>&amp;</operator> <operator>~</operator><name>ArgFlags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getIdentifierInfoFlag</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>InfoPtr</name> <operator>&amp;</operator> <name>ArgFlags</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><specifier>static</specifier> <name>ObjCMethodFamily</name></type> <name>getMethodFamilyImpl</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>sel</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ObjCStringFormatFamily</name></type> <name>getStringFormatFamilyImpl</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>sel</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>


<expr_stmt><expr><call><name>Selector</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>explicit</name></macro> <macro><name>Selector</name><argument_list>(<argument>uintptr_t V</argument>)</argument_list></macro> : <macro><name>InfoPtr</name><argument_list>(<argument>V</argument>)</argument_list></macro> <block>{<block_content/>}</block>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>Selector</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>InfoPtr</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>InfoPtr</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>Selector</name> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>InfoPtr</name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>InfoPtr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>getAsOpaquePtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>InfoPtr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>InfoPtr</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isKeywordSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getIdentifierInfoFlag</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ZeroArg</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isUnarySelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getIdentifierInfoFlag</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ZeroArg</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isKeywordSelector</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>Names</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isUnarySelector</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>














<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>getIdentifierInfoForSlot</name><argument_list>(<argument><expr><name>unsigned</name> <name>argIndex</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<decl_stmt><decl><type><name>StringRef</name></type> <name>getNameForSlot</name><argument_list>(<argument><expr><name>unsigned</name> <name>argIndex</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>ObjCMethodFamily</name> <macro><name>getMethodFamily</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getMethodFamilyImpl</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ObjCStringFormatFamily</name> <macro><name>getStringFormatFamily</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStringFormatFamilyImpl</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>Selector</name></type> <name>getEmptyMarker</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Selector</name><argument_list>(<argument><expr><call><name>uintptr_t</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Selector</name></type> <name>getTombstoneMarker</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Selector</name><argument_list>(<argument><expr><call><name>uintptr_t</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>ObjCInstanceTypeFamily</name></type> <name>getInstTypeMethodFamily</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>sel</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>SelectorTable</name> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Impl</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SelectorTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SelectorTable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SelectorTable</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>SelectorTable</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>SelectorTable</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>SelectorTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>Selector</name></type> <name>getSelector</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>NumArgs</name></decl></parameter>, <parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>IIV</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Selector</name></type> <name>getUnarySelector</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Selector</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Selector</name></type> <name>getNullarySelector</name><parameter_list>(<parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>Selector</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>size_t</name> <macro><name>getTotalMemory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<function_decl><type><specifier>static</specifier> <name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name></type> <name>constructSetterName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>Selector</name></type> <name>constructSetterSelector</name><parameter_list>(<parameter><decl><type><name>IdentifierTable</name> <modifier>&amp;</modifier></type><name>Idents</name></decl></parameter>,
<parameter><decl><type><name>SelectorTable</name> <modifier>&amp;</modifier></type><name>SelTable</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>getPropertyNameFromSetterSelector</name><argument_list>(<argument>Selector Sel</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>









<function><type><name>class</name></type> <name>alignas</name><parameter_list>(<parameter><decl><type><name>IdentifierInfoAlignment</name></type></decl></parameter>)</parameter_list> DeclarationNameExtra <block>{<block_content>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>clang</name><operator>::</operator><name>DeclarationName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>friend</name> <name>class</name> <name>clang</name><operator>::</operator><name>DeclarationNameTable</name></expr>;</expr_stmt>

<label><name>protected</name>:</label>





<enum>enum <name>ExtraKind</name> <block>{
<decl><name>CXXDeductionGuideName</name></decl>,
<decl><name>CXXLiteralOperatorName</name></decl>,
<decl><name>CXXUsingDirective</name></decl>,
<decl><name>ObjCMultiArgSelector</name></decl>
}</block>;</enum>











<decl_stmt><decl><type><name>unsigned</name></type> <name>ExtraKindOrNumArgs</name></decl>;</decl_stmt>

<macro><name>DeclarationNameExtra</name><argument_list>(<argument>ExtraKind Kind</argument>)</argument_list></macro> : <macro><name>ExtraKindOrNumArgs</name><argument_list>(<argument>Kind</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>DeclarationNameExtra</name><argument_list>(<argument>unsigned NumArgs</argument>)</argument_list></macro>
: <macro><name>ExtraKindOrNumArgs</name><argument_list>(<argument>ObjCMultiArgSelector + NumArgs</argument>)</argument_list></macro> <block>{<block_content/>}</block>


<expr_stmt><expr><name>ExtraKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ExtraKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ExtraKindOrNumArgs</name> <operator>&gt;</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>ObjCMultiArgSelector</name>
<operator>?</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>ObjCMultiArgSelector</name>
<operator>:</operator> <name>ExtraKindOrNumArgs</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getNumArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>ExtraKindOrNumArgs</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>ObjCMultiArgSelector</name> <operator>&amp;&amp;</operator>
<literal type="string">"getNumArgs called but this is not an ObjC selector!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>ExtraKindOrNumArgs</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>ObjCMultiArgSelector</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>



<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Selector</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>Selector</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>Selector</name><operator>::</operator><call><name>getEmptyMarker</name><argument_list>()</argument_list></call></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>Selector</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>Selector</name><operator>::</operator><call><name>getTombstoneMarker</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>Selector</name> <name>S</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><argument_list>(<argument><expr><name>clang</name><operator>::</operator><name>Selector</name> <name>LHS</name></expr></argument>, <argument><expr><name>clang</name><operator>::</operator><name>Selector</name> <name>RHS</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Selector</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>clang::Selector P</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>P</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>Selector</name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>const void *P</argument>)</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>Selector</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NumLowBitsAvailable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
};



<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>IdentifierInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>clang::IdentifierInfo* P</argument>)</argument_list></macro> <block>{
<return>return <expr><name>P</name></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>IdentifierInfo</name> <operator>*</operator><macro><name>getFromVoidPointer</name><argument_list>(<argument>void *P</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>IdentifierInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NumLowBitsAvailable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
};

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>IdentifierInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>const clang::IdentifierInfo* P</argument>)</argument_list></macro> <block>{
<return>return <expr><name>P</name></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <specifier>const</specifier> <name>clang</name><operator>::</operator><name>IdentifierInfo</name> <operator>*</operator><macro><name>getFromVoidPointer</name><argument_list>(<argument>const void *P</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>IdentifierInfo</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NumLowBitsAvailable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
