<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/LambdaCapture.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_LAMBDACAPTURE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_LAMBDACAPTURE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Lambda.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>LambdaCapture</name> <block>{<block_content>
<enum>enum <block>{


<decl><name>Capture_Implicit</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,





<decl><name>Capture_ByCopy</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,



<decl><name>Capture_This</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>
}</block>;</enum>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name> <name>DeclAndBits</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>EllipsisLoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTStmtReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTStmtWriter</name></decl>;</decl_stmt>

<label><name>public</name>:</label>















<macro><name>LambdaCapture</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>bool Implicit</argument>, <argument>LambdaCaptureKind Kind</argument>,
<argument>VarDecl *Var = nullptr</argument>,
<argument>SourceLocation EllipsisLoc = SourceLocation()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>LambdaCaptureKind</name> <macro><name>getCaptureKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>capturesThis</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DeclAndBits</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name><name>DeclAndBits</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Capture_This</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>capturesVariable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>dyn_cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>DeclAndBits</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>capturesVLAType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DeclAndBits</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><call><name><name>DeclAndBits</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Capture_This</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>






<expr_stmt><expr><name>VarDecl</name> <operator>*</operator><macro><name>getCapturedVar</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>capturesVariable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No variable available for capture"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>DeclAndBits</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isImplicit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>DeclAndBits</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>Capture_Implicit</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isExplicit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isImplicit</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>







<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isPackExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>EllipsisLoc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEllipsisLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isPackExpansion</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No ellipsis location for a non-expansion"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>EllipsisLoc</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
