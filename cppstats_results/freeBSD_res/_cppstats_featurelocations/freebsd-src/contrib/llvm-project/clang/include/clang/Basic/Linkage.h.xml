<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Linkage.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_LINKAGE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_LINKAGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



<enum>enum <name>Linkage</name> : <type><name>unsigned</name> <name>char</name></type> <block>{


<decl><name>NoLinkage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,




<decl><name>InternalLinkage</name></decl>,








<decl><name>UniqueExternalLinkage</name></decl>,



<decl><name>VisibleNoLinkage</name></decl>,




<decl><name>ModuleInternalLinkage</name></decl>,





<decl><name>ModuleLinkage</name></decl>,



<decl><name>ExternalLinkage</name></decl>
}</block>;</enum>



<enum>enum <name>LanguageLinkage</name> <block>{
<decl><name>CLanguageLinkage</name></decl>,
<decl><name>CXXLanguageLinkage</name></decl>,
<decl><name>NoLanguageLinkage</name></decl>
}</block>;</enum>




<enum>enum <name>GVALinkage</name> <block>{
<decl><name>GVA_Internal</name></decl>,
<decl><name>GVA_AvailableExternally</name></decl>,
<decl><name>GVA_DiscardableODR</name></decl>,
<decl><name>GVA_StrongExternal</name></decl>,
<decl><name>GVA_StrongODR</name></decl>
}</block>;</enum>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isDiscardableGVALinkage</name><parameter_list>(<parameter><decl><type><name>GVALinkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>L</name> <operator>&lt;=</operator> <name>GVA_DiscardableODR</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isUniqueGVALinkage</name><parameter_list>(<parameter><decl><type><name>GVALinkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>L</name> <operator>==</operator> <name>GVA_Internal</name> <operator>||</operator> <name>L</name> <operator>==</operator> <name>GVA_StrongExternal</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isExternallyVisible</name><parameter_list>(<parameter><decl><type><name>Linkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>L</name> <operator>&gt;=</operator> <name>VisibleNoLinkage</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>Linkage</name></type> <name>getFormalLinkage</name><parameter_list>(<parameter><decl><type><name>Linkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>L</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>UniqueExternalLinkage</name></expr>:</case>
<return>return <expr><name>ExternalLinkage</name></expr>;</return>
<case>case <expr><name>VisibleNoLinkage</name></expr>:</case>
<return>return <expr><name>NoLinkage</name></expr>;</return>
<case>case <expr><name>ModuleInternalLinkage</name></expr>:</case>
<return>return <expr><name>InternalLinkage</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>isExternalFormalLinkage</name><parameter_list>(<parameter><decl><type><name>Linkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getFormalLinkage</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ExternalLinkage</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>inline</specifier> <name>Linkage</name></type> <name>minLinkage</name><parameter_list>(<parameter><decl><type><name>Linkage</name></type> <name>L1</name></decl></parameter>, <parameter><decl><type><name>Linkage</name></type> <name>L2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>L2</name> <operator>==</operator> <name>VisibleNoLinkage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>L2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>L1</name> <operator>==</operator> <name>VisibleNoLinkage</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>L2</name> <operator>==</operator> <name>InternalLinkage</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NoLinkage</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>L2</name> <operator>==</operator> <name>UniqueExternalLinkage</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NoLinkage</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>L1</name> <operator>&lt;</operator> <name>L2</name></expr> ?</condition><then> <expr><name>L1</name></expr> </then><else>: <expr><name>L2</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
