<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/PrettyPrinter.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_PRETTYPRINTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_PRETTYPRINTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TagDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PrinterHelper</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PrinterHelper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>bool</name></type> <name>handledStmt</name><parameter_list>(<parameter><decl><type><name>Stmt</name><modifier>*</modifier></type> <name>E</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name><modifier>&amp;</modifier></type> <name>OS</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>PrintingCallbacks</name> <block>{<block_content>
<label><name>protected</name>:</label>
<expr_stmt><expr><operator>~</operator><call><name>PrintingCallbacks</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>remapPath</name><argument_list>(<argument>StringRef Path</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>








<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isScopeVisible</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclContext</name> <operator>*</operator><name>DC</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<struct>struct <name>PrintingPolicy</name> <block>{

<expr_stmt><expr><call><name>PrintingPolicy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Indentation</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SuppressSpecifiers</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SuppressTagKeyword</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>CPlusPlus</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IncludeTagDefinition</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SuppressScope</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SuppressUnwrittenScope</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SuppressInlineNamespace</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SuppressInitializers</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ConstantArraySizeAsWritten</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AnonymousTagLocations</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SuppressStrongLifetime</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>SuppressLifetimeQualifiers</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SuppressTemplateArgsInCXXConstructors</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SuppressDefaultTemplateArgs</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Bool</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>Bool</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Nullptr</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>CPlusPlus11</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Restrict</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>C99</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Alignof</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>CPlusPlus11</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UnderscoreAlignof</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>C11</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UseVoidForZeroParams</name><argument_list>(<argument><expr><operator>!</operator><name><name>LO</name><operator>.</operator><name>CPlusPlus</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SplitTemplateClosers</name><argument_list>(<argument><expr><operator>!</operator><name><name>LO</name><operator>.</operator><name>CPlusPlus11</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>TerseOutput</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>PolishForDeclaration</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Half</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>Half</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MSWChar</name><argument_list>(<argument><expr><name><name>LO</name><operator>.</operator><name>MicrosoftExt</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>LO</name><operator>.</operator><name>WChar</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IncludeNewlines</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>MSVCFormatting</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ConstantsAsWritten</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SuppressImplicitBase</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FullyQualifiedName</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>PrintCanonicalTypes</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>PrintInjectedClassNameWithArguments</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{}</block>





<name>void</name> <macro><name>adjustForCPlusPlus</name><argument_list>()</argument_list></macro> <block>{
<expr><name>SuppressTagKeyword</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>Bool</name> <operator>=</operator> <name>true</name></expr>;
<expr><name>UseVoidForZeroParams</name> <operator>=</operator> <name>false</name></expr>;
}</block>


<name>unsigned</name> <name>Indentation</name> <operator>:</operator> <literal type="number">8</literal></expr>;</expr_stmt>















<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressSpecifiers</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>









<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressTagKeyword</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>









<decl_stmt><decl><type><name>unsigned</name></type> <name>IncludeTagDefinition</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressScope</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressUnwrittenScope</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressInlineNamespace</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>












<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressInitializers</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>unsigned</name></type> <name>ConstantArraySizeAsWritten</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>AnonymousTagLocations</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressStrongLifetime</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressLifetimeQualifiers</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressTemplateArgsInCXXConstructors</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressDefaultTemplateArgs</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Bool</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Nullptr</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Restrict</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Alignof</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UnderscoreAlignof</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>UseVoidForZeroParams</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>SplitTemplateClosers</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>TerseOutput</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>PolishForDeclaration</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Half</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>MSWChar</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IncludeNewlines</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>MSVCFormatting</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

















<decl_stmt><decl><type><name>unsigned</name></type> <name>ConstantsAsWritten</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>SuppressImplicitBase</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>FullyQualifiedName</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>PrintCanonicalTypes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>PrintInjectedClassNameWithArguments</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>PrintingCallbacks</name> <modifier>*</modifier></type><name>Callbacks</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
