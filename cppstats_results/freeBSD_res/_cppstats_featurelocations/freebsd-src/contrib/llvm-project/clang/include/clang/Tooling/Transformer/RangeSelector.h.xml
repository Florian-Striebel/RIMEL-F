<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Transformer/RangeSelector.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_RANGE_SELECTOR_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_RANGE_SELECTOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchFinder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Transformer/MatchConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>transformer</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>RangeSelector</name> <init>= <expr><name><name>MatchConsumer</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<function><type><specifier>inline</specifier> <name>RangeSelector</name></type> <name>charRange</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><index>[<expr><name>R</name></expr>]</index><operator>(</operator><specifier>const</specifier> <name>ast_matchers</name><operator>::</operator><name>MatchFinder</name><operator>::</operator><name>MatchResult</name> <operator>&amp;</operator><operator>)</operator>
<operator>-&gt;</operator> <name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>CharSourceRange</name></expr></argument>&gt;</argument_list></name> <block>{ <return>return <expr><name>R</name></expr>;</return> }</block></expr></return><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function_decl><type><name>RangeSelector</name></type> <name>enclose</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Begin</name></decl></parameter>, <parameter><decl><type><name>RangeSelector</name></type> <name>End</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>RangeSelector</name></type> <name>encloseNodes</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>BeginID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <name>EndID</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function><type><specifier>inline</specifier> <name>RangeSelector</name></type> <name>range</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Begin</name></decl></parameter>, <parameter><decl><type><name>RangeSelector</name></type> <name>End</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>enclose</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Begin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>End</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>inline</specifier> <name>RangeSelector</name></type> <name>range</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>BeginID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <name>EndID</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>encloseNodes</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>BeginID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>EndID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<function_decl><type><name>RangeSelector</name></type> <name>before</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Selector</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>RangeSelector</name></type> <name>after</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Selector</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>inline</specifier> <name>RangeSelector</name></type> <name>between</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>R1</name></decl></parameter>, <parameter><decl><type><name>RangeSelector</name></type> <name>R2</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>enclose</name><argument_list>(<argument><expr><call><name>after</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>before</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>R2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><name>RangeSelector</name></type> <name>node</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RangeSelector</name></type> <name>statement</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RangeSelector</name></type> <name>member</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><name>RangeSelector</name></type> <name>name</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RangeSelector</name></type> <name>callArgs</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RangeSelector</name></type> <name>statements</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RangeSelector</name></type> <name>initListElements</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>RangeSelector</name></type> <name>elseBranch</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>ID</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<function_decl><type><name>RangeSelector</name></type> <name>expansion</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
