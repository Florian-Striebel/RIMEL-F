<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_ANALYSISMANAGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_ANALYSISMANAGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnalysisDeclContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/PathDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/AnalyzerOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathDiagnosticConsumers.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeInjector</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CheckerManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisManager</name> <range>: <expr><name>public</name> <name>BugReporterData</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>AnalysisDeclContextManager</name> <name>AnaCtxMgr</name></expr>;

<expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr>;
<expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr>;
<expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr>;
<expr><name>PathDiagnosticConsumers</name> <name>PathConsumers</name></expr>;


<expr><name>StoreManagerCreator</name> <name>CreateStoreMgr</name></expr>;
<expr><name>ConstraintManagerCreator</name> <name>CreateConstraintMgr</name></expr>;

<expr><name>CheckerManager</name> <operator>*</operator><name>CheckerMgr</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>AnalyzerOptions</name> <operator>&amp;</operator><name>options</name></expr>;

<macro><name>AnalysisManager</name><argument_list>(<argument>ASTContext &amp;ctx</argument>, <argument>Preprocessor &amp;PP</argument>,
<argument>const PathDiagnosticConsumers &amp;Consumers</argument>,
<argument>StoreManagerCreator storemgr</argument>,
<argument>ConstraintManagerCreator constraintmgr</argument>,
<argument>CheckerManager *checkerMgr</argument>, <argument>AnalyzerOptions &amp;Options</argument>,
<argument>CodeInjector *injector = nullptr</argument>)</argument_list></macro>;

<expr><operator>~</operator><macro><name>AnalysisManager</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>ClearContexts</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>AnaCtxMgr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>AnalysisDeclContextManager</name><operator>&amp;</operator> <macro><name>getAnalysisDeclContextManager</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>AnaCtxMgr</name></expr>;</return>
}</block>

<name>Preprocessor</name> <operator>&amp;</operator><macro><name>getPreprocessor</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>PP</name></expr>;</return> }</block>

<name>StoreManagerCreator</name> <macro><name>getStoreManagerCreator</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>CreateStoreMgr</name></expr>;</return>
}</block>

<name>AnalyzerOptions</name><operator>&amp;</operator> <macro><name>getAnalyzerOptions</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>options</name></expr>;</return>
}</block>

<name>ConstraintManagerCreator</name> <macro><name>getConstraintManagerCreator</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>CreateConstraintMgr</name></expr>;</return>
}</block>

<name>CheckerManager</name> <operator>*</operator><macro><name>getCheckerManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CheckerMgr</name></expr>;</return> }</block>

<name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>Ctx</name></expr>;</return>
}</block>

<name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><call><name>getASTContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSourceManager</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LangOpts</name></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticConsumer</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getPathDiagnosticConsumers</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>PathConsumers</name></expr>;</return>
}</block>

<name>void</name> <call><name>FlushDiagnostics</name><argument_list>()</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>shouldVisualize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>options</name><operator>.</operator><name>visualizeExplodedGraphWithGraphViz</name></name></expr>;</return>
}</block>

<name>bool</name> <macro><name>shouldInlineCall</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>options</name><operator>.</operator><name>getIPAMode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>IPAK_None</name></expr>;</return>
}</block>

<name>CFG</name> <operator>*</operator><macro><name>getCFG</name><argument_list>(<argument>Decl const *D</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>AnaCtxMgr</name><operator>.</operator><name>getContext</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getCFG</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <operator>*</operator><macro><name>getAnalysis</name><argument_list>(<argument>Decl const *D</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>AnaCtxMgr</name><operator>.</operator><name>getContext</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>getAnalysis</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>ParentMap</name> <operator>&amp;</operator><macro><name>getParentMap</name><argument_list>(<argument>Decl const *D</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>AnaCtxMgr</name><operator>.</operator><name>getContext</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getParentMap</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>AnalysisDeclContext</name> <operator>*</operator><macro><name>getAnalysisDeclContext</name><argument_list>(<argument>const Decl *D</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>AnaCtxMgr</name><operator>.</operator><name>getContext</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isInCodeFile</name><argument_list>(<argument>SourceLocation SL</argument>, <argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>SM</name><operator>.</operator><name>isInMainFile</name></name><argument_list>(<argument><expr><name>SL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>





<name>SourceLocation</name> <name>IL</name> <operator>=</operator> <call><name><name>SM</name><operator>.</operator><name>getIncludeLoc</name></name><argument_list>(<argument><expr><call><name><name>SM</name><operator>.</operator><name>getFileID</name></name><argument_list>(<argument><expr><name>SL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>IL</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>SM</name><operator>.</operator><name>isInMainFile</name></name><argument_list>(<argument><expr><name>IL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>SM</name><operator>.</operator><name>getFilename</name></name><argument_list>(<argument><expr><name>IL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"UnifiedSource"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>StringSwitch</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>SM</name><operator>.</operator><name>getFilename</name></name><argument_list>(<argument><expr><name>SL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>rsplit</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>, <argument><expr><literal type="string">"mm"</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><literal type="string">"cc"</literal></expr></argument>, <argument><expr><literal type="string">"cp"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Cases</name><argument_list>(<argument><expr><literal type="string">"cpp"</literal></expr></argument>, <argument><expr><literal type="string">"CPP"</literal></expr></argument>, <argument><expr><literal type="string">"c++"</literal></expr></argument>, <argument><expr><literal type="string">"cxx"</literal></expr></argument>, <argument><expr><literal type="string">"cppm"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call>
<operator>.</operator><call><name>Default</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type> <name>isInCodeFile</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>SL</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name> <init>= <expr><call><name>getASTContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSourceManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>isInCodeFile</name><argument_list>(<argument><expr><name>SL</name></expr></argument>, <argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
