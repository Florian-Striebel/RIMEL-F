<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Edit/EditedSource.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_EDIT_EDITEDSOURCE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_EDIT_EDITEDSOURCE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Edit/FileOffset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PPConditionalDirectiveRecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>edit</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Commit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>EditsReceiver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>EditedSource</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PPConditionalDirectiveRecord</name> <modifier>*</modifier></type><name>PPRec</name></decl>;</decl_stmt>

<struct>struct <name>FileEdit</name> <block>{
<decl_stmt><decl><type><name>StringRef</name></type> <name>Text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>RemoveLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FileEdit</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>using</name></type> <name>FileEditsTy</name> <init>= <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>FileOffset</name></expr></argument>, <argument><expr><name>FileEdit</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FileEditsTy</name></type> <name>FileEdits</name></decl>;</decl_stmt>

<struct>struct <name>MacroArgUse</name> <block>{
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>Identifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>ImmediateExpansionLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>UseLoc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>MacroArgUse</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name>Identifier</name></expr></argument>, <argument><expr><name>ImmediateExpansionLoc</name></expr></argument>, <argument><expr><name>UseLoc</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>std</name><operator>::</operator><call><name>tie</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Identifier</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>ImmediateExpansionLoc</name></name></expr></argument>,
<argument><expr><name><name>Other</name><operator>.</operator><name>UseLoc</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>MacroArgUse</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ExpansionToArgMap</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><name>MacroArgUse</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type>
<name>CurrCommitMacroArgExps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IdentifierTable</name></type> <name>IdentTable</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>StrAlloc</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>EditedSource</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>PPConditionalDirectiveRecord</name> <operator>*</operator><name>PPRec</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SourceMgr</name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LangOpts</name><argument_list>(<argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>PPRec</name><argument_list>(<argument><expr><name>PPRec</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IdentTable</name><argument_list>(<argument>LangOpts</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SourceMgr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LangOpts</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>PPConditionalDirectiveRecord</name> <operator>*</operator><macro><name>getPPCondDirectiveRecord</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>PPRec</name></expr>;</return>
}</block></expr></expr_stmt>

<function_decl><type><name>bool</name></type> <name>canInsertInOffset</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>Offs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>commit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Commit</name> <modifier>&amp;</modifier></type><name>commit</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>applyRewrites</name><parameter_list>(<parameter><decl><type><name>EditsReceiver</name> <modifier>&amp;</modifier></type><name>receiver</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>adjustRemovals</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>clearRewrites</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>StringRef</name></type> <name>copyString</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>str</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>StrAlloc</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function_decl><type><name>StringRef</name></type> <name>copyString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Twine</name> <modifier>&amp;</modifier></type><name>twine</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<function_decl><type><name>bool</name></type> <name>commitInsert</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>Offs</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>commitInsertFromRange</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>Offs</name></decl></parameter>,
<parameter><decl><type><name>FileOffset</name></type> <name>InsertFromRangeOffs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Len</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commitRemove</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>BeginOffs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StringRef</name></type> <name>getSourceText</name><parameter_list>(<parameter><decl><type><name>FileOffset</name></type> <name>BeginOffs</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>EndOffs</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>Invalid</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>FileEditsTy</name><operator>::</operator><name>iterator</name> <macro><name>getActionForOffset</name><argument_list>(<argument>FileOffset Offs</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>deconstructMacroArgLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name> <modifier>&amp;</modifier></type><name>ExpansionLoc</name></decl></parameter>,
<parameter><decl><type><name>MacroArgUse</name> <modifier>&amp;</modifier></type><name>ArgUse</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>startingCommit</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>finishedCommit</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
