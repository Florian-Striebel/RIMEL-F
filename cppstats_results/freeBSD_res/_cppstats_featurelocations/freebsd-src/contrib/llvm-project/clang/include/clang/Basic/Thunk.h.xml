<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Thunk.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_THUNK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_THUNK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CXXMethodDecl</name></decl>;</decl_stmt>


<struct>struct <name>ReturnAdjustment</name> <block>{


<decl_stmt><decl><type><name>int64_t</name></type> <name>NonVirtual</name></decl>;</decl_stmt>



<union>union <name>VirtualAdjustment</name> <block>{

<struct>struct <block>{


<decl_stmt><decl><type><name>int64_t</name></type> <name>VBaseOffsetOffset</name></decl>;</decl_stmt>
}</block> <decl><name>Itanium</name></decl>;</struct>


<struct>struct <block>{


<decl_stmt><decl><type><name>uint32_t</name></type> <name>VBPtrOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>VBIndex</name></decl>;</decl_stmt>
}</block> <decl><name>Microsoft</name></decl>;</struct>

<macro><name>VirtualAdjustment</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>Equals</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VirtualAdjustment</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Other</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>VirtualAdjustment</name> <name>Zero</name></expr>;
<return>return <expr><call><name>Equals</name><argument_list>(<argument><expr><name>Zero</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Less</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VirtualAdjustment</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RHS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block> <decl><name>Virtual</name></decl>;</union>

<expr_stmt><expr><call><name>ReturnAdjustment</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>NonVirtual</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>NonVirtual</name> <operator>&amp;&amp;</operator> <call><name><name>Virtual</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ReturnAdjustment</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ReturnAdjustment</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>&amp;&amp;</operator> <call><name><name>LHS</name><operator>.</operator><name>Virtual</name><operator>.</operator><name>Equals</name></name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>Virtual</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ReturnAdjustment</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ReturnAdjustment</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ReturnAdjustment</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>ReturnAdjustment</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name><name>LHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>NonVirtual</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name><name>LHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>&amp;&amp;</operator> <call><name><name>LHS</name><operator>.</operator><name>Virtual</name><operator>.</operator><name>Less</name></name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>Virtual</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<decl/></struct></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>ThisAdjustment</name> <block>{


<decl_stmt><decl><type><name>int64_t</name></type> <name>NonVirtual</name></decl>;</decl_stmt>



<union>union <name>VirtualAdjustment</name> <block>{

<struct>struct <block>{


<decl_stmt><decl><type><name>int64_t</name></type> <name>VCallOffsetOffset</name></decl>;</decl_stmt>
}</block> <decl><name>Itanium</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>VtordispOffset</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int32_t</name></type> <name>VBPtrOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int32_t</name></type> <name>VBOffsetOffset</name></decl>;</decl_stmt>
}</block> <decl><name>Microsoft</name></decl>;</struct>

<macro><name>VirtualAdjustment</name><argument_list>()</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>Equals</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VirtualAdjustment</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Other</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>VirtualAdjustment</name> <name>Zero</name></expr>;
<return>return <expr><call><name>Equals</name><argument_list>(<argument><expr><name>Zero</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>Less</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VirtualAdjustment</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RHS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RHS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
}</block> <decl><name>Virtual</name></decl>;</union>

<expr_stmt><expr><call><name>ThisAdjustment</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>NonVirtual</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>NonVirtual</name> <operator>&amp;&amp;</operator> <call><name><name>Virtual</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ThisAdjustment</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ThisAdjustment</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>&amp;&amp;</operator> <call><name><name>LHS</name><operator>.</operator><name>Virtual</name><operator>.</operator><name>Equals</name></name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>Virtual</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ThisAdjustment</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ThisAdjustment</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ThisAdjustment</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ThisAdjustment</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name><name>LHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>&lt;</operator> <name><name>RHS</name><operator>.</operator><name>NonVirtual</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name><name>LHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>NonVirtual</name></name> <operator>&amp;&amp;</operator> <call><name><name>LHS</name><operator>.</operator><name>Virtual</name><operator>.</operator><name>Less</name></name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>Virtual</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<decl/></struct>};



<struct>struct <name>ThunkInfo</name> <block>{

<decl_stmt><decl><type><name>ThisAdjustment</name></type> <name>This</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ReturnAdjustment</name></type> <name>Return</name></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>CXXMethodDecl</name> <modifier>*</modifier></type><name>Method</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ThunkInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Method</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<call><name>ThunkInfo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ThisAdjustment</name> <operator>&amp;</operator><name>This</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ReturnAdjustment</name> <operator>&amp;</operator><name>Return</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CXXMethodDecl</name> <operator>*</operator><name>Method</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>This</name><argument_list>(<argument><expr><name>This</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Return</name><argument_list>(<argument><expr><name>Return</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Method</name><argument_list>(<argument>Method</argument>)</argument_list></macro> <expr><block>{}</block>

<name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ThunkInfo</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>ThunkInfo</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>This</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>This</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>Return</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Return</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>Method</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Method</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>This</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Return</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Method</name> <operator>==</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
