<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_VARIANTVALUE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_VARIANTVALUE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchersInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ast_matchers</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dynamic</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>ArgKind</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>AK_Matcher</name></decl>,
<decl><name>AK_Node</name></decl>,
<decl><name>AK_Boolean</name></decl>,
<decl><name>AK_Double</name></decl>,
<decl><name>AK_Unsigned</name></decl>,
<decl><name>AK_String</name></decl>
}</block>;</enum>

<macro><name>ArgKind</name><argument_list>(<argument>Kind K</argument>)</argument_list></macro> : <macro><name>K</name><argument_list>(<argument>K</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>K</name> <operator>!=</operator> <name>AK_Matcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>


<function><type><specifier>static</specifier> <name>ArgKind</name></type> <name>MakeMatcherArg</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>MatcherKind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ArgKind</name><block>{<expr><name>AK_Matcher</name></expr>, <expr><name>MatcherKind</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ArgKind</name></type> <name>MakeNodeArg</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>MatcherKind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>ArgKind</name><block>{<expr><name>AK_Node</name></expr>, <expr><name>MatcherKind</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>Kind</name> <macro><name>getArgKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>K</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>ASTNodeKind</name> <macro><name>getMatcherKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>K</name> <operator>==</operator> <name>AK_Matcher</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>NodeKind</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>ASTNodeKind</name> <macro><name>getNodeKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>K</name> <operator>==</operator> <name>AK_Node</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>NodeKind</name></expr>;</return>
}</block></expr></expr_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>isConvertibleTo</name><argument_list>(<argument><expr><name>ArgKind</name> <name>To</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator><name>Specificity</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ArgKind</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>K</name> <operator>==</operator> <name>AK_Matcher</name> <operator>&amp;&amp;</operator> <name><name>Other</name><operator>.</operator><name>K</name></name> <operator>==</operator> <name>AK_Matcher</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>K</name> <operator>==</operator> <name>AK_Node</name> <operator>&amp;&amp;</operator> <name><name>Other</name><operator>.</operator><name>K</name></name> <operator>==</operator> <name>AK_Node</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NodeKind</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>NodeKind</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>K</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>K</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>asString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<macro><name>ArgKind</name><argument_list>(<argument>Kind K</argument>, <argument>ASTNodeKind NK</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>K</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>NodeKind</name><argument_list>(<argument>NK</argument>)</argument_list></macro> <expr><block>{}</block>
<name>Kind</name> <name>K</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ASTNodeKind</name></type> <name>NodeKind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>using</name> <name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name>DynTypedMatcher</name></expr>;</expr_stmt>














<decl_stmt><decl><type><name>class</name></type> <name>VariantMatcher</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MatcherOps</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>MatcherOps</name><argument_list>(<argument>ASTNodeKind NodeKind</argument>)</argument_list></macro> : <macro><name>NodeKind</name><argument_list>(<argument>NodeKind</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<decl_stmt><decl><type><name>bool</name></type> <name>canConstructFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DynTypedMatcher</name> <operator>&amp;</operator><name>Matcher</name></expr></argument>,
<argument><expr><name>bool</name> <operator>&amp;</operator><name>IsExactMatch</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>DynTypedMatcher</name></type> <name>convertMatcher</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DynTypedMatcher</name> <operator>&amp;</operator><name>Matcher</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name>
<macro><name>constructVariadicOperator</name><argument_list>(<argument>DynTypedMatcher::VariadicOperator Op</argument>,
<argument>ArrayRef&lt;VariantMatcher&gt; InnerMatchers</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ASTNodeKind</name></type> <name>NodeKind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Payload</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Payload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name> <macro><name>getSingleMatcher</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getTypeAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name>
<macro><name>getTypedMatcher</name><argument_list>(<argument>const MatcherOps &amp;Ops</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isConvertibleTo</name><argument_list>(<argument><expr><name>ASTNodeKind</name> <name>Kind</name></expr></argument>,
<argument><expr><name>unsigned</name> <operator>*</operator><name>Specificity</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>VariantMatcher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>VariantMatcher</name></type> <name>SingleMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DynTypedMatcher</name> <modifier>&amp;</modifier></type><name>Matcher</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><specifier>static</specifier> <name>VariantMatcher</name></type>
<name>PolymorphicMatcher</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name> <name>Matchers</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>VariantMatcher</name></type>
<name>VariadicOperatorMatcher</name><argument_list>(<argument><expr><name>DynTypedMatcher</name><operator>::</operator><name>VariadicOperator</name> <name>Op</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VariantMatcher</name></expr></argument>&gt;</argument_list></name> <name>Args</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>Value</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name> <macro><name>getSingleMatcher</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>









<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>bool</name> <macro><name>hasTypedMatcher</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasTypedMatcher</name><argument_list>(<argument><expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasTypedMatcher</name><argument_list>(<argument><expr><name>ASTNodeKind</name> <name>NK</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Value</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>Value</name><operator>-&gt;</operator><name>getTypedMatcher</name></name><argument_list>(<argument><expr><call><name>MatcherOps</name><argument_list>(<argument><expr><name>NK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>hasValue</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name>bool</name></type> <name>isConvertibleTo</name><argument_list>(<argument><expr><name>ASTNodeKind</name> <name>Kind</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator><name>Specificity</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Value</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>Value</name><operator>-&gt;</operator><name>isConvertibleTo</name></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>, <argument><expr><name>Specificity</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>ast_matchers</name><operator>::</operator><name>internal</name><operator>::</operator><name><name>Matcher</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>getTypedMatcher</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>hasTypedMatcher</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"hasTypedMatcher&lt;T&gt;() == false"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>Value</name><operator>-&gt;</operator><name>getTypedMatcher</name></name><argument_list>(<argument><expr><call><name>MatcherOps</name><argument_list>(<argument><expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-&gt;</operator><name>template</name> <call><name><name>convertTo</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>DynTypedMatcher</name></type> <name>getTypedMatcher</name><argument_list>(<argument><expr><name>ASTNodeKind</name> <name>NK</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasTypedMatcher</name><argument_list>(<argument><expr><name>NK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"hasTypedMatcher(NK) == false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>Value</name><operator>-&gt;</operator><name>getTypedMatcher</name></name><argument_list>(<argument><expr><call><name>MatcherOps</name><argument_list>(<argument><expr><name>NK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getTypeAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>explicit</name></type> <name>VariantMatcher</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Payload</name></expr></argument>&gt;</argument_list></name> <name>Value</name></expr></argument>)</argument_list>
<range>: <macro><name>Value</name><argument_list>(<argument>std::move(Value)</argument>)</argument_list></macro> <expr><block>{}</block>


<name>class</name> <name>SinglePayload</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PolymorphicPayload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VariadicOpPayload</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Payload</name></expr></argument>&gt;</argument_list></name> <name>Value</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>















<decl_stmt><decl><type><name>class</name></type> <name>VariantValue</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>VariantValue</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Type</name><argument_list>(<argument>VT_Nothing</argument>)</argument_list></macro> <block>{}</block>

<call><name>VariantValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VariantValue</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>VariantValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>VariantValue</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>VariantValue</name> <operator>&amp;</operator><name>Other</name><operator>)</operator></expr></init></decl>;</decl_stmt>


<macro><name>VariantValue</name><argument_list>(<argument>bool Boolean</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>VariantValue</name><argument_list>(<argument>double Double</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>VariantValue</name><argument_list>(<argument>unsigned Unsigned</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>VariantValue</name><argument_list>(<argument>StringRef String</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>VariantValue</name><argument_list>(<argument>ASTNodeKind NodeKind</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>VariantValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VariantMatcher</name> <operator>&amp;</operator><name>Matchers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<macro><name>VariantValue</name><argument_list>(<argument>int Signed</argument>)</argument_list></macro> : <macro><name>VariantValue</name><argument_list>(<argument>static_cast&lt;unsigned&gt;(Signed)</argument>)</argument_list></macro> <block>{<block_content/>}</block>


<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>hasValue</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Type</name> <operator>!=</operator> <name>VT_Nothing</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isBoolean</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>getBoolean</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setBoolean</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Boolean</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isDouble</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>double</name> <macro><name>getDouble</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setDouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>Double</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isUnsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getUnsigned</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setUnsigned</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Unsigned</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>getString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setString</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>String</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>isNodeKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>ASTNodeKind</name> <operator>&amp;</operator><macro><name>getNodeKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setNodeKind</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>NodeKind</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>bool</name> <macro><name>isMatcher</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>VariantMatcher</name> <operator>&amp;</operator><macro><name>getMatcher</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><name>void</name></type> <name>setMatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VariantMatcher</name> <modifier>&amp;</modifier></type><name>Matcher</name></decl></parameter>)</parameter_list>;</function_decl>







<decl_stmt><decl><type><name>bool</name></type> <name>isConvertibleTo</name><argument_list>(<argument><expr><name>ArgKind</name> <name>Kind</name></expr></argument>, <argument><expr><name>unsigned</name><operator>*</operator> <name>Specificity</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<decl_stmt><decl><type><name>bool</name></type> <name>isConvertibleTo</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ArgKind</name></expr></argument>&gt;</argument_list></name> <name>Kinds</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator><name>Specificity</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getTypeAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>;</function_decl>


<enum>enum <name>ValueType</name> <block>{
<decl><name>VT_Nothing</name></decl>,
<decl><name>VT_Boolean</name></decl>,
<decl><name>VT_Double</name></decl>,
<decl><name>VT_Unsigned</name></decl>,
<decl><name>VT_String</name></decl>,
<decl><name>VT_Matcher</name></decl>,
<decl><name>VT_NodeKind</name></decl>
}</block>;</enum>


<union>union <name>AllValues</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Unsigned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>Double</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Boolean</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>String</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>VariantMatcher</name> <modifier>*</modifier></type><name>Matcher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASTNodeKind</name> <modifier>*</modifier></type><name>NodeKind</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name>ValueType</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AllValues</name></type> <name>Value</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
