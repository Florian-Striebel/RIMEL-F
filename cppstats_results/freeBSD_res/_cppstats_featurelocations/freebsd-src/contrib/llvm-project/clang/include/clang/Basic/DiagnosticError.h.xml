<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/DiagnosticError.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_DIAGNOSTIC_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_DIAGNOSTIC_ERROR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PartialDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticError</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>ErrorInfo</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticError</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>DiagnosticError</name><argument_list>(<argument>PartialDiagnosticAt Diag</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Diag</name><argument_list>(<argument>std::move(Diag)</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <macro><name>log</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"clang diagnostic"</literal></expr>; }</block>

<name>PartialDiagnosticAt</name> <operator>&amp;</operator><macro><name>getDiagnostic</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Diag</name></expr>;</return> }</block>
<specifier>const</specifier> <name>PartialDiagnosticAt</name> <operator>&amp;</operator><macro><name>getDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Diag</name></expr>;</return> }</block>



<specifier>static</specifier> <name>llvm</name><operator>::</operator><name>Error</name> <macro><name>create</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>PartialDiagnostic Diag</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name><name>make_error</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticError</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>PartialDiagnosticAt</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Diag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>




<specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnosticAt</name></expr></argument>&gt;</argument_list></name> <macro><name>take</name><argument_list>(<argument>llvm::Error &amp;Err</argument>)</argument_list></macro> <block>{
<expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>PartialDiagnosticAt</name></expr></argument>&gt;</argument_list></name> <name>Result</name></expr>;
<expr><name>Err</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>handleErrors</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><index>[<expr><operator>&amp;</operator></expr>]</index><operator>(</operator><name>DiagnosticError</name> <operator>&amp;</operator><name>E</name><operator>)</operator> <block>{
<expr><name>Result</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>getDiagnostic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Result</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>char</name> <name>ID</name></expr>;

<expr><name>private</name><operator>:</operator>

<name>std</name><operator>::</operator><name>error_code</name> <macro><name>convertToErrorCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>inconvertibleErrorCode</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>PartialDiagnosticAt</name> <name>Diag</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
