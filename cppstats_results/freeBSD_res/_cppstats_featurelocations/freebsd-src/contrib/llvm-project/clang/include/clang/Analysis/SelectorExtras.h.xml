<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/SelectorExtras.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_ANALYSIS_SELECTOREXTRAS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_ANALYSIS_SELECTOREXTRAS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>IdentifierInfos</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>Selector</name></type> <name>getKeywordSelector</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>,
<parameter><decl><type><name>IdentifierInfos</name> <modifier>*</modifier><modifier>...</modifier></type> <name>IIs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>IdentifierInfos</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"keyword selectors must have at least one argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>&gt;</argument_list></name></type> <name>II</name><argument_list>(<block>{<block_content><expr><operator>&amp;</operator><call><name><name>Ctx</name><operator>.</operator><name>Idents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>IIs</name></expr></argument>)</argument_list></call><operator>...</operator></expr></block_content>}</block></argument_list></decl></decl_stmt>)</block_content></block>;</function>

<return>return <expr><call><name><name>Ctx</name><operator>.</operator><name>Selectors</name><operator>.</operator><name>getSelector</name></name><argument_list>(<argument><expr><call><name><name>II</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>II</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>IdentifierInfos</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>lazyInitKeywordSelector</name><parameter_list>(<parameter><decl><type><name>Selector</name> <modifier>&amp;</modifier></type><name>Sel</name></decl></parameter>, <parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>,
<parameter><decl><type><name>IdentifierInfos</name> <modifier>*</modifier><modifier>...</modifier></type> <name>IIs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Sel</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>Sel</name> <operator>=</operator> <call><name>getKeywordSelector</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>, <argument><expr><name>IIs</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
