<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/InMemoryModuleCache.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_INMEMORYMODULECACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_INMEMORYMODULECACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>











<decl_stmt><decl><type><name>class</name></type> <name>InMemoryModuleCache</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>RefCountedBase</name><argument_list type="generic">&lt;<argument><expr><name>InMemoryModuleCache</name></expr></argument>&gt;</argument_list></name> <block>{
struct <expr><name>PCM</name> <block>{
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;




<expr><name>bool</name> <name>IsFinal</name> <operator>=</operator> <name>false</name></expr>;

<expr><call><name>PCM</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>PCM</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Buffer</name><argument_list>(<argument>std::move(Buffer)</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>PCM</name></expr></argument>&gt;</argument_list></name> <name>PCMs</name></expr>;

<expr><name>public</name><operator>:</operator>









enum <name>State</name> <block>{ <expr><name>Unknown</name></expr>, <expr><name>Tentative</name></expr>, <expr><name>ToBuild</name></expr>, <expr><name>Final</name></expr> }</block></expr>;


<expr><name>State</name> <macro><name>getPCMState</name><argument_list>(<argument>llvm::StringRef Filename</argument>)</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>&amp;</operator><macro><name>addPCM</name><argument_list>(<argument>llvm::StringRef Filename</argument>,
<argument>std::unique_ptr&lt;llvm::MemoryBuffer&gt; Buffer</argument>)</argument_list></macro></expr>;






<expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>&amp;</operator><macro><name>addBuiltPCM</name><argument_list>(<argument>llvm::StringRef Filename</argument>,
<argument>std::unique_ptr&lt;llvm::MemoryBuffer&gt; Buffer</argument>)</argument_list></macro></expr>;






<expr><name>bool</name> <macro><name>tryToDropPCM</name><argument_list>(<argument>llvm::StringRef Filename</argument>)</argument_list></macro></expr>;





<expr><name>void</name> <macro><name>finalizePCM</name><argument_list>(<argument>llvm::StringRef Filename</argument>)</argument_list></macro></expr>;


<expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>*</operator><macro><name>lookupPCM</name><argument_list>(<argument>llvm::StringRef Filename</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>bool</name> <macro><name>isPCMFinal</name><argument_list>(<argument>llvm::StringRef Filename</argument>)</argument_list></macro> <specifier>const</specifier></expr>;




<expr><name>bool</name> <macro><name>shouldBuildPCM</name><argument_list>(<argument>llvm::StringRef Filename</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
