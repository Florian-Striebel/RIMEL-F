<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_NESTEDNAMESPECIFIER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_NESTEDNAMESPECIFIER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DependenceFlags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamespaceAliasDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamespaceDecl</name></decl>;</decl_stmt>
<struct_decl>struct <name>PrintingPolicy</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>Type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeLoc</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>class</name></type> <name>NestedNameSpecifier</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{

enum <expr><name>StoredSpecifierKind</name> <block>{
<expr><name>StoredIdentifier</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>StoredDecl</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<expr><name>StoredTypeSpec</name> <operator>=</operator> <literal type="number">2</literal></expr>,
<expr><name>StoredTypeSpecWithTemplate</name> <operator>=</operator> <literal type="number">3</literal></expr>
}</block></expr>;







<expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>StoredSpecifierKind</name></expr></argument>&gt;</argument_list></name> <name>Prefix</name></expr>;








<expr><name>void</name><operator>*</operator> <name>Specifier</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>public</name><operator>:</operator>


enum <name>SpecifierKind</name> <block>{

<expr><name>Identifier</name></expr>,


<expr><name>Namespace</name></expr>,


<expr><name>NamespaceAlias</name></expr>,


<expr><name>TypeSpec</name></expr>,



<expr><name>TypeSpecWithTemplate</name></expr>,


<expr><name>Global</name></expr>,



<expr><name>Super</name></expr>
}</block></expr>;

<expr><name>private</name><operator>:</operator>

<call><name>NestedNameSpecifier</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Prefix</name><argument_list>(<argument>nullptr</argument>, <argument>StoredIdentifier</argument>)</argument_list></macro> <block>{}</block>



<call><name>NestedNameSpecifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NestedNameSpecifier</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;



<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><call><name>FindOrInsert</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NestedNameSpecifier</name> <operator>&amp;</operator><name>Mockup</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<name>NestedNameSpecifier</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>NestedNameSpecifier</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;






<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>Prefix</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>II</name></expr></argument>)</argument_list></call></expr>;


<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>Prefix</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NamespaceDecl</name> <operator>*</operator><name>NS</name></expr></argument>)</argument_list></call></expr>;


<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>Prefix</name></expr></argument>,
<argument><expr><name>NamespaceAliasDecl</name> <operator>*</operator><name>Alias</name></expr></argument>)</argument_list></call></expr>;


<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>const ASTContext &amp;Context</argument>,
<argument>NestedNameSpecifier *Prefix</argument>,
<argument>bool Template</argument>, <argument>const Type *T</argument>)</argument_list></macro></expr>;







<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>II</name></expr></argument>)</argument_list></call></expr>;



<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><call><name>GlobalSpecifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;



<expr><specifier>static</specifier> <name>NestedNameSpecifier</name> <operator>*</operator><call><name>SuperSpecifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>,
<argument><expr><name>CXXRecordDecl</name> <operator>*</operator><name>RD</name></expr></argument>)</argument_list></call></expr>;








<expr><name>NestedNameSpecifier</name> <operator>*</operator><macro><name>getPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Prefix</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>SpecifierKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>IdentifierInfo</name> <operator>*</operator><macro><name>getAsIdentifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Prefix</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>StoredIdentifier</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>IdentifierInfo</name> <operator>*</operator><operator>)</operator><name>Specifier</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>



<expr_stmt><expr><name>NamespaceDecl</name> <operator>*</operator><macro><name>getAsNamespace</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>NamespaceAliasDecl</name> <operator>*</operator><macro><name>getAsNamespaceAlias</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>CXXRecordDecl</name> <operator>*</operator><macro><name>getAsRecordDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>Type</name> <operator>*</operator><macro><name>getAsType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>Prefix</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>StoredTypeSpec</name> <operator>||</operator>
<call><name><name>Prefix</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>StoredTypeSpecWithTemplate</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><specifier>const</specifier> <name>Type</name> <operator>*</operator><operator>)</operator><name>Specifier</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>NestedNameSpecifierDependence</name> <macro><name>getDependence</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isInstantiationDependent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>containsUnexpandedParameterPack</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>containsErrors</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>PrintingPolicy</name> <operator>&amp;</operator><name>Policy</name></expr></argument>,
<argument><expr><name>bool</name> <name>ResolveTemplateArguments</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><call><name><name>Prefix</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>Specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
};



<decl_stmt><decl><type><name>class</name></type> <name>NestedNameSpecifierLoc</name> <block>{<block_content>
<decl_stmt><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>Qualifier</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>getLocalDataLength</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>Qualifier</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>getDataLength</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>Qualifier</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>NestedNameSpecifierLoc</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<expr_stmt><expr><call><name>NestedNameSpecifierLoc</name><argument_list>(<argument><expr><name>NestedNameSpecifier</name> <operator>*</operator><name>Qualifier</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>Data</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Qualifier</name><argument_list>(<argument><expr><name>Qualifier</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Data</name><argument_list>(<argument>Data</argument>)</argument_list></macro> <expr><block>{}</block>



<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Qualifier</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>hasQualifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Qualifier</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>NestedNameSpecifier</name> <operator>*</operator><macro><name>getNestedNameSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Qualifier</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>getOpaqueData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>







<expr_stmt><expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name></expr>;</expr_stmt>







<expr_stmt><expr><name>SourceRange</name> <macro><name>getLocalSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getSourceRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBegin</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getSourceRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnd</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocalBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getLocalSourceRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBegin</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocalEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getLocalSourceRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnd</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>







<expr_stmt><expr><name>NestedNameSpecifierLoc</name> <macro><name>getPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Qualifier</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name>NestedNameSpecifierLoc</name><argument_list>(<argument><expr><call><name><name>Qualifier</name><operator>-&gt;</operator><name>getPrefix</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>TypeLoc</name> <macro><name>getTypeLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>unsigned</name> <macro><name>getDataLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getDataLength</name><argument_list>(<argument><expr><name>Qualifier</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>NestedNameSpecifierLoc</name> <name>X</name><operator>,</operator>
<name>NestedNameSpecifierLoc</name> <name>Y</name><operator>)</operator> <block>{
<return>return <expr><name><name>X</name><operator>.</operator><name>Qualifier</name></name> <operator>==</operator> <name><name>Y</name><operator>.</operator><name>Qualifier</name></name> <operator>&amp;&amp;</operator> <name><name>X</name><operator>.</operator><name>Data</name></name> <operator>==</operator> <name><name>Y</name><operator>.</operator><name>Data</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>NestedNameSpecifierLoc</name> <name>X</name><operator>,</operator>
<name>NestedNameSpecifierLoc</name> <name>Y</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>X</name> <operator>==</operator> <name>Y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
};




<decl_stmt><decl><type><name>class</name></type> <name>NestedNameSpecifierLocBuilder</name> <block>{<block_content>


<decl_stmt><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>Representation</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>







<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Buffer</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>BufferSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>BufferCapacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>NestedNameSpecifierLocBuilder</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>NestedNameSpecifierLocBuilder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NestedNameSpecifierLocBuilder</name> <operator>&amp;</operator><name>Other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>NestedNameSpecifierLocBuilder</name> <modifier>&amp;</modifier></type>
<name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>NestedNameSpecifierLocBuilder</name> <operator>&amp;</operator><name>Other</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>NestedNameSpecifierLocBuilder</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>BufferCapacity</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>NestedNameSpecifier</name> <operator>*</operator><macro><name>getRepresentation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Representation</name></expr>;</return> }</block></expr></expr_stmt>












<function_decl><type><name>void</name></type> <name>Extend</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>TemplateKWLoc</name></decl></parameter>, <parameter><decl><type><name>TypeLoc</name></type> <name>TL</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>ColonColonLoc</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>Extend</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>Identifier</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>IdentifierLoc</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>ColonColonLoc</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>void</name></type> <name>Extend</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>NamespaceDecl</name> <modifier>*</modifier></type><name>Namespace</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>NamespaceLoc</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>ColonColonLoc</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>void</name></type> <name>Extend</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>NamespaceAliasDecl</name> <modifier>*</modifier></type><name>Alias</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>AliasLoc</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>ColonColonLoc</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>MakeGlobal</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>ColonColonLoc</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>void</name></type> <name>MakeSuper</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>RD</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>SuperLoc</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>ColonColonLoc</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>MakeTrivial</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>, <parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>Qualifier</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>R</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>Adopt</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifierLoc</name></type> <name>Other</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name>NestedNameSpecifierLoc</name><argument_list>(<argument><expr><name>Representation</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSourceRange</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>






<decl_stmt><decl><type><name>NestedNameSpecifierLoc</name></type> <name>getWithLocInContext</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>






<expr_stmt><expr><name>NestedNameSpecifierLoc</name> <macro><name>getTemporary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>NestedNameSpecifierLoc</name><argument_list>(<argument><expr><name>Representation</name></expr></argument>, <argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>Representation</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>BufferSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>getBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>BufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name><operator>,</operator>
<name>NestedNameSpecifier</name> <operator>*</operator><name>NNS</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_nestednamespec</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block></expr></expr_stmt>

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>FirstInfo</name> <operator>=</operator> <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>NestedNameSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>SecondInfo</name> <operator>=</operator> <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>clang</name><operator>::</operator><name>NestedNameSpecifierLoc</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>NestedNameSpecifierLoc</name><argument_list>(<argument><expr><name>FirstInfo</name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>SecondInfo</name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>NestedNameSpecifierLoc</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>NestedNameSpecifierLoc</name><argument_list>(<argument><expr><name>FirstInfo</name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>SecondInfo</name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>NestedNameSpecifierLoc</name> <operator>&amp;</operator><name>PairVal</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>hash_combine</name><argument_list>(
<argument><expr><name>FirstInfo</name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><call><name><name>PairVal</name><operator>.</operator><name>getNestedNameSpecifier</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SecondInfo</name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><call><name><name>PairVal</name><operator>.</operator><name>getOpaqueData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>NestedNameSpecifierLoc</name> <operator>&amp;</operator><name>LHS</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>NestedNameSpecifierLoc</name> <operator>&amp;</operator><name>RHS</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block><empty_stmt>;</empty_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
