<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/LocInfoType.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_LOCINFOTYPE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_LOCINFOTYPE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TypeSourceInfo</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>LocInfoType</name> <range>: <expr><name>public</name> <name>Type</name> <block>{
enum <expr><block>{


<expr><name>LocInfo</name> <operator>=</operator> <name>Type</name><operator>::</operator><name>TypeLast</name> <operator>+</operator> <literal type="number">1</literal></expr>
}</block></expr>;

<expr><name>TypeSourceInfo</name> <operator>*</operator><name>DeclInfo</name></expr>;

<macro><name>LocInfoType</name><argument_list>(<argument>QualType ty</argument>, <argument>TypeSourceInfo *TInfo</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>Type</name><argument_list>(<argument><expr><operator>(</operator><name>TypeClass</name><operator>)</operator><name>LocInfo</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>, <argument><expr><call><name><name>ty</name><operator>-&gt;</operator><name>getDependence</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>DeclInfo</name><argument_list>(<argument>TInfo</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getTypeClass</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name>TypeClass</name><operator>)</operator><name>LocInfo</name> <operator>&amp;&amp;</operator> <literal type="string">"LocInfo didn't fit in TC?"</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<name>friend</name> <name>class</name> <name>Sema</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getCanonicalTypeInternal</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>TypeSourceInfo</name> <operator>*</operator><macro><name>getTypeSourceInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DeclInfo</name></expr>;</return> }</block>

<name>void</name> <macro><name>getAsStringInternal</name><argument_list>(<argument>std::string &amp;Str</argument>,
<argument>const PrintingPolicy &amp;Policy</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Type *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getTypeClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name>TypeClass</name><operator>)</operator><name>LocInfo</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
