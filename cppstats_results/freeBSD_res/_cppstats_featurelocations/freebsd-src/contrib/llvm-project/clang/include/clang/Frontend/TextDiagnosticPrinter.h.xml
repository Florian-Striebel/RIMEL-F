<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/TextDiagnosticPrinter.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_TEXTDIAGNOSTICPRINTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_TEXTDIAGNOSTICPRINTER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TextDiagnostic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TextDiagnosticPrinter</name> <range>: <expr><name>public</name> <name>DiagnosticConsumer</name> <block>{
<expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr>;
<expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticOptions</name></expr></argument>&gt;</argument_list></name> <name>DiagOpts</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TextDiagnostic</name></expr></argument>&gt;</argument_list></name> <name>TextDiag</name></expr>;


<expr><name>std</name><operator>::</operator><name>string</name> <name>Prefix</name></expr>;

<expr><name>unsigned</name> <name>OwnsOutputStream</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>TextDiagnosticPrinter</name><argument_list>(<argument>raw_ostream &amp;os</argument>, <argument>DiagnosticOptions *diags</argument>,
<argument>bool OwnsOutputStream = false</argument>)</argument_list></macro></expr>;
<expr><operator>~</operator><macro><name>TextDiagnosticPrinter</name><argument_list>()</argument_list></macro> <name>override</name></expr>;




<expr><name>void</name> <macro><name>setPrefix</name><argument_list>(<argument>std::string Value</argument>)</argument_list></macro> <block>{ <expr><name>Prefix</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>; }</block>

<name>void</name> <macro><name>BeginSourceFile</name><argument_list>(<argument>const LangOptions &amp;LO</argument>, <argument>const Preprocessor *PP</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>EndSourceFile</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level Level</argument>,
<argument>const Diagnostic &amp;Info</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
