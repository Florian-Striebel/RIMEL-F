<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/WorkList.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_WORKLIST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_WORKLIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/BlockCounter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CFGBlock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>WorkListUnit</name> <block>{<block_content>
<decl_stmt><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BlockCounter</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>blockIdx</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>WorkListUnit</name><argument_list>(<argument>ExplodedNode *N</argument>, <argument>BlockCounter C</argument>,
<argument>const CFGBlock *B</argument>, <argument>unsigned idx</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>node</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>counter</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>block</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>blockIdx</name><argument_list>(<argument>idx</argument>)</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <macro><name>WorkListUnit</name><argument_list>(<argument>ExplodedNode *N</argument>, <argument>BlockCounter C</argument>)</argument_list></macro>
<operator>:</operator> <call><name>node</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>counter</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>block</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>blockIdx</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>


<name>ExplodedNode</name> <operator>*</operator><macro><name>getNode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>node</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>BlockCounter</name> <macro><name>getBlockCounter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>counter</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>CFGBlock</name> <operator>*</operator><macro><name>getBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>block</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>blockIdx</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>WorkList</name> <block>{<block_content>
<decl_stmt><decl><type><name>BlockCounter</name></type> <name>CurrentCounter</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>WorkList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasWork</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WorkListUnit</name><modifier>&amp;</modifier></type> <name>U</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>enqueue</name><argument_list>(<argument><expr><call><name>WorkListUnit</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>CurrentCounter</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>N</name><operator>-&gt;</operator><name>getLocation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKind</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ProgramPoint</name><operator>::</operator><name>PostStmtKind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>enqueue</name><argument_list>(<argument><expr><call><name>WorkListUnit</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>CurrentCounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>virtual</name> <name>WorkListUnit</name></type> <name>dequeue</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function><type><name>void</name></type> <name>setBlockCounter</name><parameter_list>(<parameter><decl><type><name>BlockCounter</name></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>CurrentCounter</name> <operator>=</operator> <name>C</name></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>BlockCounter</name> <macro><name>getBlockCounter</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CurrentCounter</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WorkList</name></expr></argument>&gt;</argument_list></name> <call><name>makeDFS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WorkList</name></expr></argument>&gt;</argument_list></name> <call><name>makeBFS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WorkList</name></expr></argument>&gt;</argument_list></name> <call><name>makeBFSBlockDFSContents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WorkList</name></expr></argument>&gt;</argument_list></name> <call><name>makeUnexploredFirst</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WorkList</name></expr></argument>&gt;</argument_list></name> <call><name>makeUnexploredFirstPriorityQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>WorkList</name></expr></argument>&gt;</argument_list></name> <call><name>makeUnexploredFirstPriorityLocationQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
