<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Core/Diagnostic.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_CORE_DIAGNOSTIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_CORE_DIAGNOSTIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Replacement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<struct>struct <name>FileByteRange</name> <block>{
<expr_stmt><expr><call><name>FileByteRange</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>FileByteRange</name><argument_list>(<argument>const SourceManager &amp;Sources</argument>, <argument>CharSourceRange Range</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FilePath</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>FileOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Length</name></decl>;</decl_stmt>
}</block>;</struct>



<struct>struct <name>DiagnosticMessage</name> <block>{
<macro><name>DiagnosticMessage</name><argument_list>(<argument>llvm::StringRef Message = <literal type="string">""</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>







<macro><name>DiagnosticMessage</name><argument_list>(<argument>llvm::StringRef Message</argument>, <argument>const SourceManager &amp;Sources</argument>,
<argument>SourceLocation Loc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Message</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FilePath</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>FileOffset</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <name>Fix</name></expr>;</expr_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FileByteRange</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Ranges</name></expr>;</expr_stmt>
}</block>;</struct>



<struct>struct <name>Diagnostic</name> <block>{
<enum>enum <name>Level</name> <block>{
<decl><name>Remark</name> <init>= <expr><name>DiagnosticsEngine</name><operator>::</operator><name>Remark</name></expr></init></decl>,
<decl><name>Warning</name> <init>= <expr><name>DiagnosticsEngine</name><operator>::</operator><name>Warning</name></expr></init></decl>,
<decl><name>Error</name> <init>= <expr><name>DiagnosticsEngine</name><operator>::</operator><name>Error</name></expr></init></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>Diagnostic</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>Diagnostic</name><argument_list>(<argument>llvm::StringRef DiagnosticName</argument>, <argument>Level DiagLevel</argument>,
<argument>StringRef BuildDirectory</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>Diagnostic</name><argument_list>(<argument>llvm::StringRef DiagnosticName</argument>, <argument>const DiagnosticMessage &amp;Message</argument>,
<argument>const SmallVector&lt;DiagnosticMessage</argument>, <argument><literal type="number">1</literal>&gt; &amp;Notes</argument>, <argument>Level DiagLevel</argument>,
<argument>llvm::StringRef BuildDirectory</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>DiagnosticName</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>DiagnosticMessage</name></type> <name>Message</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticMessage</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>Notes</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Level</name></type> <name>DiagLevel</name></decl>;</decl_stmt>








<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>BuildDirectory</name></expr>;</expr_stmt>
}</block>;</struct>


<struct>struct <name>TranslationUnitDiagnostics</name> <block>{

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>MainSourceFile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Diagnostic</name></expr></argument>&gt;</argument_list></name> <name>Diagnostics</name></expr>;</expr_stmt>
}</block>;</struct>



<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>Replacements</name></expr></argument>&gt;</argument_list></name> <operator>*</operator><call><name>selectFirstFix</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Diagnostic</name><operator>&amp;</operator> <name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
