<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CROSSTU_CROSSTRANSLATIONUNIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CROSSTU_CROSSTRANSLATIONUNIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTImporterSharedState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/MacroExpansionContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallPtrSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Path.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTImporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTUnit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TranslationUnitDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>cross_tu</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>index_error_code</name> <block>{<block_content>
<expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>
<expr><name>unspecified</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>missing_index_file</name></expr><operator>,</operator>
<expr><name>invalid_index_format</name></expr><operator>,</operator>
<expr><name>multiple_definitions</name></expr><operator>,</operator>
<expr><name>missing_definition</name></expr><operator>,</operator>
<expr><name>failed_import</name></expr><operator>,</operator>
<expr><name>failed_to_get_external_ast</name></expr><operator>,</operator>
<expr><name>failed_to_generate_usr</name></expr><operator>,</operator>
<expr><name>triple_mismatch</name></expr><operator>,</operator>
<expr><name>lang_mismatch</name></expr><operator>,</operator>
<expr><name>lang_dialect_mismatch</name></expr><operator>,</operator>
<expr><name>load_threshold_reached</name></expr><operator>,</operator>
<expr><name>invocation_list_ambiguous</name></expr><operator>,</operator>
<expr><name>invocation_list_file_not_found</name></expr><operator>,</operator>
<expr><name>invocation_list_empty</name></expr><operator>,</operator>
<expr><name>invocation_list_wrong_format</name></expr><operator>,</operator>
<expr><name>invocation_list_lookup_unsuccessful</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IndexError</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>ErrorInfo</name><argument_list type="generic">&lt;<argument><expr><name>IndexError</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>char</name> <name>ID</name></expr>;
<macro><name>IndexError</name><argument_list>(<argument>index_error_code C</argument>)</argument_list></macro> <operator>:</operator> <expr><call><name>Code</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>, <macro><name>LineNo</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>IndexError</name><argument_list>(<argument>index_error_code C</argument>, <argument>std::string FileName</argument>, <argument>int LineNo = <literal type="number">0</literal></argument>)</argument_list></macro>
<operator>:</operator> <call><name>Code</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>FileName</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>FileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>LineNo</name><argument_list>(<argument>LineNo</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>IndexError</name><argument_list>(<argument>index_error_code C</argument>, <argument>std::string FileName</argument>, <argument>std::string TripleToName</argument>,
<argument>std::string TripleFromName</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Code</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>FileName</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>FileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><call><name>TripleToName</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>TripleToName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>TripleFromName</name><argument_list>(<argument>std::move(TripleFromName)</argument>)</argument_list></macro> <expr><block>{}</block>
<name>void</name> <macro><name>log</name><argument_list>(<argument>raw_ostream &amp;OS</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>convertToErrorCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>index_error_code</name> <macro><name>getCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Code</name></expr>;</return> }</block>
<name>int</name> <macro><name>getLineNum</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LineNo</name></expr>;</return> }</block>
<name>std</name><operator>::</operator><name>string</name> <macro><name>getFileName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FileName</name></expr>;</return> }</block>
<name>std</name><operator>::</operator><name>string</name> <macro><name>getTripleToName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TripleToName</name></expr>;</return> }</block>
<name>std</name><operator>::</operator><name>string</name> <macro><name>getTripleFromName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TripleFromName</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<name>index_error_code</name> <name>Code</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;
<expr><name>int</name> <name>LineNo</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>TripleToName</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <name>TripleFromName</name></expr>;
}</block></expr></range></decl>;</decl_stmt>










<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>parseCrossTUIndex</name><argument_list>(<argument>StringRef IndexPath</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>createCrossTUIndexString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>InvocationListTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>InvocationListTy</name></expr></argument>&gt;</argument_list></name> <macro><name>parseInvocationList</name><argument_list>(
<argument>StringRef FileContent</argument>,
<argument>llvm::sys::path::Style PathStyle = llvm::sys::path::Style::posix</argument>)</argument_list></macro></expr>;</expr_stmt>


<function_decl><type><name>bool</name></type> <name>containsConst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>VD</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>ACtx</name></decl></parameter>)</parameter_list>;</function_decl>











<decl_stmt><decl><type><name>class</name></type> <name>CrossTranslationUnitContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CrossTranslationUnitContext</name><argument_list>(<argument><expr><name>CompilerInstance</name> <operator>&amp;</operator><name>CI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>CrossTranslationUnitContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>getCrossTUDefinition</name><argument_list>(<argument>const FunctionDecl *FD</argument>, <argument>StringRef CrossTUDir</argument>,
<argument>StringRef IndexName</argument>, <argument>bool DisplayCTUProgress = false</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>getCrossTUDefinition</name><argument_list>(<argument>const VarDecl *VD</argument>, <argument>StringRef CrossTUDir</argument>,
<argument>StringRef IndexName</argument>, <argument>bool DisplayCTUProgress = false</argument>)</argument_list></macro></expr>;</expr_stmt>














<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>loadExternalAST</name><argument_list>(<argument>StringRef LookupName</argument>,
<argument>StringRef CrossTUDir</argument>,
<argument>StringRef IndexName</argument>,
<argument>bool DisplayCTUProgress = false</argument>)</argument_list></macro></expr>;</expr_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>importDefinition</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator><name>FD</name></expr></argument>,
<argument><expr><name>ASTUnit</name> <operator>*</operator><name>Unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>importDefinition</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><name>VD</name></expr></argument>,
<argument><expr><name>ASTUnit</name> <operator>*</operator><name>Unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>getLookupName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>emitCrossTUDiagnostics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IndexError</name> <modifier>&amp;</modifier></type><name>IE</name></decl></parameter>)</parameter_list>;</function_decl>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>MacroExpansionContext</name></expr></argument>&gt;</argument_list></name>
<macro><name>getMacroExpansionContextForSourceLocation</name><argument_list>(
<argument>const clang::SourceLocation &amp;ToLoc</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>lazyInitImporterSharedSt</name><parameter_list>(<parameter><decl><type><name>TranslationUnitDecl</name> <modifier>*</modifier></type><name>ToTU</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ASTImporter</name> <modifier>&amp;</modifier></type><name>getOrCreateASTImporter</name><parameter_list>(<parameter><decl><type><name>ASTUnit</name> <modifier>*</modifier></type><name>Unit</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getCrossTUDefinitionImpl</name><argument_list>(<argument>const T *D</argument>,
<argument>StringRef CrossTUDir</argument>,
<argument>StringRef IndexName</argument>,
<argument>bool DisplayCTUProgress</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>T</name> <modifier>*</modifier></type><name>findDefInDeclContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>LookupName</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>importDefinitionImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator><name>D</name></expr></argument>, <argument><expr><name>ASTUnit</name> <operator>*</operator><name>Unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>ImporterMapTy</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>TranslationUnitDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTImporter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ImporterMapTy</name></type> <name>ASTUnitImporterMap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTImporterSharedState</name></expr></argument>&gt;</argument_list></name> <name>ImporterSharedSt</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>LoadResultTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ASTLoader</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ASTLoader</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>, <argument>StringRef CTUDir</argument>,
<argument>StringRef InvocationListFilePath</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<function_decl><type><name>LoadResultTy</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Identifier</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>lazyInitInvocationList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>


<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>path</name><operator>::</operator><name>Style</name> <name>PathStyle</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>sys</name><operator>::</operator><name>path</name><operator>::</operator><name>Style</name><operator>::</operator><name>posix</name></expr>;</expr_stmt>


<function_decl><type><name>LoadResultTy</name></type> <name>loadFromDump</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Identifier</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LoadResultTy</name></type> <name>loadFromSource</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Identifier</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>CTUDir</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>StringRef</name></type> <name>InvocationListFilePath</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>InvocationListTy</name></expr></argument>&gt;</argument_list></name> <name>InvocationList</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>index_error_code</name></type> <name>PreviousParsingResult</name> <init>= <expr><name>index_error_code</name><operator>::</operator><name>success</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ASTLoadGuard</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ASTLoadGuard</name><argument_list>(<argument>unsigned Limit</argument>)</argument_list></macro> : <macro><name>Limit</name><argument_list>(<argument>Limit</argument>)</argument_list></macro> <block>{<block_content/>}</block>



<expr_stmt><expr><name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Count</name> <operator>&lt;</operator> <name>Limit</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>indicateLoadSuccess</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>++</operator><name>Count</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>unsigned</name></type> <name>Count</name><block>{<block_content><expr><literal type="number">0u</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>Limit</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ASTUnitStorage</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ASTUnitStorage</name><argument_list>(<argument><expr><name>CompilerInstance</name> <operator>&amp;</operator><name>CI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getASTUnitForFunction</name><argument_list>(<argument>StringRef FunctionName</argument>,
<argument>StringRef CrossTUDir</argument>,
<argument>StringRef IndexName</argument>,
<argument>bool DisplayCTUProgress</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getFileForFunction</name><argument_list>(<argument>StringRef FunctionName</argument>,
<argument>StringRef CrossTUDir</argument>,
<argument>StringRef IndexName</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>ensureCTUIndexLoaded</name><argument_list>(<argument>StringRef CrossTUDir</argument>, <argument>StringRef IndexName</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>ASTUnit</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getASTUnitForFile</name><argument_list>(<argument>StringRef FileName</argument>,
<argument>bool DisplayCTUProgress</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>T</name></expr></argument>&gt;</argument_list></name> <name>using</name></type> <name>BaseMapTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>T</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>OwningMapTy</name> <init>= <expr><name><name>BaseMapTy</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ASTUnit</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>NonOwningMapTy</name> <init>= <expr><name><name>BaseMapTy</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ASTUnit</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OwningMapTy</name></type> <name>FileASTUnitMap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NonOwningMapTy</name></type> <name>NameASTUnitMap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>IndexMapTy</name> <init>= <expr><name><name>BaseMapTy</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IndexMapTy</name></type> <name>NameFileMap</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ASTLoader</name></type> <name>Loader</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>ASTLoadGuard</name></type> <name>LoadGuard</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>ASTUnitStorage</name></type> <name>ASTStorage</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
