<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/DelayedDiagnostic.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_DELAYEDDIAGNOSTIC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_DELAYEDDIAGNOSTIC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclAccessPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/PartialDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Sema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ObjCInterfaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCPropertyDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>sema</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>AccessedEntity</name> <block>{<block_content>
<label><name>public</name>:</label>


<enum>enum <name>MemberNonce</name> <block>{ <decl><name>Member</name></decl> }</block>;</enum>



<enum>enum <name>BaseNonce</name> <block>{ <decl><name>Base</name></decl> }</block>;</enum>

<macro><name>AccessedEntity</name><argument_list>(<argument>PartialDiagnostic::DiagStorageAllocator &amp;Allocator</argument>,
<argument>MemberNonce _</argument>, <argument>CXXRecordDecl *NamingClass</argument>,
<argument>DeclAccessPair FoundDecl</argument>, <argument>QualType BaseObjectType</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Access</name><argument_list>(<argument><expr><call><name><name>FoundDecl</name><operator>.</operator><name>getAccess</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsMember</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Target</name><argument_list>(<argument><expr><call><name><name>FoundDecl</name><operator>.</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>NamingClass</name><argument_list>(<argument><expr><name>NamingClass</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>BaseObjectType</name><argument_list>(<argument><expr><name>BaseObjectType</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Diag</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>Allocator</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>AccessedEntity</name><argument_list>(<argument>PartialDiagnostic::DiagStorageAllocator &amp;Allocator</argument>,
<argument>BaseNonce _</argument>, <argument>CXXRecordDecl *BaseClass</argument>,
<argument>CXXRecordDecl *DerivedClass</argument>, <argument>AccessSpecifier Access</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Access</name><argument_list>(<argument><expr><name>Access</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsMember</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Target</name><argument_list>(<argument><expr><name>BaseClass</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>NamingClass</name><argument_list>(<argument><expr><name>DerivedClass</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Diag</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>Allocator</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isMemberAccess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsMember</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isQuiet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Diag</name><operator>.</operator><name>getDiagID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>AccessSpecifier</name> <macro><name>getAccess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>AccessSpecifier</name><argument_list>(<argument><expr><name>Access</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getTargetDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Target</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>CXXRecordDecl</name> <operator>*</operator><macro><name>getNamingClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NamingClass</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>CXXRecordDecl</name> <operator>*</operator><macro><name>getBaseClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>IsMember</name></expr></argument>)</argument_list></call></expr>; <return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXRecordDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Target</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>CXXRecordDecl</name> <operator>*</operator><macro><name>getDerivedClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NamingClass</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>QualType</name> <macro><name>getBaseObjectType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BaseObjectType</name></expr>;</return> }</block></expr></expr_stmt>







<function><type><name>void</name></type> <name>setDiag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartialDiagnostic</name> <modifier>&amp;</modifier></type><name>PDiag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isQuiet</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"partial diagnostic already defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Diag</name> <operator>=</operator> <name>PDiag</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>PartialDiagnostic</name> <modifier>&amp;</modifier></type><name>setDiag</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isQuiet</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"partial diagnostic already defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>DiagID</name> <operator>&amp;&amp;</operator> <literal type="string">"creating null diagnostic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Diag</name><operator>.</operator><name>Reset</name></name><argument_list>(<argument><expr><name>DiagID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Diag</name></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>PartialDiagnostic</name> <operator>&amp;</operator><macro><name>getDiag</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Diag</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Access</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsMember</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>Target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>NamingClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QualType</name></type> <name>BaseObjectType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PartialDiagnostic</name></type> <name>Diag</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>DelayedDiagnostic</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>DDKind</name> : <type><name>unsigned</name> <name>char</name></type> <block>{ <decl><name>Availability</name></decl>, <decl><name>Access</name></decl>, <decl><name>ForbiddenType</name></decl> }</block>;</enum>

<decl_stmt><decl><type><name>DDKind</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Triggered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>Destroy</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>DelayedDiagnostic</name></type> <name>makeAvailability</name><parameter_list>(<parameter><decl><type><name>AvailabilityResult</name></type> <name>AR</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name></type> <name>Locs</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ReferringDecl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>OffendingDecl</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <modifier>*</modifier></type><name>UnknownObjCClass</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCPropertyDecl</name> <modifier>*</modifier></type><name>ObjCProperty</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>Msg</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>ObjCPropertyAccess</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>DelayedDiagnostic</name></type> <name>makeAccess</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>AccessedEntity</name> <modifier>&amp;</modifier></type><name>Entity</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DelayedDiagnostic</name></type> <name>DD</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>Access</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>Triggered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>Loc</name></name> <operator>=</operator> <name>Loc</name></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;DD.getAccessData()</argument>)</argument_list></macro> <expr_stmt><expr><call><name>AccessedEntity</name><argument_list>(<argument><expr><name>Entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DD</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DelayedDiagnostic</name></type> <name>makeForbiddenType</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>diagnostic</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>argument</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DelayedDiagnostic</name></type> <name>DD</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>ForbiddenType</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>Triggered</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>Loc</name></name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>ForbiddenTypeData</name><operator>.</operator><name>Diagnostic</name></name> <operator>=</operator> <name>diagnostic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>ForbiddenTypeData</name><operator>.</operator><name>OperandType</name></name> <operator>=</operator> <call><name><name>type</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>DD</name><operator>.</operator><name>ForbiddenTypeData</name><operator>.</operator><name>Argument</name></name> <operator>=</operator> <name>argument</name></expr>;</expr_stmt>
<return>return <expr><name>DD</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>AccessedEntity</name> <modifier>&amp;</modifier></type><name>getAccessData</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Access</name> <operator>&amp;&amp;</operator> <literal type="string">"Not an access diagnostic."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>AccessedEntity</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>AccessData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>AccessedEntity</name> <operator>&amp;</operator><macro><name>getAccessData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Access</name> <operator>&amp;&amp;</operator> <literal type="string">"Not an access diagnostic."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>AccessedEntity</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>AccessData</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><macro><name>getAvailabilityReferringDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Availability</name> <operator>&amp;&amp;</operator> <literal type="string">"Not an availability diagnostic."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>AvailabilityData</name><operator>.</operator><name>ReferringDecl</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><macro><name>getAvailabilityOffendingDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>AvailabilityData</name><operator>.</operator><name>OffendingDecl</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getAvailabilityMessage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Availability</name> <operator>&amp;&amp;</operator> <literal type="string">"Not an availability diagnostic."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name><name>AvailabilityData</name><operator>.</operator><name>Message</name></name></expr></argument>, <argument><expr><name><name>AvailabilityData</name><operator>.</operator><name>MessageLen</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>&gt;</argument_list></name> <macro><name>getAvailabilitySelectorLocs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Availability</name> <operator>&amp;&amp;</operator> <literal type="string">"Not an availability diagnostic."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name><name>AvailabilityData</name><operator>.</operator><name>SelectorLocs</name></name></expr></argument>,
<argument><expr><name><name>AvailabilityData</name><operator>.</operator><name>NumSelectorLocs</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>AvailabilityResult</name> <macro><name>getAvailabilityResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>Availability</name> <operator>&amp;&amp;</operator> <literal type="string">"Not an availability diagnostic."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>AvailabilityData</name><operator>.</operator><name>AR</name></name></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name>unsigned</name> <macro><name>getForbiddenTypeDiagnostic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>ForbiddenType</name> <operator>&amp;&amp;</operator> <literal type="string">"not a forbidden-type diagnostic"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ForbiddenTypeData</name><operator>.</operator><name>Diagnostic</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getForbiddenTypeArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>ForbiddenType</name> <operator>&amp;&amp;</operator> <literal type="string">"not a forbidden-type diagnostic"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ForbiddenTypeData</name><operator>.</operator><name>Argument</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>QualType</name> <macro><name>getForbiddenTypeOperand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Kind</name> <operator>==</operator> <name>ForbiddenType</name> <operator>&amp;&amp;</operator> <literal type="string">"not a forbidden-type diagnostic"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>QualType</name><operator>::</operator><call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><name><name>ForbiddenTypeData</name><operator>.</operator><name>OperandType</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <operator>*</operator><macro><name>getUnknownObjCClass</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>AvailabilityData</name><operator>.</operator><name>UnknownObjCClass</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ObjCPropertyDecl</name> <operator>*</operator><macro><name>getObjCProperty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>AvailabilityData</name><operator>.</operator><name>ObjCProperty</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>getObjCPropertyAccess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>AvailabilityData</name><operator>.</operator><name>ObjCPropertyAccess</name></name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<struct>struct <name>AD</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ReferringDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>OffendingDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ObjCInterfaceDecl</name> <modifier>*</modifier></type><name>UnknownObjCClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ObjCPropertyDecl</name> <modifier>*</modifier></type><name>ObjCProperty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>MessageLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name> <modifier>*</modifier></type><name>SelectorLocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>NumSelectorLocs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AvailabilityResult</name></type> <name>AR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ObjCPropertyAccess</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FTD</name> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>Diagnostic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Argument</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>OperandType</name></decl>;</decl_stmt>
}</block>;</struct>

<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>AD</name></name></type> <name>AvailabilityData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>FTD</name></name></type> <name>ForbiddenTypeData</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>char</name></type> <name><name>AccessData</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>AccessedEntity</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DelayedDiagnosticPool</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>DelayedDiagnosticPool</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DelayedDiagnostic</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>Diagnostics</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DelayedDiagnosticPool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DelayedDiagnosticPool</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Parent</name><argument_list>(<argument>parent</argument>)</argument_list></macro> <block>{}</block>

<call><name>DelayedDiagnosticPool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DelayedDiagnosticPool</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DelayedDiagnosticPool</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DelayedDiagnosticPool</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DelayedDiagnosticPool</name><argument_list>(<argument><expr><name>DelayedDiagnosticPool</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Parent</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Parent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Diagnostics</name><argument_list>(<argument>std::move(Other.Diagnostics)</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>Other</name><operator>.</operator><name>Diagnostics</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>DelayedDiagnosticPool</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>DelayedDiagnosticPool</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <block>{
<expr><name>Parent</name> <operator>=</operator> <name><name>Other</name><operator>.</operator><name>Parent</name></name></expr>;
<expr><name>Diagnostics</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Diagnostics</name></name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Other</name><operator>.</operator><name>Diagnostics</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>DelayedDiagnosticPool</name><argument_list>()</argument_list></macro> <block>{
<for>for <control>(<init><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>DelayedDiagnostic</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name>
<name>i</name> <operator>=</operator> <call><name><name>Diagnostics</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <call><name><name>Diagnostics</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>e</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>i</name><operator>-&gt;</operator><name>Destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>DelayedDiagnosticPool</name> <operator>*</operator><macro><name>getParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Parent</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>(</operator><call><name><name>Diagnostics</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>Parent</name> <operator>||</operator> <call><name><name>Parent</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DelayedDiagnostic</name> <modifier>&amp;</modifier></type><name>diag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Diagnostics</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>diag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>steal</name><parameter_list>(<parameter><decl><type><name>DelayedDiagnosticPool</name> <modifier>&amp;</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>pool</name><operator>.</operator><name>Diagnostics</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Diagnostics</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Diagnostics</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>pool</name><operator>.</operator><name>Diagnostics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name><name>Diagnostics</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>pool_begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pool</name><operator>.</operator><name>pool_end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>Diagnostics</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>pool_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>DelayedDiagnostic</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pool_iterator</name> <macro><name>pool_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Diagnostics</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>pool_iterator</name> <macro><name>pool_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Diagnostics</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>pool_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Diagnostics</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><specifier>inline</specifier> <name>void</name> <name>Sema</name><operator>::</operator><name>DelayedDiagnostics</name><operator>::</operator><macro><name>add</name><argument_list>(<argument>const sema::DelayedDiagnostic &amp;diag</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>shouldDelayDiagnostics</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"trying to delay without pool"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>CurPool</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>diag</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
