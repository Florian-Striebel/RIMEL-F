<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTImporterSharedState.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTIMPORTERSHAREDSTATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTIMPORTERSHAREDSTATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTImporterLookupTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTImporter.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TranslationUnitDecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ASTImporterSharedState</name> <block>{<block_content>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTImporterLookupTable</name></expr></argument>&gt;</argument_list></name> <name>LookupTable</name></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>ImportError</name></expr></argument>&gt;</argument_list></name> <name>ImportErrors</name></expr>;</expr_stmt>




<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ASTImporterSharedState</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>ASTImporterSharedState</name><argument_list>(<argument>TranslationUnitDecl &amp;ToTU</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>LookupTable</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>ASTImporterLookupTable</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ToTU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>ASTImporterLookupTable</name> <modifier>*</modifier></type><name>getLookupTable</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>LookupTable</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>addDeclToLookup</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>LookupTable</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>ND</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>LookupTable</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>removeDeclFromLookup</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>LookupTable</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>ND</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>LookupTable</name><operator>-&gt;</operator><name>remove</name></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ImportError</name></expr></argument>&gt;</argument_list></name> <macro><name>getImportDeclErrorIfAny</name><argument_list>(<argument>Decl *ToD</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>auto</name> <name>Pos</name> <operator>=</operator> <call><name><name>ImportErrors</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>ToD</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Pos</name> <operator>!=</operator> <call><name><name>ImportErrors</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>Pos</name><operator>-&gt;</operator><name>second</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ImportError</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setImportDeclError</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>To</name></decl></parameter>, <parameter><decl><type><name>ImportError</name></type> <name>Error</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name><name>ImportErrors</name><index>[<expr><name>To</name></expr>]</index></name> <operator>=</operator> <name>Error</name></expr>;</expr_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
