<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_REGISTRY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_REGISTRY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/Dynamic/Diagnostics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/Dynamic/VariantValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ast_matchers</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dynamic</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MatcherDescriptor</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>MatcherDescriptorPtr</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>MatcherDescriptorPtr</name><parameter_list>(<parameter><decl><type><name>MatcherDescriptor</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><operator>~</operator><call><name>MatcherDescriptorPtr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MatcherDescriptorPtr</name><argument_list>(<argument><expr><name>MatcherDescriptorPtr</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>MatcherDescriptorPtr</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>MatcherDescriptorPtr</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MatcherDescriptorPtr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MatcherDescriptorPtr</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>MatcherDescriptorPtr</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MatcherDescriptorPtr</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<function><type><name>MatcherDescriptor</name> <modifier>*</modifier></type><name>get</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Ptr</name></expr>;</return> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>MatcherDescriptor</name> <modifier>*</modifier></type><name>Ptr</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>MatcherCtor</name> <init>= <expr><specifier>const</specifier> <name>internal</name><operator>::</operator><name>MatcherDescriptor</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<struct>struct <name>MatcherCompletion</name> <block>{
<expr_stmt><expr><call><name>MatcherCompletion</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>MatcherCompletion</name><argument_list>(<argument>StringRef TypedText</argument>, <argument>StringRef MatcherDecl</argument>,
<argument>unsigned Specificity</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>TypedText</name><argument_list>(<argument><expr><name>TypedText</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MatcherDecl</name><argument_list>(<argument><expr><name>MatcherDecl</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Specificity</name><argument_list>(<argument>Specificity</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>MatcherCompletion</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>TypedText</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>TypedText</name></name> <operator>&amp;&amp;</operator> <name>MatcherDecl</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>MatcherDecl</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>TypedText</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>MatcherDecl</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>Specificity</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>Registry</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Registry</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>ASTNodeKind</name></type> <name>nodeMatcherType</name><parameter_list>(<parameter><decl><type><name>MatcherCtor</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isBuilderMatcher</name><parameter_list>(<parameter><decl><type><name>MatcherCtor</name></type> <name>Ctor</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>internal</name><operator>::</operator><name>MatcherDescriptorPtr</name>
<macro><name>buildMatcherCtor</name><argument_list>(<argument>MatcherCtor</argument>, <argument>SourceRange NameRange</argument>,
<argument>ArrayRef&lt;ParserValue&gt; Args</argument>, <argument>Diagnostics *Error</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCtor</name></expr></argument>&gt;</argument_list></name> <macro><name>lookupMatcherCtor</name><argument_list>(<argument>StringRef MatcherName</argument>)</argument_list></macro></expr>;</expr_stmt>









<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ArgKind</name></expr></argument>&gt;</argument_list></name> <call><name>getAcceptedCompletionTypes</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCtor</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name>
<call><name>getMatcherCompletions</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ArgKind</name></expr></argument>&gt;</argument_list></name> <name>AcceptedTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
















<function_decl><type><specifier>static</specifier> <name>VariantMatcher</name></type> <name>constructMatcher</name><parameter_list>(<parameter><decl><type><name>MatcherCtor</name></type> <name>Ctor</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>NameRange</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParserValue</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>,
<parameter><decl><type><name>Diagnostics</name> <modifier>*</modifier></type><name>Error</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>static</specifier> <name>VariantMatcher</name></type> <name>constructBoundMatcher</name><parameter_list>(<parameter><decl><type><name>MatcherCtor</name></type> <name>Ctor</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>NameRange</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>BindID</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParserValue</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>,
<parameter><decl><type><name>Diagnostics</name> <modifier>*</modifier></type><name>Error</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
