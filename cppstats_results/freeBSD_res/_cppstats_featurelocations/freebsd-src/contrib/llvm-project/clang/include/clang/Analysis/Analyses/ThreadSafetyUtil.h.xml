<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyUtil.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETYUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETYUTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>threadSafety</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>til</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>MemRegionRef</name> <block>{<block_content>
<label><name>private</name>:</label>
<union>union <name>AlignmentType</name> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ii</name></decl>;</decl_stmt>
}</block>;</union>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MemRegionRef</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>MemRegionRef</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>*</operator><name>A</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Allocator</name><argument_list>(<argument>A</argument>)</argument_list></macro> <block>{}</block>

<name>void</name> <operator>*</operator><macro><name>allocate</name><argument_list>(<argument>size_t Sz</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Allocator</name><operator>-&gt;</operator><name>Allocate</name></name><argument_list>(<argument><expr><name>Sz</name></expr></argument>, <argument><expr><call><name>alignof</name><argument_list>(<argument><expr><name>AlignmentType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>*</modifier></type><name>allocateT</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>Allocator</name><operator>-&gt;</operator><name>Allocate</name></name><operator>&lt;</operator><name>T</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>T</name> <modifier>*</modifier></type><name>allocateT</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>NumElems</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>Allocator</name><operator>-&gt;</operator><name>Allocate</name></name><operator>&lt;</operator><name>T</name><operator>&gt;</operator><operator>(</operator><name>NumElems</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>*</operator><name>Allocator</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>void</name> <modifier>*</modifier><name>operator</name></type> <name>new</name><argument_list>(<argument><expr><name>size_t</name> <name>Sz</name></expr></argument>,
<argument><expr><name>clang</name><operator>::</operator><name>threadSafety</name><operator>::</operator><name>til</name><operator>::</operator><name>MemRegionRef</name> <operator>&amp;</operator><name>R</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>R</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>Sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>threadSafety</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>getSourceLiteralString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>CE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>til</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>SimpleArray</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SimpleArray</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>SimpleArray</name><argument_list>(<argument>T *Dat</argument>, <argument>size_t Cp</argument>, <argument>size_t Sz = <literal type="number">0</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Data</name><argument_list>(<argument><expr><name>Dat</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Size</name><argument_list>(<argument><expr><name>Sz</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Capacity</name><argument_list>(<argument>Cp</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>SimpleArray</name><argument_list>(<argument>MemRegionRef A</argument>, <argument>size_t Cp</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>Cp</name> <operator>==</operator> <literal type="number">0</literal> <operator>?</operator> <name>nullptr</name> <operator>:</operator> <name><name>A</name><operator>.</operator><name>allocateT</name></name><operator>&lt;</operator><name>T</name><operator>&gt;</operator><operator>(</operator><name>Cp</name><operator>)</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Capacity</name><argument_list>(<argument>Cp</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>SimpleArray</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>SimpleArray</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SimpleArray</name><argument_list>(<argument><expr><name><name>SimpleArray</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;&amp;</operator><name>A</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>Data</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Size</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>Size</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Capacity</name><argument_list>(<argument>A.Capacity</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>A</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>A</name><operator>.</operator><name>Size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name><name>A</name><operator>.</operator><name>Capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block>

<name>SimpleArray</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>SimpleArray</name> <operator>&amp;&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <operator>&amp;</operator><name>RHS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>Data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>Size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Capacity</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>Capacity</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>RHS</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>RHS</name><operator>.</operator><name>Size</name></name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>Capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>reserve</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>Ncp</name></decl></parameter>, <parameter><decl><type><name>MemRegionRef</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Ncp</name> <operator>&lt;=</operator> <name>Capacity</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>Odata</name> <init>= <expr><name>Data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <name><name>A</name><operator>.</operator><name>allocateT</name></name><operator>&lt;</operator><name>T</name><operator>&gt;</operator><operator>(</operator><name>Ncp</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>Capacity</name> <operator>=</operator> <name>Ncp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Odata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>Size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>reserveCheck</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>MemRegionRef</name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>Capacity</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reserve</name><argument_list>(<argument><expr><call><name>u_max</name><argument_list>(<argument><expr><name>InitialCapacity</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>Size</name> <operator>+</operator> <name>N</name> <operator>&lt;</operator> <name>Capacity</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reserve</name><argument_list>(<argument><expr><call><name>u_max</name><argument_list>(<argument><expr><name>Size</name> <operator>+</operator> <name>N</name></expr></argument>, <argument><expr><name>Capacity</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>T</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>reverse_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_reverse_iterator</name> <init>= <expr><name>std</name><operator>::</operator><name><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><name>const_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Size</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>capacity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Capacity</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>T</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>Size</name> <operator>&amp;&amp;</operator> <literal type="string">"Array index out of bounds."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>unsigned</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>Size</name> <operator>&amp;&amp;</operator> <literal type="string">"Array index out of bounds."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>T</name> <modifier>&amp;</modifier></type><name>back</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Size</name> <operator>&amp;&amp;</operator> <literal type="string">"No elements in the array."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Data</name><index>[<expr><name>Size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Size</name> <operator>&amp;&amp;</operator> <literal type="string">"No elements in the array."</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>Data</name><index>[<expr><name>Size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Data</name></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Data</name> <operator>+</operator> <name>Size</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name> <operator>+</operator> <name>Size</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>const_iterator</name> <macro><name>cbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>cend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name> <operator>+</operator> <name>Size</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>reverse_iterator</name></type> <name>rbegin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>reverse_iterator</name></type> <name>rend</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_reverse_iterator</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_reverse_iterator</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Size</name> <operator>&lt;</operator> <name>Capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Data</name><index>[<expr><name>Size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>Elem</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>drop</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Size</name> <operator>&gt;</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Size</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setValues</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>C</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Sz</name> <operator>&lt;=</operator> <name>Capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name>Sz</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>Sz</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>Data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>C</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Iter</name></expr></argument>&gt;</argument_list></name> <name>unsigned</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Iter</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>Iter</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Osz</name> <init>= <expr><name>Size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>J</name> <init>= <expr><name>Osz</name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>J</name> <operator>&lt;</operator> <name>Capacity</name> <operator>&amp;&amp;</operator> <name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>J</name></expr><operator>,</operator> <expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>Data</name><index>[<expr><name>J</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>I</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>Size</name> <operator>=</operator> <name>J</name></expr>;</expr_stmt>
<return>return <expr><name>J</name> <operator>-</operator> <name>Osz</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>reverse_iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>reverse</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name>rbegin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>const_reverse_iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>reverse</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name>rbegin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>


<function><type><name>size_t</name></type> <name>u_max</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>InitialCapacity</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>T</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>CopyOnWriteVector</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>VectorData</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumRefs</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>Vect</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VectorData</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>VectorData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>VectorData</name> <operator>&amp;</operator><name>VD</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Vect</name><argument_list>(<argument>VD.Vect</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CopyOnWriteVector</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>CopyOnWriteVector</name><argument_list>(<argument><expr><name>CopyOnWriteVector</name> <operator>&amp;&amp;</operator><name>V</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Data</name><argument_list>(<argument>V.Data</argument>)</argument_list></macro> <block>{ <expr><name><name>V</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name>nullptr</name></expr>; }</block>

<name>CopyOnWriteVector</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>CopyOnWriteVector</name> <operator>&amp;&amp;</operator><name>V</name><operator>)</operator> <block>{
<expr><call><name>destroy</name><argument_list>()</argument_list></call></expr>;
<expr><name>Data</name> <operator>=</operator> <name><name>V</name><operator>.</operator><name>Data</name></name></expr>;
<expr><name><name>V</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name>nullptr</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><call><name>CopyOnWriteVector</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CopyOnWriteVector</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CopyOnWriteVector</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CopyOnWriteVector</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>CopyOnWriteVector</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>destroy</name><argument_list>()</argument_list></call></expr>; }</block>


<name>bool</name> <macro><name>valid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>writable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name> <operator>&amp;&amp;</operator> <name><name>Data</name><operator>-&gt;</operator><name>NumRefs</name></name> <operator>==</operator> <literal type="number">1</literal></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <name>new</name> <call><name>VectorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Data</name><operator>-&gt;</operator><name>NumRefs</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<decl_stmt><decl><type><name>delete</name></type> <name>Data</name></decl>;</decl_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name><name>Data</name><operator>-&gt;</operator><name>NumRefs</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>makeWritable</name><parameter_list>()</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <name>new</name> <call><name>VectorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Data</name><operator>-&gt;</operator><name>NumRefs</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name><name>Data</name><operator>-&gt;</operator><name>NumRefs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>Data</name> <operator>=</operator> <name>new</name> <call><name>VectorData</name><argument_list>(<argument><expr><operator>*</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>CopyOnWriteVector</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>CopyOnWriteVector</name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>typename</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>elements</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>Data</name><operator>-&gt;</operator><name>Vect</name></name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>elements</name><argument_list>()</argument_list></call><operator>.</operator><call><name>cbegin</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>elements</name><argument_list>()</argument_list></call><operator>.</operator><call><name>cend</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>unsigned</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>elements</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name> <operator>?</operator> <call><name>elements</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>sameAs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CopyOnWriteVector</name> <operator>&amp;</operator><name>V</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>Data</name> <operator>==</operator> <name><name>V</name><operator>.</operator><name>Data</name></name></expr>;</return> </block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>writable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Vector is not writable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Data</name><operator>-&gt;</operator><name>Vect</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Elem</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>writable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Vector is not writable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Data</name><operator>-&gt;</operator><name>Vect</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>T</name><modifier>&amp;</modifier></type> <name>elem</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>writable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Vector is not writable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Data</name><operator>-&gt;</operator><name>Vect</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>downsize</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>writable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Vector is not writable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Data</name><operator>-&gt;</operator><name>Vect</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>Vect</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name><name>Data</name><operator>-&gt;</operator><name>Vect</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<expr_stmt><expr><call><name>CopyOnWriteVector</name><argument_list>(<argument><expr><name>VectorData</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Data</name><argument_list>(<argument>D</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<operator>++</operator><name><name>Data</name><operator>-&gt;</operator><name>NumRefs</name></name></block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>VectorData</name> <modifier>*</modifier></type><name>Data</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>ss</name><operator>,</operator> <specifier>const</specifier> <name>StringRef</name> <name>str</name><operator>)</operator> <block>{
<return>return <expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
