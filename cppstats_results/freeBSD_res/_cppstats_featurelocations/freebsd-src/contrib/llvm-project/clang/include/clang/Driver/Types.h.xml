<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/Types.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_TYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Phases.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Option/ArgList.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StringRef</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>types</name> <block>{<block_content>
<enum>enum <name>ID</name> <block>{
<decl><name>TY_INVALID</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>PP_TYPE</name></type></parameter>, <parameter><type><name>TEMP_SUFFIX</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TY_##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Driver/Types.def"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPE</name></cpp:undef>
<decl><name>TY_LAST</name></decl>
}</block>;</enum>


<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getTypeName</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>ID</name></type> <name>getPreprocessedType</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>ID</name></type> <name>getPrecompiledType</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getTypeTempSuffix</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>CLMode</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>onlyPrecompileType</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>canTypeBeUserSpecified</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>appendSuffixForType</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>canLipoType</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isAcceptedByClang</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isCXX</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isLLVMIR</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isCuda</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isHIP</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isObjC</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isOpenCL</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>isFortran</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>isSrcFile</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>ID</name></type> <name>lookupTypeForExtension</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Ext</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>ID</name></type> <name>lookupTypeForTypeSpecifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>phases</name><operator>::</operator><name>ID</name></expr></argument>, <argument><expr><name>phases</name><operator>::</operator><name>MaxNumberOfPhases</name></expr></argument>&gt;</argument_list></name>
<macro><name>getCompilationPhases</name><argument_list>(<argument>ID Id</argument>, <argument>phases::ID LastPhase = phases::LastPhase</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>phases</name><operator>::</operator><name>ID</name></expr></argument>, <argument><expr><name>phases</name><operator>::</operator><name>MaxNumberOfPhases</name></expr></argument>&gt;</argument_list></name>
<macro><name>getCompilationPhases</name><argument_list>(<argument>const clang::driver::Driver &amp;Driver</argument>,
<argument>llvm::opt::DerivedArgList &amp;DAL</argument>, <argument>ID Id</argument>)</argument_list></macro></expr>;</expr_stmt>



<function_decl><type><name>ID</name></type> <name>lookupCXXTypeForCType</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ID</name></type> <name>lookupHeaderTypeForSourceType</name><parameter_list>(<parameter><decl><type><name>ID</name></type> <name>Id</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
