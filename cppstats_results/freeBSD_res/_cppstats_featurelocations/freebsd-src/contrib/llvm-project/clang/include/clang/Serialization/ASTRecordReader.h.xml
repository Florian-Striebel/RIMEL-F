<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ASTRecordReader.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_ASTRECORDREADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_ASTRECORDREADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AbstractBasicReader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTReader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APFloat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>OMPTraitInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OMPChildren</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ASTRecordReader</name>
<range>: <expr><name>public</name> <name>serialization</name><operator>::</operator><name><name>DataStreamBasicReader</name><argument_list type="generic">&lt;<argument><expr><name>ASTRecordReader</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>ModuleFile</name> <operator>=</operator> <name>serialization</name><operator>::</operator><name>ModuleFile</name></expr>;

<expr><name>ASTReader</name> <operator>*</operator><name>Reader</name></expr>;
<expr><name>ModuleFile</name> <operator>*</operator><name>F</name></expr>;
<expr><name>unsigned</name> <name>Idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>ASTReader</name><operator>::</operator><name>RecordData</name> <name>Record</name></expr>;

<expr><name>using</name> <name>RecordData</name> <operator>=</operator> <name>ASTReader</name><operator>::</operator><name>RecordData</name></expr>;
<expr><name>using</name> <name>RecordDataImpl</name> <operator>=</operator> <name>ASTReader</name><operator>::</operator><name>RecordDataImpl</name></expr>;

<expr><name>public</name><operator>:</operator>

<call><name>ASTRecordReader</name><argument_list>(<argument><expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr></argument>, <argument><expr><name>ModuleFile</name> <operator>&amp;</operator><name>F</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>DataStreamBasicReader</name><argument_list>(<argument><expr><call><name><name>Reader</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>Reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Reader</name></expr></argument>)</argument_list></call></expr>, <macro><name>F</name><argument_list>(<argument>&amp;F</argument>)</argument_list></macro> <expr><block>{}</block>



<name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <macro><name>readRecord</name><argument_list>(<argument>llvm::BitstreamCursor &amp;Cursor</argument>,
<argument>unsigned AbbrevID</argument>)</argument_list></macro></expr>;


<expr><name>bool</name> <macro><name>isModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>F</name><operator>-&gt;</operator><name>isModule</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>unsigned</name> <macro><name>getIdx</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Idx</name></expr>;</return> }</block>


<name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Record</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<specifier>const</specifier> <name>uint64_t</name> <operator>&amp;</operator><name><name>operator</name><index>[]</index></name><operator>(</operator><name>size_t</name> <name>N</name><operator>)</operator> <block>{ <return>return <expr><name><name>Record</name><index>[<expr><name>N</name></expr>]</index></name></expr>;</return> }</block>


<name>uint64_t</name> <macro><name>back</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Record</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>uint64_t</name> <macro><name>readInt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>Record</name><index>[<expr><name>Idx</name><operator>++</operator></expr>]</index></name></expr>;</return> }</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>readIntArray</name><argument_list>(<argument>unsigned Len</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>Array</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><name>Record</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>slice</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>, <argument><expr><name>Len</name></expr></argument>)</argument_list></call></expr>;
<expr><name>Idx</name> <operator>+=</operator> <name>Len</name></expr>;
<return>return <expr><name>Array</name></expr>;</return>
}</block>


<name>uint64_t</name> <macro><name>peekInt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>Record</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return> }</block>


<name>void</name> <macro><name>skipInts</name><argument_list>(<argument>unsigned N</argument>)</argument_list></macro> <block>{ <expr><name>Idx</name> <operator>+=</operator> <name>N</name></expr>; }</block>


<name>serialization</name><operator>::</operator><name>SubmoduleID</name>
<macro><name>getGlobalSubmoduleID</name><argument_list>(<argument>unsigned LocalID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>getGlobalSubmoduleID</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>LocalID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>Module</name> <operator>*</operator><macro><name>getSubmodule</name><argument_list>(<argument>serialization::SubmoduleID GlobalID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>getSubmodule</name></name><argument_list>(<argument><expr><name>GlobalID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>bool</name> <macro><name>readLexicalDeclContextStorage</name><argument_list>(<argument>uint64_t Offset</argument>, <argument>DeclContext *DC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadLexicalDeclContextStorage</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name><name>F</name><operator>-&gt;</operator><name>DeclsCursor</name></name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>,
<argument><expr><name>DC</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>bool</name> <macro><name>readVisibleDeclContextStorage</name><argument_list>(<argument>uint64_t Offset</argument>,
<argument>serialization::DeclID ID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadVisibleDeclContextStorage</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name><name>F</name><operator>-&gt;</operator><name>DeclsCursor</name></name></expr></argument>, <argument><expr><name>Offset</name></expr></argument>,
<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ExplicitSpecifier</name> <macro><name>readExplicitSpec</name><argument_list>()</argument_list></macro> <block>{
<expr><name>uint64_t</name> <name>Kind</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <name>HasExpr</name> <operator>=</operator> <name>Kind</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;
<expr><name>Kind</name> <operator>=</operator> <name>Kind</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;
<return>return <expr><call><name>ExplicitSpecifier</name><argument_list>(<argument><expr><ternary><condition><expr><name>HasExpr</name></expr> ?</condition><then> <expr><call><name>readExpr</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>,
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ExplicitSpecKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>






<name>uint64_t</name> <macro><name>getGlobalBitOffset</name><argument_list>(<argument>uint64_t LocalOffset</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>getGlobalBitOffset</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>LocalOffset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>Stmt</name> <operator>*</operator><macro><name>readStmt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadStmt</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>readStmtRef</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>readStmt</name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>Expr</name> <operator>*</operator><macro><name>readExpr</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadExpr</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>)</argument_list></call></expr>;</return> }</block>


<name>Stmt</name> <operator>*</operator><macro><name>readSubStmt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadSubStmt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>Expr</name> <operator>*</operator><macro><name>readSubExpr</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadSubExpr</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>




<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <operator>*</operator><macro><name>GetLocalDeclAs</name><argument_list>(<argument>uint32_t LocalID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Reader</name><operator>-&gt;</operator><name>GetLocalDecl</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>LocalID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>TemplateArgumentLocInfo</name>
<macro><name>readTemplateArgumentLocInfo</name><argument_list>(<argument>TemplateArgument::ArgKind Kind</argument>)</argument_list></macro></expr>;


<expr><name>TemplateArgumentLoc</name> <call><name>readTemplateArgumentLoc</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>ASTTemplateArgumentListInfo</name><operator>*</operator>
<call><name>readASTTemplateArgumentListInfo</name><argument_list>()</argument_list></call></expr>;


<expr><name>TypeSourceInfo</name> <operator>*</operator><call><name>readTypeSourceInfo</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <macro><name>readTypeLoc</name><argument_list>(<argument>TypeLoc TL</argument>)</argument_list></macro></expr>;



<expr><name>serialization</name><operator>::</operator><name>TypeID</name> <macro><name>getGlobalTypeID</name><argument_list>(<argument>unsigned LocalID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>getGlobalTypeID</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>LocalID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>Qualifiers</name> <macro><name>readQualifiers</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>Qualifiers</name><operator>::</operator><call><name>fromOpaqueValue</name><argument_list>(<argument><expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>QualType</name> <macro><name>readType</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>readType</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>QualType</name> <macro><name>readQualType</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>readType</name><argument_list>()</argument_list></call></expr>;</return>
}</block>




<name>serialization</name><operator>::</operator><name>DeclID</name> <macro><name>readDeclID</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadDeclID</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>Decl</name> <operator>*</operator><macro><name>readDecl</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadDecl</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>Decl</name> <operator>*</operator><macro><name>readDeclRef</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>readDecl</name><argument_list>()</argument_list></call></expr>;</return>
}</block>






<name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <operator>*</operator><macro><name>readDeclAs</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name><name>Reader</name><operator>-&gt;</operator><name>ReadDeclAs</name></name><operator>&lt;</operator><name>T</name><operator>&gt;</operator><operator>(</operator><operator>*</operator><name>F</name>, <name>Record</name>, <name>Idx</name><operator>)</operator></expr>;</return>
}</block>

<name>IdentifierInfo</name> <operator>*</operator><macro><name>readIdentifier</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>readIdentifier</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>Selector</name> <macro><name>readSelector</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadSelector</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>DeclarationNameLoc</name> <macro><name>readDeclarationNameLoc</name><argument_list>(<argument>DeclarationName Name</argument>)</argument_list></macro></expr>;
<expr><name>DeclarationNameInfo</name> <call><name>readDeclarationNameInfo</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>readQualifierInfo</name><argument_list>(<argument><expr><name>QualifierInfo</name> <operator>&amp;</operator><name>Info</name></expr></argument>)</argument_list></call></expr>;




<expr><name>NestedNameSpecifierLoc</name> <call><name>readNestedNameSpecifierLoc</name><argument_list>()</argument_list></call></expr>;






<expr><name>using</name> <name>DataStreamBasicReader</name><operator>::</operator><name>readTemplateArgument</name></expr>;
<expr><name>TemplateArgument</name> <macro><name>readTemplateArgument</name><argument_list>(<argument>bool Canonicalize</argument>)</argument_list></macro> <block>{
<expr><name>TemplateArgument</name> <name>Arg</name> <operator>=</operator> <call><name>readTemplateArgument</name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>Canonicalize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Arg</name> <operator>=</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalTemplateArgument</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return Arg</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>


<name>TemplateParameterList</name> <operator>*</operator><call><name>readTemplateParameterList</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <macro><name>readTemplateArgumentList</name><argument_list>(<argument>SmallVectorImpl&lt;TemplateArgument&gt; &amp;TemplArgs</argument>,
<argument>bool Canonicalize = false</argument>)</argument_list></macro></expr>;


<expr><name>void</name> <call><name>readUnresolvedSet</name><argument_list>(<argument><expr><name>LazyASTUnresolvedSet</name> <operator>&amp;</operator><name>Set</name></expr></argument>)</argument_list></call></expr>;


<expr><name>CXXBaseSpecifier</name> <call><name>readCXXBaseSpecifier</name><argument_list>()</argument_list></call></expr>;


<expr><name>CXXCtorInitializer</name> <operator>*</operator><operator>*</operator><call><name>readCXXCtorInitializers</name><argument_list>()</argument_list></call></expr>;

<expr><name>CXXTemporary</name> <operator>*</operator><macro><name>readCXXTemporary</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadCXXTemporary</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>OMPTraitInfo</name> <operator>*</operator><call><name>readOMPTraitInfo</name><argument_list>()</argument_list></call></expr>;


<expr><name>OMPClause</name> <operator>*</operator><call><name>readOMPClause</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <call><name>readOMPChildren</name><argument_list>(<argument><expr><name>OMPChildren</name> <operator>*</operator><name>Data</name></expr></argument>)</argument_list></call></expr>;


<expr><name>SourceLocation</name> <macro><name>readSourceLocation</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadSourceLocation</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>SourceRange</name> <macro><name>readSourceRange</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadSourceRange</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>











<name>llvm</name><operator>::</operator><name>APFloat</name> <call><name>readAPFloat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>fltSemantics</name> <operator>&amp;</operator><name>Sem</name></expr></argument>)</argument_list></call></expr>;


<expr><name>bool</name> <macro><name>readBool</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>readInt</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block>


<name>uint32_t</name> <macro><name>readUInt32</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>uint32_t</name><argument_list>(<argument><expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>uint64_t</name> <macro><name>readUInt64</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>std</name><operator>::</operator><name>string</name> <macro><name>readString</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadString</name></name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>std</name><operator>::</operator><name>string</name> <macro><name>readPath</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadPath</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>VersionTuple</name> <macro><name>readVersionTuple</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>ASTReader</name><operator>::</operator><call><name>ReadVersionTuple</name><argument_list>(<argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>Attr</name> <operator>*</operator><call><name>readAttr</name><argument_list>()</argument_list></call></expr>;


<expr><name>void</name> <call><name>readAttributes</name><argument_list>(<argument><expr><name>AttrVec</name> <operator>&amp;</operator><name>Attrs</name></expr></argument>)</argument_list></call></expr>;


<expr><name>Token</name> <macro><name>readToken</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>ReadToken</name></name><argument_list>(<argument><expr><operator>*</operator><name>F</name></expr></argument>, <argument><expr><name>Record</name></expr></argument>, <argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>recordSwitchCaseID</name><argument_list>(<argument>SwitchCase *SC</argument>, <argument>unsigned ID</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Reader</name><operator>-&gt;</operator><name>RecordSwitchCaseID</name></name><argument_list>(<argument><expr><name>SC</name></expr></argument>, <argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>SwitchCase</name> <operator>*</operator><macro><name>getSwitchCaseWithID</name><argument_list>(<argument>unsigned ID</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>Reader</name><operator>-&gt;</operator><name>getSwitchCaseWithID</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;



struct <expr><name>SavedStreamPosition</name> <block>{
<expr><name>explicit</name> <call><name>SavedStreamPosition</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <operator>&amp;</operator><name>Cursor</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Cursor</name><argument_list>(<argument><expr><name>Cursor</name></expr></argument>)</argument_list></call></expr>, <macro><name>Offset</name><argument_list>(<argument>Cursor.GetCurrentBitNo()</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><macro><name>SavedStreamPosition</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>llvm</name><operator>::</operator><name>Error</name> <name>Err</name> <operator>=</operator> <call><name><name>Cursor</name><operator>.</operator><name>JumpToBit</name></name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>report_fatal_error</name><argument_list>(
<argument><expr><literal type="string">"Cursor should always be able to go back, failed: "</literal> <operator>+</operator>
<call><name>toString</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <operator>&amp;</operator><name>Cursor</name></expr>;
<expr><name>uint64_t</name> <name>Offset</name></expr>;
}</block></expr>;

<expr><specifier>inline</specifier> <name>void</name> <name>PCHValidator</name><operator>::</operator><macro><name>Error</name><argument_list>(<argument>const char *Msg</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Reader</name><operator>.</operator><name>Error</name></name><argument_list>(<argument><expr><name>Msg</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
