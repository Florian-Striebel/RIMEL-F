<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/ConstructionContext.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_CONSTRUCTIONCONTEXT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_CONSTRUCTIONCONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/Support/BumpVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprObjC.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>ConstructionContextItem</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>ItemKind</name> <block>{
<decl><name>VariableKind</name></decl>,
<decl><name>NewAllocatorKind</name></decl>,
<decl><name>ReturnKind</name></decl>,
<decl><name>MaterializationKind</name></decl>,
<decl><name>TemporaryDestructorKind</name></decl>,
<decl><name>ElidedDestructorKind</name></decl>,
<decl><name>ElidableConstructorKind</name></decl>,
<decl><name>ArgumentKind</name></decl>,
<decl><name>STATEMENT_WITH_INDEX_KIND_BEGIN</name><init>=<expr><name>ArgumentKind</name></expr></init></decl>,
<decl><name>STATEMENT_WITH_INDEX_KIND_END</name><init>=<expr><name>ArgumentKind</name></expr></init></decl>,
<decl><name>STATEMENT_KIND_BEGIN</name> <init>= <expr><name>VariableKind</name></expr></init></decl>,
<decl><name>STATEMENT_KIND_END</name> <init>= <expr><name>ArgumentKind</name></expr></init></decl>,
<decl><name>InitializerKind</name></decl>,
<decl><name>INITIALIZER_KIND_BEGIN</name><init>=<expr><name>InitializerKind</name></expr></init></decl>,
<decl><name>INITIALIZER_KIND_END</name><init>=<expr><name>InitializerKind</name></expr></init></decl>
}</block>;</enum>

<function><type><name>LLVM_DUMP_METHOD</name> <specifier>static</specifier> <name>StringRef</name></type> <name>getKindAsString</name><parameter_list>(<parameter><decl><type><name>ItemKind</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><name>K</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>VariableKind</name></expr>:</case> <return>return <expr><literal type="string">"construct into local variable"</literal></expr>;</return>
<case>case <expr><name>NewAllocatorKind</name></expr>:</case> <return>return <expr><literal type="string">"construct into new-allocator"</literal></expr>;</return>
<case>case <expr><name>ReturnKind</name></expr>:</case> <return>return <expr><literal type="string">"construct into return address"</literal></expr>;</return>
<case>case <expr><name>MaterializationKind</name></expr>:</case> <return>return <expr><literal type="string">"materialize temporary"</literal></expr>;</return>
<case>case <expr><name>TemporaryDestructorKind</name></expr>:</case> <return>return <expr><literal type="string">"destroy temporary"</literal></expr>;</return>
<case>case <expr><name>ElidedDestructorKind</name></expr>:</case> <return>return <expr><literal type="string">"elide destructor"</literal></expr>;</return>
<case>case <expr><name>ElidableConstructorKind</name></expr>:</case> <return>return <expr><literal type="string">"elide constructor"</literal></expr>;</return>
<case>case <expr><name>ArgumentKind</name></expr>:</case> <return>return <expr><literal type="string">"construct into argument"</literal></expr>;</return>
<case>case <expr><name>InitializerKind</name></expr>:</case> <return>return <expr><literal type="string">"construct into member variable"</literal></expr>;</return>
</block_content>}</block></switch><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown ItemKind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ItemKind</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>Index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasStatement</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>&gt;=</operator> <name>STATEMENT_KIND_BEGIN</name> <operator>&amp;&amp;</operator>
<name>Kind</name> <operator>&lt;=</operator> <name>STATEMENT_KIND_END</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>&gt;=</operator> <name>STATEMENT_WITH_INDEX_KIND_BEGIN</name> <operator>&amp;&amp;</operator>
<name>Kind</name> <operator>&gt;=</operator> <name>STATEMENT_WITH_INDEX_KIND_END</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasInitializer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>&gt;=</operator> <name>INITIALIZER_KIND_BEGIN</name> <operator>&amp;&amp;</operator>
<name>Kind</name> <operator>&lt;=</operator> <name>INITIALIZER_KIND_END</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>public</name>:</label>



<expr_stmt><expr><call><name>ConstructionContextItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><name>DS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>DS</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>VariableKind</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>ConstructionContextItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXNewExpr</name> <operator>*</operator><name>NE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>NE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>NewAllocatorKind</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>ConstructionContextItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReturnStmt</name> <operator>*</operator><name>RS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>RS</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>ReturnKind</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>ConstructionContextItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <operator>*</operator><name>MTE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>MTE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>MaterializationKind</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ConstructionContextItem</name><argument_list>(<argument>const CXXBindTemporaryExpr *BTE</argument>,
<argument>bool IsElided = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>BTE</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Kind</name><argument_list>(<argument>IsElided ? ElidedDestructorKind : TemporaryDestructorKind</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>ConstructionContextItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXConstructExpr</name> <operator>*</operator><name>CE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>ElidableConstructorKind</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ConstructionContextItem</name><argument_list>(<argument>const CallExpr *CE</argument>, <argument>unsigned Index</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>ArgumentKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Index</name><argument_list>(<argument>Index</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ConstructionContextItem</name><argument_list>(<argument>const CXXConstructExpr *CE</argument>, <argument>unsigned Index</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>ArgumentKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Index</name><argument_list>(<argument>Index</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ConstructionContextItem</name><argument_list>(<argument>const CXXInheritedCtorInitExpr *CE</argument>, <argument>unsigned Index</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>ArgumentKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Index</name><argument_list>(<argument>Index</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ConstructionContextItem</name><argument_list>(<argument>const ObjCMessageExpr *ME</argument>, <argument>unsigned Index</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>ME</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>ArgumentKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Index</name><argument_list>(<argument>Index</argument>)</argument_list></macro> <expr><block>{}</block>


<macro><name>ConstructionContextItem</name><argument_list>(<argument>const Expr *E</argument>, <argument>unsigned Index</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>ArgumentKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Index</name><argument_list>(<argument>Index</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CallExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXInheritedCtorInitExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMessageExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<call><name>ConstructionContextItem</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXCtorInitializer</name> <operator>*</operator><name>Init</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Data</name><argument_list>(<argument><expr><name>Init</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>InitializerKind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Index</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>ItemKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>StringRef</name> <macro><name>getKindAsString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getKindAsString</name><argument_list>(<argument><expr><call><name>getKind</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasStatement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getStmtOrNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasStatement</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getStmt</name><argument_list>()</argument_list></call> <operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><specifier>const</specifier> <name>CXXCtorInitializer</name> <operator>*</operator><macro><name>getCXXCtorInitializer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasInitializer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXCtorInitializer</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>





<expr_stmt><expr><name>unsigned</name> <macro><name>getIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{


<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Index</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ID</name><operator>.</operator><name>AddInteger</name></name><argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ConstructionContextItem</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{



<return>return <expr><name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Kind</name></expr></argument>, <argument><expr><name>Index</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>Kind</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>Index</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ConstructionContextItem</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name>Data</name></expr></argument>, <argument><expr><name>Kind</name></expr></argument>, <argument><expr><name>Index</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<name>std</name><operator>::</operator><call><name>make_tuple</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>Data</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>Kind</name></name></expr></argument>, <argument><expr><name><name>Other</name><operator>.</operator><name>Index</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




















<decl_stmt><decl><type><name>class</name></type> <name>ConstructionContextLayer</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ConstructionContextLayer</name> <modifier>*</modifier></type><name>Parent</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstructionContextItem</name></type> <name>Item</name></decl>;</decl_stmt>

<macro><name>ConstructionContextLayer</name><argument_list>(<argument>ConstructionContextItem Item</argument>,
<argument>const ConstructionContextLayer *Parent</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Parent</name><argument_list>(<argument><expr><name>Parent</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Item</name><argument_list>(<argument>Item</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>ConstructionContextLayer</name> <operator>*</operator>
<call><name>create</name><argument_list>(<argument><expr><name>BumpVectorContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ConstructionContextItem</name> <operator>&amp;</operator><name>Item</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ConstructionContextLayer</name> <operator>*</operator><name>Parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ConstructionContextItem</name> <operator>&amp;</operator><macro><name>getItem</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Item</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>ConstructionContextLayer</name> <operator>*</operator><macro><name>getParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Parent</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isLast</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>Parent</name></expr>;</return> }</block></expr></expr_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>isStrictlyMoreSpecificThan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ConstructionContextLayer</name> <operator>*</operator><name>Other</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>ConstructionContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>SimpleVariableKind</name></decl>,
<decl><name>CXX17ElidedCopyVariableKind</name></decl>,
<decl><name>VARIABLE_BEGIN</name> <init>= <expr><name>SimpleVariableKind</name></expr></init></decl>,
<decl><name>VARIABLE_END</name> <init>= <expr><name>CXX17ElidedCopyVariableKind</name></expr></init></decl>,
<decl><name>SimpleConstructorInitializerKind</name></decl>,
<decl><name>CXX17ElidedCopyConstructorInitializerKind</name></decl>,
<decl><name>INITIALIZER_BEGIN</name> <init>= <expr><name>SimpleConstructorInitializerKind</name></expr></init></decl>,
<decl><name>INITIALIZER_END</name> <init>= <expr><name>CXX17ElidedCopyConstructorInitializerKind</name></expr></init></decl>,
<decl><name>NewAllocatedObjectKind</name></decl>,
<decl><name>SimpleTemporaryObjectKind</name></decl>,
<decl><name>ElidedTemporaryObjectKind</name></decl>,
<decl><name>TEMPORARY_BEGIN</name> <init>= <expr><name>SimpleTemporaryObjectKind</name></expr></init></decl>,
<decl><name>TEMPORARY_END</name> <init>= <expr><name>ElidedTemporaryObjectKind</name></expr></init></decl>,
<decl><name>SimpleReturnedValueKind</name></decl>,
<decl><name>CXX17ElidedCopyReturnedValueKind</name></decl>,
<decl><name>RETURNED_VALUE_BEGIN</name> <init>= <expr><name>SimpleReturnedValueKind</name></expr></init></decl>,
<decl><name>RETURNED_VALUE_END</name> <init>= <expr><name>CXX17ElidedCopyReturnedValueKind</name></expr></init></decl>,
<decl><name>ArgumentKind</name></decl>
}</block>;</enum>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>K</name></decl>;</decl_stmt>



<macro><name>explicit</name></macro> <macro><name>ConstructionContext</name><argument_list>(<argument>Kind K</argument>)</argument_list></macro> : <macro><name>K</name><argument_list>(<argument>K</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<label><name>private</name>:</label>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name><modifier>...</modifier> <name>ArgTypes</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>T</name> <modifier>*</modifier></type><name>create</name><parameter_list>(<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>ArgTypes</name><modifier>...</modifier></type> <name>Args</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>CC</name> <operator>=</operator> <call><name><name>C</name><operator>.</operator><name>getAllocator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>Allocate</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <macro><name>new</name> <argument_list>(<argument>CC</argument>)</argument_list></macro> <expr><call><name>T</name><argument_list>(<argument><expr><name>Args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ConstructionContext</name> <modifier>*</modifier></type><name>createMaterializedTemporaryFromLayers</name><parameter_list>(
<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <modifier>*</modifier></type><name>MTE</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContextLayer</name> <modifier>*</modifier></type><name>ParentLayer</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ConstructionContext</name> <modifier>*</modifier></type>
<name>createBoundTemporaryFromLayers</name><parameter_list>(
<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContextLayer</name> <modifier>*</modifier></type><name>ParentLayer</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>



<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ConstructionContext</name> <modifier>*</modifier></type>
<name>createFromLayers</name><parameter_list>(<parameter><decl><type><name>BumpVectorContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContextLayer</name> <modifier>*</modifier></type><name>TopLayer</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>K</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>VariableConstructionContext</name> <range>: <expr><name>public</name> <name>ConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><name>DS</name></expr>;

<expr><name>protected</name><operator>:</operator>
<macro><name>VariableConstructionContext</name><argument_list>(<argument>ConstructionContext::Kind K</argument>, <argument>const DeclStmt *DS</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ConstructionContext</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>, <macro><name>DS</name><argument_list>(<argument>DS</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>classof</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>DS</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><macro><name>getDeclStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DS</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>VARIABLE_BEGIN</name> <operator>&amp;&amp;</operator>
<call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>VARIABLE_END</name></expr>;</return>
}</block>
}</expr>;





<expr><name>class</name> <name>SimpleVariableConstructionContext</name> <operator>:</operator> <name>public</name> <name>VariableConstructionContext</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>SimpleVariableConstructionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><name>DS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>VariableConstructionContext</name><argument_list>(<argument>ConstructionContext::SimpleVariableKind</argument>,
<argument>DS</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SimpleVariableKind</name></expr>;</return>
}</block>
}</expr>;










<expr><name>class</name> <name>CXX17ElidedCopyVariableConstructionContext</name>
<operator>:</operator> <name>public</name> <name>VariableConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>CXX17ElidedCopyVariableConstructionContext</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><name>DS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>VariableConstructionContext</name><argument_list>(<argument><expr><name>CXX17ElidedCopyVariableKind</name></expr></argument>, <argument><expr><name>DS</name></expr></argument>)</argument_list></call></expr>, <macro><name>BTE</name><argument_list>(<argument>BTE</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>BTE</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><macro><name>getCXXBindTemporaryExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BTE</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CXX17ElidedCopyVariableKind</name></expr>;</return>
}</block>
}</expr>;


<expr><name>class</name> <name>ConstructorInitializerConstructionContext</name> <operator>:</operator> <name>public</name> <name>ConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>CXXCtorInitializer</name> <operator>*</operator><name>I</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>explicit</name> <macro><name>ConstructorInitializerConstructionContext</name><argument_list>(
<argument>ConstructionContext::Kind K</argument>, <argument>const CXXCtorInitializer *I</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ConstructionContext</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>, <macro><name>I</name><argument_list>(<argument>I</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>classof</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>CXXCtorInitializer</name> <operator>*</operator><macro><name>getCXXCtorInitializer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>I</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>INITIALIZER_BEGIN</name> <operator>&amp;&amp;</operator>
<call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>INITIALIZER_END</name></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>SimpleConstructorInitializerConstructionContext</name>
<operator>:</operator> <name>public</name> <name>ConstructorInitializerConstructionContext</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>SimpleConstructorInitializerConstructionContext</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>CXXCtorInitializer</name> <operator>*</operator><name>I</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ConstructorInitializerConstructionContext</name><argument_list>(
<argument>ConstructionContext::SimpleConstructorInitializerKind</argument>, <argument>I</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SimpleConstructorInitializerKind</name></expr>;</return>
}</block>
}</expr>;











<expr><name>class</name> <name>CXX17ElidedCopyConstructorInitializerConstructionContext</name>
<operator>:</operator> <name>public</name> <name>ConstructorInitializerConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>CXX17ElidedCopyConstructorInitializerConstructionContext</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>CXXCtorInitializer</name> <operator>*</operator><name>I</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ConstructorInitializerConstructionContext</name><argument_list>(
<argument><expr><name>CXX17ElidedCopyConstructorInitializerKind</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>,
<macro><name>BTE</name><argument_list>(<argument>BTE</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>BTE</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><macro><name>getCXXBindTemporaryExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BTE</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CXX17ElidedCopyConstructorInitializerKind</name></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>NewAllocatedObjectConstructionContext</name> <operator>:</operator> <name>public</name> <name>ConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>CXXNewExpr</name> <operator>*</operator><name>NE</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>NewAllocatedObjectConstructionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CXXNewExpr</name> <operator>*</operator><name>NE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ConstructionContext</name><argument_list>(<argument><expr><name>ConstructionContext</name><operator>::</operator><name>NewAllocatedObjectKind</name></expr></argument>)</argument_list></call></expr>,
<macro><name>NE</name><argument_list>(<argument>NE</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>NE</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>CXXNewExpr</name> <operator>*</operator><macro><name>getCXXNewExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NE</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NewAllocatedObjectKind</name></expr>;</return>
}</block>
}</expr>;





<expr><name>class</name> <name>TemporaryObjectConstructionContext</name> <operator>:</operator> <name>public</name> <name>ConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr>;
<expr><specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <operator>*</operator><name>MTE</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>explicit</name> <macro><name>TemporaryObjectConstructionContext</name><argument_list>(
<argument>ConstructionContext::Kind K</argument>, <argument>const CXXBindTemporaryExpr *BTE</argument>,
<argument>const MaterializeTemporaryExpr *MTE</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ConstructionContext</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>BTE</name><argument_list>(<argument><expr><name>BTE</name></expr></argument>)</argument_list></call></expr>, <macro><name>MTE</name><argument_list>(<argument>MTE</argument>)</argument_list></macro> <expr><block>{




}</block>

<name>public</name><operator>:</operator>


<specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><macro><name>getCXXBindTemporaryExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>BTE</name></expr>;</return>
}</block>






<specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <operator>*</operator><macro><name>getMaterializedTemporaryExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>MTE</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>TEMPORARY_BEGIN</name> <operator>&amp;&amp;</operator> <call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>TEMPORARY_END</name></expr>;</return>
}</block>
}</expr>;





<expr><name>class</name> <name>SimpleTemporaryObjectConstructionContext</name>
<operator>:</operator> <name>public</name> <name>TemporaryObjectConstructionContext</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>SimpleTemporaryObjectConstructionContext</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <operator>*</operator><name>MTE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>TemporaryObjectConstructionContext</name><argument_list>(
<argument>ConstructionContext::SimpleTemporaryObjectKind</argument>, <argument>BTE</argument>, <argument>MTE</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SimpleTemporaryObjectKind</name></expr>;</return>
}</block>
}</expr>;









<expr><name>class</name> <name>ElidedTemporaryObjectConstructionContext</name>
<operator>:</operator> <name>public</name> <name>TemporaryObjectConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>CXXConstructExpr</name> <operator>*</operator><name>ElidedCE</name></expr>;
<expr><specifier>const</specifier> <name>ConstructionContext</name> <operator>*</operator><name>ElidedCC</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>ElidedTemporaryObjectConstructionContext</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <operator>*</operator><name>MTE</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CXXConstructExpr</name> <operator>*</operator><name>ElidedCE</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ConstructionContext</name> <operator>*</operator><name>ElidedCC</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>TemporaryObjectConstructionContext</name><argument_list>(
<argument><expr><name>ConstructionContext</name><operator>::</operator><name>ElidedTemporaryObjectKind</name></expr></argument>, <argument><expr><name>BTE</name></expr></argument>, <argument><expr><name>MTE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>ElidedCE</name><argument_list>(<argument><expr><name>ElidedCE</name></expr></argument>)</argument_list></call></expr>, <macro><name>ElidedCC</name><argument_list>(<argument>ElidedCC</argument>)</argument_list></macro> <expr><block>{



<expr><call><name>assert</name><argument_list>(<argument><expr><name>ElidedCE</name> <operator>&amp;&amp;</operator> <call><name><name>ElidedCE</name><operator>-&gt;</operator><name>isElidable</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>ElidedCC</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>CXXConstructExpr</name> <operator>*</operator><macro><name>getConstructorAfterElision</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ElidedCE</name></expr>;</return>
}</block>

<specifier>const</specifier> <name>ConstructionContext</name> <operator>*</operator><macro><name>getConstructionContextAfterElision</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>ElidedCC</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ElidedTemporaryObjectKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>ReturnedValueConstructionContext</name> <operator>:</operator> <name>public</name> <name>ConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>ReturnStmt</name> <operator>*</operator><name>RS</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>explicit</name> <macro><name>ReturnedValueConstructionContext</name><argument_list>(<argument>ConstructionContext::Kind K</argument>,
<argument>const ReturnStmt *RS</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ConstructionContext</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>, <macro><name>RS</name><argument_list>(<argument>RS</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>classof</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>RS</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>ReturnStmt</name> <operator>*</operator><macro><name>getReturnStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RS</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>RETURNED_VALUE_BEGIN</name> <operator>&amp;&amp;</operator>
<call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>RETURNED_VALUE_END</name></expr>;</return>
}</block>
}</expr>;






<expr><name>class</name> <name>SimpleReturnedValueConstructionContext</name>
<operator>:</operator> <name>public</name> <name>ReturnedValueConstructionContext</name> <block>{
<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>SimpleReturnedValueConstructionContext</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReturnStmt</name> <operator>*</operator><name>RS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ReturnedValueConstructionContext</name><argument_list>(
<argument>ConstructionContext::SimpleReturnedValueKind</argument>, <argument>RS</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>SimpleReturnedValueKind</name></expr>;</return>
}</block>
}</expr>;









<expr><name>class</name> <name>CXX17ElidedCopyReturnedValueConstructionContext</name>
<operator>:</operator> <name>public</name> <name>ReturnedValueConstructionContext</name> <block>{
<expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <call><name>CXX17ElidedCopyReturnedValueConstructionContext</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>ReturnStmt</name> <operator>*</operator><name>RS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ReturnedValueConstructionContext</name><argument_list>(
<argument><expr><name>ConstructionContext</name><operator>::</operator><name>CXX17ElidedCopyReturnedValueKind</name></expr></argument>, <argument><expr><name>RS</name></expr></argument>)</argument_list></call></expr>,
<macro><name>BTE</name><argument_list>(<argument>BTE</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>BTE</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><macro><name>getCXXBindTemporaryExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BTE</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CXX17ElidedCopyReturnedValueKind</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>ArgumentConstructionContext</name> <operator>:</operator> <name>public</name> <name>ConstructionContext</name> <block>{

<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>CE</name></expr>;




<expr><name>unsigned</name> <name>Index</name></expr>;


<expr><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><name>BTE</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ConstructionContext</name></expr>;

<expr><name>explicit</name> <macro><name>ArgumentConstructionContext</name><argument_list>(<argument>const Expr *CE</argument>, <argument>unsigned Index</argument>,
<argument>const CXXBindTemporaryExpr *BTE</argument>)</argument_list></macro>
<operator>:</operator> <call><name>ConstructionContext</name><argument_list>(<argument><expr><name>ArgumentKind</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>CE</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Index</name><argument_list>(<argument><expr><name>Index</name></expr></argument>)</argument_list></call></expr>, <macro><name>BTE</name><argument_list>(<argument>BTE</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CallExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>ObjCMessageExpr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

}</block>

<name>public</name><operator>:</operator>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getCallLikeExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CE</name></expr>;</return> }</block>
<name>unsigned</name> <macro><name>getIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Index</name></expr>;</return> }</block>
<specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <operator>*</operator><macro><name>getCXXBindTemporaryExpr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>BTE</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const ConstructionContext *CC</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CC</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ArgumentKind</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
