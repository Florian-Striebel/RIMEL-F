<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CommentLexer.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMMENTLEXER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMMENTLEXER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>comments</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Lexer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TextTokenRetokenizer</name></decl>;</decl_stmt>
<struct_decl>struct <name>CommandInfo</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>CommandTraits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tok</name> <block>{<block_content>
<enum>enum <name>TokenKind</name> <block>{
<decl><name>eof</name></decl>,
<decl><name>newline</name></decl>,
<decl><name>text</name></decl>,
<decl><name>unknown_command</name></decl>,
<decl><name>backslash_command</name></decl>,
<decl><name>at_command</name></decl>,
<decl><name>verbatim_block_begin</name></decl>,
<decl><name>verbatim_block_line</name></decl>,
<decl><name>verbatim_block_end</name></decl>,
<decl><name>verbatim_line_name</name></decl>,
<decl><name>verbatim_line_text</name></decl>,
<decl><name>html_start_tag</name></decl>,
<decl><name>html_ident</name></decl>,
<decl><name>html_equals</name></decl>,
<decl><name>html_quoted_string</name></decl>,
<decl><name>html_greater</name></decl>,
<decl><name>html_slash_greater</name></decl>,
<decl><name>html_end_tag</name></decl>
}</block>;</enum>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Token</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Lexer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TextTokenRetokenizer</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>


<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>IntVal</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>Length</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextPtr</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setLocation</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>SL</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Loc</name> <operator>=</operator> <name>SL</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<if_stmt><if>if <condition>(<expr><name>Length</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>Length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>Loc</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>Loc</name><operator>.</operator><name>getLocWithOffset</name></name><argument_list>(<argument><expr><name>Length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>setKind</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>Kind</name> <operator>=</operator> <name>K</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K</name></expr></argument>)</argument_list> const <name>LLVM_READONLY</name> <block>{<block_content> <return>return <expr><name>Kind</name> <operator>==</operator> <name>K</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isNot</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>K</name></expr></argument>)</argument_list> const <name>LLVM_READONLY</name> <block>{<block_content> <return>return <expr><name>Kind</name> <operator>!=</operator> <name>K</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>Length</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setLength</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Length</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getText</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Text</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getUnknownCommandName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>unknown_command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setUnknownCommandName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>unknown_command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getCommandID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>backslash_command</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>at_command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>IntVal</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setCommandID</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>backslash_command</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>at_command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getVerbatimBlockID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_block_begin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_block_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>IntVal</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setVerbatimBlockID</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_block_begin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_block_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getVerbatimBlockText</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_block_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setVerbatimBlockText</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_block_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Text</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>getVerbatimLineID</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_line_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>IntVal</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setVerbatimLineID</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_line_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getVerbatimLineText</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_line_text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setVerbatimLineText</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>verbatim_line_text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Text</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Text</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getHTMLTagStartName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_start_tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setHTMLTagStartName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_start_tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getHTMLIdent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_ident</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setHTMLIdent</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_ident</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getHTMLQuotedString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_quoted_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setHTMLQuotedString</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_quoted_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Str</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>StringRef</name> <macro><name>getHTMLTagEndName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_end_tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><name>TextPtr</name></expr></argument>, <argument><expr><name>IntVal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setHTMLTagEndName</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is</name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>html_end_tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>TextPtr</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IntVal</name> <operator>=</operator> <call><name><name>Name</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Lexer</name> <operator>&amp;</operator><name>L</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Lexer</name> <block>{<block_content>
<label><name>private</name>:</label>
<expr_stmt><expr><call><name>Lexer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Lexer</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Lexer</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandTraits</name> <modifier>&amp;</modifier></type><name>Traits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>BufferStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>BufferEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BufferPtr</name></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CommentEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>FileLoc</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>ParseCommands</name></decl>;</decl_stmt>

<enum>enum <name>LexerCommentState</name> : <type><name>uint8_t</name></type> <block>{
<decl><name>LCS_BeforeComment</name></decl>,
<decl><name>LCS_InsideBCPLComment</name></decl>,
<decl><name>LCS_InsideCComment</name></decl>,
<decl><name>LCS_BetweenComments</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>LexerCommentState</name></type> <name>CommentState</name></decl>;</decl_stmt>

<enum>enum <name>LexerState</name> : <type><name>uint8_t</name></type> <block>{

<decl><name>LS_Normal</name></decl>,



<decl><name>LS_VerbatimBlockFirstLine</name></decl>,



<decl><name>LS_VerbatimBlockBody</name></decl>,



<decl><name>LS_VerbatimLineText</name></decl>,


<decl><name>LS_HTMLStartTag</name></decl>,


<decl><name>LS_HTMLEndTag</name></decl>
}</block>;</enum>


<decl_stmt><decl><type><name>LexerState</name></type> <name>State</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name></type> <name>VerbatimBlockEndCommandName</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>StringRef</name></type> <name>resolveHTMLNamedCharacterReference</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>resolveHTMLDecimalCharacterReference</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>resolveHTMLHexCharacterReference</name><argument_list>(<argument><expr><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>formTokenWithChars</name><argument_list>(<argument><expr><name>Token</name> <operator>&amp;</operator><name>Result</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>TokEnd</name></expr></argument>,
<argument><expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>formTextToken</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>Result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TokEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Text</name><argument_list>(<argument><expr><name>BufferPtr</name></expr></argument>, <argument><expr><name>TokEnd</name> <operator>-</operator> <name>BufferPtr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name>formTokenWithChars</name><argument_list>(<argument><expr><name>Result</name></expr></argument>, <argument><expr><name>TokEnd</name></expr></argument>, <argument><expr><name>tok</name><operator>::</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>Text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getSourceLocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Loc</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Loc</name> <operator>&gt;=</operator> <name>BufferStart</name> <operator>&amp;&amp;</operator> <name>Loc</name> <operator>&lt;=</operator> <name>BufferEnd</name> <operator>&amp;&amp;</operator>
<literal type="string">"Location out of range for this buffer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>CharNo</name> <init>= <expr><name>Loc</name> <operator>-</operator> <name>BufferStart</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>FileLoc</name><operator>.</operator><name>getLocWithOffset</name></name><argument_list>(<argument><expr><name>CharNo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>DiagnosticBuilder</name></type> <name>Diag</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>DiagID</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Diags</name><operator>.</operator><name>Report</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>DiagID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>skipLineStartingDecorations</name><parameter_list>()</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>lexCommentText</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setupAndLexVerbatimBlock</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextBegin</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>Marker</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>Info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lexVerbatimBlockFirstLine</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lexVerbatimBlockBody</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setupAndLexVerbatimLine</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TextBegin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CommandInfo</name> <modifier>*</modifier></type><name>Info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lexVerbatimLineText</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lexHTMLCharacterReference</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setupAndLexHTMLStartTag</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lexHTMLStartTag</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setupAndLexHTMLEndTag</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>lexHTMLEndTag</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<macro><name>Lexer</name><argument_list>(<argument>llvm::BumpPtrAllocator &amp;Allocator</argument>, <argument>DiagnosticsEngine &amp;Diags</argument>,
<argument>const CommandTraits &amp;Traits</argument>, <argument>SourceLocation FileLoc</argument>,
<argument>const char *BufferStart</argument>, <argument>const char *BufferEnd</argument>,
<argument>bool ParseCommands = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function_decl><type><name>void</name></type> <name>lex</name><parameter_list>(<parameter><decl><type><name>Token</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>StringRef</name></type> <name>getSpelling</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>Tok</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
