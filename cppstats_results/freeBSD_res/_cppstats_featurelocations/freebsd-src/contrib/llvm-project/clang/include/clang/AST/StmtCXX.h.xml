<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/StmtCXX.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_STMTCXX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_STMTCXX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/NestedNameSpecifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>CXXCatchStmt</name> <range>: <expr><name>public</name> <name>Stmt</name> <block>{
<expr><name>SourceLocation</name> <name>CatchLoc</name></expr>;

<expr><name>VarDecl</name> <operator>*</operator><name>ExceptionDecl</name></expr>;

<expr><name>Stmt</name> <operator>*</operator><name>HandlerBlock</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>CXXCatchStmt</name><argument_list>(<argument>SourceLocation catchLoc</argument>, <argument>VarDecl *exDecl</argument>, <argument>Stmt *handlerBlock</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>CXXCatchStmtClass</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>CatchLoc</name><argument_list>(<argument><expr><name>catchLoc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ExceptionDecl</name><argument_list>(<argument><expr><name>exDecl</name></expr></argument>)</argument_list></call></expr>,
<macro><name>HandlerBlock</name><argument_list>(<argument>handlerBlock</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>CXXCatchStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>CXXCatchStmtClass</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ExceptionDecl</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>, <macro><name>HandlerBlock</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{}</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>CatchLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name><name>HandlerBlock</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getCatchLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CatchLoc</name></expr>;</return> }</block>
<name>VarDecl</name> <operator>*</operator><macro><name>getExceptionDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ExceptionDecl</name></expr>;</return> }</block>
<name>QualType</name> <macro><name>getCaughtType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>Stmt</name> <operator>*</operator><macro><name>getHandlerBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HandlerBlock</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CXXCatchStmtClass</name></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>HandlerBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>HandlerBlock</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>HandlerBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>HandlerBlock</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name> <name>CXXTryStmt</name></type> <name>final</name> <range>: <expr><name>public</name> <name>Stmt</name></expr></range></decl>,
<decl><type ref="prev"/><name>private</name> <name>llvm</name>::<name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>CXXTryStmt</name></expr></argument>, <argument><expr><name>Stmt</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <block>{<block_content>

<decl_stmt><decl><type><name>friend</name></type> <name>TrailingObjects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTStmtReader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>TryLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumHandlers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>numTrailingObjects</name><argument_list>(<argument><expr><name><name>OverloadToken</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>NumHandlers</name></expr>;</return> </block_content>}</block></decl></decl_stmt>

<macro><name>CXXTryStmt</name><argument_list>(<argument>SourceLocation tryLoc</argument>, <argument>Stmt *tryBlock</argument>, <argument>ArrayRef&lt;Stmt*&gt; handlers</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>CXXTryStmt</name><argument_list>(<argument>EmptyShell Empty</argument>, <argument>unsigned numHandlers</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Stmt</name><argument_list>(<argument><expr><name>CXXTryStmtClass</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>NumHandlers</name><argument_list>(<argument>numHandlers</argument>)</argument_list></macro> <expr><block>{ }</block>

<name>Stmt</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><macro><name>getStmts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>getStmts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>CXXTryStmt</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>tryLoc</name></decl></parameter>,
<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>tryBlock</name></decl></parameter>, <parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>handlers</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CXXTryStmt</name> <modifier>*</modifier></type><name>Create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>EmptyShell</name></type> <name>Empty</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>numHandlers</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><call><name>getTryLoc</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getTryLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TryLoc</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><name>NumHandlers</name></expr>]</index><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>CompoundStmt</name> <modifier>*</modifier></type><name>getTryBlock</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CompoundStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>CompoundStmt</name> <operator>*</operator><macro><name>getTryBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CompoundStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumHandlers</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumHandlers</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>CXXCatchStmt</name> <modifier>*</modifier></type><name>getHandler</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXCatchStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>CXXCatchStmt</name> <modifier>*</modifier></type><name>getHandler</name><argument_list>(<argument><expr><name>unsigned</name> <name>i</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXCatchStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CXXTryStmtClass</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>child_range</name></type> <name>children</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getNumHandlers</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getStmts</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getNumHandlers</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>CXXForRangeStmt</name> <range>: <expr><name>public</name> <name>Stmt</name> <block>{
<expr><name>SourceLocation</name> <name>ForLoc</name></expr>;
enum <expr><block>{ <expr><name>INIT</name></expr>, <expr><name>RANGE</name></expr>, <expr><name>BEGINSTMT</name></expr>, <expr><name>ENDSTMT</name></expr>, <expr><name>COND</name></expr>, <expr><name>INC</name></expr>, <expr><name>LOOPVAR</name></expr>, <expr><name>BODY</name></expr>, <expr><name>END</name></expr> }</block></expr>;


<expr><name>Stmt</name> <operator>*</operator><name><name>SubExprs</name><index>[<expr><name>END</name></expr>]</index></name></expr>;
<expr><name>SourceLocation</name> <name>CoawaitLoc</name></expr>;
<expr><name>SourceLocation</name> <name>ColonLoc</name></expr>;
<expr><name>SourceLocation</name> <name>RParenLoc</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>CXXForRangeStmt</name><argument_list>(<argument>Stmt *InitStmt</argument>, <argument>DeclStmt *Range</argument>, <argument>DeclStmt *Begin</argument>,
<argument>DeclStmt *End</argument>, <argument>Expr *Cond</argument>, <argument>Expr *Inc</argument>, <argument>DeclStmt *LoopVar</argument>,
<argument>Stmt *Body</argument>, <argument>SourceLocation FL</argument>, <argument>SourceLocation CAL</argument>,
<argument>SourceLocation CL</argument>, <argument>SourceLocation RPL</argument>)</argument_list></macro></expr>;
<macro><name>CXXForRangeStmt</name><argument_list>(<argument>EmptyShell Empty</argument>)</argument_list></macro> <operator>:</operator> <macro><name>Stmt</name><argument_list>(<argument>CXXForRangeStmtClass</argument>, <argument>Empty</argument>)</argument_list></macro> <expr><block>{ }</block>

<name>Stmt</name> <operator>*</operator><macro><name>getInit</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>INIT</name></expr>]</index></name></expr>;</return> }</block>
<name>VarDecl</name> <operator>*</operator><call><name>getLoopVariable</name><argument_list>()</argument_list></call></expr>;
<expr><name>Expr</name> <operator>*</operator><call><name>getRangeInit</name><argument_list>()</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getInit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>INIT</name></expr>]</index></name></expr>;</return> }</block>
<specifier>const</specifier> <name>VarDecl</name> <operator>*</operator><macro><name>getLoopVariable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getRangeInit</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>DeclStmt</name> <operator>*</operator><macro><name>getRangeStmt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>RANGE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>DeclStmt</name> <operator>*</operator><macro><name>getBeginStmt</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>BEGINSTMT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>DeclStmt</name> <operator>*</operator><macro><name>getEndStmt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>ENDSTMT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>Expr</name> <operator>*</operator><macro><name>getCond</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>COND</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>Expr</name> <operator>*</operator><macro><name>getInc</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>INC</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>DeclStmt</name> <operator>*</operator><macro><name>getLoopVarStmt</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>LOOPVAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>getBody</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name></expr>;</return> }</block>

<specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><macro><name>getRangeStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>RANGE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><macro><name>getBeginStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>BEGINSTMT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><macro><name>getEndStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>ENDSTMT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getCond</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>COND</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>Expr</name> <operator>*</operator><macro><name>getInc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>INC</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>DeclStmt</name> <operator>*</operator><macro><name>getLoopVarStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubExprs</name><index>[<expr><name>LOOPVAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name></expr>;</return> }</block>

<name>void</name> <macro><name>setInit</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>INIT</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>
<name>void</name> <macro><name>setRangeInit</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>RANGE</name></expr>]</index></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>setRangeStmt</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>RANGE</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>
<name>void</name> <macro><name>setBeginStmt</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>BEGINSTMT</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>
<name>void</name> <macro><name>setEndStmt</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>ENDSTMT</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>
<name>void</name> <macro><name>setCond</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>COND</name></expr>]</index></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>setInc</name><argument_list>(<argument>Expr *E</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>INC</name></expr>]</index></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>setLoopVarStmt</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>LOOPVAR</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>
<name>void</name> <macro><name>setBody</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name> <operator>=</operator> <name>S</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getForLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ForLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getCoawaitLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CoawaitLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getColonLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ColonLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getRParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>RParenLoc</name></expr>;</return> }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>ForLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><name><name>SubExprs</name><index>[<expr><name>BODY</name></expr>]</index></name><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CXXForRangeStmtClass</name></expr>;</return>
}</block>


<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>END</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SubExprs</name><index>[<expr><name>END</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;




























<expr><name>class</name> <name>MSDependentExistsStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>SourceLocation</name> <name>KeywordLoc</name></expr>;
<expr><name>bool</name> <name>IsIfExists</name></expr>;
<expr><name>NestedNameSpecifierLoc</name> <name>QualifierLoc</name></expr>;
<expr><name>DeclarationNameInfo</name> <name>NameInfo</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>SubStmt</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ASTReader</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>MSDependentExistsStmt</name><argument_list>(<argument>SourceLocation KeywordLoc</argument>, <argument>bool IsIfExists</argument>,
<argument>NestedNameSpecifierLoc QualifierLoc</argument>,
<argument>DeclarationNameInfo NameInfo</argument>,
<argument>CompoundStmt *SubStmt</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>MSDependentExistsStmtClass</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>KeywordLoc</name><argument_list>(<argument><expr><name>KeywordLoc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>IsIfExists</name><argument_list>(<argument><expr><name>IsIfExists</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>QualifierLoc</name><argument_list>(<argument><expr><name>QualifierLoc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>NameInfo</name><argument_list>(<argument><expr><name>NameInfo</name></expr></argument>)</argument_list></call></expr>,
<macro><name>SubStmt</name><argument_list>(<argument>reinterpret_cast&lt;Stmt *&gt;(SubStmt)</argument>)</argument_list></macro> <expr><block>{ }</block>



<name>SourceLocation</name> <macro><name>getKeywordLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>KeywordLoc</name></expr>;</return> }</block>


<name>bool</name> <macro><name>isIfExists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsIfExists</name></expr>;</return> }</block>


<name>bool</name> <macro><name>isIfNotExists</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>IsIfExists</name></expr>;</return> }</block>



<name>NestedNameSpecifierLoc</name> <macro><name>getQualifierLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>QualifierLoc</name></expr>;</return> }</block>



<name>DeclarationNameInfo</name> <macro><name>getNameInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NameInfo</name></expr>;</return> }</block>



<name>CompoundStmt</name> <operator>*</operator><macro><name>getSubStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>CompoundStmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>SubStmt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>KeywordLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name><name>SubStmt</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SubStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SubStmt</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SubStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SubStmt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MSDependentExistsStmtClass</name></expr>;</return>
}</block>
}</expr>;




<expr><name>class</name> <name>CoroutineBodyStmt</name> <name>final</name>
<operator>:</operator> <name>public</name> <name>Stmt</name></expr>,
<expr><name>private</name> <name>llvm</name><operator>::</operator><name><name>TrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>CoroutineBodyStmt</name></expr></argument>, <argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
enum <expr><name>SubStmt</name> <block>{
<expr><name>Body</name></expr>,
<expr><name>Promise</name></expr>,
<expr><name>InitSuspend</name></expr>,
<expr><name>FinalSuspend</name></expr>,
<expr><name>OnException</name></expr>,
<expr><name>OnFallthrough</name></expr>,
<expr><name>Allocate</name></expr>,
<expr><name>Deallocate</name></expr>,
<expr><name>ReturnValue</name></expr>,
<expr><name>ResultDecl</name></expr>,
<expr><name>ReturnStmt</name></expr>,
<expr><name>ReturnStmtOnAllocFailure</name></expr>,
<expr><name>FirstParamMove</name></expr>
}</block></expr>;
<expr><name>unsigned</name> <name>NumParams</name></expr>;

<expr><name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;
<expr><name>friend</name> <name>class</name> <name>ASTReader</name></expr>;
<expr><name>friend</name> <name>TrailingObjects</name></expr>;

<expr><name>Stmt</name> <operator>*</operator><operator>*</operator><macro><name>getStoredStmts</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>Stmt</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><macro><name>getStoredStmts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>getTrailingObjects</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>public</name><operator>:</operator>

struct <name>CtorArgs</name> <block>{
<expr><name>Stmt</name> <operator>*</operator><name>Body</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>Promise</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Expr</name> <operator>*</operator><name>InitialSuspend</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Expr</name> <operator>*</operator><name>FinalSuspend</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>OnException</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>OnFallthrough</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Expr</name> <operator>*</operator><name>Allocate</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Expr</name> <operator>*</operator><name>Deallocate</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Expr</name> <operator>*</operator><name>ReturnValue</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>ResultDecl</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>ReturnStmt</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Stmt</name> <operator>*</operator><name>ReturnStmtOnAllocFailure</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ParamMoves</name></expr>;
}</block></expr>;

<expr><name>private</name><operator>:</operator>

<call><name>CoroutineBodyStmt</name><argument_list>(<argument><expr><name>CtorArgs</name> <specifier>const</specifier><operator>&amp;</operator> <name>Args</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>CoroutineBodyStmt</name> <operator>*</operator><call><name>Create</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>CtorArgs</name> <specifier>const</specifier> <operator>&amp;</operator><name>Args</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>CoroutineBodyStmt</name> <operator>*</operator><macro><name>Create</name><argument_list>(<argument>const ASTContext &amp;C</argument>, <argument>EmptyShell</argument>,
<argument>unsigned NumParams</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>hasDependentPromiseType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getPromiseDecl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isDependentType</name><argument_list>()</argument_list></call></expr>;</return>
}</block>



<name>Stmt</name> <operator>*</operator><macro><name>getBody</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>Body</name></expr>]</index></expr>;</return>
}</block>

<name>Stmt</name> <operator>*</operator><macro><name>getPromiseDeclStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>Promise</name></expr>]</index></expr>;</return>
}</block>
<name>VarDecl</name> <operator>*</operator><macro><name>getPromiseDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclStmt</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPromiseDeclStmt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getSingleDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>Stmt</name> <operator>*</operator><macro><name>getInitSuspendStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>InitSuspend</name></expr>]</index></expr>;</return>
}</block>
<name>Stmt</name> <operator>*</operator><macro><name>getFinalSuspendStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>FinalSuspend</name></expr>]</index></expr>;</return>
}</block>

<name>Stmt</name> <operator>*</operator><macro><name>getExceptionHandler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>OnException</name></expr>]</index></expr>;</return>
}</block>
<name>Stmt</name> <operator>*</operator><macro><name>getFallthroughHandler</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>OnFallthrough</name></expr>]</index></expr>;</return>
}</block>

<name>Expr</name> <operator>*</operator><macro><name>getAllocate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>Allocate</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>Expr</name> <operator>*</operator><macro><name>getDeallocate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast_or_null</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>Deallocate</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>Expr</name> <operator>*</operator><macro><name>getReturnValueInit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>ReturnValue</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>Stmt</name> <operator>*</operator><macro><name>getResultDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>ResultDecl</name></expr>]</index></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>getReturnStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>ReturnStmt</name></expr>]</index></expr>;</return> }</block>
<name>Stmt</name> <operator>*</operator><macro><name>getReturnStmtOnAllocFailure</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call><index>[<expr><name>SubStmt</name><operator>::</operator><name>ReturnStmtOnAllocFailure</name></expr>]</index></expr>;</return>
}</block>
<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getParamMoves</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>FirstParamMove</name></expr>, <expr><name>NumParams</name></expr>}</block></expr>;</return>
}</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><call><name>getBody</name><argument_list>()</argument_list></call> <operator>?</operator> <call><name>getBody</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getBeginLoc</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>getPromiseDecl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getBeginLoc</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><ternary><condition><expr><call><name>getBody</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getBody</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>getPromiseDecl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>FirstParamMove</name> <operator>+</operator> <name>NumParams</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getStoredStmts</name><argument_list>()</argument_list></call> <operator>+</operator>
<name>SubStmt</name><operator>::</operator><name>FirstParamMove</name> <operator>+</operator>
<name>NumParams</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CoroutineBodyStmtClass</name></expr>;</return>
}</block>
}</expr>;












<expr><name>class</name> <name>CoreturnStmt</name> <operator>:</operator> <name>public</name> <name>Stmt</name> <block>{
<expr><name>SourceLocation</name> <name>CoreturnLoc</name></expr>;

enum <expr><name>SubStmt</name> <block>{ <expr><name>Operand</name></expr>, <expr><name>PromiseCall</name></expr>, <expr><name>Count</name></expr> }</block></expr>;
<expr><name>Stmt</name> <operator>*</operator><name><name>SubStmts</name><index>[<expr><name>SubStmt</name><operator>::</operator><name>Count</name></expr>]</index></name></expr>;

<expr><name>bool</name> <name>IsImplicit</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>friend</name> <name>class</name> <name>ASTStmtReader</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>CoreturnStmt</name><argument_list>(<argument>SourceLocation CoreturnLoc</argument>, <argument>Stmt *Operand</argument>, <argument>Stmt *PromiseCall</argument>,
<argument>bool IsImplicit = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Stmt</name><argument_list>(<argument><expr><name>CoreturnStmtClass</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>CoreturnLoc</name><argument_list>(<argument><expr><name>CoreturnLoc</name></expr></argument>)</argument_list></call></expr>,
<macro><name>IsImplicit</name><argument_list>(<argument>IsImplicit</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>SubStmts</name><index>[<expr><name>SubStmt</name><operator>::</operator><name>Operand</name></expr>]</index></name> <operator>=</operator> <name>Operand</name></expr>;
<expr><name><name>SubStmts</name><index>[<expr><name>SubStmt</name><operator>::</operator><name>PromiseCall</name></expr>]</index></name> <operator>=</operator> <name>PromiseCall</name></expr>;
}</block>

<call><name>CoreturnStmt</name><argument_list>(<argument><expr><name>EmptyShell</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>CoreturnStmt</name><argument_list>(<argument>{}</argument>, <argument>{}</argument>, <argument>{}</argument>)</argument_list></macro> <block>{}</block>

<name>SourceLocation</name> <macro><name>getKeywordLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CoreturnLoc</name></expr>;</return> }</block>



<name>Expr</name> <operator>*</operator><macro><name>getOperand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubStmts</name><index>[<expr><name>Operand</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return> }</block>




<name>Expr</name> <operator>*</operator><macro><name>getPromiseCall</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Expr</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SubStmts</name><index>[<expr><name>PromiseCall</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>isImplicit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsImplicit</name></expr>;</return> }</block>
<name>void</name> <macro><name>setIsImplicit</name><argument_list>(<argument>bool value = true</argument>)</argument_list></macro> <block>{ <expr><name>IsImplicit</name> <operator>=</operator> <name>value</name></expr>; }</block>

<name>SourceLocation</name> <macro><name>getBeginLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{ <return>return <expr><name>CoreturnLoc</name></expr>;</return> }</block>
<name>SourceLocation</name> <macro><name>getEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>LLVM_READONLY</name> <block>{
<return>return <expr><ternary><condition><expr><call><name>getOperand</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getOperand</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getEndLoc</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>getBeginLoc</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
}</block>

<name>child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getOperand</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><name>SubStmts</name> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>PromiseCall</name></expr></argument>,
<argument><expr><name>SubStmts</name> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>Count</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>child_range</name><argument_list>(<argument><expr><name>SubStmts</name></expr></argument>, <argument><expr><name>SubStmts</name> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>Count</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>const_child_range</name> <macro><name>children</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getOperand</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><name>SubStmts</name> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>PromiseCall</name></expr></argument>,
<argument><expr><name>SubStmts</name> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>Count</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name>const_child_range</name><argument_list>(<argument><expr><name>SubStmts</name></expr></argument>, <argument><expr><name>SubStmts</name> <operator>+</operator> <name>SubStmt</name><operator>::</operator><name>Count</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Stmt *T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>T</name><operator>-&gt;</operator><name>getStmtClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CoreturnStmtClass</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
