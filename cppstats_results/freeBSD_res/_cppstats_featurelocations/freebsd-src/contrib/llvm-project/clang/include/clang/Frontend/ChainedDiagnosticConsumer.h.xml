<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/ChainedDiagnosticConsumer.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_CHAINEDDIAGNOSTICCONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_CHAINEDDIAGNOSTICCONSUMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Diagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>ChainedDiagnosticConsumer</name> <range>: <expr><name>public</name> <name>DiagnosticConsumer</name> <block>{
<expr><name>virtual</name> <name>void</name> <call><name>anchor</name><argument_list>()</argument_list></call></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>OwningPrimary</name></expr>;
<expr><name>DiagnosticConsumer</name> <operator>*</operator><name>Primary</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>Secondary</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ChainedDiagnosticConsumer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>Primary</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>Secondary</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>OwningPrimary</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Primary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>Primary</name><argument_list>(<argument><expr><call><name><name>OwningPrimary</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>Secondary</name><argument_list>(<argument>std::move(Secondary)</argument>)</argument_list></macro> <expr><block>{}</block>


<call><name>ChainedDiagnosticConsumer</name><argument_list>(<argument><expr><name>DiagnosticConsumer</name> <operator>*</operator><name>Primary</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticConsumer</name></expr></argument>&gt;</argument_list></name> <name>Secondary</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Primary</name><argument_list>(<argument><expr><name>Primary</name></expr></argument>)</argument_list></call></expr>, <macro><name>Secondary</name><argument_list>(<argument>std::move(Secondary)</argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>BeginSourceFile</name><argument_list>(<argument>const LangOptions &amp;LO</argument>,
<argument>const Preprocessor *PP</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>Primary</name><operator>-&gt;</operator><name>BeginSourceFile</name></name><argument_list>(<argument><expr><name>LO</name></expr></argument>, <argument><expr><name>PP</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Secondary</name><operator>-&gt;</operator><name>BeginSourceFile</name></name><argument_list>(<argument><expr><name>LO</name></expr></argument>, <argument><expr><name>PP</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>EndSourceFile</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>Secondary</name><operator>-&gt;</operator><name>EndSourceFile</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>Primary</name><operator>-&gt;</operator><name>EndSourceFile</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>finish</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<expr><call><name><name>Secondary</name><operator>-&gt;</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>Primary</name><operator>-&gt;</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>bool</name> <macro><name>IncludeInDiagnosticCounts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{
<return>return <expr><call><name><name>Primary</name><operator>-&gt;</operator><name>IncludeInDiagnosticCounts</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>HandleDiagnostic</name><argument_list>(<argument>DiagnosticsEngine::Level DiagLevel</argument>,
<argument>const Diagnostic &amp;Info</argument>)</argument_list></macro> <name>override</name> <block>{

<expr><name>DiagnosticConsumer</name><operator>::</operator><call><name>HandleDiagnostic</name><argument_list>(<argument><expr><name>DiagLevel</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>)</argument_list></call></expr>;

<expr><call><name><name>Primary</name><operator>-&gt;</operator><name>HandleDiagnostic</name></name><argument_list>(<argument><expr><name>DiagLevel</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Secondary</name><operator>-&gt;</operator><name>HandleDiagnostic</name></name><argument_list>(<argument><expr><name>DiagLevel</name></expr></argument>, <argument><expr><name>Info</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
