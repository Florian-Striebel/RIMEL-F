<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Builtins.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_BUILTINS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_BUILTINS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>



<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>alloca</name></cpp:undef>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>

<enum>enum <name>LanguageID</name> <block>{
<decl><name>GNU_LANG</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
<decl><name>C_LANG</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
<decl><name>CXX_LANG</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,
<decl><name>OBJC_LANG</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,
<decl><name>MS_LANG</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>OCLC20_LANG</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>OCLC1X_LANG</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>OMP_LANG</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
<decl><name>CUDA_LANG</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,
<decl><name>COR_LANG</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,
<decl><name>ALL_LANGUAGES</name> <init>= <expr><name>C_LANG</name> <operator>|</operator> <name>CXX_LANG</name> <operator>|</operator> <name>OBJC_LANG</name></expr></init></decl>,
<decl><name>ALL_GNU_LANGUAGES</name> <init>= <expr><name>ALL_LANGUAGES</name> <operator>|</operator> <name>GNU_LANG</name></expr></init></decl>,
<decl><name>ALL_MS_LANGUAGES</name> <init>= <expr><name>ALL_LANGUAGES</name> <operator>|</operator> <name>MS_LANG</name></expr></init></decl>,
<decl><name>ALL_OCLC_LANGUAGES</name> <init>= <expr><name>OCLC1X_LANG</name> <operator>|</operator> <name>OCLC20_LANG</name></expr></init></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>namespace</name></type> <name>Builtin</name> <block>{<block_content>
<enum>enum <name>ID</name> <block>{
<decl><name>NotBuiltin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN</name><parameter_list>(<parameter><type><name>ID</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>ATTRS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BI##ID,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Builtins.def"</cpp:file></cpp:include>
<decl><name>FirstTSBuiltin</name></decl>
}</block>;</enum>

<struct>struct <name>Info</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Attributes</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>HeaderName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LanguageID</name></type> <name>Langs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Features</name></decl>;</decl_stmt>
}</block>;</struct>







<decl_stmt><decl><type><name>class</name></type> <name>Context</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Info</name></expr></argument>&gt;</argument_list></name> <name>TSRecords</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Info</name></expr></argument>&gt;</argument_list></name> <name>AuxTSRecords</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<macro><name>Context</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>



<function_decl><type><name>void</name></type> <name>InitializeTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>&amp;</modifier></type><name>Target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TargetInfo</name> <modifier>*</modifier></type><name>AuxTarget</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>initializeBuiltins</name><parameter_list>(<parameter><decl><type><name>IdentifierTable</name> <modifier>&amp;</modifier></type><name>Table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LangOptions</name><modifier>&amp;</modifier></type> <name>LangOpts</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getName</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Name</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getTypeString</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Type</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isTSBuiltin</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>ID</name> <operator>&gt;=</operator> <name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isPure</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isConst</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isNoThrow</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isNoReturn</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isReturnsTwice</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isUnevaluated</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isLibFunction</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>isPredefinedLibFunction</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>isHeaderDependentFunction</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>isPredefinedRuntimeFunction</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>hasCustomTypechecking</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>allowTypeMismatch</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name> <operator>||</operator>
<call><name>hasCustomTypechecking</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>hasPtrArgsOrResult</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Type</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>hasReferenceArgsOrResult</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Type</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Type</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getHeaderName</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>HeaderName</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<function_decl><type><name>bool</name></type> <name>isPrintfLike</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>FormatIdx</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>HasVAListArg</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>bool</name></type> <name>isScanfLike</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>FormatIdx</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>HasVAListArg</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name>bool</name></type> <name>performsCallback</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Encoding</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>isConstWithoutErrno</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Attributes</name></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getRequiredFeatures</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>getRecord</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call><operator>.</operator><name>Features</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>getRequiredVectorWidth</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isAuxBuiltinID</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>ID</name> <operator>&gt;=</operator> <operator>(</operator><name>Builtin</name><operator>::</operator><name>FirstTSBuiltin</name> <operator>+</operator> <call><name><name>TSRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>getAuxBuiltinID</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name>ID</name> <operator>-</operator> <call><name><name>TSRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isBuiltinFunc</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Name</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>canBeRedeclared</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Info</name> <modifier>&amp;</modifier></type><name>getRecord</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>builtinIsSupported</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Builtin</name><operator>::</operator><name>Info</name> <operator>&amp;</operator><name>BuiltinInfo</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isLike</name><argument_list>(<argument><expr><name>unsigned</name> <name>ID</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>&amp;</operator><name>FormatIdx</name></expr></argument>, <argument><expr><name>bool</name> <operator>&amp;</operator><name>HasVAListArg</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Fmt</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>


<enum>enum <name>BuiltinTemplateKind</name> : <type><name>int</name></type> <block>{

<decl><name>BTK__make_integer_seq</name></decl>,


<decl><name>BTK__type_pack_element</name></decl>
}</block>;</enum>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
