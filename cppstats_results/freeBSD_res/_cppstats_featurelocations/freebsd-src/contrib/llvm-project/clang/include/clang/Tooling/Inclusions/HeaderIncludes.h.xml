<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Inclusions/HeaderIncludes.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_INCLUSIONS_HEADERINCLUDES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_INCLUSIONS_HEADERINCLUDES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Core/Replacement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Inclusions/IncludeStyle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Regex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>





<decl_stmt><decl><type><name>class</name></type> <name>IncludeCategoryManager</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>IncludeCategoryManager</name><argument_list>(<argument>const IncludeStyle &amp;Style</argument>, <argument>StringRef FileName</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>getIncludePriority</name><argument_list>(<argument><expr><name>StringRef</name> <name>IncludeName</name></expr></argument>, <argument><expr><name>bool</name> <name>CheckMainHeader</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>getSortIncludePriority</name><argument_list>(<argument><expr><name>StringRef</name> <name>IncludeName</name></expr></argument>, <argument><expr><name>bool</name> <name>CheckMainHeader</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>isMainHeader</name><argument_list>(<argument><expr><name>StringRef</name> <name>IncludeName</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IncludeStyle</name></type> <name>Style</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsMainFile</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Regex</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>CategoryRegexs</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>HeaderIncludes</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>HeaderIncludes</name><argument_list>(<argument>llvm::StringRef FileName</argument>, <argument>llvm::StringRef Code</argument>,
<argument>const IncludeStyle &amp;Style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>




















<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>tooling</name><operator>::</operator><name>Replacement</name></expr></argument>&gt;</argument_list></name> <macro><name>insert</name><argument_list>(<argument>llvm::StringRef Header</argument>,
<argument>bool IsAngled</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>





<expr_stmt><expr><name>tooling</name><operator>::</operator><name>Replacements</name> <macro><name>remove</name><argument_list>(<argument>llvm::StringRef Header</argument>, <argument>bool IsAngled</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<struct>struct <name>Include</name> <block>{
<macro><name>Include</name><argument_list>(<argument>StringRef Name</argument>, <argument>tooling::Range R</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>Name</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>R</name><argument_list>(<argument>R</argument>)</argument_list></macro> <expr><block>{}</block>


<name>std</name><operator>::</operator><name>string</name> <name>Name</name></expr>;</expr_stmt>


<expr_stmt><expr><name>tooling</name><operator>::</operator><name>Range</name> <name>R</name></expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>void</name></type> <name>addExistingInclude</name><parameter_list>(<parameter><decl><type><name>Include</name></type> <name>IncludeToAdd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>NextLineOffset</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Code</name></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Include</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ExistingIncludes</name></expr>;</expr_stmt>







<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Include</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>IncludesByPriority</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>FirstIncludeOffset</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>MinInsertOffset</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>MaxInsertOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IncludeCategoryManager</name></type> <name>Categories</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>CategoryEndOffsets</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>Priorities</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Regex</name> <name>IncludeRegex</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
