<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_PARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ASTMATCHERS_DYNAMIC_PARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchersInternal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/Dynamic/Registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/Dynamic/VariantValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ast_matchers</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dynamic</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Diagnostics</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Parser</name> <block>{<block_content>
<label><name>public</name>:</label>










<decl_stmt><decl><type><name>class</name></type> <name>Sema</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Sema</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


















<function_decl><type><name>virtual</name> <name>VariantMatcher</name></type> <name>actOnMatcherExpression</name><parameter_list>(<parameter><decl><type><name>MatcherCtor</name></type> <name>Ctor</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>NameRange</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>BindID</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ParserValue</name></expr></argument>&gt;</argument_list></name></type> <name>Args</name></decl></parameter>,
<parameter><decl><type><name>Diagnostics</name> <modifier>*</modifier></type><name>Error</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>







<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCtor</name></expr></argument>&gt;</argument_list></name>
<macro><name>lookupMatcherCtor</name><argument_list>(<argument>StringRef MatcherName</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>isBuilderMatcher</name><argument_list>(<argument><expr><name>MatcherCtor</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>virtual</name> <name>ASTNodeKind</name></type> <name>nodeMatcherType</name><argument_list>(<argument><expr><name>MatcherCtor</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>internal</name><operator>::</operator><name>MatcherDescriptorPtr</name>
<macro><name>buildMatcherCtor</name><argument_list>(<argument>MatcherCtor</argument>, <argument>SourceRange NameRange</argument>,
<argument>ArrayRef&lt;ParserValue&gt; Args</argument>, <argument>Diagnostics *Error</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>









<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ArgKind</name></expr></argument>&gt;</argument_list></name> <call><name>getAcceptedCompletionTypes</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCtor</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name>
<call><name>getMatcherCompletions</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ArgKind</name></expr></argument>&gt;</argument_list></name> <name>AcceptedTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>RegistrySema</name> <range>: <expr><name>public</name> <name>Parser</name><operator>::</operator><name>Sema</name> <block>{
<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>RegistrySema</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCtor</name></expr></argument>&gt;</argument_list></name>
<macro><name>lookupMatcherCtor</name><argument_list>(<argument>StringRef MatcherName</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>VariantMatcher</name> <macro><name>actOnMatcherExpression</name><argument_list>(<argument>MatcherCtor Ctor</argument>,
<argument>SourceRange NameRange</argument>,
<argument>StringRef BindID</argument>,
<argument>ArrayRef&lt;ParserValue&gt; Args</argument>,
<argument>Diagnostics *Error</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ArgKind</name></expr></argument>&gt;</argument_list></name> <macro><name>getAcceptedCompletionTypes</name><argument_list>(
<argument>llvm::ArrayRef&lt;std::pair&lt;MatcherCtor</argument>, <argument>unsigned&gt;&gt; Context</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>isBuilderMatcher</name><argument_list>(<argument>MatcherCtor Ctor</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>ASTNodeKind</name> <macro><name>nodeMatcherType</name><argument_list>(<argument>MatcherCtor</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>internal</name><operator>::</operator><name>MatcherDescriptorPtr</name>
<macro><name>buildMatcherCtor</name><argument_list>(<argument>MatcherCtor</argument>, <argument>SourceRange NameRange</argument>,
<argument>ArrayRef&lt;ParserValue&gt; Args</argument>,
<argument>Diagnostics *Error</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name>
<macro><name>getMatcherCompletions</name><argument_list>(<argument>llvm::ArrayRef&lt;ArgKind&gt; AcceptedTypes</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>NamedValueMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>VariantValue</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
















<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name>
<call><name>parseMatcherExpression</name><argument_list>(<argument><expr><name>StringRef</name> <operator>&amp;</operator><name>MatcherCode</name></expr></argument>, <argument><expr><name>Sema</name> <operator>*</operator><name>S</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NamedValueMap</name> <operator>*</operator><name>NamedValues</name></expr></argument>, <argument><expr><name>Diagnostics</name> <operator>*</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name>
<macro><name>parseMatcherExpression</name><argument_list>(<argument>StringRef &amp;MatcherCode</argument>, <argument>Sema *S</argument>, <argument>Diagnostics *Error</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>parseMatcherExpression</name><argument_list>(<argument><expr><name>MatcherCode</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>DynTypedMatcher</name></expr></argument>&gt;</argument_list></name>
<macro><name>parseMatcherExpression</name><argument_list>(<argument>StringRef &amp;MatcherCode</argument>, <argument>Diagnostics *Error</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>parseMatcherExpression</name><argument_list>(<argument><expr><name>MatcherCode</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>













<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>parseExpression</name><parameter_list>(<parameter><decl><type><name>StringRef</name> <modifier>&amp;</modifier></type><name>Code</name></decl></parameter>, <parameter><decl><type><name>Sema</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>NamedValueMap</name> <modifier>*</modifier></type><name>NamedValues</name></decl></parameter>,
<parameter><decl><type><name>VariantValue</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>, <parameter><decl><type><name>Diagnostics</name> <modifier>*</modifier></type><name>Error</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>parseExpression</name><parameter_list>(<parameter><decl><type><name>StringRef</name> <modifier>&amp;</modifier></type><name>Code</name></decl></parameter>, <parameter><decl><type><name>Sema</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>VariantValue</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>,
<parameter><decl><type><name>Diagnostics</name> <modifier>*</modifier></type><name>Error</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>parseExpression</name><argument_list>(<argument><expr><name>Code</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>parseExpression</name><parameter_list>(<parameter><decl><type><name>StringRef</name> <modifier>&amp;</modifier></type><name>Code</name></decl></parameter>, <parameter><decl><type><name>VariantValue</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>,
<parameter><decl><type><name>Diagnostics</name> <modifier>*</modifier></type><name>Error</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>parseExpression</name><argument_list>(<argument><expr><name>Code</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>Value</name></expr></argument>, <argument><expr><name>Error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name>
<macro><name>completeExpression</name><argument_list>(<argument>StringRef &amp;Code</argument>, <argument>unsigned CompletionOffset</argument>, <argument>Sema *S</argument>,
<argument>const NamedValueMap *NamedValues</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name>
<macro><name>completeExpression</name><argument_list>(<argument>StringRef &amp;Code</argument>, <argument>unsigned CompletionOffset</argument>, <argument>Sema *S</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>completeExpression</name><argument_list>(<argument><expr><name>Code</name></expr></argument>, <argument><expr><name>CompletionOffset</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name>
<macro><name>completeExpression</name><argument_list>(<argument>StringRef &amp;Code</argument>, <argument>unsigned CompletionOffset</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>completeExpression</name><argument_list>(<argument><expr><name>Code</name></expr></argument>, <argument><expr><name>CompletionOffset</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>CodeTokenizer</name></decl>;</decl_stmt>
<struct_decl>struct <name>ScopedContextEntry</name>;</struct_decl>
<struct_decl>struct <name>TokenInfo</name>;</struct_decl>

<expr_stmt><expr><call><name>Parser</name><argument_list>(<argument><expr><name>CodeTokenizer</name> <operator>*</operator><name>Tokenizer</name></expr></argument>, <argument><expr><name>Sema</name> <operator>*</operator><name>S</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>NamedValueMap</name> <operator>*</operator><name>NamedValues</name></expr></argument>,
<argument><expr><name>Diagnostics</name> <operator>*</operator><name>Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>parseBindID</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>BindID</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>parseExpressionImpl</name><parameter_list>(<parameter><decl><type><name>VariantValue</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>parseMatcherBuilder</name><parameter_list>(<parameter><decl><type><name>MatcherCtor</name></type> <name>Ctor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TokenInfo</name> <modifier>&amp;</modifier></type><name>NameToken</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TokenInfo</name> <modifier>&amp;</modifier></type><name>OpenToken</name></decl></parameter>, <parameter><decl><type><name>VariantValue</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>parseMatcherExpressionImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TokenInfo</name> <operator>&amp;</operator><name>NameToken</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TokenInfo</name> <operator>&amp;</operator><name>OpenToken</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCtor</name></expr></argument>&gt;</argument_list></name> <name>Ctor</name></expr></argument>,
<argument><expr><name>VariantValue</name> <operator>*</operator><name>Value</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>parseIdentifierPrefixImpl</name><parameter_list>(<parameter><decl><type><name>VariantValue</name> <modifier>*</modifier></type><name>Value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>addCompletion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TokenInfo</name> <modifier>&amp;</modifier></type><name>CompToken</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MatcherCompletion</name> <modifier>&amp;</modifier></type><name>Completion</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addExpressionCompletions</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name>
<call><name>getNamedValueCompletions</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ArgKind</name></expr></argument>&gt;</argument_list></name> <name>AcceptedTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CodeTokenizer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Tokenizer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Sema</name> <modifier>*</modifier><specifier>const</specifier></type> <name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>NamedValueMap</name> <modifier>*</modifier><specifier>const</specifier></type> <name>NamedValues</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Diagnostics</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>ContextStackTy</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCtor</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ContextStackTy</name></type> <name>ContextStack</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>MatcherCompletion</name></expr></argument>&gt;</argument_list></name> <name>Completions</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
