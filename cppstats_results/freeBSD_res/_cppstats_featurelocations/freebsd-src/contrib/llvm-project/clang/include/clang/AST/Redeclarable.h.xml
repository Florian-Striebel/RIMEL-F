<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/Redeclarable.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_REDECLARABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_REDECLARABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExternalASTSource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>






















































<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>decl_type</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Redeclarable</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>DeclLink</name> <block>{<block_content>


<decl_stmt><decl><type><name>using</name></type> <name>KnownLatest</name> <init>=
<expr><name><name>LazyGenerationalUpdatePtr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>Decl</name> <operator>*</operator></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ExternalASTSource</name><operator>::</operator><name>CompleteRedeclChain</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>using</name></type> <name>UninitializedLatest</name> <init>= <expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>Previous</name> <init>= <expr><name>Decl</name> <operator>*</operator></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>using</name></type> <name>NotKnownLatest</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>Previous</name></expr></argument>, <argument><expr><name>UninitializedLatest</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>PointerUnion</name><argument_list type="generic">&lt;<argument><expr><name>NotKnownLatest</name></expr></argument>, <argument><expr><name>KnownLatest</name></expr></argument>&gt;</argument_list></name> <name>Link</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<enum>enum <name>PreviousTag</name> <block>{ <decl><name>PreviousLink</name></decl> }</block>;</enum>
<enum>enum <name>LatestTag</name> <block>{ <decl><name>LatestLink</name></decl> }</block>;</enum>

<expr_stmt><expr><call><name>DeclLink</name><argument_list>(<argument><expr><name>LatestTag</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Link</name><argument_list>(<argument>NotKnownLatest(reinterpret_cast&lt;UninitializedLatest&gt;(&amp;Ctx))</argument>)</argument_list></macro> <block>{}</block>
<call><name>DeclLink</name><argument_list>(<argument><expr><name>PreviousTag</name></expr></argument>, <argument><expr><name>decl_type</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Link</name><argument_list>(<argument>NotKnownLatest(Previous(D))</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>isFirst</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Link</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>KnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>||</operator>


<name><name>Link</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>NotKnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><name>template</name> <call><name><name>is</name><argument_list type="generic">&lt;<argument><expr><name>UninitializedLatest</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>getPrevious</name><argument_list>(<argument><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>Link</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>NotKnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>NotKnownLatest</name></type> <name>NKL</name> <init>= <expr><name><name>Link</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>NotKnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>NKL</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>Previous</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>NKL</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>Previous</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>Link</name> <operator>=</operator> <call><name>KnownLatest</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name><name>NKL</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>UninitializedLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Link</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>KnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>setPrevious</name><parameter_list>(<parameter><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isFirst</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"decl became non-canonical unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Link</name> <operator>=</operator> <call><name>Previous</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setLatest</name><parameter_list>(<parameter><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFirst</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"decl became canonical unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>Link</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>NotKnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>NotKnownLatest</name></type> <name>NKL</name> <init>= <expr><name><name>Link</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>NotKnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Link</name> <operator>=</operator> <call><name>KnownLatest</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><name><name>NKL</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>UninitializedLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>Latest</name> <init>= <expr><name><name>Link</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>KnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Latest</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Link</name> <operator>=</operator> <name>Latest</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>markIncomplete</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>Link</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>KnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>markIncomplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>Decl</name> <operator>*</operator><macro><name>getLatestNotUpdated</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFirst</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"expected a canonical decl"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>Link</name><operator>.</operator><name>is</name></name><operator>&lt;</operator><name>NotKnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name><name>Link</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>KnownLatest</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>getNotUpdated</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>DeclLink</name></type> <name>PreviousDeclLink</name><parameter_list>(<parameter><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>DeclLink</name><argument_list>(<argument><expr><name>DeclLink</name><operator>::</operator><name>PreviousLink</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DeclLink</name></type> <name>LatestDeclLink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>DeclLink</name><argument_list>(<argument><expr><name>DeclLink</name><operator>::</operator><name>LatestLink</name></expr></argument>, <argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>












<decl_stmt><decl><type><name>DeclLink</name></type> <name>RedeclLink</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>First</name></decl>;</decl_stmt>

<expr_stmt><expr><name>decl_type</name> <operator>*</operator><macro><name>getNextRedeclaration</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>RedeclLink</name><operator>.</operator><name>getPrevious</name></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTDeclReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTDeclWriter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>IncrementalParser</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Redeclarable</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>RedeclLink</name><argument_list>(<argument><expr><call><name>LatestDeclLink</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>First</name><argument_list>(<argument>static_cast&lt;decl_type *&gt;(this)</argument>)</argument_list></macro> <expr><block>{}</block>



<name>decl_type</name> <operator>*</operator><macro><name>getPreviousDecl</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>RedeclLink</name><operator>.</operator><name>isFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getNextRedeclaration</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>nullptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator><macro><name>getPreviousDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>decl_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getPreviousDecl</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>decl_type</name> <modifier>*</modifier></type><name>getFirstDecl</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>First</name></expr>;</return> </block_content>}</block></function>



<expr_stmt><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator><macro><name>getFirstDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>First</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isFirstDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>RedeclLink</name><operator>.</operator><name>isFirst</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>decl_type</name> <modifier>*</modifier></type><name>getMostRecentDecl</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>getFirstDecl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNextRedeclaration</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator><macro><name>getMostRecentDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getFirstDecl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNextRedeclaration</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function_decl><type><name>void</name></type> <name>setPreviousDecl</name><parameter_list>(<parameter><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>PrevDecl</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>class</name></type> <name>redecl_iterator</name> <block>{<block_content>

<decl_stmt><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>Current</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>Starter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>PassedFirst</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>value_type</name> <init>= <expr><name>decl_type</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>reference</name> <init>= <expr><name>decl_type</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>pointer</name> <init>= <expr><name>decl_type</name> <operator>*</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator_category</name> <init>= <expr><name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>difference_type</name> <init>= <expr><name>std</name><operator>::</operator><name>ptrdiff_t</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>redecl_iterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>redecl_iterator</name><argument_list>(<argument><expr><name>decl_type</name> <operator>*</operator><name>C</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>Current</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Starter</name><argument_list>(<argument>C</argument>)</argument_list></macro> <expr><block>{}</block>

<name>reference</name> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Current</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>pointer</name> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>Current</name></expr>;</return> </block_content>}</block>

redecl_iterator&amp; operator++(</block></decl>) <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Current</name> <operator>&amp;&amp;</operator> <literal type="string">"Advancing while iterator has reached end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Current</name><operator>-&gt;</operator><name>isFirstDecl</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PassedFirst</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Passed first decl twice, invalid redecl chain!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Current</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>PassedFirst</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>Next</name> <init>= <expr><call><name><name>Current</name><operator>-&gt;</operator><name>getNextRedeclaration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>Current</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Next</name> <operator>!=</operator> <name>Starter</name><operator>)</operator></expr> ?</condition><then> <expr><name>Next</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl_stmt>

<expr_stmt><expr><name>redecl_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{
<expr><name>redecl_iterator</name> <call><name>tmp</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;
<return>return <expr><name>tmp</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>redecl_iterator</name> <name>x</name><operator>,</operator> <name>redecl_iterator</name> <name>y</name><operator>)</operator> <block>{
<return>return <expr><name><name>x</name><operator>.</operator><name>Current</name></name> <operator>==</operator> <name><name>y</name><operator>.</operator><name>Current</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>redecl_iterator</name> <name>x</name><operator>,</operator> <name>redecl_iterator</name> <name>y</name><operator>)</operator> <block>{
<return>return <expr><name><name>x</name><operator>.</operator><name>Current</name></name> <operator>!=</operator> <name><name>y</name><operator>.</operator><name>Current</name></name></expr>;</return>
}</block></expr></expr_stmt>
};

<decl_stmt><decl><type><name>using</name></type> <name>redecl_range</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>redecl_iterator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>redecl_range</name> <macro><name>redecls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>redecl_range</name><argument_list>(<argument><expr><call><name>redecl_iterator</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>redecl_iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>redecl_iterator</name> <macro><name>redecls_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>redecls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>redecl_iterator</name> <macro><name>redecls_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>redecls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
};



<function_decl><type><name>Decl</name> <modifier>*</modifier></type><name>getPrimaryMergedDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>decl_type</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Mergeable</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Mergeable</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>



<function><type><name>decl_type</name> <modifier>*</modifier></type><name>getFirstDecl</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>*</operator><name>D</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>D</name><operator>-&gt;</operator><name>isFromASTFile</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>D</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPrimaryMergedDecl</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<expr_stmt><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator><macro><name>getFirstDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><specifier>const</specifier> <name>auto</name> <operator>*</operator><name>D</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>D</name><operator>-&gt;</operator><name>isFromASTFile</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>D</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getPrimaryMergedDecl</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isFirstDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getFirstDecl</name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr>;</return> }</block></expr></expr_stmt>
};










<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>decl_type</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>CanonicalDeclPtr</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CanonicalDeclPtr</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>CanonicalDeclPtr</name><argument_list>(<argument><expr><name>decl_type</name> <operator>*</operator><name>Ptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Ptr</name><argument_list>(<argument>Ptr ? Ptr-&gt;getCanonicalDecl() : nullptr</argument>)</argument_list></macro> <block>{}</block>
<call><name>CanonicalDeclPtr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CanonicalDeclPtr</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>CanonicalDeclPtr</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CanonicalDeclPtr</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>

<function><type><name>operator</name></type> <name>decl_type</name> <modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Ptr</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>operator</name> <specifier>const</specifier> <name>decl_type</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Ptr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>decl_type</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> <block>{<block_content> <return>return <expr><name>Ptr</name></expr>;</return> </block_content>}</block>
const decl_type *operator-&gt;(</block></decl>) const <block>{<block_content> <return>return <expr><name>Ptr</name></expr>;</return> </block_content>}</block></decl_stmt>

<function><type><name>decl_type</name> <modifier>&amp;</modifier></type><name>operator</name><modifier>*</modifier><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>Ptr</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>decl_type</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>Ptr</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>CanonicalDeclPtr</name> <name>LHS</name><operator>,</operator> <name>CanonicalDeclPtr</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Ptr</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>CanonicalDeclPtr</name> <name>LHS</name><operator>,</operator> <name>CanonicalDeclPtr</name> <name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Ptr</name></name> <operator>!=</operator> <name><name>RHS</name><operator>.</operator><name>Ptr</name></name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<macro><name>friend</name></macro> struct <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name><name>CanonicalDeclPtr</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
<macro><name>friend</name></macro> struct <expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name><name>CanonicalDeclPtr</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>decl_type</name> <modifier>*</modifier></type><name>Ptr</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
};

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>decl_type</name><operator>&gt;</operator>
struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name><name>CanonicalDeclPtr</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>CanonicalDeclPtr</name> <operator>=</operator> <name>clang</name><operator>::</operator><name><name>CanonicalDeclPtr</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name></expr>;
<expr><name>using</name> <name>BaseInfo</name> <operator>=</operator> <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>CanonicalDeclPtr</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{


<expr><name>CanonicalDeclPtr</name> <name>P</name></expr>;
<expr><name><name>P</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>BaseInfo</name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>P</name></expr>;</return></block></expr>
}</block>

<specifier>static</specifier> <name>CanonicalDeclPtr</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<expr><name>CanonicalDeclPtr</name> <name>P</name></expr>;
<expr><name><name>P</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>BaseInfo</name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>P</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CanonicalDeclPtr</name> <modifier>&amp;</modifier></type><name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>BaseInfo</name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CanonicalDeclPtr</name> <modifier>&amp;</modifier></type><name>LHS</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CanonicalDeclPtr</name> <modifier>&amp;</modifier></type><name>RHS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>BaseInfo</name><operator>::</operator><call><name>isEqual</name><argument_list>(<argument><expr><name>LHS</name></expr></argument>, <argument><expr><name>RHS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block><empty_stmt>;</empty_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>decl_type</name><operator>&gt;</operator>
struct <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name><name>CanonicalDeclPtr</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <operator>*</operator><macro><name>getAsVoidPointer</name><argument_list>(<argument>clang::CanonicalDeclPtr&lt;decl_type&gt; P</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>P</name><operator>.</operator><name>Ptr</name></name></expr>;</return></block></expr>
}</block>
<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name><name>CanonicalDeclPtr</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name> <macro><name>getFromVoidPointer</name><argument_list>(<argument>void *P</argument>)</argument_list></macro> <block>{
<expr><name>clang</name><operator>::</operator><name><name>CanonicalDeclPtr</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name></expr></argument>&gt;</argument_list></name> <name>C</name></expr>;
<expr><name><name>C</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getFromVoidPtr</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>C</name></expr>;</return>
}</block></expr></expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>NumLowBitsAvailable</name> <init>=
<expr><name><name>PointerLikeTypeTraits</name><argument_list type="generic">&lt;<argument><expr><name>decl_type</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>NumLowBitsAvailable</name></expr></init></decl>;</decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
