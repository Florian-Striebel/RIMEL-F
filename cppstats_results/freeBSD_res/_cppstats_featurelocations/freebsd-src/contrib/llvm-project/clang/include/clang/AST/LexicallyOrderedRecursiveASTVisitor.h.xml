<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/LexicallyOrderedRecursiveASTVisitor.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_LEXICALLY_ORDERED_RECURSIVEASTVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_LEXICALLY_ORDERED_RECURSIVEASTVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/RecursiveASTVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/SaveAndRestore.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>



































<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Derived</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>LexicallyOrderedRecursiveASTVisitor</name>
<range>: <expr><name>public</name> <name><name>RecursiveASTVisitor</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>BaseType</name> <operator>=</operator> <name><name>RecursiveASTVisitor</name><argument_list type="generic">&lt;<argument><expr><name>Derived</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>LexicallyOrderedRecursiveASTVisitor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>SM</name><argument_list>(<argument>SM</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>TraverseObjCImplementationDecl</name><argument_list>(<argument>ObjCImplementationDecl *D</argument>)</argument_list></macro> <block>{



<expr><name>bool</name> <name>Result</name> <operator>=</operator> <name>BaseType</name><operator>::</operator><call><name>TraverseObjCImplementationDecl</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name>TraverseAdditionalLexicallyNestedDeclarations</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>Result</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
}</block>

<name>bool</name> <macro><name>TraverseObjCCategoryImplDecl</name><argument_list>(<argument>ObjCCategoryImplDecl *D</argument>)</argument_list></macro> <block>{
<expr><name>bool</name> <name>Result</name> <operator>=</operator> <name>BaseType</name><operator>::</operator><call><name>TraverseObjCCategoryImplDecl</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><ternary><condition><expr><call><name>TraverseAdditionalLexicallyNestedDeclarations</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>Result</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
}</block>

<name>bool</name> <macro><name>TraverseDeclContextHelper</name><argument_list>(<argument>DeclContext *DC</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>DC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<for>for <control>(<init><decl><type><name>auto</name></type> <name>I</name> <init>= <expr><call><name><name>DC</name><operator>-&gt;</operator><name>decls_begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name><name>DC</name><operator>-&gt;</operator><name>decls_end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>Child</name> <init>= <expr><operator>*</operator><name>I</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>BaseType</name><operator>::</operator><call><name>canIgnoreChildDeclWhileTraversingDeclContext</name><argument_list>(<argument><expr><name>Child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>I</name></expr>;</expr_stmt>
<continue>continue;</continue>
<expr_stmt/>}</block_content>
if (!isa&lt;ObjCImplementationDecl&gt;(Child</block></if></if_stmt>)</block_content> &amp;&amp;
!isa&lt;ObjCCategoryImplDecl&gt;(Child</block></for>))</block> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BaseType</name><operator>::</operator><call><name>getDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TraverseDecl</name><argument_list>(<argument><expr><name>Child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<operator>++</operator><name>I</name></block></expr></range></decl>;</decl_stmt>
<continue>continue;</continue>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><call><name><name>LexicallyNestedDeclarations</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><operator>++</operator><name>I</name></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>Sibling</name> <init>= <expr><operator>*</operator><name>I</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SM</name><operator>.</operator><name>isBeforeInTranslationUnit</name></name><argument_list>(<argument><expr><call><name><name>Sibling</name><operator>-&gt;</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>Child</name><operator>-&gt;</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BaseType</name><operator>::</operator><call><name>canIgnoreChildDeclWhileTraversingDeclContext</name><argument_list>(<argument><expr><name>Sibling</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>LexicallyNestedDeclarations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Sibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BaseType</name><operator>::</operator><call><name>getDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TraverseDecl</name><argument_list>(<argument><expr><name>Child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
}
return <expr_stmt><expr><name>true</name></expr>;</expr_stmt>
}

Stmt<expr_stmt><expr><operator>::</operator><name>child_range</name> <macro><name>getStmtChildren</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>S</name><operator>-&gt;</operator><name>children</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>getStmtChildren</name><parameter_list>(<parameter><decl><type><name>CXXOperatorCallExpr</name> <modifier>*</modifier></type><name>CE</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <modifier>*</modifier></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>Children</name><argument_list>(<argument><expr><call><name><name>CE</name><operator>-&gt;</operator><name>children</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Swap</name></decl>;</decl_stmt>


<switch>switch <condition>(<expr><call><name><name>CE</name><operator>-&gt;</operator><name>getOperator</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>OO_Arrow</name></expr>:</case>
<case>case <expr><name>OO_Call</name></expr>:</case>
<case>case <expr><name>OO_Subscript</name></expr>:</case>
<expr_stmt><expr><name>Swap</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OO_PlusPlus</name></expr>:</case>
<case>case <expr><name>OO_MinusMinus</name></expr>:</case>

<expr_stmt><expr><name>Swap</name> <operator>=</operator> <call><name><name>Children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>Swap</name> <operator>=</operator> <call><name><name>CE</name><operator>-&gt;</operator><name>isInfixBinaryOp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>Swap</name> <operator>&amp;&amp;</operator> <call><name><name>Children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name><name>Children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>Children</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<function><type><name>bool</name></type> <name>TraverseAdditionalLexicallyNestedDeclarations</name><parameter_list>()</parameter_list> <block>{<block_content>





<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>BaseType</name><operator>::</operator><call><name>getDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>shouldTraversePostOrder</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"post-order traversal is not supported for lexically ordered "</literal>
<literal type="string">"recursive ast visitor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name> <range>: <expr><name>LexicallyNestedDeclarations</name></expr></range></decl></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>BaseType</name><operator>::</operator><call><name>getDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TraverseDecl</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>LexicallyNestedDeclarations</name></expr>;</expr_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
