<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Driver/Multilib.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_DRIVER_MULTILIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_DRIVER_MULTILIB_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>driver</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>Multilib</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>flags_list</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>GCCSuffix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OSSuffix</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>IncludeSuffix</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>flags_list</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Priority</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>Multilib</name><argument_list>(<argument>StringRef GCCSuffix = {}</argument>, <argument>StringRef OSSuffix = {}</argument>,
<argument>StringRef IncludeSuffix = {}</argument>, <argument>int Priority = <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>gccSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>GCCSuffix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>StringRef</name><argument_list>(<argument><expr><name>GCCSuffix</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name><name>GCCSuffix</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>GCCSuffix</name></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>Multilib</name> <modifier>&amp;</modifier></type><name>gccSuffix</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>osSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>OSSuffix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>StringRef</name><argument_list>(<argument><expr><name>OSSuffix</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name><name>OSSuffix</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>OSSuffix</name></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>Multilib</name> <modifier>&amp;</modifier></type><name>osSuffix</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><macro><name>includeSuffix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>IncludeSuffix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>(</operator><call><name>StringRef</name><argument_list>(<argument><expr><name>IncludeSuffix</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name><name>IncludeSuffix</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>IncludeSuffix</name></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>Multilib</name> <modifier>&amp;</modifier></type><name>includeSuffix</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><specifier>const</specifier> <name>flags_list</name> <operator>&amp;</operator><macro><name>flags</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Flags</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>flags_list</name> <modifier>&amp;</modifier></type><name>flags</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Flags</name></expr>;</return> </block_content>}</block></function>



<expr_stmt><expr><name>int</name> <macro><name>priority</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Priority</name></expr>;</return> }</block></expr></expr_stmt>








<function><type><name>Multilib</name> <modifier>&amp;</modifier></type><name>flag</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>F</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>F</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <call><name><name>F</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Flags</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isDefault</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{ <return>return <expr><call><name><name>GCCSuffix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>OSSuffix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>IncludeSuffix</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Multilib</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <specifier>const</specifier> <name>Multilib</name> <operator>&amp;</operator><name>M</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MultilibSet</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>multilib_list</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Multilib</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>multilib_list</name><operator>::</operator><name>iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>multilib_list</name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>IncludeDirsFunc</name> <init>=
<expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>(</operator><specifier>const</specifier> <name>Multilib</name> <operator>&amp;</operator><name>M</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>FilterCallback</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Multilib</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>multilib_list</name></type> <name>Multilibs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IncludeDirsFunc</name></type> <name>IncludeCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IncludeDirsFunc</name></type> <name>FilePathsCallback</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>MultilibSet</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>Maybe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>Either</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>Either</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M3</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>Either</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M4</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>Either</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M2</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M4</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M5</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>Either</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Multilib</name></expr></argument>&gt;</argument_list></name></type> <name>Ms</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>FilterOut</name><parameter_list>(<parameter><decl><type><name>FilterCallback</name></type> <name>F</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>FilterOut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Regex</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Multilib</name> <modifier>&amp;</modifier></type><name>M</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>combineWith</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MultilibSet</name> <modifier>&amp;</modifier></type><name>MS</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Multilibs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Multilibs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Multilibs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>Multilibs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Multilibs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>select</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Multilib</name><operator>::</operator><name>flags_list</name> <operator>&amp;</operator><name>Flags</name></expr></argument>, <argument><expr><name>Multilib</name> <operator>&amp;</operator><name>M</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Multilibs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>setIncludeDirsCallback</name><parameter_list>(<parameter><decl><type><name>IncludeDirsFunc</name></type> <name>F</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IncludeCallback</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>IncludeDirsFunc</name> <operator>&amp;</operator><macro><name>includeDirsCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IncludeCallback</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>MultilibSet</name> <modifier>&amp;</modifier></type><name>setFilePathsCallback</name><parameter_list>(<parameter><decl><type><name>IncludeDirsFunc</name></type> <name>F</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>FilePathsCallback</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>IncludeDirsFunc</name> <operator>&amp;</operator><macro><name>filePathsCallback</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FilePathsCallback</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>

<function_decl><type><specifier>static</specifier> <name>multilib_list</name></type> <name>filterCopy</name><parameter_list>(<parameter><decl><type><name>FilterCallback</name></type> <name>F</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>multilib_list</name> <modifier>&amp;</modifier></type><name>Ms</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>filterInPlace</name><parameter_list>(<parameter><decl><type><name>FilterCallback</name></type> <name>F</name></decl></parameter>, <parameter><decl><type><name>multilib_list</name> <modifier>&amp;</modifier></type><name>Ms</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <specifier>const</specifier> <name>MultilibSet</name> <operator>&amp;</operator><name>MS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
