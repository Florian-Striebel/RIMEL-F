<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/FrontendActions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_FRONTENDACTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_FRONTENDACTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/FrontendAction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FileEntry</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>InitOnlyAction</name> <range>: <expr><name>public</name> <name>FrontendAction</name> <block>{
<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>


<name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;


<expr><name>class</name> <name>ReadPCHAndPreprocessAction</name> <operator>:</operator> <name>public</name> <name>FrontendAction</name> <block>{
<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>DumpCompilerOptionsAction</name> <operator>:</operator> <name>public</name> <name>FrontendAction</name> <block>{
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;





<expr><name>class</name> <name>ASTPrintAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>ASTDumpAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>ASTDeclListAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>ASTViewAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>GeneratePCHAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>TranslationUnitKind</name> <macro><name>getTranslationUnitKind</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>TU_Prefix</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>hasASTFileSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>shouldEraseOutputFiles</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>




<specifier>static</specifier> <name>bool</name> <call><name>ComputeASTConsumerArguments</name><argument_list>(<argument><expr><name>CompilerInstance</name> <operator>&amp;</operator><name>CI</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>Sysroot</name></expr></argument>)</argument_list></call></expr>;



<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>raw_pwrite_stream</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateOutputFile</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>, <argument>StringRef InFile</argument>,
<argument>std::string &amp;OutputFile</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <macro><name>BeginSourceFileAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>GenerateModuleAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>raw_pwrite_stream</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateOutputFile</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>, <argument>StringRef InFile</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>TranslationUnitKind</name> <macro><name>getTranslationUnitKind</name><argument_list>()</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>TU_Module</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>hasASTFileSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>

<name>bool</name> <macro><name>shouldEraseOutputFiles</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>GenerateInterfaceStubsAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>TranslationUnitKind</name> <macro><name>getTranslationUnitKind</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><name>TU_Module</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasASTFileSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>GenerateModuleFromModuleMapAction</name> <operator>:</operator> <name>public</name> <name>GenerateModuleAction</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>bool</name> <macro><name>BeginSourceFileAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>raw_pwrite_stream</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateOutputFile</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>, <argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>GenerateModuleInterfaceAction</name> <operator>:</operator> <name>public</name> <name>GenerateModuleAction</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>bool</name> <macro><name>BeginSourceFileAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>raw_pwrite_stream</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateOutputFile</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>, <argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>GenerateHeaderModuleAction</name> <operator>:</operator> <name>public</name> <name>GenerateModuleAction</name> <block>{

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ModuleHeaders</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>bool</name> <macro><name>PrepareToExecuteAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>BeginSourceFileAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>raw_pwrite_stream</name></expr></argument>&gt;</argument_list></name>
<macro><name>CreateOutputFile</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>, <argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>SyntaxOnlyAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<operator>~</operator><macro><name>SyntaxOnlyAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasCodeCompletionSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;



<expr><name>class</name> <name>DumpModuleInfoAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>BeginInvocation</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>hasPCHSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasASTFileSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasIRSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>hasCodeCompletionSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>VerifyPCHAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<name>bool</name> <macro><name>hasCodeCompletionSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>TemplightDumpAction</name> <operator>:</operator> <name>public</name> <name>ASTFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr>;









<expr><name>class</name> <name>ASTMergeAction</name> <operator>:</operator> <name>public</name> <name>FrontendAction</name> <block>{

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>AdaptedAction</name></expr>;


<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ASTFiles</name></expr>;

<expr><name>protected</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>,
<argument>StringRef InFile</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>BeginSourceFileAction</name><argument_list>(<argument>CompilerInstance &amp;CI</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>EndSourceFileAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ASTMergeAction</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name> <name>AdaptedAction</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ASTFiles</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>ASTMergeAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>TranslationUnitKind</name> <macro><name>getTranslationUnitKind</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasPCHSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasASTFileSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>hasCodeCompletionSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>PrintPreambleAction</name> <operator>:</operator> <name>public</name> <name>FrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;</argument>,
<argument>StringRef</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;

<expr><name>class</name> <name>PrintDependencyDirectivesSourceMinimizerAction</name> <operator>:</operator> <name>public</name> <name>FrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateASTConsumer</name><argument_list>(<argument>CompilerInstance &amp;</argument>,
<argument>StringRef</argument>)</argument_list></macro> <name>override</name> <block>{
<return>return <expr><name>nullptr</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>usesPreprocessorOnly</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;





<expr><name>class</name> <name>DumpRawTokensAction</name> <operator>:</operator> <name>public</name> <name>PreprocessorFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>DumpTokensAction</name> <operator>:</operator> <name>public</name> <name>PreprocessorFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>PreprocessOnlyAction</name> <operator>:</operator> <name>public</name> <name>PreprocessorFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr>;

<expr><name>class</name> <name>PrintPreprocessedAction</name> <operator>:</operator> <name>public</name> <name>PreprocessorFrontendAction</name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>void</name> <macro><name>ExecuteAction</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>bool</name> <macro><name>hasPCHSupport</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;

}</block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
