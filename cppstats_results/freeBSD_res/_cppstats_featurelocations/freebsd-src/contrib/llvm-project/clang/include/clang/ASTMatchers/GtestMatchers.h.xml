<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ASTMATCHERS_GTESTMATCHERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ASTMATCHERS_GTESTMATCHERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ast_matchers</name> <block>{<block_content>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>GtestCmp</name> <block>{<block_content>
<expr_stmt><expr><name>Eq</name></expr><operator>,</operator>
<expr><name>Ne</name></expr><operator>,</operator>
<expr><name>Ge</name></expr><operator>,</operator>
<expr><name>Gt</name></expr><operator>,</operator>
<expr><name>Le</name></expr><operator>,</operator>
<expr><name>Lt</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>MockArgs</name> <block>{<block_content>
<expr_stmt><expr><name>None</name></expr><operator>,</operator>
<expr><name>Some</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestAssert</name><argument_list>(<argument>GtestCmp Cmp</argument>, <argument>StatementMatcher Left</argument>,
<argument>StatementMatcher Right</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestAssertThat</name><argument_list>(<argument>StatementMatcher Actual</argument>,
<argument>StatementMatcher Matcher</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestExpect</name><argument_list>(<argument>GtestCmp Cmp</argument>, <argument>StatementMatcher Left</argument>,
<argument>StatementMatcher Right</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestExpectThat</name><argument_list>(<argument>StatementMatcher Actual</argument>,
<argument>StatementMatcher Matcher</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestExpectCall</name><argument_list>(<argument>StatementMatcher MockObject</argument>,
<argument>llvm::StringRef MockMethodName</argument>,
<argument>MockArgs Args</argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestExpectCall</name><argument_list>(<argument>StatementMatcher MockCall</argument>,
<argument>MockArgs Args</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestOnCall</name><argument_list>(<argument>StatementMatcher MockObject</argument>,
<argument>llvm::StringRef MockMethodName</argument>,
<argument>MockArgs Args</argument>)</argument_list></macro></expr>;</expr_stmt>


<expr_stmt><expr><name>internal</name><operator>::</operator><name><name>BindableMatcher</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <macro><name>gtestOnCall</name><argument_list>(<argument>StatementMatcher MockCall</argument>,
<argument>MockArgs Args</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
