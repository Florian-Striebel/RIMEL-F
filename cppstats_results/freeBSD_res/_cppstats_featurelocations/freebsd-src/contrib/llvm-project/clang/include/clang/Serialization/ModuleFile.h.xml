<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ModuleFile.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_MODULEFILE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_MODULEFILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTBitCodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ContinuousRangeMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ModuleFileExtension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Bitstream/BitstreamReader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Endian.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>


<enum>enum <name>ModuleKind</name> <block>{

<decl><name>MK_ImplicitModule</name></decl>,


<decl><name>MK_ExplicitModule</name></decl>,


<decl><name>MK_PCH</name></decl>,


<decl><name>MK_Preamble</name></decl>,


<decl><name>MK_MainFile</name></decl>,


<decl><name>MK_PrebuiltModule</name></decl>
}</block>;</enum>




<decl_stmt><decl><type><name>class</name></type> <name>InputFile</name> <block>{<block_content>
<enum>enum <block>{
<decl><name>Overridden</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>OutOfDate</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>NotFound</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FileEntryRef</name><operator>::</operator><name>MapEntry</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>Val</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>InputFile</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<macro><name>InputFile</name><argument_list>(<argument>FileEntryRef File</argument>, <argument>bool isOverridden = false</argument>,
<argument>bool isOutOfDate = false</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>isOverridden</name> <operator>&amp;&amp;</operator> <name>isOutOfDate</name><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"an overridden cannot be out-of-date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>intVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>isOverridden</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>intVal</name> <operator>=</operator> <name>Overridden</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>isOutOfDate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>intVal</name> <operator>=</operator> <name>OutOfDate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name><name>Val</name><operator>.</operator><name>setPointerAndInt</name></name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><name>File</name><operator>.</operator><name>getMapEntry</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>intVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>InputFile</name></type> <name>getNotFound</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>InputFile</name></type> <name>File</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>File</name><operator>.</operator><name>Val</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>NotFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>File</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>OptionalFileEntryRefDegradesToFileEntryPtr</name> <macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>P</name> <operator>=</operator> <call><name><name>Val</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>FileEntryRef</name><argument_list>(<argument><expr><operator>*</operator><name>P</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isOverridden</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Val</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Overridden</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isOutOfDate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Val</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OutOfDate</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isNotFound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Val</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>NotFound</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>ModuleFile</name> <block>{<block_content>
<label><name>public</name>:</label>
<macro><name>ModuleFile</name><argument_list>(<argument>ModuleKind Kind</argument>, <argument>unsigned Generation</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Generation</name><argument_list>(<argument>Generation</argument>)</argument_list></macro> <expr><block>{}</block>
<operator>~</operator><call><name>ModuleFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>Index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ModuleKind</name></type> <name>Kind</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FileName</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleName</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>BaseDirectory</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getTimestampFilename</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FileName</name> <operator>+</operator> <literal type="string">".timestamp"</literal></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OriginalSourceFileName</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ActualOriginalSourceFileName</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>FileID</name></type> <name>OriginalSourceFileID</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OriginalDir</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleMapPath</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>RelocatablePCH</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>HasTimestamps</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>DidReadTopLevelSubmodule</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>OptionalFileEntryRefDegradesToFileEntryPtr</name></type> <name>File</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ASTFileSignature</name></type> <name>Signature</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ASTFileSignature</name></type> <name>ASTBlockHash</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>DirectlyImported</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Generation</name></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>*</operator><name>Buffer</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>SizeInBits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>GlobalBitOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>ASTBlockStartOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>Data</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>Stream</name></expr>;</expr_stmt>










<decl_stmt><decl><type><name>SourceLocation</name></type> <name>DirectImportLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>ImportLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>FirstLoc</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFileExtensionReader</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ExtensionReaders</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>StringRef</name></type> <name>ModuleOffsetMap</name></decl>;</decl_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>InputFilesCursor</name></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>support</name><operator>::</operator><name>unaligned_uint64_t</name> <operator>*</operator><name>InputFileOffsets</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>InputFile</name></expr></argument>&gt;</argument_list></name> <name>InputFilesLoaded</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumUserInputFiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>InputFilesValidationTimestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>SLocEntryCursor</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>SourceManagerBlockStartOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumSLocEntries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>SLocEntryBaseID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name> <name>SLocEntryBaseOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>SLocEntryOffsetsBase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>SLocEntryOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name></type> <name>PreloadSLocEntries</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name><operator>::</operator><name>UIntTy</name></expr></argument>, <argument><expr><name>SourceLocation</name><operator>::</operator><name>IntTy</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type>
<name>SLocRemap</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumIdentifiers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>IdentifierOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>serialization</name><operator>::</operator><name>IdentID</name> <name>BaseIdentifierID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>IdentifierRemap</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IdentifierTableData</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>IdentifierLookupTable</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name> <name>PreloadIdentifierOffsets</name></expr>;</expr_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>MacroCursor</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumMacros</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>uint64_t</name></type> <name>MacroOffsetsBase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>MacroOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>serialization</name><operator>::</operator><name>MacroID</name> <name>BaseMacroID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>MacroRemap</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>MacroStartOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>PreprocessorDetailCursor</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>PreprocessorDetailStartOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>serialization</name><operator>::</operator><name>PreprocessedEntityID</name> <name>BasePreprocessedEntityID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>PreprocessedEntityRemap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPEntityOffset</name> <modifier>*</modifier></type><name>PreprocessedEntityOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumPreprocessedEntities</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>BasePreprocessedSkippedRangeID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPSkippedRange</name> <modifier>*</modifier></type><name>PreprocessedSkippedRangeOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumPreprocessedSkippedRanges</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumHeaderFileInfos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>HeaderFileInfoTableData</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>HeaderFileInfoTable</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumSubmodules</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>serialization</name><operator>::</operator><name>SubmoduleID</name> <name>BaseSubmoduleID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>SubmoduleRemap</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumSelectors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>SelectorOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>serialization</name><operator>::</operator><name>SelectorID</name> <name>BaseSelectorID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>SelectorRemap</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>SelectorLookupTableData</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>SelectorLookupTable</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>






<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BitstreamCursor</name> <name>DeclsCursor</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>uint64_t</name></type> <name>DeclsBlockStartOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumDecls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>DeclOffset</name> <modifier>*</modifier></type><name>DeclOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>serialization</name><operator>::</operator><name>DeclID</name> <name>BaseDeclID</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>DeclRemap</name></decl>;</decl_stmt>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>, <argument><expr><name>serialization</name><operator>::</operator><name>DeclID</name></expr></argument>&gt;</argument_list></name> <name>GlobalToLocalDeclIDs</name></expr>;</expr_stmt>


<expr_stmt><expr><specifier>const</specifier> <name>serialization</name><operator>::</operator><name>DeclID</name> <operator>*</operator><name>FileSortedDecls</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumFileSortedDecls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>serialization</name><operator>::</operator><name>ObjCCategoriesInfo</name> <operator>*</operator><name>ObjCCategoriesMap</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumObjCCategoriesInMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>ObjCCategories</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>LocalNumTypes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>UnderalignedInt64</name> <modifier>*</modifier></type><name>TypeOffsets</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>serialization</name><operator>::</operator><name>TypeID</name> <name>BaseTypeIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>ContinuousRangeMap</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>TypeRemap</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>PragmaDiagMappings</name></decl>;</decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ImportedBy</name></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFile</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Imports</name></expr>;</expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isDirectlyImported</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DirectlyImported</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Kind</name> <operator>==</operator> <name>MK_ImplicitModule</name> <operator>||</operator> <name>Kind</name> <operator>==</operator> <name>MK_ExplicitModule</name> <operator>||</operator>
<name>Kind</name> <operator>==</operator> <name>MK_PrebuiltModule</name></expr>;</return>
}</block></expr></expr_stmt>


<function_decl><type><name>void</name></type> <name>dump</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
