<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/BasicValueFactory.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_BASICVALUEFACTORY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_BASICVALUEFACTORY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/StoreRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CXXBaseSpecifier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclaratorDecl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CompoundValData</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>QualType</name> <name>T</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name> <name>L</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>CompoundValData</name><argument_list>(<argument>QualType t</argument>, <argument>llvm::ImmutableList&lt;SVal&gt; l</argument>)</argument_list></macro> <operator>:</operator> <call><name>T</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>, <macro><name>L</name><argument_list>(<argument>l</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>NonLoc</name><operator>::</operator><call><name>isCompoundType</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>L</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>L</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>T</name></expr>;</return> }</block>

<specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID&amp; ID</argument>, <argument>QualType T</argument>,
<argument>llvm::ImmutableList&lt;SVal&gt; L</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID&amp; ID</argument>)</argument_list></macro> <block>{ <expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>; }</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LazyCompoundValData</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>StoreRef</name> <name>store</name></expr>;
<expr><specifier>const</specifier> <name>TypedValueRegion</name> <operator>*</operator><name>region</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>LazyCompoundValData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>StoreRef</name> <operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TypedValueRegion</name> <operator>*</operator><name>r</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>store</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>, <macro><name>region</name><argument_list>(<argument>r</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>NonLoc</name><operator>::</operator><call><name>isCompoundType</name><argument_list>(<argument><expr><call><name><name>r</name><operator>-&gt;</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>getStore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>store</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>const</specifier> <name>TypedValueRegion</name> <operator>*</operator><macro><name>getRegion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>region</name></expr>;</return> }</block>

<specifier>static</specifier> <name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name><operator>&amp;</operator> <name>ID</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StoreRef</name> <operator>&amp;</operator><name>store</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TypedValueRegion</name> <operator>*</operator><name>region</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID&amp; ID</argument>)</argument_list></macro> <block>{ <expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>; }</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PointerToMemberData</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>D</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>L</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>PointerToMemberData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>L</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>D</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>, <macro><name>L</name><argument_list>(<argument>L</argument>)</argument_list></macro> <expr><block>{}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>L</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>L</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<specifier>static</specifier> <name>void</name> <call><name>Profile</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>FoldingSetNodeID</name> <operator>&amp;</operator><name>ID</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>L</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <block>{ <expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>; }</block>
<specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><macro><name>getDeclaratorDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>D</name></expr>;</return> }</block>

<name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getCXXBaseList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>L</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>BasicValueFactory</name> <block>{
<expr><name>using</name> <name>APSIntSetTy</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name><name>FoldingSetNodeWrapper</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>APSInt</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name><operator>&amp;</operator> <name>BPAlloc</name></expr>;

<expr><name>APSIntSetTy</name> <name>APSIntSet</name></expr>;
<expr><name>void</name> <operator>*</operator><name>PersistentSVals</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>void</name> <operator>*</operator><name>PersistentSValPairs</name> <operator>=</operator> <name>nullptr</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Factory</name> <name>SValListFactory</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Factory</name> <name>CXXBaseListFactory</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>CompoundValData</name></expr></argument>&gt;</argument_list></name> <name>CompoundValDataSet</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>LazyCompoundValData</name></expr></argument>&gt;</argument_list></name> <name>LazyCompoundValDataSet</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>FoldingSet</name><argument_list type="generic">&lt;<argument><expr><name>PointerToMemberData</name></expr></argument>&gt;</argument_list></name> <name>PointerToMemberDataSet</name></expr>;



<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <macro><name>getValue</name><argument_list>(<argument>uint64_t X</argument>, <argument>unsigned BitWidth</argument>, <argument>bool isUnsigned</argument>)</argument_list></macro></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>BasicValueFactory</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Alloc</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Ctx</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>BPAlloc</name><argument_list>(<argument><expr><name>Alloc</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>SValListFactory</name><argument_list>(<argument><expr><name>Alloc</name></expr></argument>)</argument_list></call></expr>,
<macro><name>CXXBaseListFactory</name><argument_list>(<argument>Alloc</argument>)</argument_list></macro> <expr><block>{}</block>

<operator>~</operator><call><name>BasicValueFactory</name><argument_list>()</argument_list></call></expr>;

<expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ctx</name></expr>;</return> }</block>

<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <call><name>getValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <name>X</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <macro><name>getValue</name><argument_list>(<argument>const llvm::APInt&amp; X</argument>, <argument>bool isUnsigned</argument>)</argument_list></macro></expr>;
<expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>&amp;</operator> <macro><name>getValue</name><argument_list>(<argument>uint64_t X</argument>, <argument>QualType T</argument>)</argument_list></macro></expr>;


<expr><name>APSIntType</name> <macro><name>getAPSIntType</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <specifier>const</specifier> <block>{


<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>AtomicType</name> <modifier>*</modifier></type><name>AT</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>getAs</name></name><operator>&lt;</operator><name>AtomicType</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name><name>AT</name><operator>-&gt;</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>

assert(T-&gt;isIntegralOrEnumerationType(</block></if></if_stmt>) <operator>||</operator> <name>Loc</name><operator>::</operator><call><name>isLocType</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call>)</block></expr>;
<return>return <expr><call><name>APSIntType</name><argument_list>(<argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getIntWidth</name></name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>!</operator><call><name><name>T</name><operator>-&gt;</operator><name>isSignedIntegerOrEnumerationType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>Convert</name><argument_list>(<argument>const llvm::APSInt&amp; To</argument>,
<argument>const llvm::APSInt&amp; From</argument>)</argument_list></macro> <block>{
<expr><name>APSIntType</name> <call><name>TargetType</name><argument_list>(<argument><expr><name>To</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>TargetType</name> <operator>==</operator> <call><name>APSIntType</name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>From</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><call><name><name>TargetType</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>Convert</name><argument_list>(<argument>QualType T</argument>, <argument>const llvm::APSInt &amp;From</argument>)</argument_list></macro> <block>{
<expr><name>APSIntType</name> <name>TargetType</name> <operator>=</operator> <call><name>getAPSIntType</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>Convert</name><argument_list>(<argument><expr><name>TargetType</name></expr></argument>, <argument><expr><name>From</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>Convert</name><argument_list>(<argument>APSIntType TargetType</argument>, <argument>const llvm::APSInt &amp;From</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>TargetType</name> <operator>==</operator> <call><name>APSIntType</name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>From</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><call><name><name>TargetType</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>From</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getIntValue</name><argument_list>(<argument>uint64_t X</argument>, <argument>bool isUnsigned</argument>)</argument_list></macro> <block>{
<expr><name>QualType</name> <name>T</name> <operator>=</operator> <name>isUnsigned</name> <operator>?</operator> <name><name>Ctx</name><operator>.</operator><name>UnsignedIntTy</name></name> <operator>:</operator> <name><name>Ctx</name><operator>.</operator><name>IntTy</name></name></expr>;
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMaxValue</name><argument_list>(<argument>const llvm::APSInt &amp;v</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><call><name>APSIntType</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMaxValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMinValue</name><argument_list>(<argument>const llvm::APSInt &amp;v</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><call><name>APSIntType</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMinValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMaxValue</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getMaxValue</name><argument_list>(<argument><expr><call><name>getAPSIntType</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMinValue</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getMinValue</name><argument_list>(<argument><expr><call><name>getAPSIntType</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMaxValue</name><argument_list>(<argument>APSIntType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>getMaxValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getMinValue</name><argument_list>(<argument>APSIntType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><call><name><name>T</name><operator>.</operator><name>getMinValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>Add1</name><argument_list>(<argument>const llvm::APSInt &amp;V</argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>X</name> <operator>=</operator> <name>V</name></expr>;
<expr><operator>++</operator><name>X</name></expr>;
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>Sub1</name><argument_list>(<argument>const llvm::APSInt &amp;V</argument>)</argument_list></macro> <block>{
<expr><name>llvm</name><operator>::</operator><name>APSInt</name> <name>X</name> <operator>=</operator> <name>V</name></expr>;
<expr><operator>--</operator><name>X</name></expr>;
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getZeroWithTypeSize</name><argument_list>(<argument>QualType T</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>T</name><operator>-&gt;</operator><name>isScalarType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getTypeSize</name></name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getZeroWithPtrWidth</name><argument_list>(<argument>bool isUnsigned = true</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getTypeSize</name></name><argument_list>(<argument><expr><name><name>Ctx</name><operator>.</operator><name>VoidPtrTy</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isUnsigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getIntWithPtrWidth</name><argument_list>(<argument>uint64_t X</argument>, <argument>bool isUnsigned</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getTypeSize</name></name><argument_list>(<argument><expr><name><name>Ctx</name><operator>.</operator><name>VoidPtrTy</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isUnsigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getTruthValue</name><argument_list>(<argument>bool b</argument>, <argument>QualType T</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>b</name> <operator>?</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getIntWidth</name></name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>T</name><operator>-&gt;</operator><name>isUnsignedIntegerOrEnumerationType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><macro><name>getTruthValue</name><argument_list>(<argument>bool b</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>getTruthValue</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>Ctx</name><operator>.</operator><name>getLogicalOperationType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>CompoundValData</name> <modifier>*</modifier></type><name>getCompoundValData</name><argument_list>(<argument><expr><name>QualType</name> <name>T</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name> <name>Vals</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>LazyCompoundValData</name> <modifier>*</modifier></type><name>getLazyCompoundValData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StoreRef</name> <modifier>&amp;</modifier></type><name>store</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>TypedValueRegion</name> <modifier>*</modifier></type><name>region</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>PointerToMemberData</name> <modifier>*</modifier></type>
<name>getPointerToMemberData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NamedDecl</name> <operator>*</operator><name>ND</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>L</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name> <macro><name>getEmptySValList</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>SValListFactory</name><operator>.</operator><name>getEmptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name> <macro><name>prependSVal</name><argument_list>(<argument>SVal X</argument>, <argument>llvm::ImmutableList&lt;SVal&gt; L</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>SValListFactory</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getEmptyCXXBaseList</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>CXXBaseListFactory</name><operator>.</operator><name>getEmptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CXXBaseSpecifier</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>prependCXXBase</name><argument_list>(
<argument>const CXXBaseSpecifier *CBS</argument>,
<argument>llvm::ImmutableList&lt;const CXXBaseSpecifier *&gt; L</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CXXBaseListFactory</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>CBS</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PointerToMemberData</name> <modifier>*</modifier></type>
<name>accumCXXBase</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>CastExpr</name><operator>::</operator><name>path_const_iterator</name></expr></argument>&gt;</argument_list></name> <name>PathRange</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>nonloc</name><operator>::</operator><name>PointerToMember</name> <operator>&amp;</operator><name>PTM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CastKind</name> <operator>&amp;</operator><name>kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name><operator>*</operator> <macro><name>evalAPSInt</name><argument_list>(<argument>BinaryOperator::Opcode Op</argument>,
<argument>const llvm::APSInt&amp; V1</argument>,
<argument>const llvm::APSInt&amp; V2</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<macro><name>getPersistentSValWithData</name><argument_list>(<argument>const SVal&amp; V</argument>, <argument>uintptr_t Data</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator>
<call><name>getPersistentSValPair</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SVal</name><operator>&amp;</operator> <name>V1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SVal</name><operator>&amp;</operator> <name>V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>const</specifier> <name>SVal</name><modifier>*</modifier></type> <name>getPersistentSVal</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>X</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
