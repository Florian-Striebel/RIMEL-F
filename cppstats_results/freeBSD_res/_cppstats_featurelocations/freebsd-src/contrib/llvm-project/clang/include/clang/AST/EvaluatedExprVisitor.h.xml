<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/EvaluatedExprVisitor.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_EVALUATEDEXPRVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_EVALUATEDEXPRVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExprCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>Ptr</name></expr></argument>, <argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>EvaluatedExprVisitorBase</name> <range>: <expr><name>public</name> <name><name>StmtVisitorBase</name><argument_list type="generic">&lt;<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr>;

<expr><name>public</name><operator>:</operator>


<name>bool</name> <macro><name>shouldVisitDiscardedStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename Ptr&lt;CLASS&gt;::type</cpp:value></cpp:define>

<name>explicit</name> <call><name>EvaluatedExprVisitorBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Context</name><argument_list>(<argument>Context</argument>)</argument_list></macro> <block>{ }</block>



<name>void</name> <macro><name>VisitDeclRefExpr</name><argument_list>(<argument>PTR(DeclRefExpr) E</argument>)</argument_list></macro> <block>{ }</block>
<name>void</name> <macro><name>VisitOffsetOfExpr</name><argument_list>(<argument>PTR(OffsetOfExpr) E</argument>)</argument_list></macro> <block>{ }</block>
<name>void</name> <macro><name>VisitUnaryExprOrTypeTraitExpr</name><argument_list>(<argument>PTR(UnaryExprOrTypeTraitExpr) E</argument>)</argument_list></macro> <block>{ }</block>
<name>void</name> <macro><name>VisitExpressionTraitExpr</name><argument_list>(<argument>PTR(ExpressionTraitExpr) E</argument>)</argument_list></macro> <block>{ }</block>
<name>void</name> <macro><name>VisitBlockExpr</name><argument_list>(<argument>PTR(BlockExpr) E</argument>)</argument_list></macro> <block>{ }</block>
<name>void</name> <macro><name>VisitCXXUuidofExpr</name><argument_list>(<argument>PTR(CXXUuidofExpr) E</argument>)</argument_list></macro> <block>{ }</block>
<name>void</name> <macro><name>VisitCXXNoexceptExpr</name><argument_list>(<argument>PTR(CXXNoexceptExpr) E</argument>)</argument_list></macro> <block>{ }</block>

<name>void</name> <macro><name>VisitMemberExpr</name><argument_list>(<argument>PTR(MemberExpr) E</argument>)</argument_list></macro> <block>{

<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getBase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>VisitChooseExpr</name><argument_list>(<argument>PTR(ChooseExpr) E</argument>)</argument_list></macro> <block>{

<if_stmt><if>if <condition>(<expr><call><name><name>E</name><operator>-&gt;</operator><name>getCond</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>isValueDependent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block></expr>

<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getChosenSubExpr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>VisitGenericSelectionExpr</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>GenericSelectionExpr</argument>)</argument_list></macro> <name>E</name></expr></argument>)</argument_list> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name><name>E</name><operator>-&gt;</operator><name>isResultDependent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getResultExpr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>VisitDesignatedInitExpr</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>DesignatedInitExpr</argument>)</argument_list></macro> <name>E</name></expr></argument>)</argument_list> <block>{<block_content>


<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getInit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>VisitCXXTypeidExpr</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>CXXTypeidExpr</argument>)</argument_list></macro> <name>E</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>E</name><operator>-&gt;</operator><name>isPotentiallyEvaluated</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>-&gt;</operator><name>getExprOperand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>VisitCallExpr</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>CallExpr</argument>)</argument_list></macro> <name>CE</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>CE</name><operator>-&gt;</operator><name>isUnevaluatedBuiltinCall</name></name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>getDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>VisitExpr</name><argument_list>(<argument><expr><name>CE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>VisitLambdaExpr</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>LambdaExpr</argument>)</argument_list></macro> <name>LE</name></expr></argument>)</argument_list> <block>{<block_content>

<for>for <control>(<init><expr><name>LambdaExpr</name><operator>::</operator><name>const_capture_init_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>LE</name><operator>-&gt;</operator><name>capture_init_begin</name></name><argument_list>()</argument_list></call></expr><operator>,</operator>
<expr><name>E</name> <operator>=</operator> <call><name><name>LE</name><operator>-&gt;</operator><name>capture_init_end</name></name><argument_list>()</argument_list></call></expr>;</init>
<condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>I</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><operator>*</operator><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>VisitStmt</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>Stmt</argument>)</argument_list></macro> <name>S</name></expr></argument>)</argument_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>*</operator><name>SubStmt</name> <operator>:</operator> <call><name><name>S</name><operator>-&gt;</operator><name>children</name></name><argument_list>()</argument_list></call></expr></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>SubStmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><name>SubStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>VisitIfStmt</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>IfStmt</argument>)</argument_list></macro> <name>If</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>shouldVisitDiscardedStmt</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>SubStmt</name> <init>= <expr><call><name><name>If</name><operator>-&gt;</operator><name>getNondiscardedCase</name></name><argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>SubStmt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>Visit</name></name><argument_list>(<argument><expr><operator>*</operator><name>SubStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>getDerived</name><argument_list>()</argument_list></call><operator>.</operator><call><name>VisitStmt</name><argument_list>(<argument><expr><name>If</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><name>ImplClass</name> <modifier>&amp;</modifier></type><name>getDerived</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ImplClass</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTR</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>EvaluatedExprVisitor</name>
<range>: <expr><name>public</name> <name><name>EvaluatedExprVisitorBase</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>add_pointer</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>EvaluatedExprVisitor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>EvaluatedExprVisitorBase</name></macro><operator>&lt;</operator><name>std</name><operator>::</operator><name>add_pointer</name></expr>, <expr><name>ImplClass</name><operator>&gt;</operator><operator>(</operator><name>Context</name><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ConstEvaluatedExprVisitor</name>
<range>: <expr><name>public</name> <name><name>EvaluatedExprVisitorBase</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>make_const_ptr</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>ConstEvaluatedExprVisitor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>EvaluatedExprVisitorBase</name></macro><operator>&lt;</operator><name>llvm</name><operator>::</operator><name>make_const_ptr</name></expr>, <expr><name>ImplClass</name><operator>&gt;</operator><operator>(</operator><name>Context</name><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
