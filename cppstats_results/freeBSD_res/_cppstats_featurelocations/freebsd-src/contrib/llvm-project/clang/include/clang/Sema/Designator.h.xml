<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/Designator.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_DESIGNATOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_DESIGNATOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>











<decl_stmt><decl><type><name>class</name></type> <name>Designator</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>DesignatorKind</name> <block>{
<decl><name>FieldDesignator</name></decl>, <decl><name>ArrayDesignator</name></decl>, <decl><name>ArrayRangeDesignator</name></decl>
}</block>;</enum>
<label><name>private</name>:</label>
<macro><name>Designator</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>DesignatorKind</name></type> <name>Kind</name></decl>;</decl_stmt>

<struct>struct <name>FieldDesignatorInfo</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>II</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>DotLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>NameLoc</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>ArrayDesignatorInfo</name> <block>{
<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>LBracketLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>SourceLocation</name></type> <name>RBracketLoc</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>ArrayRangeDesignatorInfo</name> <block>{
<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>End</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>LBracketLoc</name></decl>, <decl><type ref="prev"/><name>EllipsisLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>SourceLocation</name></type> <name>RBracketLoc</name></decl>;</decl_stmt>
}</block>;</struct>

<union>union <block>{
<decl_stmt><decl><type><name>FieldDesignatorInfo</name></type> <name>FieldInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ArrayDesignatorInfo</name></type> <name>ArrayInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ArrayRangeDesignatorInfo</name></type> <name>ArrayRangeInfo</name></decl>;</decl_stmt>
}</block>;</union>

<label><name>public</name>:</label>

<expr_stmt><expr><name>DesignatorKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isFieldDesignator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>FieldDesignator</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isArrayDesignator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>ArrayDesignator</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isArrayRangeDesignator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name> <operator>==</operator> <name>ArrayRangeDesignator</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><macro><name>getField</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFieldDesignator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>FieldInfo</name><operator>.</operator><name>II</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getDotLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFieldDesignator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>FieldInfo</name><operator>.</operator><name>DotLoc</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getFieldLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFieldDesignator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>FieldInfo</name><operator>.</operator><name>NameLoc</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getArrayIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isArrayDesignator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ArrayInfo</name><operator>.</operator><name>Index</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getArrayRangeStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isArrayRangeDesignator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ArrayRangeInfo</name><operator>.</operator><name>Start</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>Expr</name> <operator>*</operator><macro><name>getArrayRangeEnd</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isArrayRangeDesignator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ArrayRangeInfo</name><operator>.</operator><name>End</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLBracketLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>isArrayDesignator</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isArrayRangeDesignator</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name>isArrayDesignator</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ArrayInfo</name><operator>.</operator><name>LBracketLoc</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>ArrayRangeInfo</name><operator>.</operator><name>LBracketLoc</name></name></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getRBracketLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>isArrayDesignator</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isArrayRangeDesignator</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><call><name>isArrayDesignator</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>ArrayInfo</name><operator>.</operator><name>RBracketLoc</name></name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name><name>ArrayRangeInfo</name><operator>.</operator><name>RBracketLoc</name></name></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getEllipsisLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isArrayRangeDesignator</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name><name>ArrayRangeInfo</name><operator>.</operator><name>EllipsisLoc</name></name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>Designator</name></type> <name>getField</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>II</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>DotLoc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>NameLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Designator</name></type> <name>D</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>FieldDesignator</name></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;D.FieldInfo</argument>)</argument_list></macro> <expr_stmt><expr><name>FieldDesignatorInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>II</name></name> <operator>=</operator> <name>II</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>DotLoc</name></name> <operator>=</operator> <name>DotLoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>FieldInfo</name><operator>.</operator><name>NameLoc</name></name> <operator>=</operator> <name>NameLoc</name></expr>;</expr_stmt>
<return>return <expr><name>D</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Designator</name></type> <name>getArray</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Index</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LBracketLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Designator</name></type> <name>D</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>ArrayDesignator</name></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;D.ArrayInfo</argument>)</argument_list></macro> <expr_stmt><expr><name>ArrayDesignatorInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayInfo</name><operator>.</operator><name>Index</name></name> <operator>=</operator> <name>Index</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayInfo</name><operator>.</operator><name>LBracketLoc</name></name> <operator>=</operator> <name>LBracketLoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayInfo</name><operator>.</operator><name>RBracketLoc</name></name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>D</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Designator</name></type> <name>getArrayRange</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>Start</name></decl></parameter>,
<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>End</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>LBracketLoc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>EllipsisLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Designator</name></type> <name>D</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>Kind</name></name> <operator>=</operator> <name>ArrayRangeDesignator</name></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;D.ArrayRangeInfo</argument>)</argument_list></macro> <expr_stmt><expr><name>ArrayRangeDesignatorInfo</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayRangeInfo</name><operator>.</operator><name>Start</name></name> <operator>=</operator> <name>Start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayRangeInfo</name><operator>.</operator><name>End</name></name> <operator>=</operator> <name>End</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayRangeInfo</name><operator>.</operator><name>LBracketLoc</name></name> <operator>=</operator> <name>LBracketLoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayRangeInfo</name><operator>.</operator><name>EllipsisLoc</name></name> <operator>=</operator> <name>EllipsisLoc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>D</name><operator>.</operator><name>ArrayRangeInfo</name><operator>.</operator><name>RBracketLoc</name></name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>D</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>setRBracketLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>RBracketLoc</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>isArrayDesignator</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isArrayRangeDesignator</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<literal type="string">"Invalid accessor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isArrayDesignator</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ArrayInfo</name><operator>.</operator><name>RBracketLoc</name></name> <operator>=</operator> <name>RBracketLoc</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ArrayRangeInfo</name><operator>.</operator><name>RBracketLoc</name></name> <operator>=</operator> <name>RBracketLoc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>ClearExprs</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>Actions</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>void</name></type> <name>FreeExprs</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>Actions</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>Designation</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Designator</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name>Designators</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<function><type><name>void</name></type> <name>AddDesignator</name><parameter_list>(<parameter><decl><type><name>Designator</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Designators</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Designators</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getNumDesignators</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Designators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Designator</name> <modifier>&amp;</modifier></type><name>getDesignator</name><argument_list>(<argument><expr><name>unsigned</name> <name>Idx</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&lt;</operator> <call><name><name>Designators</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>Designators</name><index>[<expr><name>Idx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>ClearExprs</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>Actions</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>



<function><type><name>void</name></type> <name>FreeExprs</name><parameter_list>(<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>Actions</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
