<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/HeaderMapTypes.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_HEADERMAPTYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_HEADERMAPTYPES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<enum>enum <block>{
<decl><name>HMAP_HeaderMagicNumber</name> <init>= <expr><operator>(</operator><literal type="char">'h'</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'m'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="char">'p'</literal></expr></init></decl>,
<decl><name>HMAP_HeaderVersion</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>HMAP_EmptyBucketKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>
}</block>;</enum>

<struct>struct <name>HMapBucket</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Suffix</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>HMapHeader</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>Magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>Reserved</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>StringsOffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>NumEntries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>NumBuckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>MaxValueLength</name></decl>;</decl_stmt>


}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
