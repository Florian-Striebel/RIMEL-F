<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/UnresolvedSet.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_UNRESOLVEDSET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_UNRESOLVEDSET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclAccessPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Specifiers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>UnresolvedSetIterator</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>iterator_adaptor_base</name><argument_list type="generic">&lt;
<argument><expr><name>UnresolvedSetIterator</name></expr></argument>, <argument><expr><name>DeclAccessPair</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>random_access_iterator_tag</name></expr></argument>, <argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>, <argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTUnresolvedSet</name></expr>;
<expr><name>friend</name> <name>class</name> <name>OverloadExpr</name></expr>;
<expr><name>friend</name> <name>class</name> <name>UnresolvedSetImpl</name></expr>;

<expr><name>explicit</name> <call><name>UnresolvedSetIterator</name><argument_list>(<argument><expr><name>DeclAccessPair</name> <operator>*</operator><name>Iter</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>iterator_adaptor_base</name><argument_list>(<argument>Iter</argument>)</argument_list></macro> <block>{}</block>
<name>explicit</name> <call><name>UnresolvedSetIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclAccessPair</name> <operator>*</operator><name>Iter</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>iterator_adaptor_base</name><argument_list>(<argument>const_cast&lt;DeclAccessPair *&gt;(Iter)</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>


<call><name>UnresolvedSetIterator</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>iterator_adaptor_base</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <block>{}</block>

<name>NamedDecl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>I</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>setDecl</name><argument_list>(<argument>NamedDecl *ND</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>I</name><operator>-&gt;</operator><name>setDecl</name></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr>;</return> }</block>
<name>AccessSpecifier</name> <macro><name>getAccess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>I</name><operator>-&gt;</operator><name>getAccess</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>void</name> <macro><name>setAccess</name><argument_list>(<argument>AccessSpecifier AS</argument>)</argument_list></macro> <block>{ <expr><call><name><name>I</name><operator>-&gt;</operator><name>setAccess</name></name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>; }</block>
<specifier>const</specifier> <name>DeclAccessPair</name> <operator>&amp;</operator><macro><name>getPair</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>I</name></expr>;</return> }</block>

<name>NamedDecl</name> <operator>*</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>NamedDecl</name> <operator>*</operator><name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr>) <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><operator>*</operator><name>this</name></expr>;</return> }</block>
}</block></expr></range></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>UnresolvedSetImpl</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>DeclsTy</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>DeclAccessPair</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<label><name>private</name>:</label>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>N</name></expr></argument>&gt;</argument_list></name> <name>friend</name> <name>class</name></type> <name>UnresolvedSet</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UnresolvedSetImpl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>UnresolvedSetImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UnresolvedSetImpl</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>UnresolvedSetImpl</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>UnresolvedSetImpl</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>


<macro><name>UnresolvedSetImpl</name><argument_list>(<argument>UnresolvedSetImpl &amp;&amp;</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<decl_stmt><decl><type><name>UnresolvedSetImpl</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>UnresolvedSetImpl</name> <operator>&amp;&amp;</operator><operator>)</operator> <block>{ <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></init></decl></decl_stmt>

<label><name>public</name>:</label>


<decl_stmt><decl><type><name>using</name></type> <name>iterator</name> <init>= <expr><name>UnresolvedSetIterator</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name>UnresolvedSetIterator</name></expr></init></decl>;</decl_stmt>

<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>DeclAccessPair</name></expr></argument>&gt;</argument_list></name> <macro><name>pairs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>decls</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>addDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>addDecl</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>AS_none</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>AccessSpecifier</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>DeclAccessPair</name><operator>::</operator><call><name>make</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>bool</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name><modifier>*</modifier></type> <name>Old</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>New</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>DeclsTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>E</name> <operator>=</operator> <call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>I</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Old</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name><name>I</name><operator>-&gt;</operator><name>setDecl</name></name><argument_list>(<argument><expr><name>New</name></expr></argument>)</argument_list></call><operator>,</operator> <name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>New</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>I</name><operator>-&gt;</operator><name>setDecl</name></name><argument_list>(<argument><expr><name>New</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>New</name></decl></parameter>, <parameter><decl><type><name>AccessSpecifier</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>I</name><operator>-&gt;</operator><name>set</name></name><argument_list>(<argument><expr><name>New</name></expr></argument>, <argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>decls</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index> <operator>=</operator> <call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pop_back_val</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name><name>I</name><operator>.</operator><name>I</name></name> <operator>=</operator> <call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pop_back_val</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>setAccess</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>AccessSpecifier</name></type> <name>AS</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>I</name><operator>.</operator><name>I</name><operator>-&gt;</operator><name>setAccess</name></name><argument_list>(<argument><expr><name>AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>set_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>set_size</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>I</name><operator>.</operator><name>I</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>I</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Iter</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>Iter</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>Iter</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>decls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>assign</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>DeclAccessPair</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>decls</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index></expr>;</return> </block_content>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>DeclAccessPair</name> <modifier>&amp;</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>unsigned</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>decls</name><argument_list>()</argument_list></call><index>[<expr><name>I</name></expr>]</index></expr>;</return> </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>


<function><type><name>DeclsTy</name> <modifier>&amp;</modifier></type><name>decls</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclsTy</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>DeclsTy</name> <operator>&amp;</operator><macro><name>decls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DeclsTy</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>InlineCapacity</name></expr></argument>&gt;</argument_list></name> <name>class</name></type> <name>UnresolvedSet</name> <range>:
<expr><name>public</name> <name>UnresolvedSetImpl</name> <block>{
<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>DeclAccessPair</name></expr></argument>, <argument><expr><name>InlineCapacity</name></expr></argument>&gt;</argument_list></name> <name>Decls</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
