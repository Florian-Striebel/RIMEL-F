<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/JSONCompilationDatabase.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_JSONCOMPILATIONDATABASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_JSONCOMPILATIONDATABASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/CompilationDatabase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/FileMatchTrie.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/SourceMgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/YAMLParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


























<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>JSONCommandLineSyntax</name> <block>{<block_content> <expr_stmt><expr><name>Windows</name></expr><operator>,</operator> <expr><name>Gnu</name></expr><operator>,</operator> <expr><name>AutoDetect</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JSONCompilationDatabase</name> <range>: <expr><name>public</name> <name>CompilationDatabase</name> <block>{
<expr><name>public</name><operator>:</operator>




<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>JSONCompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<macro><name>loadFromFile</name><argument_list>(<argument>StringRef FilePath</argument>, <argument>std::string &amp;ErrorMessage</argument>,
<argument>JSONCommandLineSyntax Syntax</argument>)</argument_list></macro></expr>;




<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>JSONCompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<macro><name>loadFromBuffer</name><argument_list>(<argument>StringRef DatabaseString</argument>, <argument>std::string &amp;ErrorMessage</argument>,
<argument>JSONCommandLineSyntax Syntax</argument>)</argument_list></macro></expr>;






<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name>
<macro><name>getCompileCommands</name><argument_list>(<argument>StringRef FilePath</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getAllFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name> <macro><name>getAllCompileCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>

<macro><name>JSONCompilationDatabase</name><argument_list>(<argument>std::unique_ptr&lt;llvm::MemoryBuffer&gt; Database</argument>,
<argument>JSONCommandLineSyntax Syntax</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Database</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>Database</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>Syntax</name><argument_list>(<argument><expr><name>Syntax</name></expr></argument>)</argument_list></call></expr>,
<macro><name>YAMLStream</name><argument_list>(<argument>this-&gt;Database-&gt;getBuffer()</argument>, <argument>SM</argument>)</argument_list></macro> <expr><block>{}</block>





<name>bool</name> <call><name>parse</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>ErrorMessage</name></expr></argument>)</argument_list></call></expr>;








<expr><name>using</name> <name>CompileCommandRef</name> <operator>=</operator>
<name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>ScalarNode</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>ScalarNode</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>ScalarNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>ScalarNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr>;


<expr><name>void</name> <macro><name>getCommands</name><argument_list>(<argument>ArrayRef&lt;CompileCommandRef&gt; CommandsRef</argument>,
<argument>std::vector&lt;CompileCommand&gt; &amp;Commands</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommandRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>IndexByFile</name></expr>;



<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommandRef</name></expr></argument>&gt;</argument_list></name> <name>AllCommands</name></expr>;

<expr><name>FileMatchTrie</name> <name>MatchTrie</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Database</name></expr>;
<expr><name>JSONCommandLineSyntax</name> <name>Syntax</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>SourceMgr</name> <name>SM</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>yaml</name><operator>::</operator><name>Stream</name> <name>YAMLStream</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
