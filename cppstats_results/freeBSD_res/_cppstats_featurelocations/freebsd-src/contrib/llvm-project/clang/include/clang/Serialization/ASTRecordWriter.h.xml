<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Serialization/ASTRecordWriter.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SERIALIZATION_ASTRECORDWRITER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SERIALIZATION_ASTRECORDWRITER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AbstractBasicWriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/OpenMPClause.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTWriter.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TypeLoc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ASTRecordWriter</name>
<range>: <expr><name>public</name> <name>serialization</name><operator>::</operator><name><name>DataStreamBasicWriter</name><argument_list type="generic">&lt;<argument><expr><name>ASTRecordWriter</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>ASTWriter</name> <operator>*</operator><name>Writer</name></expr>;
<expr><name>ASTWriter</name><operator>::</operator><name>RecordDataImpl</name> <operator>*</operator><name>Record</name></expr>;



<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>StmtsToEmit</name></expr>;




<expr><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>OffsetIndices</name></expr>;



<expr><name>void</name> <call><name>FlushStmts</name><argument_list>()</argument_list></call></expr>;
<expr><name>void</name> <call><name>FlushSubStmts</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>PrepareToEmit</name><argument_list>(<argument>uint64_t MyOffset</argument>)</argument_list></macro> <block>{

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <range>: <expr><name>OffsetIndices</name></expr></range></decl></init>)</control> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>StoredOffset</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Record</name><operator>)</operator><index>[<expr><name>I</name></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>StoredOffset</name> <operator>&lt;</operator> <name>MyOffset</name> <operator>&amp;&amp;</operator> <literal type="string">"invalid offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>StoredOffset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>StoredOffset</name> <operator>=</operator> <name>MyOffset</name> <operator>-</operator> <name>StoredOffset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
OffsetIndices.clear(</block></for>)</block></expr>;
}</block>

<name>public</name><operator>:</operator>

<call><name>ASTRecordWriter</name><argument_list>(<argument><expr><name>ASTWriter</name> <operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><name>ASTWriter</name><operator>::</operator><name>RecordDataImpl</name> <operator>&amp;</operator><name>Record</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>DataStreamBasicWriter</name><argument_list>(<argument><expr><call><name><name>W</name><operator>.</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl>, <decl><type ref="prev"/><name>Writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>W</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>Record</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Record</name></expr></argument>)</argument_list> <block>{<block_content/>}</block></decl></decl_stmt>



<expr_stmt><expr><call><name>ASTRecordWriter</name><argument_list>(<argument><expr><name>ASTRecordWriter</name> <operator>&amp;</operator><name>Parent</name></expr></argument>, <argument><expr><name>ASTWriter</name><operator>::</operator><name>RecordDataImpl</name> <operator>&amp;</operator><name>Record</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>DataStreamBasicWriter</name><argument_list>(<argument><expr><call><name><name>Parent</name><operator>.</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Writer</name><argument_list>(<argument><expr><name><name>Parent</name><operator>.</operator><name>Writer</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Record</name><argument_list>(<argument>&amp;Record</argument>)</argument_list></macro> <expr><block>{}</block>


<call><name>ASTRecordWriter</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTRecordWriter</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ASTRecordWriter</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ASTRecordWriter</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>ASTWriter</name><operator>::</operator><name>RecordDataImpl</name> <operator>&amp;</operator><macro><name>getRecordData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>Record</name></expr>;</return> }</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>Record</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InputIterator</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>InputIterator</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>InputIterator</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Record</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Record</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Record</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>uint64_t</name> <modifier>&amp;</modifier></type><name>operator</name>[]<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>*</operator><name>Record</name><operator>)</operator><index>[<expr><name>N</name></expr>]</index></expr>;</return> </block_content>}</block></function>





<function><type><name>uint64_t</name></type> <name>Emit</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Abbrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>Offset</name> <init>= <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Stream</name><operator>.</operator><name>GetCurrentBitNo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>PrepareToEmit</name><argument_list>(<argument><expr><name>Offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Stream</name><operator>.</operator><name>EmitRecord</name></name><argument_list>(<argument><expr><name>Code</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>, <argument><expr><name>Abbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FlushStmts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Offset</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint64_t</name></type> <name>EmitStmt</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Abbrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>FlushSubStmts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PrepareToEmit</name><argument_list>(<argument><expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Stream</name><operator>.</operator><name>GetCurrentBitNo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Stream</name><operator>.</operator><name>EmitRecord</name></name><argument_list>(<argument><expr><name>Code</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>, <argument><expr><name>Abbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>Stream</name><operator>.</operator><name>GetCurrentBitNo</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>AddOffset</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>BitOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>OffsetIndices</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>Record</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Record</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>BitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>AddStmt</name><parameter_list>(<parameter><decl><type><name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>StmtsToEmit</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>writeStmtRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AddStmt</name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function_decl><type><name>void</name></type> <name>AddFunctionDefinition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>FD</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>AddSourceLocation</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddSourceLocation</name></name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>writeSourceLocation</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AddSourceLocation</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>AddSourceRange</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>Range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddSourceRange</name></name><argument_list>(<argument><expr><name>Range</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>writeBool</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Record</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>writeUInt32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Record</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>writeUInt64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Record</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>AddAPInt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APInt</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>writeAPInt</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>AddAPSInt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APSInt</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>writeAPSInt</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>AddAPFloat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>APFloat</name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>AddAPValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>APValue</name> <modifier>&amp;</modifier></type><name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>writeAPValue</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>AddIdentifierRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>II</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddIdentifierRef</name></name><argument_list>(<argument><expr><name>II</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>writeIdentifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>II</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AddIdentifierRef</name><argument_list>(<argument><expr><name>II</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>AddSelectorRef</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>writeSelector</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>sel</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AddSelectorRef</name><argument_list>(<argument><expr><name>sel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>AddCXXTemporary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXTemporary</name> <modifier>*</modifier></type><name>Temp</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddCXXBaseSpecifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBaseSpecifier</name> <modifier>&amp;</modifier></type><name>Base</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddCXXBaseSpecifiers</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CXXBaseSpecifier</name></expr></argument>&gt;</argument_list></name></type> <name>Bases</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>AddTypeRef</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddTypeRef</name></name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>writeQualType</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AddTypeRef</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>AddTypeSourceInfo</name><parameter_list>(<parameter><decl><type><name>TypeSourceInfo</name> <modifier>*</modifier></type><name>TInfo</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddTypeLoc</name><parameter_list>(<parameter><decl><type><name>TypeLoc</name></type> <name>TL</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>AddTemplateArgumentLocInfo</name><argument_list>(<argument><expr><name>TemplateArgument</name><operator>::</operator><name>ArgKind</name> <name>Kind</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TemplateArgumentLocInfo</name> <operator>&amp;</operator><name>Arg</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<function_decl><type><name>void</name></type> <name>AddTemplateArgumentLoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentLoc</name> <modifier>&amp;</modifier></type><name>Arg</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddASTTemplateArgumentListInfo</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ASTTemplateArgumentListInfo</name> <modifier>*</modifier></type><name>ASTTemplArgList</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>AddDeclRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddDeclRef</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>writeDeclRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>AddDeclRef</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>AddDeclarationName</name><parameter_list>(<parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>writeDeclarationName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>AddDeclarationNameLoc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclarationNameLoc</name> <modifier>&amp;</modifier></type><name>DNLoc</name></decl></parameter>,
<parameter><decl><type><name>DeclarationName</name></type> <name>Name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddDeclarationNameInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclarationNameInfo</name> <modifier>&amp;</modifier></type><name>NameInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AddQualifierInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QualifierInfo</name> <modifier>&amp;</modifier></type><name>Info</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>AddNestedNameSpecifier</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>NNS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>writeNestedNameSpecifier</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>AddNestedNameSpecifierLoc</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifierLoc</name></type> <name>NNS</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>AddTemplateName</name><parameter_list>(<parameter><decl><type><name>TemplateName</name></type> <name>Name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>writeTemplateName</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>AddTemplateArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgument</name> <modifier>&amp;</modifier></type><name>Arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>writeTemplateArgument</name><argument_list>(<argument><expr><name>Arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>AddTemplateParameterList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateParameterList</name> <modifier>*</modifier></type><name>TemplateParams</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddTemplateArgumentList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TemplateArgumentList</name> <modifier>*</modifier></type><name>TemplateArgs</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddUnresolvedSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTUnresolvedSet</name> <modifier>&amp;</modifier></type><name>Set</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddCXXCtorInitializers</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorInitializer</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>CtorInits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>AddCXXDefinitionData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXRecordDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddVarDeclInit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VarDecl</name> <modifier>*</modifier></type><name>VD</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>writeOMPTraitInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPTraitInfo</name> <modifier>*</modifier></type><name>TI</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>writeOMPClause</name><parameter_list>(<parameter><decl><type><name>OMPClause</name> <modifier>*</modifier></type><name>C</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>writeOMPChildren</name><parameter_list>(<parameter><decl><type><name>OMPChildren</name> <modifier>*</modifier></type><name>Data</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>AddString</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Str</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddString</name></name><argument_list>(<argument><expr><name>Str</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>AddPath</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Path</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddPath</name></name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>AddVersionTuple</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VersionTuple</name> <modifier>&amp;</modifier></type><name>Version</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Writer</name><operator>-&gt;</operator><name>AddVersionTuple</name></name><argument_list>(<argument><expr><name>Version</name></expr></argument>, <argument><expr><operator>*</operator><name>Record</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function_decl><type><name>void</name></type> <name>AddAttr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Attr</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>AddAttributes</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Attr</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Attrs</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
