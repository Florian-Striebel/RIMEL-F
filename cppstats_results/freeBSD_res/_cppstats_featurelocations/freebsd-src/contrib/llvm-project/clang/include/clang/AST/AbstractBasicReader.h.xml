<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/AbstractBasicReader.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CLANG_AST_ABSTRACTBASICREADER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLANG_AST_ABSTRACTBASICREADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclTemplate.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>T</name></type> <name>makeNullableFromOptional</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><operator>*</operator><name>value</name></expr> </then><else>: <expr><call><name>T</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>inline</specifier> <name>T</name> <modifier>*</modifier></type><name>makePointerFromOptional</name><parameter_list>(<parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><operator>*</operator><name>value</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>











































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AbstractBasicReader.inc"</cpp:file></cpp:include>




















<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Impl</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>DataStreamBasicReader</name> <range>: <expr><name>public</name> <name><name>BasicReaderBase</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>using</name> <name><name>BasicReaderBase</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>asImpl</name></expr>;
<expr><call><name>DataStreamBasicReader</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>BasicReaderBase</name></macro><operator>&lt;</operator><name>Impl</name><operator>&gt;</operator><operator>(</operator><name>ctx</name><operator>)</operator> <block>{}</block>

<name>public</name><operator>:</operator>
<name>using</name> <name><name>BasicReaderBase</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>getASTContext</name></expr>;



<expr><name>Impl</name> <operator>&amp;</operator><macro><name>find</name><argument_list>(<argument>const char *propertyName</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>T</name> <macro><name>readEnum</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>T</name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>Impl</name> <operator>&amp;</operator><macro><name>readObject</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>readArray</name><argument_list>(<argument>llvm::SmallVectorImpl&lt;T&gt; &amp;buffer</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

<expr><name>uint32_t</name> <name>size</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>buffer</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>ReadDispatcher</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return buffer</block><empty_stmt>;</empty_stmt></for>
}</block>

<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>readOptional</name><argument_list>(<argument>Args &amp;&amp;...args</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>UnpackOptionalValue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>unpack</name><argument_list>(
<argument><expr><name><name>ReadDispatcher</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>read</name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>readAPSInt</name><argument_list>()</argument_list></macro> <block>{
<expr><name>bool</name> <name>isUnsigned</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readBool</name><argument_list>()</argument_list></call></expr>;
<expr><name>llvm</name><operator>::</operator><name>APInt</name> <name>value</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readAPInt</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>APSInt</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isUnsigned</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>llvm</name><operator>::</operator><name>APInt</name> <macro><name>readAPInt</name><argument_list>()</argument_list></macro> <block>{
<expr><name>unsigned</name> <name>bitWidth</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr>;
<expr><name>unsigned</name> <name>numWords</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>APInt</name><operator>::</operator><call><name>getNumWords</name><argument_list>(<argument><expr><name>bitWidth</name></expr></argument>)</argument_list></call></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>data</name></expr>;
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>numWords</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block></expr>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>APInt</name><argument_list>(<argument><expr><name>bitWidth</name></expr></argument>, <argument><expr><name>numWords</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>FixedPointSemantics</name> <macro><name>readFixedPointSemantics</name><argument_list>()</argument_list></macro> <block>{
<expr><name>unsigned</name> <name>width</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr>;
<expr><name>unsigned</name> <name>scale</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr>;
<expr><name>unsigned</name> <name>tmp</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr>;
<expr><name>bool</name> <name>isSigned</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;
<expr><name>bool</name> <name>isSaturated</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>;
<expr><name>bool</name> <name>hasUnsignedPadding</name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x4</literal></expr>;
<return>return <expr><name>llvm</name><operator>::</operator><call><name>FixedPointSemantics</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>isSigned</name></expr></argument>, <argument><expr><name>isSaturated</name></expr></argument>,
<argument><expr><name>hasUnsignedPadding</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>APValue</name><operator>::</operator><name>LValuePathSerializationHelper</name> <macro><name>readLValuePathSerializationHelper</name><argument_list>(
<argument>SmallVectorImpl&lt;APValue::LValuePathEntry&gt; &amp;path</argument>)</argument_list></macro> <block>{
<expr><name>auto</name> <name>elemTy</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readQualType</name><argument_list>()</argument_list></call></expr>;
<expr><name>unsigned</name> <name>pathLength</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr>;
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pathLength</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>elemTy</name><operator>-&gt;</operator><name>template</name></name> <call><name><name>getAs</name><argument_list type="generic">&lt;<argument><expr><name>RecordType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>int_</name> <init>= <expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>decl</name> <init>= <expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><name>template</name> <call><name><name>readDeclAs</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>recordDecl</name> <operator>=</operator> <call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXRecordDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>decl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>elemTy</name> <operator>=</operator> <call><name>getASTContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRecordType</name><argument_list>(<argument><expr><name>recordDecl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>elemTy</name> <operator>=</operator> <call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ValueDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>decl</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(
<argument><expr><name>APValue</name><operator>::</operator><call><name>LValuePathEntry</name><argument_list>(<argument><expr><name>APValue</name><operator>::</operator><call><name>BaseOrMemberType</name><argument_list>(<argument><expr><name>decl</name></expr></argument>, <argument><expr><name>int_</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name>elemTy</name> <operator>=</operator> <call><name>getASTContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsArrayType</name><argument_list>(<argument><expr><name>elemTy</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getElementType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(
<argument><expr><name>APValue</name><operator>::</operator><name>LValuePathEntry</name><operator>::</operator><call><name>ArrayIndex</name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
return APValue::LValuePathSerializationHelper(path</block></block><operator>,</operator> <expr_stmt><expr><name>elemTy</name></expr></expr_stmt></if></if_stmt>)</block_content></block><empty_stmt>;</empty_stmt></for>
}</block></expr></expr_stmt>

<function><type><name>Qualifiers</name></type> <name>readQualifiers</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>Qualifiers</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsOpaqueValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"update this if the value size changes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>Qualifiers</name><operator>::</operator><call><name>fromOpaqueValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>FunctionProtoType</name><operator>::</operator><name>ExceptionSpecInfo</name>
<macro><name>readExceptionSpecInfo</name><argument_list>(<argument>llvm::SmallVectorImpl&lt;QualType&gt; &amp;buffer</argument>)</argument_list></macro> <block>{
<expr><name>FunctionProtoType</name><operator>::</operator><name>ExceptionSpecInfo</name> <name>esi</name></expr>;
<expr><name><name>esi</name><operator>.</operator><name>Type</name></name> <operator>=</operator> <call><name>ExceptionSpecificationType</name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name><name>esi</name><operator>.</operator><name>Type</name></name> <operator>==</operator> <name>EST_Dynamic</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>esi</name><operator>.</operator><name>Exceptions</name></name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><name>template</name> <call><name><name>readArray</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else if (isComputedNoexcept(esi.Type</block></if></if_stmt>))</block> <block>{
<expr><name><name>esi</name><operator>.</operator><name>NoexceptExpr</name></name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readExprRef</name><argument_list>()</argument_list></call></expr>;
}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name><name>esi</name><operator>.</operator><name>Type</name></name> <operator>==</operator> <name>EST_Uninstantiated</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>esi</name><operator>.</operator><name>SourceDecl</name></name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readFunctionDeclRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>esi</name><operator>.</operator><name>SourceTemplate</name></name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readFunctionDeclRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>esi</name><operator>.</operator><name>Type</name></name> <operator>==</operator> <name>EST_Unevaluated</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>esi</name><operator>.</operator><name>SourceDecl</name></name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readFunctionDeclRef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>esi</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>FunctionProtoType</name><operator>::</operator><name>ExtParameterInfo</name> <macro><name>readExtParameterInfo</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FunctionProtoType</name><operator>::</operator><call><name>ExtParameterInfo</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOpaqueValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></sizeof>
<operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"opaque value doesn't fit into uint32_t"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>uint32_t</name> <name>value</name> <operator>=</operator> <call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>FunctionProtoType</name><operator>::</operator><name>ExtParameterInfo</name><operator>::</operator><call><name>getFromOpaqueValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>readNestedNameSpecifier</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>ctx</name> <operator>=</operator> <call><name>getASTContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>NestedNameSpecifier</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name> <init>= <expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readUInt32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>depth</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>kind</name> <init>= <expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readNestedNameSpecifierKind</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Identifier</name></expr>:</case>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>NestedNameSpecifier</name><operator>::</operator><call><name>Create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,
<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readIdentifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Namespace</name></expr>:</case>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>NestedNameSpecifier</name><operator>::</operator><call><name>Create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,
<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readNamespaceDeclRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>NamespaceAlias</name></expr>:</case>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>NestedNameSpecifier</name><operator>::</operator><call><name>Create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,
<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readNamespaceAliasDeclRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>TypeSpec</name></expr>:</case>
<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>TypeSpecWithTemplate</name></expr>:</case>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>NestedNameSpecifier</name><operator>::</operator><call><name>Create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>,
<argument><expr><name>kind</name> <operator>==</operator> <name>NestedNameSpecifier</name><operator>::</operator><name>TypeSpecWithTemplate</name></expr></argument>,
<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readQualType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypePtr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Global</name></expr>:</case>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>NestedNameSpecifier</name><operator>::</operator><call><name>GlobalSpecifier</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>

<case>case <expr><name>NestedNameSpecifier</name><operator>::</operator><name>Super</name></expr>:</case>
<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>NestedNameSpecifier</name><operator>::</operator><call><name>SuperSpecifier</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>readCXXRecordDeclRef</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad nested name specifier kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>cur</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
