<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/Attr.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ATTR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ATTR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTFwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AttrIterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/AttrKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/AttributeCommonInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/OpenMPKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Sanitizers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSwitch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AttributeCommonInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCInterfaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TypeSourceInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OMPTraitInfo</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Attr</name> <range>: <expr><name>public</name> <name>AttributeCommonInfo</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>unsigned</name> <name>AttrKind</name> <operator>:</operator> <literal type="number">16</literal></expr>;

<expr><name>protected</name><operator>:</operator>


<name>unsigned</name> <name>Inherited</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>IsPackExpansion</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>Implicit</name> <operator>:</operator> <literal type="number">1</literal></expr>;


<expr><name>unsigned</name> <name>IsLateParsed</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>InheritEvenIfAlreadyPresent</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>void</name> <operator>*</operator><name>operator</name> <macro><name>new</name><argument_list>(<argument>size_t bytes</argument>)</argument_list></macro> <name>noexcept</name> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Attrs cannot be allocated with regular 'new'."</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <name>operator</name> <macro><name>delete</name><argument_list>(<argument>void *data</argument>)</argument_list></macro> <name>noexcept</name> <block>{
<expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Attrs cannot be released with regular 'delete'."</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>

<name>void</name> <operator>*</operator><name>operator</name> <macro><name>new</name><argument_list>(<argument>size_t Bytes</argument>, <argument>ASTContext &amp;C</argument>,
<argument>size_t Alignment = <literal type="number">8</literal></argument>)</argument_list></macro> <name>noexcept</name> <block>{
<return>return <expr><operator>::</operator><name>operator</name> <call><name>new</name><argument_list>(<argument><expr><name>Bytes</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<name>void</name> <name>operator</name> <macro><name>delete</name><argument_list>(<argument>void *Ptr</argument>, <argument>ASTContext &amp;C</argument>, <argument>size_t Alignment</argument>)</argument_list></macro> <name>noexcept</name> <block>{
<return>return <expr><operator>::</operator><name>operator</name> <call><name>delete</name><argument_list>(<argument><expr><name>Ptr</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Alignment</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>
<macro><name>Attr</name><argument_list>(<argument>ASTContext &amp;Context</argument>, <argument>const AttributeCommonInfo &amp;CommonInfo</argument>,
<argument>attr::Kind AK</argument>, <argument>bool IsLateParsed</argument>)</argument_list></macro>
<operator>:</operator> <call><name>AttributeCommonInfo</name><argument_list>(<argument><expr><name>CommonInfo</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AttrKind</name><argument_list>(<argument><expr><name>AK</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Inherited</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>IsPackExpansion</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Implicit</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>IsLateParsed</name><argument_list>(<argument><expr><name>IsLateParsed</name></expr></argument>)</argument_list></call></expr>,
<macro><name>InheritEvenIfAlreadyPresent</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>attr</name><operator>::</operator><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>attr</name><operator>::</operator><name>Kind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>AttrKind</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>unsigned</name> <macro><name>getSpellingListIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getAttributeSpellingListIndex</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getSpelling</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBegin</name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>bool</name> <macro><name>isInherited</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Inherited</name></expr>;</return> }</block>



<name>bool</name> <macro><name>isImplicit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Implicit</name></expr>;</return> }</block>
<name>void</name> <macro><name>setImplicit</name><argument_list>(<argument>bool I</argument>)</argument_list></macro> <block>{ <expr><name>Implicit</name> <operator>=</operator> <name>I</name></expr>; }</block>

<name>void</name> <macro><name>setPackExpansion</name><argument_list>(<argument>bool PE</argument>)</argument_list></macro> <block>{ <expr><name>IsPackExpansion</name> <operator>=</operator> <name>PE</name></expr>; }</block>
<name>bool</name> <macro><name>isPackExpansion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPackExpansion</name></expr>;</return> }</block>


<name>Attr</name> <operator>*</operator><macro><name>clone</name><argument_list>(<argument>ASTContext &amp;C</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>isLateParsed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsLateParsed</name></expr>;</return> }</block>


<name>void</name> <macro><name>printPretty</name><argument_list>(<argument>raw_ostream &amp;OS</argument>, <argument>const PrintingPolicy &amp;Policy</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TypeAttr</name> <range>: <expr><name>public</name> <name>Attr</name> <block>{
<expr><name>protected</name><operator>:</operator>
<macro><name>TypeAttr</name><argument_list>(<argument>ASTContext &amp;Context</argument>, <argument>const AttributeCommonInfo &amp;CommonInfo</argument>,
<argument>attr::Kind AK</argument>, <argument>bool IsLateParsed</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Attr</name><argument_list>(<argument>Context</argument>, <argument>CommonInfo</argument>, <argument>AK</argument>, <argument>IsLateParsed</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Attr *A</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>attr</name><operator>::</operator><name>FirstTypeAttr</name> <operator>&amp;&amp;</operator>
<call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>attr</name><operator>::</operator><name>LastTypeAttr</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>StmtAttr</name> <operator>:</operator> <name>public</name> <name>Attr</name> <block>{
<expr><name>protected</name><operator>:</operator>
<macro><name>StmtAttr</name><argument_list>(<argument>ASTContext &amp;Context</argument>, <argument>const AttributeCommonInfo &amp;CommonInfo</argument>,
<argument>attr::Kind AK</argument>, <argument>bool IsLateParsed</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Attr</name><argument_list>(<argument>Context</argument>, <argument>CommonInfo</argument>, <argument>AK</argument>, <argument>IsLateParsed</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Attr *A</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>attr</name><operator>::</operator><name>FirstStmtAttr</name> <operator>&amp;&amp;</operator>
<call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>attr</name><operator>::</operator><name>LastStmtAttr</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>InheritableAttr</name> <operator>:</operator> <name>public</name> <name>Attr</name> <block>{
<expr><name>protected</name><operator>:</operator>
<macro><name>InheritableAttr</name><argument_list>(<argument>ASTContext &amp;Context</argument>, <argument>const AttributeCommonInfo &amp;CommonInfo</argument>,
<argument>attr::Kind AK</argument>, <argument>bool IsLateParsed</argument>,
<argument>bool InheritEvenIfAlreadyPresent</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>Attr</name><argument_list>(<argument>Context</argument>, <argument>CommonInfo</argument>, <argument>AK</argument>, <argument>IsLateParsed</argument>)</argument_list></macro> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>InheritEvenIfAlreadyPresent</name></name> <operator>=</operator> <name>InheritEvenIfAlreadyPresent</name></expr>;
}</block>

<name>public</name><operator>:</operator>
<name>void</name> <macro><name>setInherited</name><argument_list>(<argument>bool I</argument>)</argument_list></macro> <block>{ <expr><name>Inherited</name> <operator>=</operator> <name>I</name></expr>; }</block>



<name>bool</name> <macro><name>shouldInheritEvenIfAlreadyPresent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>InheritEvenIfAlreadyPresent</name></expr>;</return>
}</block>


<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Attr *A</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>attr</name><operator>::</operator><name>FirstInheritableAttr</name> <operator>&amp;&amp;</operator>
<call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>attr</name><operator>::</operator><name>LastInheritableAttr</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>DeclOrStmtAttr</name> <operator>:</operator> <name>public</name> <name>InheritableAttr</name> <block>{
<expr><name>protected</name><operator>:</operator>
<macro><name>DeclOrStmtAttr</name><argument_list>(<argument>ASTContext &amp;Context</argument>, <argument>const AttributeCommonInfo &amp;CommonInfo</argument>,
<argument>attr::Kind AK</argument>, <argument>bool IsLateParsed</argument>,
<argument>bool InheritEvenIfAlreadyPresent</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>InheritableAttr</name><argument_list>(<argument>Context</argument>, <argument>CommonInfo</argument>, <argument>AK</argument>, <argument>IsLateParsed</argument>,
<argument>InheritEvenIfAlreadyPresent</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Attr *A</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>attr</name><operator>::</operator><name>FirstDeclOrStmtAttr</name> <operator>&amp;&amp;</operator>
<call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>attr</name><operator>::</operator><name>LastDeclOrStmtAttr</name></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>InheritableParamAttr</name> <operator>:</operator> <name>public</name> <name>InheritableAttr</name> <block>{
<expr><name>protected</name><operator>:</operator>
<macro><name>InheritableParamAttr</name><argument_list>(<argument>ASTContext &amp;Context</argument>,
<argument>const AttributeCommonInfo &amp;CommonInfo</argument>, <argument>attr::Kind AK</argument>,
<argument>bool IsLateParsed</argument>, <argument>bool InheritEvenIfAlreadyPresent</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>InheritableAttr</name><argument_list>(<argument>Context</argument>, <argument>CommonInfo</argument>, <argument>AK</argument>, <argument>IsLateParsed</argument>,
<argument>InheritEvenIfAlreadyPresent</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const Attr *A</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>attr</name><operator>::</operator><name>FirstInheritableParamAttr</name> <operator>&amp;&amp;</operator>
<call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>attr</name><operator>::</operator><name>LastInheritableParamAttr</name></expr>;</return>
}</block>
}</expr>;



<expr><name>class</name> <name>ParameterABIAttr</name> <operator>:</operator> <name>public</name> <name>InheritableParamAttr</name> <block>{
<expr><name>protected</name><operator>:</operator>
<macro><name>ParameterABIAttr</name><argument_list>(<argument>ASTContext &amp;Context</argument>, <argument>const AttributeCommonInfo &amp;CommonInfo</argument>,
<argument>attr::Kind AK</argument>, <argument>bool IsLateParsed</argument>,
<argument>bool InheritEvenIfAlreadyPresent</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>InheritableParamAttr</name><argument_list>(<argument>Context</argument>, <argument>CommonInfo</argument>, <argument>AK</argument>, <argument>IsLateParsed</argument>,
<argument>InheritEvenIfAlreadyPresent</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<name>ParameterABI</name> <macro><name>getABI</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><call><name>getKind</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>attr</name><operator>::</operator><name>SwiftContext</name></expr>:</case>
<return>return <expr><name>ParameterABI</name><operator>::</operator><name>SwiftContext</name></expr>;</return>
<case>case <expr><name>attr</name><operator>::</operator><name>SwiftAsyncContext</name></expr>:</case>
<return>return <expr><name>ParameterABI</name><operator>::</operator><name>SwiftAsyncContext</name></expr>;</return>
<case>case <expr><name>attr</name><operator>::</operator><name>SwiftErrorResult</name></expr>:</case>
<return>return <expr><name>ParameterABI</name><operator>::</operator><name>SwiftErrorResult</name></expr>;</return>
<case>case <expr><name>attr</name><operator>::</operator><name>SwiftIndirectResult</name></expr>:</case>
<return>return <expr><name>ParameterABI</name><operator>::</operator><name>SwiftIndirectResult</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"bad parameter ABI attribute kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

static bool classof(const Attr *A</block></switch>) <block>{
<return>return <expr><call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>attr</name><operator>::</operator><name>FirstParameterABIAttr</name> <operator>&amp;&amp;</operator>
<call><name><name>A</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>attr</name><operator>::</operator><name>LastParameterABIAttr</name></expr>;</return>
}</block></block>
}</expr>;



<expr><name>class</name> <name>ParamIdx</name> <block>{

<expr><name>unsigned</name> <name>Idx</name> <operator>:</operator> <literal type="number">30</literal></expr>;
<expr><name>unsigned</name> <name>HasThis</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>IsValid</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>void</name> <macro><name>assertComparable</name><argument_list>(<argument>const ParamIdx &amp;I</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>I</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"ParamIdx must be valid to be compared"</literal></expr></argument>)</argument_list></call></expr>;




<expr><call><name>assert</name><argument_list>(<argument><expr><name>HasThis</name> <operator>==</operator> <name><name>I</name><operator>.</operator><name>HasThis</name></name> <operator>&amp;&amp;</operator>
<literal type="string">"ParamIdx must be for the same function to be compared"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>


<call><name>ParamIdx</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>Idx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HasThis</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>IsValid</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>







<macro><name>ParamIdx</name><argument_list>(<argument>unsigned Idx</argument>, <argument>const Decl *D</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Idx</name><argument_list>(<argument><expr><name>Idx</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>HasThis</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>IsValid</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="string">"Idx must be one-origin"</literal></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>FD</name> <init>= <expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>HasThis</name> <operator>=</operator> <call><name><name>FD</name><operator>-&gt;</operator><name>isCXXInstanceMember</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr>





<typedef>typedef <type><name>uint32_t</name></type> <name>SerialType</name>;</typedef>



<name>SerialType</name> <macro><name>serialize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>SerialType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></block>


<specifier>static</specifier> <name>ParamIdx</name> <macro><name>deserialize</name><argument_list>(<argument>SerialType S</argument>)</argument_list></macro> <block>{


<expr><name>void</name> <operator>*</operator><name>ParamIdxPtr</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call></expr>;
<expr><name>ParamIdx</name> <call><name>P</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ParamIdx</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ParamIdxPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name><name>P</name><operator>.</operator><name>IsValid</name></name> <operator>||</operator> <name><name>P</name><operator>.</operator><name>Idx</name></name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"valid Idx must be one-origin"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>P</name></expr>;</return>
}</block>


<name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsValid</name></expr>;</return> }</block>







<name>unsigned</name> <macro><name>getSourceIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"ParamIdx must be valid"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name></expr>;</return>
}</block>







<name>unsigned</name> <macro><name>getASTIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"ParamIdx must be valid"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>+</operator> <name>HasThis</name> <operator>&amp;&amp;</operator>
<literal type="string">"stored index must be base-1 and not specify C++ implicit this"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>HasThis</name></expr>;</return>
}</block>





<name>unsigned</name> <macro><name>getLLVMIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"ParamIdx must be valid"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Idx</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="string">"stored index must be base-1"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ParamIdx</name> <operator>&amp;</operator><name>I</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assertComparable</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>==</operator> <name><name>I</name><operator>.</operator><name>Idx</name></name></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>ParamIdx</name> <operator>&amp;</operator><name>I</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assertComparable</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>!=</operator> <name><name>I</name><operator>.</operator><name>Idx</name></name></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ParamIdx</name> <operator>&amp;</operator><name>I</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assertComparable</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>&lt;</operator> <name><name>I</name><operator>.</operator><name>Idx</name></name></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>ParamIdx</name> <operator>&amp;</operator><name>I</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assertComparable</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>&gt;</operator> <name><name>I</name><operator>.</operator><name>Idx</name></name></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>ParamIdx</name> <operator>&amp;</operator><name>I</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assertComparable</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>&lt;=</operator> <name><name>I</name><operator>.</operator><name>Idx</name></name></expr>;</return>
}</block>
<name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>ParamIdx</name> <operator>&amp;</operator><name>I</name><operator>)</operator> <specifier>const</specifier> <block>{
<expr><call><name>assertComparable</name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Idx</name> <operator>&gt;=</operator> <name><name>I</name><operator>.</operator><name>Idx</name></name></expr>;</return>
}</block>
}</expr>;

<expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParamIdx</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ParamIdx</name><operator>::</operator><name>SerialType</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"ParamIdx does not fit its serialization type"</literal></expr></argument>)</argument_list></call></expr>;


struct <expr><name>ParsedTargetAttr</name> <block>{
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Features</name></expr>;
<expr><name>StringRef</name> <name>Architecture</name></expr>;
<expr><name>StringRef</name> <name>Tune</name></expr>;
<expr><name>StringRef</name> <name>BranchProtection</name></expr>;
<expr><name>bool</name> <name>DuplicateArchitecture</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>DuplicateTune</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>bool</name> <name>operator</name> <operator>==</operator><operator>(</operator><specifier>const</specifier> <name>ParsedTargetAttr</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>DuplicateArchitecture</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>DuplicateArchitecture</name></name> <operator>&amp;&amp;</operator>
<name>DuplicateTune</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>DuplicateTune</name></name> <operator>&amp;&amp;</operator>
<name>Architecture</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Architecture</name></name> <operator>&amp;&amp;</operator>
<name>Tune</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Tune</name></name> <operator>&amp;&amp;</operator>
<name>BranchProtection</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>BranchProtection</name></name> <operator>&amp;&amp;</operator>
<name>Features</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>Features</name></name></expr>;</return>
}</block>
}</expr>;

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Attrs.inc"</cpp:file></cpp:include>

<expr><specifier>inline</specifier> <specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>StreamingDiagnostic</name> <operator>&amp;</operator><name>DB</name>,
<specifier>const</specifier> <name>Attr</name> <operator>*</operator><name>At</name><operator>)</operator> <block>{
<expr><call><name><name>DB</name><operator>.</operator><name>AddTaggedVal</name></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>At</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name><operator>::</operator><name>ak_attr</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>DB</name></expr>;</return>
}</block>
}</expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
