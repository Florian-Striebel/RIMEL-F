<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RecursiveSymbolVisitor.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_RECURSIVE_SYMBOL_VISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_RECURSIVE_SYMBOL_VISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AST.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/RecursiveASTVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Lexer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>RecursiveSymbolVisitor</name>
<range>: <expr><name>public</name> <name><name>RecursiveASTVisitor</name><argument_list type="generic">&lt;<argument><expr><name><name>RecursiveSymbolVisitor</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>BaseType</name> <operator>=</operator> <name><name>RecursiveASTVisitor</name><argument_list type="generic">&lt;<argument><expr><name><name>RecursiveSymbolVisitor</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>RecursiveSymbolVisitor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SM</name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr>, <macro><name>LangOpts</name><argument_list>(<argument>LangOpts</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>visitSymbolOccurrence</name><argument_list>(<argument>const NamedDecl *ND</argument>,
<argument>ArrayRef&lt;SourceRange&gt; NameRanges</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>



<name>bool</name> <macro><name>VisitNamedDecl</name><argument_list>(<argument>const NamedDecl *D</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConversionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>?</operator> <name>true</name> <operator>:</operator> <call><name>visit</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name><name>D</name><operator>-&gt;</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>VisitCXXConstructorDecl</name><argument_list>(<argument>const CXXConstructorDecl *CD</argument>)</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>Initializer</name> <range>: <expr><call><name><name>CD</name><operator>-&gt;</operator><name>inits</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Initializer</name><operator>-&gt;</operator><name>isWritten</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>FD</name> <init>= <expr><call><name><name>Initializer</name><operator>-&gt;</operator><name>getMember</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>visit</name><argument_list>(<argument><expr><name>FD</name></expr></argument>, <argument><expr><call><name><name>Initializer</name><operator>-&gt;</operator><name>getSourceLocation</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>Lexer</name><operator>::</operator><call><name>getLocForEndOfToken</name><argument_list>(<argument><expr><call><name><name>Initializer</name><operator>-&gt;</operator><name>getSourceLocation</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
}
return true</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>



bool VisitDeclRefExpr(const DeclRefExpr *Expr</block></for>) <block>{
<return>return <expr><call><name>visit</name><argument_list>(<argument><expr><call><name><name>Expr</name><operator>-&gt;</operator><name>getFoundDecl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Expr</name><operator>-&gt;</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></block>

<name>bool</name> <macro><name>VisitMemberExpr</name><argument_list>(<argument>const MemberExpr *Expr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>visit</name><argument_list>(<argument><expr><call><name><name>Expr</name><operator>-&gt;</operator><name>getFoundDecl</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Expr</name><operator>-&gt;</operator><name>getMemberLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>VisitOffsetOfExpr</name><argument_list>(<argument>const OffsetOfExpr *S</argument>)</argument_list></macro> <block>{
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>I</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name><name>S</name><operator>-&gt;</operator><name>getNumComponents</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>OffsetOfNode</name> <modifier>&amp;</modifier></type><name>Component</name> <init>= <expr><call><name><name>S</name><operator>-&gt;</operator><name>getComponent</name></name><argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Component</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OffsetOfNode</name><operator>::</operator><name>Field</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>visit</name><argument_list>(<argument><expr><call><name><name>Component</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Component</name><operator>.</operator><name>getEndLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>

}
return true</block><empty_stmt>;</empty_stmt></if></if_stmt>
<expr_stmt/>}</block_content>



bool VisitTypeLoc(const TypeLoc Loc</block></for>) <block>{
<expr><specifier>const</specifier> <name>SourceLocation</name> <name>TypeBeginLoc</name> <operator>=</operator> <call><name><name>Loc</name><operator>.</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>SourceLocation</name> <name>TypeEndLoc</name> <operator>=</operator>
<name>Lexer</name><operator>::</operator><call><name>getLocForEndOfToken</name><argument_list>(<argument><expr><name>TypeBeginLoc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>*</modifier></type><name>TemplateTypeParm</name> <init>=
<expr><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>TemplateTypeParmType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Loc</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>visit</name><argument_list>(<argument><expr><call><name><name>TemplateTypeParm</name><operator>-&gt;</operator><name>getDecl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TypeBeginLoc</name></expr></argument>, <argument><expr><name>TypeEndLoc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
if (const auto *TemplateSpecType =
dyn_cast&lt;TemplateSpecializationType&gt;(Loc.getType(</block></if></if_stmt>))</block>)</block> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>visit</name><argument_list>(<argument><expr><call><name><name>TemplateSpecType</name><operator>-&gt;</operator><name>getTemplateName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsTemplateDecl</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>TypeBeginLoc</name></expr></argument>, <argument><expr><name>TypeEndLoc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
}</block></expr>
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>Type</name> <modifier>*</modifier></type><name>TP</name> <init>= <expr><call><name><name>Loc</name><operator>.</operator><name>getTypePtr</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>TP</name><operator>-&gt;</operator><name>getTypeClass</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>clang</name><operator>::</operator><name>Type</name><operator>::</operator><name>Record</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>visit</name><argument_list>(<argument><expr><call><name><name>TP</name><operator>-&gt;</operator><name>getAsCXXRecordDecl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TypeBeginLoc</name></expr></argument>, <argument><expr><name>TypeEndLoc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/>}</block_content>
return true</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></range></decl></decl_stmt>

<function><type><name>bool</name></type> <name>VisitTypedefTypeLoc</name><parameter_list>(<parameter><decl><type><name>TypedefTypeLoc</name></type> <name>TL</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceLocation</name></type> <name>TypeEndLoc</name> <init>=
<expr><name>Lexer</name><operator>::</operator><call><name>getLocForEndOfToken</name><argument_list>(<argument><expr><call><name><name>TL</name><operator>.</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>visit</name><argument_list>(<argument><expr><call><name><name>TL</name><operator>.</operator><name>getTypedefNameDecl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>TL</name><operator>.</operator><name>getBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TypeEndLoc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>TraverseNestedNameSpecifierLoc</name><parameter_list>(<parameter><decl><type><name>NestedNameSpecifierLoc</name></type> <name>NNS</name></decl></parameter>)</parameter_list> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>NNS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>NamespaceDecl</name> <modifier>*</modifier></type><name>ND</name> <init>= <expr><call><name><name>NNS</name><operator>.</operator><name>getNestedNameSpecifier</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getAsNamespace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>visit</name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><call><name><name>NNS</name><operator>.</operator><name>getLocalBeginLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>NNS</name><operator>.</operator><name>getLocalEndLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>BaseType</name><operator>::</operator><call><name>TraverseNestedNameSpecifierLoc</name><argument_list>(<argument><expr><name>NNS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>VisitDesignatedInitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DesignatedInitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>)</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><specifier>const</specifier> <name>DesignatedInitExpr</name><operator>::</operator><name>Designator</name> <operator>&amp;</operator><name>D</name> <operator>:</operator> <call><name><name>E</name><operator>-&gt;</operator><name>designators</name></name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>D</name><operator>.</operator><name>isFieldDesignator</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>D</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>FieldDecl</name> <modifier>*</modifier></type><name>Decl</name> <init>= <expr><call><name><name>D</name><operator>.</operator><name>getField</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>visit</name><argument_list>(<argument><expr><name>Decl</name></expr></argument>, <argument><expr><call><name><name>D</name><operator>.</operator><name>getFieldLoc</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>D</name><operator>.</operator><name>getFieldLoc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>BeginLoc</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>EndLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>visitSymbolOccurrence</name><argument_list>(
<argument><expr><name>ND</name></expr></argument>, <argument><expr><call><name>SourceRange</name><argument_list>(<argument><expr><name>BeginLoc</name></expr></argument>, <argument><expr><name>EndLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>, <parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>visit</name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>Lexer</name><operator>::</operator><call><name>getLocForEndOfToken</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SM</name></expr></argument>, <argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
