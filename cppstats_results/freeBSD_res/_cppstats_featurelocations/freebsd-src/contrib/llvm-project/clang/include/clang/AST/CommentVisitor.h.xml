<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/CommentVisitor.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMMENTVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMMENTVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Comment.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>comments</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <name>class</name> <name>Ptr</name></expr></argument>, <argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>,
<argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>CommentVisitorBase</name> <block>{<block_content>
<label><name>public</name>:</label>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>typename Ptr&lt;CLASS&gt;::type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CLASS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return static_cast&lt;ImplClass *&gt;(this)-&gt;visit##NAME( static_cast&lt;PTR(CLASS)&gt;(C), std::forward&lt;ParamTys&gt;(P)...)</cpp:value></cpp:define>



<decl_stmt><decl><type><name>RetTy</name></type> <name>visit</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>Comment</argument>)</argument_list></macro> <name>C</name></expr></argument>, <argument><expr><name>ParamTys</name><operator>...</operator> <name>P</name></expr></argument>)</argument_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>C</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name><name>C</name><operator>-&gt;</operator><name>getCommentKind</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<default>default:</default> <expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unknown comment kind!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_COMMENT</name><parameter_list>(<parameter><type><name>COMMENT</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case Comment::CLASS##Kind: DISPATCH(CLASS, CLASS);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentNodes.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ABSTRACT_COMMENT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMMENT</name></cpp:undef>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_COMMENT</name><parameter_list>(<parameter><type><name>COMMENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COMMENT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy visit##CLASS(PTR(CLASS) C, ParamTys... P) { DISPATCH(PARENT, PARENT); }</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CommentNodes.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ABSTRACT_COMMENT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COMMENT</name></cpp:undef>

<decl_stmt><decl><type><name>RetTy</name></type> <name>visitComment</name><argument_list>(<argument><expr><macro><name>PTR</name><argument_list>(<argument>Comment</argument>)</argument_list></macro> <name>C</name></expr></argument>, <argument><expr><name>ParamTys</name><operator>...</operator> <name>P</name></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>CommentVisitor</name> <range>: <expr><name>public</name> <name><name>CommentVisitorBase</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>add_pointer</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>,
<argument><expr><name>RetTy</name></expr></argument>, <argument><expr><name>ParamTys</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name> <operator>=</operator> <name>void</name></expr></argument>, <argument><expr><name>class</name><modifier>...</modifier> <name>ParamTys</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ConstCommentVisitor</name>
<range>: <expr><name>public</name> <name><name>CommentVisitorBase</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>make_const_ptr</name></expr></argument>, <argument><expr><name>ImplClass</name></expr></argument>, <argument><expr><name>RetTy</name></expr></argument>,
<argument><expr><name>ParamTys</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
