<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/MultiplexConsumer.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_MULTIPLEXCONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_MULTIPLEXCONSUMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/SemaConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ASTDeserializationListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MultiplexASTMutationListener</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>MultiplexASTDeserializationListener</name> <range>: <expr><name>public</name> <name>ASTDeserializationListener</name> <block>{
<expr><name>public</name><operator>:</operator>

<call><name>MultiplexASTDeserializationListener</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ASTDeserializationListener</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>L</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <macro><name>ReaderInitialized</name><argument_list>(<argument>ASTReader *Reader</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>IdentifierRead</name><argument_list>(<argument>serialization::IdentID ID</argument>, <argument>IdentifierInfo *II</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>MacroRead</name><argument_list>(<argument>serialization::MacroID ID</argument>, <argument>MacroInfo *MI</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>TypeRead</name><argument_list>(<argument>serialization::TypeIdx Idx</argument>, <argument>QualType T</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>DeclRead</name><argument_list>(<argument>serialization::DeclID ID</argument>, <argument>const Decl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>SelectorRead</name><argument_list>(<argument>serialization::SelectorID iD</argument>, <argument>Selector Sel</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>MacroDefinitionRead</name><argument_list>(<argument>serialization::PreprocessedEntityID</argument>,
<argument>MacroDefinitionRecord *MD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>ModuleRead</name><argument_list>(<argument>serialization::SubmoduleID ID</argument>, <argument>Module *Mod</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ASTDeserializationListener</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Listeners</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>MultiplexConsumer</name> <range>: <expr><name>public</name> <name>SemaConsumer</name> <block>{
<expr><name>public</name><operator>:</operator>

<call><name>MultiplexConsumer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>C</name></expr></argument>)</argument_list></call></expr>;
<expr><operator>~</operator><macro><name>MultiplexConsumer</name><argument_list>()</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>Initialize</name><argument_list>(<argument>ASTContext &amp;Context</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleCXXStaticMemberVarInstantiation</name><argument_list>(<argument>VarDecl *VD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>HandleTopLevelDecl</name><argument_list>(<argument>DeclGroupRef D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleInlineFunctionDefinition</name><argument_list>(<argument>FunctionDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleInterestingDecl</name><argument_list>(<argument>DeclGroupRef D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleTranslationUnit</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleTagDeclDefinition</name><argument_list>(<argument>TagDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleTagDeclRequiredDefinition</name><argument_list>(<argument>const TagDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleCXXImplicitFunctionInstantiation</name><argument_list>(<argument>FunctionDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleTopLevelDeclInObjCContainer</name><argument_list>(<argument>DeclGroupRef D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleImplicitImportDecl</name><argument_list>(<argument>ImportDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>CompleteTentativeDefinition</name><argument_list>(<argument>VarDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>CompleteExternalDeclaration</name><argument_list>(<argument>VarDecl *D</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>AssignInheritanceModel</name><argument_list>(<argument>CXXRecordDecl *RD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>HandleVTable</name><argument_list>(<argument>CXXRecordDecl *RD</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>ASTMutationListener</name> <operator>*</operator><macro><name>GetASTMutationListener</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>ASTDeserializationListener</name> <operator>*</operator><macro><name>GetASTDeserializationListener</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>PrintStats</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>bool</name> <macro><name>shouldSkipFunctionBody</name><argument_list>(<argument>Decl *D</argument>)</argument_list></macro> <name>override</name></expr>;


<expr><name>void</name> <macro><name>InitializeSema</name><argument_list>(<argument>Sema &amp;S</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>ForgetSema</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>Consumers</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MultiplexASTMutationListener</name></expr></argument>&gt;</argument_list></name> <name>MutationListener</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MultiplexASTDeserializationListener</name></expr></argument>&gt;</argument_list></name> <name>DeserializationListener</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
