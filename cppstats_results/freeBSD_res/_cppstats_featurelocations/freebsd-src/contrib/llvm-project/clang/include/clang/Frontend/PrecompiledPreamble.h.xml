<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/PrecompiledPreamble.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_PRECOMPILED_PREAMBLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_PRECOMPILED_PREAMBLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Lexer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/AlignOf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MD5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;system_error&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemoryBufferRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>vfs</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FileSystem</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInvocation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclGroupRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PCHContainerOperations</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PreambleBounds</name></type> <name>ComputePreambleBounds</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <operator>&amp;</operator><name>Buffer</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>MaxLines</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PreambleCallbacks</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>PrecompiledPreamble</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>PCHStorage</name></decl>;</decl_stmt>
<struct_decl>struct <name>PreambleFileHash</name>;</struct_decl>

<label><name>public</name>:</label>
























<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>PrecompiledPreamble</name></expr></argument>&gt;</argument_list></name>
<macro><name>Build</name><argument_list>(<argument>const CompilerInvocation &amp;Invocation</argument>,
<argument>const llvm::MemoryBuffer *MainFileBuffer</argument>, <argument>PreambleBounds Bounds</argument>,
<argument>DiagnosticsEngine &amp;Diagnostics</argument>,
<argument>IntrusiveRefCntPtr&lt;llvm::vfs::FileSystem&gt; VFS</argument>,
<argument>std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps</argument>,
<argument>bool StoreInMemory</argument>, <argument>PreambleCallbacks &amp;Callbacks</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PrecompiledPreamble</name><argument_list>(<argument><expr><name>PrecompiledPreamble</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>PrecompiledPreamble</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>PrecompiledPreamble</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>PreambleBounds</name> <macro><name>getBounds</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>size_t</name> <macro><name>getSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><call><name><name>PreambleBytes</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>, <macro><name>PreambleBytes</name></macro><expr><operator>.</operator><macro><name>size</name><argument_list>()</argument_list></macro></expr>}</block></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>CanReuse</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerInvocation</name> <operator>&amp;</operator><name>Invocation</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <operator>&amp;</operator><name>MainFileBuffer</name></expr></argument>,
<argument><expr><name>PreambleBounds</name> <name>Bounds</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name> <operator>&amp;</operator><name>VFS</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>









<decl_stmt><decl><type><name>void</name></type> <name>AddImplicitPreamble</name><argument_list>(<argument><expr><name>CompilerInvocation</name> <operator>&amp;</operator><name>CI</name></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>VFS</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>*</operator><name>MainFileBuffer</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<decl_stmt><decl><type><name>void</name></type> <name>OverridePreamble</name><argument_list>(<argument><expr><name>CompilerInvocation</name> <operator>&amp;</operator><name>CI</name></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>VFS</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>*</operator><name>MainFileBuffer</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<macro><name>PrecompiledPreamble</name><argument_list>(<argument>PCHStorage Storage</argument>, <argument>std::vector&lt;char&gt; PreambleBytes</argument>,
<argument>bool PreambleEndsAtStartOfLine</argument>,
<argument>llvm::StringMap&lt;PreambleFileHash&gt; FilesInPreamble</argument>,
<argument>llvm::StringSet&lt;&gt; MissingFiles</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>TempPCHFile</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><specifier>static</specifier> <name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>TempPCHFile</name></expr></argument>&gt;</argument_list></name> <call><name>CreateNewPreamblePCHFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<macro><name>TempPCHFile</name><argument_list>(<argument>std::string FilePath</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TempPCHFile</name><argument_list>(<argument><expr><name>TempPCHFile</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>TempPCHFile</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>TempPCHFile</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TempPCHFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TempPCHFile</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>~</operator><call><name>TempPCHFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <macro><name>getFilePath</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>RemoveFileIfPresent</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>FilePath</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InMemoryPreamble</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Data</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PCHStorage</name> <block>{<block_content>
<label><name>public</name>:</label>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>Kind</name> <block>{<block_content> <expr_stmt><expr><name>Empty</name></expr><operator>,</operator> <expr><name>InMemory</name></expr><operator>,</operator> <expr><name>TempFile</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>PCHStorage</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>PCHStorage</name><argument_list>(<argument>TempPCHFile File</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PCHStorage</name><argument_list>(<argument>InMemoryPreamble Memory</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>PCHStorage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PCHStorage</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PCHStorage</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>PCHStorage</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PCHStorage</name><argument_list>(<argument><expr><name>PCHStorage</name> <operator>&amp;&amp;</operator><name>Other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PCHStorage</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>PCHStorage</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>~</operator><call><name>PCHStorage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>TempPCHFile</name> <modifier>&amp;</modifier></type><name>asFile</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>TempPCHFile</name> <operator>&amp;</operator><macro><name>asFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>InMemoryPreamble</name> <modifier>&amp;</modifier></type><name>asMemory</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>InMemoryPreamble</name> <operator>&amp;</operator><macro><name>asMemory</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>setEmpty</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Kind</name></type> <name>StorageKind</name> <init>= <expr><name>Kind</name><operator>::</operator><name>Empty</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>AlignedCharArrayUnion</name><argument_list type="generic">&lt;<argument><expr><name>TempPCHFile</name></expr></argument>, <argument><expr><name>InMemoryPreamble</name></expr></argument>&gt;</argument_list></name> <name>Storage</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<struct>struct <name>PreambleFileHash</name> <block>{

<decl_stmt><decl><type><name>off_t</name></type> <name>Size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>time_t</name></type> <name>ModTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MD5</name><operator>::</operator><name>MD5Result</name> <name>MD5</name> <operator>=</operator> <block>{}</block></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>PreambleFileHash</name></type> <name>createForFile</name><parameter_list>(<parameter><decl><type><name>off_t</name></type> <name>Size</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>ModTime</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>PreambleFileHash</name></type>
<name>createForMemoryBuffer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <operator>&amp;</operator><name>Buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>PreambleFileHash</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>PreambleFileHash</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Size</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Size</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>ModTime</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>ModTime</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>MD5</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>MD5</name></name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>PreambleFileHash</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>PreambleFileHash</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>



<decl_stmt><decl><type><name>void</name></type> <name>configurePreamble</name><argument_list>(<argument><expr><name>PreambleBounds</name> <name>Bounds</name></expr></argument>, <argument><expr><name>CompilerInvocation</name> <operator>&amp;</operator><name>CI</name></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>VFS</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name> <operator>*</operator><name>MainFileBuffer</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>setupPreambleStorage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PCHStorage</name> <modifier>&amp;</modifier></type><name>Storage</name></decl></parameter>,
<parameter><decl><type><name>PreprocessorOptions</name> <modifier>&amp;</modifier></type><name>PreprocessorOpts</name></decl></parameter>,
<parameter><decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>VFS</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>PCHStorage</name></type> <name>Storage</name></decl>;</decl_stmt>





<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>PreambleFileHash</name></expr></argument>&gt;</argument_list></name> <name>FilesInPreamble</name></expr>;</expr_stmt>








<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>MissingFiles</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <name>PreambleBytes</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>PreambleEndsAtStartOfLine</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>PreambleCallbacks</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PreambleCallbacks</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>BeforeExecute</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>AfterExecute</name><parameter_list>(<parameter><decl><type><name>CompilerInstance</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>virtual</name> <name>void</name></type> <name>AfterPCHEmitted</name><parameter_list>(<parameter><decl><type><name>ASTWriter</name> <modifier>&amp;</modifier></type><name>Writer</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>virtual</name> <name>void</name></type> <name>HandleTopLevelDecl</name><parameter_list>(<parameter><decl><type><name>DeclGroupRef</name></type> <name>DG</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PPCallbacks</name></expr></argument>&gt;</argument_list></name> <call><name>createPPCallbacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>CommentHandler</name> <modifier>*</modifier></type><name>getCommentHandler</name><parameter_list>()</parameter_list>;</function_decl>



<function><type><name>virtual</name> <name>bool</name></type> <name>shouldSkipFunctionBody</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>BuildPreambleError</name> <block>{<block_content>
<expr_stmt><expr><name>CouldntCreateTempFile</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>CouldntCreateTargetInfo</name></expr><operator>,</operator>
<expr><name>BeginSourceFileFailed</name></expr><operator>,</operator>
<expr><name>CouldntEmitPCH</name></expr><operator>,</operator>
<expr><name>BadInputs</name></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name> <name>BuildPreambleErrorCategory</name></type> <name>final</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>error_category</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>name</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name>string</name> <macro><name>message</name><argument_list>(<argument>int condition</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>error_code</name> <macro><name>make_error_code</name><argument_list>(<argument>BuildPreambleError Error</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>std</name> <block>{<block_content>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct</type> <name><name>is_error_code_enum</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>BuildPreambleError</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>std</name><operator>::</operator><name>true_type</name> <block>{}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
