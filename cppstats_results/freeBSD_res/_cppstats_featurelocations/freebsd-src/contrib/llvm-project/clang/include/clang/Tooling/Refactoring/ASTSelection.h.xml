<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/ASTSelection.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_AST_SELECTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_AST_SELECTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Stmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SourceSelectionKind</name> <block>{<block_content>

<expr_stmt><expr><name>None</name></expr><operator>,</operator>



<expr><name>ContainsSelection</name></expr><operator>,</operator>


<expr><name>ContainsSelectionStart</name></expr><operator>,</operator>


<expr><name>ContainsSelectionEnd</name></expr><operator>,</operator>



<expr><name>InsideSelection</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<struct>struct <name>SelectedASTNode</name> <block>{
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>Node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceSelectionKind</name></type> <name>SelectionKind</name></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SelectedASTNode</name></expr></argument>&gt;</argument_list></name> <name>Children</name></expr>;</expr_stmt>

<macro><name>SelectedASTNode</name><argument_list>(<argument>const DynTypedNode &amp;Node</argument>, <argument>SourceSelectionKind SelectionKind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Node</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>SelectionKind</name><argument_list>(<argument>SelectionKind</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>SelectedASTNode</name><argument_list>(<argument><expr><name>SelectedASTNode</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>SelectedASTNode</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>SelectedASTNode</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name> <operator>=</operator> <name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>ReferenceType</name> <init>= <expr><name>std</name><operator>::</operator><name><name>reference_wrapper</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>SelectedASTNode</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
}</block>;</struct>





<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SelectedASTNode</name></expr></argument>&gt;</argument_list></name></type> <name>findSelectedASTNodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>,
<parameter><decl><type><name>SourceRange</name></type> <name>SelectionRange</name></decl></parameter>)</parameter_list>;</function_decl>























<decl_stmt><decl><type><name>class</name></type> <name>CodeRangeASTSelection</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CodeRangeASTSelection</name><argument_list>(<argument><expr><name>CodeRangeASTSelection</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>CodeRangeASTSelection</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>CodeRangeASTSelection</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>


<function><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SelectedASTNode</name><operator>::</operator><name>ReferenceType</name></expr></argument>&gt;</argument_list></name></type> <name>getParents</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Parents</name></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>AreChildrenSelected</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><call><name><name>SelectedNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>Children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_t</name> <name>I</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>AreChildrenSelected</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"Invalid index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>SelectedNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>Node</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>Stmt</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>SelectedNode</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>Children</name><index>[<expr><name>I</name></expr>]</index></name><operator>.</operator><name><name>Node</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>Stmt</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>










<expr_stmt><expr><name>bool</name> <macro><name>isInFunctionLikeBodyOfCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getFunctionLikeNearestParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CodeRangeASTSelection</name></expr></argument>&gt;</argument_list></name></type>
<name>create</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>SelectionRange</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SelectedASTNode</name> <modifier>&amp;</modifier></type><name>ASTSelection</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<macro><name>CodeRangeASTSelection</name><argument_list>(<argument>SelectedASTNode::ReferenceType SelectedNode</argument>,
<argument>ArrayRef&lt;SelectedASTNode::ReferenceType&gt; Parents</argument>,
<argument>bool AreChildrenSelected</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>SelectedNode</name><argument_list>(<argument><expr><name>SelectedNode</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Parents</name><argument_list>(<argument><expr><call><name><name>Parents</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Parents</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>AreChildrenSelected</name><argument_list>(<argument>AreChildrenSelected</argument>)</argument_list></macro> <expr><block>{}</block>



<name>SelectedASTNode</name><operator>::</operator><name>ReferenceType</name> <name>SelectedNode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SelectedASTNode</name><operator>::</operator><name>ReferenceType</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name> <name>Parents</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AreChildrenSelected</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
