<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/ArgumentsAdjusters.h">














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_ARGUMENTSADJUSTERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_ARGUMENTSADJUSTERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<decl_stmt><decl><type><name>using</name></type> <name>CommandLineArguments</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>using</name></type> <name>ArgumentsAdjuster</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>CommandLineArguments</name><operator>(</operator>
<specifier>const</specifier> <name>CommandLineArguments</name> <operator>&amp;</operator>, <name>StringRef</name> <name>Filename</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>



<function_decl><type><name>ArgumentsAdjuster</name></type> <name>getClangSyntaxOnlyAdjuster</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>ArgumentsAdjuster</name></type> <name>getClangStripOutputAdjuster</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>ArgumentsAdjuster</name></type> <name>getClangStripDependencyFileAdjuster</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ArgumentInsertPosition</name> <block>{<block_content> <expr_stmt><expr><name>BEGIN</name></expr><operator>,</operator> <expr><name>END</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<function_decl><type><name>ArgumentsAdjuster</name></type> <name>getInsertArgumentAdjuster</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandLineArguments</name> <modifier>&amp;</modifier></type><name>Extra</name></decl></parameter>,
<parameter><decl><type><name>ArgumentInsertPosition</name></type> <name>Pos</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ArgumentsAdjuster</name></type> <name>getInsertArgumentAdjuster</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Extra</name></decl></parameter>,
<parameter><decl><type><name>ArgumentInsertPosition</name></type> <name>Pos</name> <init>= <expr><name>ArgumentInsertPosition</name><operator>::</operator><name>END</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ArgumentsAdjuster</name></type> <name>getStripPluginsAdjuster</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>ArgumentsAdjuster</name></type> <name>combineAdjusters</name><parameter_list>(<parameter><decl><type><name>ArgumentsAdjuster</name></type> <name>First</name></decl></parameter>,
<parameter><decl><type><name>ArgumentsAdjuster</name></type> <name>Second</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
