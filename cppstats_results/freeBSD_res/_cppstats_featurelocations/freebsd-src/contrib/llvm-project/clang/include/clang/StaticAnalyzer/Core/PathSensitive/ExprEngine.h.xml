<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_EXPRENGINE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_EXPRENGINE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/CFG.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/DomainSpecific/ObjCNoReturn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/ProgramPoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/CheckerManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/CoreEngine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/FunctionSummary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/Store.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SValBuilder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/WorkList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisDeclContextManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AnalyzerOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFGBlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFGElement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstructionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXBindTemporaryExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXCatchStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXConstructExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXDeleteExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXNewExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXThisExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>GCCAsmStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LambdaExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LocationContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MaterializeTemporaryExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MSAsmStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamedDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCAtSynchronizedStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCForCollectionStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCIvarRefExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCMessageExpr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ReturnStmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>cross_tu</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CrossTranslationUnitContext</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BasicValueFactory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlockCounter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BranchNodeBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CallEvent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CheckerManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConstraintManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXTempObjectRegion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>EndOfFunctionNodeBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExplodedNodeSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ExplodedNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IndirectGotoNodeBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MemRegion</name></decl>;</decl_stmt>
<struct_decl>struct <name>NodeBuilderContext</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>NodeBuilderWithSinks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProgramState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProgramStateManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RegionAndSymbolInvalidationTraits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SwitchNodeBuilder</name></decl>;</decl_stmt>


<struct>struct <name>EvalCallOptions</name> <block>{


<decl_stmt><decl><type><name>bool</name></type> <name>IsCtorOrDtorWithImproperlyModeledTargetRegion</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsArrayCtorOrDtor</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsTemporaryCtorOrDtor</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>IsTemporaryLifetimeExtendedViaAggregate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>IsElidableCtorThatHasNotBeenElided</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<macro><name>EvalCallOptions</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>ExprEngine</name> <block>{<block_content>
<function_decl><type><name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>

<enum>enum <name>InliningModes</name> <block>{

<decl><name>Inline_Regular</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>Inline_Minimal</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>
}</block>;</enum>

<label><name>private</name>:</label>
<expr_stmt><expr><name>cross_tu</name><operator>::</operator><name>CrossTranslationUnitContext</name> <operator>&amp;</operator><name>CTU</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AnalysisManager</name> <modifier>&amp;</modifier></type><name>AMgr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AnalysisDeclContextManager</name> <modifier>&amp;</modifier></type><name>AnalysisDeclContexts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CoreEngine</name></type> <name>Engine</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ExplodedGraph</name> <modifier>&amp;</modifier></type><name>G</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ProgramStateManager</name></type> <name>StateMgr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SymbolManager</name> <modifier>&amp;</modifier></type><name>SymMgr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>MemRegionManager</name> <modifier>&amp;</modifier></type><name>MRMgr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SValBuilder</name> <modifier>&amp;</modifier></type><name>svalBuilder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>currStmtIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>NodeBuilderContext</name> <modifier>*</modifier></type><name>currBldrCtx</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ObjCNoReturn</name></type> <name>ObjCNoRet</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>PathSensitiveBugReporter</name></type> <name>BR</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>SetOfConstDecls</name> <modifier>*</modifier></type><name>VisitedCallees</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>InliningModes</name></type> <name>HowToInline</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ExprEngine</name><argument_list>(<argument>cross_tu::CrossTranslationUnitContext &amp;CTU</argument>, <argument>AnalysisManager &amp;mgr</argument>,
<argument>SetOfConstDecls *VisitedCalleesIn</argument>,
<argument>FunctionSummariesTy *FS</argument>, <argument>InliningModes HowToInlineIn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ExprEngine</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>


<function><type><name>bool</name></type> <name>ExecuteWorkList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Steps</name> <init>= <expr><literal type="number">150000</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Engine</name><operator>.</operator><name>ExecuteWorkList</name></name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>Steps</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>bool</name></type> <name>ExecuteWorkListWithInitialState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Steps</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>InitState</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>Engine</name><operator>.</operator><name>ExecuteWorkListWithInitialState</name></name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>Steps</name></expr></argument>, <argument><expr><name>InitState</name></expr></argument>, <argument><expr><name>Dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>AMgr</name><operator>.</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>AnalysisManager</name> <modifier>&amp;</modifier></type><name>getAnalysisManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>AMgr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>AnalysisDeclContextManager</name> <modifier>&amp;</modifier></type><name>getAnalysisDeclContextManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>AMgr</name><operator>.</operator><name>getAnalysisDeclContextManager</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>CheckerManager</name> <operator>&amp;</operator><macro><name>getCheckerManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><call><name><name>AMgr</name><operator>.</operator><name>getCheckerManager</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>SValBuilder</name> <modifier>&amp;</modifier></type><name>getSValBuilder</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>svalBuilder</name></expr>;</return> </block_content>}</block></function>

<function><type><name>BugReporter</name> <modifier>&amp;</modifier></type><name>getBugReporter</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>BR</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>cross_tu</name><operator>::</operator><name>CrossTranslationUnitContext</name> <operator>*</operator>
<macro><name>getCrossTranslationUnitContext</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><operator>&amp;</operator><name>CTU</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>const</specifier> <name>NodeBuilderContext</name> <modifier>&amp;</modifier></type><name>getBuilderContext</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>currBldrCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>currBldrCtx</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>GenerateAutoTransition</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>enqueueEndOfPath</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>GenerateCallExitNode</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>N</name></decl></parameter>)</parameter_list>;</function_decl>





<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>DumpGraph</name><argument_list>(<argument>bool trim = false</argument>, <argument>StringRef Filename=<literal type="string">""</literal></argument>)</argument_list></macro></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>DumpGraph</name><argument_list>(<argument>ArrayRef&lt;const ExplodedNode *&gt; Nodes</argument>,
<argument>StringRef Filename = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>ViewGraph</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>trim</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>ViewGraph</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Nodes</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ProgramStateRef</name></type> <name>getInitialState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>InitLoc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>ExplodedGraph</name> <modifier>&amp;</modifier></type><name>getGraph</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>G</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>ExplodedGraph</name> <operator>&amp;</operator><macro><name>getGraph</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>G</name></expr>;</return> }</block></expr></expr_stmt>


























<decl_stmt><decl><type><name>void</name></type> <name>removeDead</name><argument_list>(<argument><expr><name>ExplodedNode</name> <operator>*</operator><name>Node</name></expr></argument>, <argument><expr><name>ExplodedNodeSet</name> <operator>&amp;</operator><name>Out</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>ReferenceStmt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><name>LC</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>DiagnosticStmt</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>ProgramPoint</name><operator>::</operator><name>Kind</name> <name>K</name> <operator>=</operator> <name>ProgramPoint</name><operator>::</operator><name>PreStmtPurgeDeadSymbolsKind</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<function_decl><type><name>void</name></type> <name>processCFGElement</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGElement</name></type> <name>E</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name></type> <name>StmtIdx</name></decl></parameter>, <parameter><decl><type><name>NodeBuilderContext</name> <modifier>*</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ProcessStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ProcessLoopExit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ProcessInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGInitializer</name></type> <name>I</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ProcessImplicitDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGImplicitDtor</name></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ProcessNewAllocator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXNewExpr</name> <modifier>*</modifier></type><name>NE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ProcessAutomaticObjDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGAutomaticObjDtor</name></type> <name>D</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcessDeleteDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGDeleteDtor</name></type> <name>D</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcessBaseDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGBaseDtor</name></type> <name>D</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcessMemberDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGMemberDtor</name></type> <name>D</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ProcessTemporaryDtor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CFGTemporaryDtor</name></type> <name>D</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>processCFGBlockEntrance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockEdge</name> <modifier>&amp;</modifier></type><name>L</name></decl></parameter>,
<parameter><decl><type><name>NodeBuilderWithSinks</name> <modifier>&amp;</modifier></type><name>nodeBuilder</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>processBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>Condition</name></decl></parameter>,
<parameter><decl><type><name>NodeBuilderContext</name><modifier>&amp;</modifier></type> <name>BuilderCtx</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>DstT</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>DstF</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>processCleanupTemporaryBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><name>NodeBuilderContext</name> <modifier>&amp;</modifier></type><name>BldCtx</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>DstT</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>DstF</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>processStaticInitializer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclStmt</name> <modifier>*</modifier></type><name>DS</name></decl></parameter>,
<parameter><decl><type><name>NodeBuilderContext</name><modifier>&amp;</modifier></type> <name>BuilderCtx</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>DstT</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CFGBlock</name> <modifier>*</modifier></type><name>DstF</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>processIndirectGoto</name><parameter_list>(<parameter><decl><type><name>IndirectGotoNodeBuilder</name><modifier>&amp;</modifier></type> <name>builder</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>processSwitch</name><parameter_list>(<parameter><decl><type><name>SwitchNodeBuilder</name><modifier>&amp;</modifier></type> <name>builder</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>processBeginOfFunction</name><parameter_list>(<parameter><decl><type><name>NodeBuilderContext</name> <modifier>&amp;</modifier></type><name>BC</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>BlockEdge</name> <modifier>&amp;</modifier></type><name>L</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>processEndOfFunction</name><parameter_list>(<parameter><decl><type><name>NodeBuilderContext</name><modifier>&amp;</modifier></type> <name>BC</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ReturnStmt</name> <modifier>*</modifier></type><name>RS</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>removeDeadOnEndOfFunction</name><parameter_list>(<parameter><decl><type><name>NodeBuilderContext</name><modifier>&amp;</modifier></type> <name>BC</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>processCallEnter</name><parameter_list>(<parameter><decl><type><name>NodeBuilderContext</name><modifier>&amp;</modifier></type> <name>BC</name></decl></parameter>, <parameter><decl><type><name>CallEnter</name></type> <name>CE</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>processCallExit</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>processEndWorklist</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>ProgramStateRef</name></type> <name>processAssume</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>cond</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>assumption</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>ProgramStateRef</name></type>
<name>processRegionChanges</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>InvalidatedSymbols</name> <modifier>*</modifier></type><name>invalidated</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>ExplicitRegions</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Regions</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>inline</specifier> <name>ProgramStateRef</name></type>
<name>processRegionChange</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name><modifier>*</modifier></type> <name>MR</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>processRegionChanges</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MR</name></expr></argument>, <argument><expr><name>MR</name></expr></argument>, <argument><expr><name>LCtx</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>printJson</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>Out</name></expr></argument>, <argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><name>LCtx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>NL</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>int</name> <name>Space</name></expr></argument>, <argument><expr><name>bool</name> <name>IsDot</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><name>ProgramStateManager</name> <modifier>&amp;</modifier></type><name>getStateManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>StateMgr</name></expr>;</return> </block_content>}</block></function>

<function><type><name>StoreManager</name> <modifier>&amp;</modifier></type><name>getStoreManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>StateMgr</name><operator>.</operator><name>getStoreManager</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>ConstraintManager</name> <modifier>&amp;</modifier></type><name>getConstraintManager</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>StateMgr</name><operator>.</operator><name>getConstraintManager</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>BasicValueFactory</name> <modifier>&amp;</modifier></type><name>getBasicVals</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name><name>StateMgr</name><operator>.</operator><name>getBasicVals</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SymbolManager</name> <modifier>&amp;</modifier></type><name>getSymbolManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>SymMgr</name></expr>;</return> </block_content>}</block></function>
<function><type><name>MemRegionManager</name> <modifier>&amp;</modifier></type><name>getRegionManager</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>MRMgr</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><name>DataTag</name><operator>::</operator><name>Factory</name> <operator>&amp;</operator><macro><name>getDataTags</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>Engine</name><operator>.</operator><name>getDataTags</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>wasBlocksExhausted</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Engine</name><operator>.</operator><name>wasBlocksExhausted</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasEmptyWorkList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name><name>Engine</name><operator>.</operator><name>getWorkList</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hasWork</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>hasWorkRemaining</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Engine</name><operator>.</operator><name>hasWorkRemaining</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>CoreEngine</name> <operator>&amp;</operator><macro><name>getCoreEngine</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Engine</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>public</name>:</label>


<function_decl><type><name>void</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitArraySubscriptExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArraySubscriptExpr</name> <modifier>*</modifier></type><name>Ex</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitGCCAsmStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GCCAsmStmt</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitMSAsmStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MSAsmStmt</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitBlockExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockExpr</name> <modifier>*</modifier></type><name>BE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitLambdaExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LambdaExpr</name> <modifier>*</modifier></type><name>LE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitBinaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BinaryOperator</name><modifier>*</modifier></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>VisitCallExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallExpr</name> <modifier>*</modifier></type><name>CE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitCast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CastExpr</name> <modifier>*</modifier></type><name>CastE</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Ex</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitCompoundLiteralExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompoundLiteralExpr</name> <modifier>*</modifier></type><name>CL</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitCommonDeclRefExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>DR</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitDeclStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclStmt</name> <modifier>*</modifier></type><name>DS</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitGuardedExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Ex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitInitListExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InitListExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitLogicalExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BinaryOperator</name><modifier>*</modifier></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitMemberExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemberExpr</name> <modifier>*</modifier></type><name>M</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitAtomicExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AtomicExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitObjCAtSynchronizedStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCAtSynchronizedStmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitLvalObjCIvarRefExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCIvarRefExpr</name> <modifier>*</modifier></type><name>DR</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>VisitObjCForCollectionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCForCollectionStmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitObjCMessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjCMessageExpr</name> <modifier>*</modifier></type><name>ME</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitReturnStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReturnStmt</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitOffsetOfExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OffsetOfExpr</name> <modifier>*</modifier></type><name>Ex</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitUnaryExprOrTypeTraitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnaryExprOrTypeTraitExpr</name> <modifier>*</modifier></type><name>Ex</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitUnaryOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnaryOperator</name><modifier>*</modifier></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>VisitIncrementDecrementOperator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnaryOperator</name><modifier>*</modifier></type> <name>U</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXBindTemporaryExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>PreVisit</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXCatchStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXCatchStmt</name> <modifier>*</modifier></type><name>CS</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXThisExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXThisExpr</name> <modifier>*</modifier></type><name>TE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type> <name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXConstructExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXConstructExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXInheritedCtorInitExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXInheritedCtorInitExpr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXDestructor</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>ObjectType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>Dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>IsBaseDtor</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><name>EvalCallOptions</name> <modifier>&amp;</modifier></type><name>Options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXNewAllocatorCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXNewExpr</name> <modifier>*</modifier></type><name>CNE</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXNewExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXNewExpr</name> <modifier>*</modifier></type><name>CNE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>VisitCXXDeleteExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CXXDeleteExpr</name> <modifier>*</modifier></type><name>CDE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>CreateCXXTemporaryObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MaterializeTemporaryExpr</name> <modifier>*</modifier></type><name>ME</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>evalEagerlyAssumeBinOpBifurcation</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>, <parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Src</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Ex</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ProgramPointTag</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>ProgramPointTag</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<call><name>geteagerlyAssumeBinOpBifurcationTags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>SVal</name></type> <name>evalMinus</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name><name>X</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>svalBuilder</name><operator>.</operator><name>evalMinus</name></name><argument_list>(<argument><expr><name><name>X</name><operator>.</operator><name>castAs</name></name><operator>&lt;</operator><name>NonLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>X</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>SVal</name></type> <name>evalComplement</name><parameter_list>(<parameter><decl><type><name>SVal</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name><name>X</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>svalBuilder</name><operator>.</operator><name>evalComplement</name></name><argument_list>(<argument><expr><name><name>X</name><operator>.</operator><name>castAs</name></name><operator>&lt;</operator><name>NonLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>X</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>ProgramStateRef</name></type> <name>handleLValueBitCast</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Ex</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>, <parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>ExTy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CastExpr</name> <modifier>*</modifier></type><name>CastE</name></decl></parameter>,
<parameter><decl><type><name>StmtNodeBuilder</name> <modifier>&amp;</modifier></type><name>Bldr</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ProgramStateRef</name></type> <name>handleLVectorSplat</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CastExpr</name> <modifier>*</modifier></type><name>CastE</name></decl></parameter>,
<parameter><decl><type><name>StmtNodeBuilder</name> <modifier>&amp;</modifier></type><name>Bldr</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>handleUOExtension</name><argument_list>(<argument><expr><name>ExplodedNodeSet</name><operator>::</operator><name>iterator</name> <name>I</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>UnaryOperator</name><operator>*</operator> <name>U</name></expr></argument>,
<argument><expr><name>StmtNodeBuilder</name> <operator>&amp;</operator><name>Bldr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<label><name>public</name>:</label>
<decl_stmt><decl><type><name>SVal</name></type> <name>evalBinOp</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>state</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><name>NonLoc</name> <name>L</name></expr></argument>, <argument><expr><name>NonLoc</name> <name>R</name></expr></argument>, <argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>svalBuilder</name><operator>.</operator><name>evalBinOpNN</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>SVal</name></type> <name>evalBinOp</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>state</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>op</name></expr></argument>,
<argument><expr><name>NonLoc</name> <name>L</name></expr></argument>, <argument><expr><name>SVal</name> <name>R</name></expr></argument>, <argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name><name>R</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>svalBuilder</name><operator>.</operator><name>evalBinOpNN</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>L</name></expr></argument>,
<argument><expr><name><name>R</name><operator>.</operator><name>castAs</name></name><operator>&lt;</operator><name>NonLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>R</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>SVal</name></type> <name>evalBinOp</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>ST</name></expr></argument>, <argument><expr><name>BinaryOperator</name><operator>::</operator><name>Opcode</name> <name>Op</name></expr></argument>,
<argument><expr><name>SVal</name> <name>LHS</name></expr></argument>, <argument><expr><name>SVal</name> <name>RHS</name></expr></argument>, <argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name><name>svalBuilder</name><operator>.</operator><name>evalBinOp</name></name><argument_list>(<argument><expr><name>ST</name></expr></argument>, <argument><expr><name>Op</name></expr></argument>, <argument><expr><name>LHS</name></expr></argument>, <argument><expr><name>RHS</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<function_decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name></type>
<name>getObjectUnderConstruction</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContextItem</name> <modifier>&amp;</modifier></type><name>Item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>ProgramStateRef</name></type> <name>processPointerEscapedOnBind</name><parameter_list>(
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>, <argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>LocAndVals</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>, <parameter><decl><type><name>PointerEscapeKind</name></type> <name>Kind</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>ProgramStateRef</name></type> <name>notifyCheckersOfPointerEscape</name><parameter_list>(
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>InvalidatedSymbols</name> <modifier>*</modifier></type><name>Invalidated</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>ExplicitRegions</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>*</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><name>RegionAndSymbolInvalidationTraits</name> <modifier>&amp;</modifier></type><name>ITraits</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>


<function_decl><type><name>void</name></type> <name>evalBind</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>StoreE</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>SVal</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>Val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>atDeclInit</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPoint</name> <modifier>*</modifier></type><name>PP</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ProgramStateRef</name></type>
<name>processPointerEscapedOnBind</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><name>SVal</name></type> <name>Loc</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>Val</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>ProgramStateRef</name></type> <name>escapeValues</name><argument_list>(<argument><expr><name>ProgramStateRef</name> <name>State</name></expr></argument>, <argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name> <name>Vs</name></expr></argument>,
<argument><expr><name>PointerEscapeKind</name> <name>K</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CallEvent</name> <operator>*</operator><name>Call</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>public</name>:</label>






<function_decl><type><name>void</name></type> <name>evalLoad</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>NodeEx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>BoundExpr</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>St</name></decl></parameter>,
<parameter><decl><type><name>SVal</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>LoadTy</name> <init>= <expr><call><name>QualType</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>evalStore</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>AssignE</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>StoreE</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ProgramStateRef</name></type> <name>St</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>TargetLV</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>Val</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>CFGElement</name></type> <name>getCurrentCFGElement</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><operator>*</operator><call><name><name>currBldrCtx</name><operator>-&gt;</operator><name>getBlock</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><name>currStmtIdx</name></expr>]</index></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name>ProgramStateRef</name></type> <name>bindReturnValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>evalCall</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>defaultEvalCall</name><argument_list>(<argument><expr><name>NodeBuilder</name> <operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>ExplodedNode</name> <operator>*</operator><name>Pred</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>CallEvent</name> <operator>&amp;</operator><name>Call</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvalCallOptions</name> <operator>&amp;</operator><name>CallOpts</name> <operator>=</operator> <block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>







<function_decl><type><name>SVal</name></type> <name>computeObjectUnderConstruction</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContext</name> <modifier>*</modifier></type><name>CC</name></decl></parameter>, <parameter><decl><type><name>EvalCallOptions</name> <modifier>&amp;</modifier></type><name>CallOpts</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ProgramStateRef</name></type> <name>updateObjectsUnderConstruction</name><parameter_list>(
<parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContext</name> <modifier>*</modifier></type><name>CC</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EvalCallOptions</name> <modifier>&amp;</modifier></type><name>CallOpts</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ProgramStateRef</name></expr></argument>, <argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name> <macro><name>handleConstructionContext</name><argument_list>(
<argument>const Expr *E</argument>, <argument>ProgramStateRef State</argument>, <argument>const LocationContext *LCtx</argument>,
<argument>const ConstructionContext *CC</argument>, <argument>EvalCallOptions &amp;CallOpts</argument>)</argument_list></macro> <block>{
<expr><name>SVal</name> <name>V</name> <operator>=</operator> <call><name>computeObjectUnderConstruction</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>LCtx</name></expr></argument>, <argument><expr><name>CC</name></expr></argument>, <argument><expr><name>CallOpts</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(
<argument><expr><call><name>updateObjectsUnderConstruction</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>State</name></expr></argument>, <argument><expr><name>LCtx</name></expr></argument>, <argument><expr><name>CC</name></expr></argument>, <argument><expr><name>CallOpts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>ProgramStateRef</name></type> <name>finishArgumentConstruction</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>finishArgumentConstruction</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evalLoadCommon</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>NodeEx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>BoundEx</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>St</name></decl></parameter>,
<parameter><decl><type><name>SVal</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ProgramPointTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
<parameter><decl><type><name>QualType</name></type> <name>LoadTy</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>evalLocation</name><parameter_list>(<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>NodeEx</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>BoundEx</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ProgramStateRef</name></type> <name>St</name></decl></parameter>,
<parameter><decl><type><name>SVal</name></type> <name>location</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isLoad</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>examineStackFrames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LCtx</name></decl></parameter>,
<parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>IsRecursive</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>StackDepth</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>CallInlinePolicy</name> <block>{
<decl><name>CIP_Allowed</name></decl>,
<decl><name>CIP_DisallowedOnce</name></decl>,
<decl><name>CIP_DisallowedAlways</name></decl>
}</block>;</enum>



<function_decl><type><name>CallInlinePolicy</name></type> <name>mayInlineCallKind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>AnalyzerOptions</name> <modifier>&amp;</modifier></type><name>Opts</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EvalCallOptions</name> <modifier>&amp;</modifier></type><name>CallOpts</name></decl></parameter>)</parameter_list>;</function_decl>






<decl_stmt><decl><type><name>bool</name></type> <name>isSmall</name><argument_list>(<argument><expr><name>AnalysisDeclContext</name> <operator>*</operator><name>ADC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isLarge</name><argument_list>(<argument><expr><name>AnalysisDeclContext</name> <operator>*</operator><name>ADC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isHuge</name><argument_list>(<argument><expr><name>AnalysisDeclContext</name> <operator>*</operator><name>ADC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>mayInlineDecl</name><argument_list>(<argument><expr><name>AnalysisDeclContext</name> <operator>*</operator><name>ADC</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>shouldInlineCall</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CallEvent</name> <operator>&amp;</operator><name>Call</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ExplodedNode</name> <operator>*</operator><name>Pred</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>EvalCallOptions</name> <operator>&amp;</operator><name>CallOpts</name> <operator>=</operator> <block>{}</block></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>inlineCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>NodeBuilder</name> <modifier>&amp;</modifier></type><name>Bldr</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>conservativeEvalCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>, <parameter><decl><type><name>NodeBuilder</name> <modifier>&amp;</modifier></type><name>Bldr</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>, <parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>BifurcateCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MemRegion</name> <modifier>*</modifier></type><name>BifurReg</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><name>NodeBuilder</name> <modifier>&amp;</modifier></type><name>Bldr</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>replayWithoutInlining</name><parameter_list>(<parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>CalleeLC</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>performTrivialCopy</name><parameter_list>(<parameter><decl><type><name>NodeBuilder</name> <modifier>&amp;</modifier></type><name>Bldr</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CallEvent</name> <modifier>&amp;</modifier></type><name>Call</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>ProgramStateRef</name></type> <name>createTemporaryRegionIfNeeded</name><parameter_list>(
<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>InitWithAdjustments</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Result</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>SubRegion</name> <modifier>*</modifier><modifier>*</modifier></type><name>OutRegionWithAdjustments</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><specifier>static</specifier> <name>SVal</name></type> <name>makeZeroElementRegion</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>LValue</name></decl></parameter>,
<parameter><decl><type><name>QualType</name> <modifier>&amp;</modifier></type><name>Ty</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>&amp;</modifier></type><name>IsArray</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><specifier>const</specifier> <name>CXXConstructExpr</name> <modifier>*</modifier></type><name>findDirectConstructorForCurrentCFGElement</name><parameter_list>()</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>handleConstructor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><name>ExplodedNode</name> <modifier>*</modifier></type><name>Pred</name></decl></parameter>,
<parameter><decl><type><name>ExplodedNodeSet</name> <modifier>&amp;</modifier></type><name>Dst</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>



<function_decl><type><name>LLVM_NODISCARD</name> <specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>setWhetherHasMoreIteration</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCForCollectionStmt</name> <modifier>*</modifier></type><name>O</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>HasMoreIteraton</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LLVM_NODISCARD</name> <specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>removeIterationState</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ObjCForCollectionStmt</name> <modifier>*</modifier></type><name>O</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LLVM_NODISCARD</name> <specifier>static</specifier> <name>bool</name></type> <name>hasMoreIteration</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ObjCForCollectionStmt</name> <modifier>*</modifier></type><name>O</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list>;</function_decl>
<label><name>private</name>:</label>







<function_decl><type><specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>addObjectUnderConstruction</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContextItem</name> <modifier>&amp;</modifier></type><name>Item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>, <parameter><decl><type><name>SVal</name></type> <name>V</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>finishObjectConstruction</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ConstructionContextItem</name> <modifier>&amp;</modifier></type><name>Item</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>ProgramStateRef</name></type> <name>elideDestructor</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>ProgramStateRef</name></type>
<name>cleanupElidedDestructor</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isDestructorElided</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CXXBindTemporaryExpr</name> <modifier>*</modifier></type><name>BTE</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>LC</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>areAllObjectsFullyConstructed</name><parameter_list>(<parameter><decl><type><name>ProgramStateRef</name></type> <name>State</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>FromLC</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>LocationContext</name> <modifier>*</modifier></type><name>ToLC</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<struct>struct <name>ReplayWithoutInlining</name><block>{}</block>;</struct>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct</type> <name><name>ProgramStateTrait</name><argument_list type="generic">&lt;<argument><expr><name>ReplayWithoutInlining</name></expr></argument>&gt;</argument_list></name> <range>:
<expr><name>public</name> <name><name>ProgramStatePartialTrait</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>void</name> <operator>*</operator><call><name>GDMIndex</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
