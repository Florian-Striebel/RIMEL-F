<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/TokenConcatenation.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_TOKENCONCATENATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_TOKENCONCATENATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Token</name></decl>;</decl_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>TokenConcatenation</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl>;</decl_stmt>

<enum>enum <name>AvoidConcatInfo</name> <block>{


<decl><name>aci_never_avoid_concat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,




<decl><name>aci_custom_firstchar</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,




<decl><name>aci_custom</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,



<decl><name>aci_avoid_equal</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block>;</enum>




<decl_stmt><decl><type><name>char</name></type> <name><name>TokenInfo</name><index>[<expr><name>tok</name><operator>::</operator><name>NUM_TOKENS</name></expr>]</index></name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>TokenConcatenation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>AvoidConcat</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>PrevPrevTok</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>PrevTok</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>Tok</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>


<decl_stmt><decl><type><name>bool</name></type> <name>IsIdentifierStringPrefix</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><name>Tok</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
