<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ExternalASTMerger.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_EXTERNALASTMERGER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_EXTERNALASTMERGER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTImporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTImporterSharedState.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ExternalASTSource.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


























<decl_stmt><decl><type><name>class</name></type> <name>ExternalASTMerger</name> <range>: <expr><name>public</name> <name>ExternalASTSource</name> <block>{
<expr><name>public</name><operator>:</operator>


struct <name>DCOrigin</name> <block>{
<expr><name>DeclContext</name> <operator>*</operator><name>DC</name></expr>;
<expr><name>ASTContext</name> <operator>*</operator><name>AST</name></expr>;
}</block></expr>;

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>DeclContext</name> <operator>*</operator></expr></argument>, <argument><expr><name>DCOrigin</name></expr></argument>&gt;</argument_list></name> <name>OriginMap</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTImporter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ImporterVector</name></expr>;</expr_stmt></typedef>
<label><name>private</name>:</label>

<decl_stmt><decl><type><name>ImporterVector</name></type> <name>Importers</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>OriginMap</name></type> <name>Origins</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>*</operator><name>LogStream</name></expr>;</expr_stmt>

<label><name>public</name>:</label>




<struct>struct <name>ImporterTarget</name> <block>{
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>AST</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileManager</name> <modifier>&amp;</modifier></type><name>FM</name></decl>;</decl_stmt>
}</block>;</struct>






<decl_stmt><decl><type><name>class</name></type> <name>ImporterSource</name> <block>{<block_content>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>AST</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileManager</name> <modifier>&amp;</modifier></type><name>FM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>OriginMap</name> <modifier>&amp;</modifier></type><name>OM</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>Temporary</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ExternalASTMerger</name> <modifier>*</modifier></type><name>Merger</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ImporterSource</name><argument_list>(<argument>ASTContext &amp;AST</argument>, <argument>FileManager &amp;FM</argument>, <argument>const OriginMap &amp;OM</argument>,
<argument>bool Temporary = false</argument>, <argument>ExternalASTMerger *Merger = nullptr</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>AST</name><argument_list>(<argument><expr><name>AST</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FM</name><argument_list>(<argument><expr><name>FM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OM</name><argument_list>(<argument><expr><name>OM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Temporary</name><argument_list>(<argument><expr><name>Temporary</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Merger</name><argument_list>(<argument>Merger</argument>)</argument_list></macro> <expr><block>{}</block>
<name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AST</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>FileManager</name> <operator>&amp;</operator><macro><name>getFileManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FM</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>OriginMap</name> <operator>&amp;</operator><macro><name>getOriginMap</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>OM</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isTemporary</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Temporary</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>ExternalASTMerger</name> <operator>*</operator><macro><name>getMerger</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Merger</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>ImporterTarget</name></type> <name>Target</name></decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTImporterSharedState</name></expr></argument>&gt;</argument_list></name> <name>SharedState</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ExternalASTMerger</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ImporterTarget</name> <operator>&amp;</operator><name>Target</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ImporterSource</name></expr></argument>&gt;</argument_list></name> <name>Sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>Decl</name> <modifier>*</modifier></type><name>FindOriginalDecl</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>void</name></type> <name>AddSources</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ImporterSource</name></expr></argument>&gt;</argument_list></name> <name>Sources</name></expr></argument>)</argument_list></decl>;</decl_stmt>








<decl_stmt><decl><type><name>void</name></type> <name>RemoveSources</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ImporterSource</name></expr></argument>&gt;</argument_list></name> <name>Sources</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>FindExternalVisibleDeclsByName</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclContext</name> <operator>*</operator><name>DC</name></expr></argument>,
<argument><expr><name>DeclarationName</name> <name>Name</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type>
<name>FindExternalLexicalDecls</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DeclContext</name> <operator>*</operator><name>DC</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>Decl</name><operator>::</operator><name>Kind</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>IsKindWeWant</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Result</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>CompleteType</name><argument_list>(<argument><expr><name>TagDecl</name> <operator>*</operator><name>Tag</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>CompleteType</name><argument_list>(<argument><expr><name>ObjCInterfaceDecl</name> <operator>*</operator><name>Interface</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>CanComplete</name><parameter_list>(<parameter><decl><type><name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>void</name></type> <name>MaybeRecordOrigin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>ToDC</name></decl></parameter>, <parameter><decl><type><name>DCOrigin</name></type> <name>Origin</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>ForceRecordOrigin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>ToDC</name></decl></parameter>, <parameter><decl><type><name>DCOrigin</name></type> <name>Origin</name></decl></parameter>)</parameter_list>;</function_decl>



<function><type><specifier>const</specifier> <name>OriginMap</name> <modifier>&amp;</modifier></type><name>GetOrigins</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Origins</name></expr>;</return> </block_content>}</block></function>



<function_decl><type><name>bool</name></type> <name>HasImporterForOrigin</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>OriginContext</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>ASTImporter</name> <modifier>&amp;</modifier></type><name>ImporterForOrigin</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>OriginContext</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>SetLogStream</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <operator>&amp;</operator><name>Stream</name></expr></argument>)</argument_list> <block>{<block_content> <expr_stmt><expr><name>LogStream</name> <operator>=</operator> <operator>&amp;</operator><name>Stream</name></expr>;</expr_stmt> </block_content>}</block></decl></decl_stmt>
<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>RecordOriginImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>ToDC</name></decl></parameter>, <parameter><decl><type><name>DCOrigin</name></type> <name>Origin</name></decl></parameter>,
<parameter><decl><type><name>ASTImporter</name> <modifier>&amp;</modifier></type><name>importer</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>CallbackType</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>ForEachMatchingDC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclContext</name> <modifier>*</modifier></type><name>DC</name></decl></parameter>, <parameter><decl><type><name>CallbackType</name></type> <name>Callback</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><macro><name>logs</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><name>LogStream</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>bool</name></type> <name>LoggingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>LogStream</name> <operator>!=</operator> <operator>&amp;</operator><name>llvm</name><operator>::</operator><call><name>nulls</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
