<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Syntax/Tree.h">



















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_SYNTAX_TREE_CASCADE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_SYNTAX_TREE_CASCADE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceManager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/TokenKinds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Syntax/Tokens.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>syntax</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>Arena</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>Arena</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SourceMgr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TokenBuffer</name> <operator>&amp;</operator><name>Tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><macro><name>getSourceManager</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SourceMgr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><macro><name>getLangOptions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LangOpts</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>TokenBuffer</name> <operator>&amp;</operator><macro><name>getTokenBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><macro><name>getAllocator</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Allocator</name></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>lexBuffer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBuffer</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FactoryImpl</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>TokenBuffer</name> <modifier>&amp;</modifier></type><name>Tokens</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>FileID</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ExtraTokens</name></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>Allocator</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TreeBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FactoryImpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MutationsImpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>NodeKind</name> <range>: <expr><name>uint16_t</name></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>NodeRole</name> <range>: <expr><name>uint8_t</name></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>Node</name> <block>{<block_content>
<label><name>protected</name>:</label>


<macro><name>Node</name><argument_list>(<argument>NodeKind Kind</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><operator>~</operator><call><name>Node</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Node</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Node</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Node</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Node</name><argument_list>(<argument><expr><name>Node</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>Node</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>NodeKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>NodeRole</name> <macro><name>getRole</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>NodeRole</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Role</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isDetached</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>isOriginal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Original</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><name>bool</name> <macro><name>canModify</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CanModify</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Tree</name> <operator>*</operator><macro><name>getParent</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Parent</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Tree</name> <modifier>*</modifier></type><name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Parent</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>getNextSibling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NextSibling</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Node</name> <modifier>*</modifier></type><name>getNextSibling</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>NextSibling</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>getPreviousSibling</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>PreviousSibling</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>Node</name> <modifier>*</modifier></type><name>getPreviousSibling</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>PreviousSibling</name></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>dump</name><argument_list>(<argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>dumpTokens</name><argument_list>(<argument>const SourceManager &amp;SM</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<expr_stmt><expr><name>void</name> <macro><name>assertInvariants</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>void</name> <macro><name>assertInvariantsRecursive</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>TreeBuilder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>MutationsImpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>FactoryImpl</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>setRole</name><parameter_list>(<parameter><decl><type><name>NodeRole</name></type> <name>NR</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>Tree</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>NextSibling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>PreviousSibling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Kind</name> <range>: <expr><literal type="number">16</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Role</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Original</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>CanModify</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name> <name>Leaf</name></type> <name>final</name> <range>: <expr><name>public</name> <name>Node</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>Leaf</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Token</name> <operator>*</operator><name>T</name></expr></argument>)</argument_list></call></expr>;
<expr><specifier>static</specifier> <name>bool</name> <call><name>classof</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Node</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>Token</name> <operator>*</operator><macro><name>getToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Tok</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
<specifier>const</specifier> <name>Token</name> <operator>*</operator><name>Tok</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>Tree</name> <range>: <expr><name>public</name> <name>Node</name> <block>{


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>DerivedT</name></expr></argument>, <argument><expr><name>typename</name> <name>NodeT</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>ChildIteratorBase</name>
<operator>:</operator> <name>public</name> <name>llvm</name><operator>::</operator><name><name>iterator_facade_base</name><argument_list type="generic">&lt;<argument><expr><name>DerivedT</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>forward_iterator_tag</name></expr></argument>,
<argument><expr><name>NodeT</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>protected</name><operator>:</operator>
<name>NodeT</name> <operator>*</operator><name>N</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>using</name> <name>Base</name> <operator>=</operator> <name>ChildIteratorBase</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ChildIteratorBase</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><name>explicit</name> <call><name>ChildIteratorBase</name><argument_list>(<argument><expr><name>NodeT</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>N</name><argument_list>(<argument>N</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>DerivedT</name> <operator>&amp;</operator><name>O</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name><name>O</name><operator>.</operator><name>N</name></name> <operator>==</operator> <name>N</name></expr>;</return> }</block>
<name>NodeT</name> <operator>&amp;</operator><name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>N</name></expr>;</return> }</block>
<name>DerivedT</name> <operator>&amp;</operator><name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{
<expr><name>N</name> <operator>=</operator> <call><name><name>N</name><operator>-&gt;</operator><name>getNextSibling</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DerivedT</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>N</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block>

<name>NodeT</name> <operator>*</operator><macro><name>asPointer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>N</name></expr>;</return> }</block>
}</expr>;

<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>bool</name> <call><name>classof</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Node</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Node</name> <operator>*</operator><macro><name>getFirstChild</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>FirstChild</name></expr>;</return> }</block>
<specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>getFirstChild</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FirstChild</name></expr>;</return> }</block>
<name>Node</name> <operator>*</operator><macro><name>getLastChild</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>LastChild</name></expr>;</return> }</block>
<specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>getLastChild</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LastChild</name></expr>;</return> }</block>

<specifier>const</specifier> <name>Leaf</name> <operator>*</operator><macro><name>findFirstLeaf</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>Leaf</name> <operator>*</operator><macro><name>findFirstLeaf</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Leaf</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Tree</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>findFirstLeaf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>const</specifier> <name>Leaf</name> <operator>*</operator><macro><name>findLastLeaf</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>Leaf</name> <operator>*</operator><macro><name>findLastLeaf</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Leaf</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Tree</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>findLastLeaf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>


struct <name>ChildIterator</name> <operator>:</operator> <name><name>ChildIteratorBase</name><argument_list type="generic">&lt;<argument><expr><name>ChildIterator</name></expr></argument>, <argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>Base</name><operator>::</operator><name>ChildIteratorBase</name></expr>;
}</block></expr>;
struct <expr><name>ConstChildIterator</name>
<operator>:</operator> <name><name>ChildIteratorBase</name><argument_list type="generic">&lt;<argument><expr><name>ConstChildIterator</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Node</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>Base</name><operator>::</operator><name>ChildIteratorBase</name></expr>;
<expr><call><name>ConstChildIterator</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<expr><call><name>ConstChildIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ChildIterator</name> <operator>&amp;</operator><name>I</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Base</name><argument_list>(<argument>I.asPointer()</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>ChildIterator</name></expr></argument>&gt;</argument_list></name> <macro><name>getChildren</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><block>{<expr><call><name>ChildIterator</name><argument_list>(<argument><expr><call><name>getFirstChild</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>ChildIterator</name><argument_list>()</argument_list></macro>}</block></expr>;</return>
}</block>
<name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>ConstChildIterator</name></expr></argument>&gt;</argument_list></name> <macro><name>getChildren</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><block>{<expr><call><name>ConstChildIterator</name><argument_list>(<argument><expr><call><name>getFirstChild</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <macro><name>ConstChildIterator</name><argument_list>()</argument_list></macro>}</block></expr>;</return>
}</block>


<specifier>const</specifier> <name>Node</name> <operator>*</operator><macro><name>findChild</name><argument_list>(<argument>NodeRole R</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>Node</name> <operator>*</operator><macro><name>findChild</name><argument_list>(<argument>NodeRole R</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>Node</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Tree</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>findChild</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>protected</name><operator>:</operator>
<name>using</name> <name>Node</name><operator>::</operator><name>Node</name></expr>;

<expr><name>private</name><operator>:</operator>




<name>void</name> <macro><name>appendChildLowLevel</name><argument_list>(<argument>Node *Child</argument>, <argument>NodeRole Role</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>prependChildLowLevel</name><argument_list>(<argument>Node *Child</argument>, <argument>NodeRole Role</argument>)</argument_list></macro></expr>;



<expr><name>void</name> <call><name>appendChildLowLevel</name><argument_list>(<argument><expr><name>Node</name> <operator>*</operator><name>Child</name></expr></argument>)</argument_list></call></expr>;
<expr><name>void</name> <call><name>prependChildLowLevel</name><argument_list>(<argument><expr><name>Node</name> <operator>*</operator><name>Child</name></expr></argument>)</argument_list></call></expr>;
<expr><name>friend</name> <name>class</name> <name>TreeBuilder</name></expr>;
<expr><name>friend</name> <name>class</name> <name>FactoryImpl</name></expr>;







<expr><name>void</name> <call><name>replaceChildRangeLowLevel</name><argument_list>(<argument><expr><name>Node</name> <operator>*</operator><name>Begin</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><name>End</name></expr></argument>, <argument><expr><name>Node</name> <operator>*</operator><name>New</name></expr></argument>)</argument_list></call></expr>;
<expr><name>friend</name> <name>class</name> <name>MutationsImpl</name></expr>;

<expr><name>Node</name> <operator>*</operator><name>FirstChild</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>Node</name> <operator>*</operator><name>LastChild</name> <operator>=</operator> <name>nullptr</name></expr>;
}</block></expr>;




<expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Tree</name><operator>::</operator><name>ConstChildIterator</name> <operator>&amp;</operator><name>A</name>,
<specifier>const</specifier> <name>Tree</name><operator>::</operator><name>ConstChildIterator</name> <operator>&amp;</operator><name>B</name><operator>)</operator> <block>{
<return>return <expr><name><name>A</name><operator>.</operator><name>operator</name></name><operator>==</operator><operator>(</operator><name>B</name><operator>)</operator></expr>;</return>
}</block>





<name>class</name> <name>List</name> <operator>:</operator> <name>public</name> <name>Tree</name> <block>{
<expr><name>public</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Element</name></expr></argument>&gt;</argument_list></name> struct <name>ElementAndDelimiter</name> <block>{
<expr><name>Element</name> <operator>*</operator><name>element</name></expr>;
<expr><name>Leaf</name> <operator>*</operator><name>delimiter</name></expr>;
}</block></expr>;

enum <expr><name>class</name> <name>TerminationKind</name> <block>{
<expr><name>Terminated</name></expr>,
<expr><name>MaybeTerminated</name></expr>,
<expr><name>Separated</name></expr>,
}</block></expr>;

<expr><name>using</name> <name>Tree</name><operator>::</operator><name>Tree</name></expr>;
<expr><specifier>static</specifier> <name>bool</name> <call><name>classof</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Node</name> <operator>*</operator><name>N</name></expr></argument>)</argument_list></call></expr>;














<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>ElementAndDelimiter</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <call><name>getElementsAsNodesAndDelimiters</name><argument_list>()</argument_list></call></expr>;




<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Node</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>getElementsAsNodes</name><argument_list>()</argument_list></call></expr>;







<expr><name>clang</name><operator>::</operator><name>tok</name><operator>::</operator><name>TokenKind</name> <macro><name>getDelimiterTokenKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>TerminationKind</name> <macro><name>getTerminationKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;






<expr><name>bool</name> <macro><name>canBeEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

}</block></expr></range></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
