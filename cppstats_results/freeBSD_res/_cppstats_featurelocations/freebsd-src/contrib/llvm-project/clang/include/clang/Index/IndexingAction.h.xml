<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Index/IndexingAction.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_INDEX_INDEXINGACTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_INDEX_INDEXINGACTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Index/IndexingOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PPCallbacks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTReader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ASTUnit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>FrontendAction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>serialization</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ModuleFile</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>index</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>IndexDataConsumer</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name>
<call><name>createIndexingASTConsumer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IndexDataConsumer</name></expr></argument>&gt;</argument_list></name> <name>DataConsumer</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>IndexingOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Preprocessor</name></expr></argument>&gt;</argument_list></name> <name>PP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ASTConsumer</name></expr></argument>&gt;</argument_list></name> <call><name>createIndexingASTConsumer</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IndexDataConsumer</name></expr></argument>&gt;</argument_list></name> <name>DataConsumer</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>IndexingOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Preprocessor</name></expr></argument>&gt;</argument_list></name> <name>PP</name></expr></argument>,


<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>Decl</name> <operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>ShouldSkipFunctionBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendAction</name></expr></argument>&gt;</argument_list></name>
<call><name>createIndexingAction</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>IndexDataConsumer</name></expr></argument>&gt;</argument_list></name> <name>DataConsumer</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>IndexingOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><name>void</name></type> <name>indexASTUnit</name><parameter_list>(<parameter><decl><type><name>ASTUnit</name> <modifier>&amp;</modifier></type><name>Unit</name></decl></parameter>, <parameter><decl><type><name>IndexDataConsumer</name> <modifier>&amp;</modifier></type><name>DataConsumer</name></decl></parameter>,
<parameter><decl><type><name>IndexingOptions</name></type> <name>Opts</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>indexTopLevelDecls</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>, <parameter><decl><type><name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>Decls</name></decl></parameter>,
<parameter><decl><type><name>IndexDataConsumer</name> <modifier>&amp;</modifier></type><name>DataConsumer</name></decl></parameter>, <parameter><decl><type><name>IndexingOptions</name></type> <name>Opts</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PPCallbacks</name></expr></argument>&gt;</argument_list></name> <macro><name>indexMacrosCallback</name><argument_list>(<argument>IndexDataConsumer &amp;Consumer</argument>,
<argument>IndexingOptions Opts</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>indexModuleFile</name><argument_list>(<argument><expr><name>serialization</name><operator>::</operator><name>ModuleFile</name> <operator>&amp;</operator><name>Mod</name></expr></argument>, <argument><expr><name>ASTReader</name> <operator>&amp;</operator><name>Reader</name></expr></argument>,
<argument><expr><name>IndexDataConsumer</name> <operator>&amp;</operator><name>DataConsumer</name></expr></argument>, <argument><expr><name>IndexingOptions</name> <name>Opts</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
