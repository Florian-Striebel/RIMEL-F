<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/CompilerInvocation.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_COMPILERINVOCATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_COMPILERINVOCATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/CodeGenOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/DiagnosticOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/FileSystemOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangStandard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/DependencyOutputOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/FrontendOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/MigratorOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/PreprocessorOutputOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/AnalyzerOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/IntrusiveRefCntPtr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Triple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>opt</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ArgList</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>vfs</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FileSystem</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearchOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PreprocessorOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TargetOptions</name></decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>ParseDiagnosticArgs</name><argument_list>(<argument><expr><name>DiagnosticOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>*</operator><name>Diags</name> <operator>=</operator> <name>nullptr</name></expr></argument>,
<argument><expr><name>bool</name> <name>DefaultDiagColor</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></decl>;</decl_stmt>









<decl_stmt><decl><type><name>class</name></type> <name>CompilerInvocationRefBase</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LangOptions</name></expr></argument>&gt;</argument_list></name> <name>LangOpts</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TargetOptions</name></expr></argument>&gt;</argument_list></name> <name>TargetOpts</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>DiagnosticOptions</name></expr></argument>&gt;</argument_list></name></type> <name>DiagnosticOpts</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>HeaderSearchOptions</name></expr></argument>&gt;</argument_list></name> <name>HeaderSearchOpts</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PreprocessorOptions</name></expr></argument>&gt;</argument_list></name> <name>PreprocessorOpts</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>AnalyzerOptionsRef</name></type> <name>AnalyzerOpts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CompilerInvocationRefBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CompilerInvocationRefBase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CompilerInvocationRefBase</name> <operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CompilerInvocationRefBase</name><argument_list>(<argument><expr><name>CompilerInvocationRefBase</name> <operator>&amp;&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CompilerInvocationRefBase</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>CompilerInvocationRefBase</name> <name>X</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompilerInvocationRefBase</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>CompilerInvocationRefBase</name> <operator>&amp;&amp;</operator><name>X</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>~</operator><call><name>CompilerInvocationRefBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function><type><name>LangOptions</name> <modifier>*</modifier></type><name>getLangOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>LangOpts</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>LangOptions</name> <operator>*</operator><macro><name>getLangOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>LangOpts</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>TargetOptions</name> <modifier>&amp;</modifier></type><name>getTargetOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><call><name><name>TargetOpts</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>TargetOptions</name> <operator>&amp;</operator><macro><name>getTargetOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><call><name><name>TargetOpts</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>DiagnosticOptions</name> <operator>&amp;</operator><macro><name>getDiagnosticOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>DiagnosticOpts</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>HeaderSearchOptions</name> <modifier>&amp;</modifier></type><name>getHeaderSearchOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>HeaderSearchOpts</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>HeaderSearchOptions</name> <operator>&amp;</operator><macro><name>getHeaderSearchOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name>HeaderSearchOpts</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>HeaderSearchOptions</name></expr></argument>&gt;</argument_list></name> <macro><name>getHeaderSearchOptsPtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>HeaderSearchOpts</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PreprocessorOptions</name></expr></argument>&gt;</argument_list></name> <macro><name>getPreprocessorOptsPtr</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>PreprocessorOpts</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>PreprocessorOptions</name> <modifier>&amp;</modifier></type><name>getPreprocessorOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>PreprocessorOpts</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>PreprocessorOptions</name> <operator>&amp;</operator><macro><name>getPreprocessorOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><operator>*</operator><name>PreprocessorOpts</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>AnalyzerOptionsRef</name> <macro><name>getAnalyzerOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>AnalyzerOpts</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CompilerInvocationValueBase</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>MigratorOptions</name></type> <name>MigratorOpts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>CodeGenOptions</name></type> <name>CodeGenOpts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DependencyOutputOptions</name></type> <name>DependencyOutputOpts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FileSystemOptions</name></type> <name>FileSystemOpts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>FrontendOptions</name></type> <name>FrontendOpts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>PreprocessorOutputOptions</name></type> <name>PreprocessorOutputOpts</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<function><type><name>MigratorOptions</name> <modifier>&amp;</modifier></type><name>getMigratorOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>MigratorOpts</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>MigratorOptions</name> <operator>&amp;</operator><macro><name>getMigratorOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MigratorOpts</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>CodeGenOptions</name> <modifier>&amp;</modifier></type><name>getCodeGenOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>CodeGenOpts</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><macro><name>getCodeGenOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>CodeGenOpts</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>DependencyOutputOptions</name> <modifier>&amp;</modifier></type><name>getDependencyOutputOpts</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>DependencyOutputOpts</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>DependencyOutputOptions</name> <operator>&amp;</operator><macro><name>getDependencyOutputOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>DependencyOutputOpts</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>FileSystemOptions</name> <modifier>&amp;</modifier></type><name>getFileSystemOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>FileSystemOpts</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>FileSystemOptions</name> <operator>&amp;</operator><macro><name>getFileSystemOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FileSystemOpts</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>FrontendOptions</name> <modifier>&amp;</modifier></type><name>getFrontendOpts</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>FrontendOpts</name></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>FrontendOptions</name> <operator>&amp;</operator><macro><name>getFrontendOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FrontendOpts</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>PreprocessorOutputOptions</name> <modifier>&amp;</modifier></type><name>getPreprocessorOutputOpts</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>PreprocessorOutputOpts</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>PreprocessorOutputOptions</name> <operator>&amp;</operator><macro><name>getPreprocessorOutputOpts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>PreprocessorOutputOpts</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>CompilerInvocation</name> <range>: <expr><name>public</name> <name>CompilerInvocationRefBase</name></expr></range></decl>,
<decl><type ref="prev"/><name>public</name> <name>CompilerInvocationValueBase</name> <block>{<block_content>
<label><name>public</name>:</label>











<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateFromArgs</name><parameter_list>(<parameter><decl><type><name>CompilerInvocation</name> <modifier>&amp;</modifier></type><name>Res</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>CommandLineArgs</name></decl></parameter>,
<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Argv0</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>









<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>string</name> <call><name>GetResourcesPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Argv0</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>MainAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>setLangDefaults</name><argument_list>(<argument><expr><name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>, <argument><expr><name>InputKind</name> <name>IK</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Includes</name></expr></argument>,
<argument><expr><name>LangStandard</name><operator>::</operator><name>Kind</name> <name>LangStd</name> <operator>=</operator> <name>LangStandard</name><operator>::</operator><name>lang_unspecified</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getModuleHash</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>StringAllocator</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Twine</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>void</name></type> <name>generateCC1CommandLine</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>StringAllocator</name> <name>SA</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateFromArgsImpl</name><parameter_list>(<parameter><decl><type><name>CompilerInvocation</name> <modifier>&amp;</modifier></type><name>Res</name></decl></parameter>,
<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>CommandLineArgs</name></decl></parameter>,
<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Argv0</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GenerateDiagnosticArgs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DiagnosticOptions</name> <modifier>&amp;</modifier></type><name>Opts</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Args</name></decl></parameter>,
<parameter><decl><type><name>StringAllocator</name></type> <name>SA</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>DefaultDiagColor</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ParseLangArgs</name><argument_list>(<argument><expr><name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>InputKind</name> <name>IK</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Includes</name></expr></argument>,
<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>GenerateLangArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>StringAllocator</name> <name>SA</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><name>InputKind</name> <name>IK</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>ParseCodeGenArgs</name><argument_list>(<argument><expr><name>CodeGenOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>opt</name><operator>::</operator><name>ArgList</name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>InputKind</name> <name>IK</name></expr></argument>, <argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>OutputFile</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOptsRef</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>GenerateCodeGenArgs</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CodeGenOptions</name> <operator>&amp;</operator><name>Opts</name></expr></argument>,
<argument><expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Args</name></expr></argument>,
<argument><expr><name>StringAllocator</name> <name>SA</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name>Triple</name> <operator>&amp;</operator><name>T</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>OutputFile</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>*</operator><name>LangOpts</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<function_decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name></type>
<name>createVFSFromCompilerInvocation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompilerInvocation</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>,
<parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name></type> <name>createVFSFromCompilerInvocation</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>CompilerInvocation</name> <modifier>&amp;</modifier></type><name>CI</name></decl></parameter>, <parameter><decl><type><name>DiagnosticsEngine</name> <modifier>&amp;</modifier></type><name>Diags</name></decl></parameter>,
<parameter><decl><type><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name></type> <name>BaseFS</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
