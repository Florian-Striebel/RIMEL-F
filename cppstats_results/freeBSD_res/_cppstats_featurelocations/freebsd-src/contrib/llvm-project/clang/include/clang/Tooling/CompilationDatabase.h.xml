<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/CompilationDatabase.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_COMPILATIONDATABASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_COMPILATIONDATABASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Twine.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>


<struct>struct <name>CompileCommand</name> <block>{
<expr_stmt><expr><call><name>CompileCommand</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<expr_stmt><expr><call><name>CompileCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Directory</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Filename</name></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CommandLine</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Output</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Directory</name><argument_list>(<argument><expr><call><name><name>Directory</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Filename</name><argument_list>(<argument><expr><call><name><name>Filename</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>CommandLine</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>CommandLine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Output</name><argument_list>(<argument>Output.str()</argument>)</argument_list></macro> <expr><block>{}</block>


<name>std</name><operator>::</operator><name>string</name> <name>Directory</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Filename</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CommandLine</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Output</name></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Heuristic</name></expr>;</expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CompileCommand</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>CompileCommand</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Directory</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Directory</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>Filename</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Filename</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>CommandLine</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>CommandLine</name></name> <operator>&amp;&amp;</operator> <name><name>LHS</name><operator>.</operator><name>Output</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Output</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>Heuristic</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Heuristic</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CompileCommand</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>CompileCommand</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><name>LHS</name> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>









<decl_stmt><decl><type><name>class</name></type> <name>CompilationDatabase</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>CompilationDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>













<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<macro><name>loadFromDirectory</name><argument_list>(<argument>StringRef BuildDirectory</argument>, <argument>std::string &amp;ErrorMessage</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<macro><name>autoDetectFromSource</name><argument_list>(<argument>StringRef SourceFile</argument>, <argument>std::string &amp;ErrorMessage</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<macro><name>autoDetectFromDirectory</name><argument_list>(<argument>StringRef SourceDir</argument>, <argument>std::string &amp;ErrorMessage</argument>)</argument_list></macro></expr>;</expr_stmt>










<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name> <macro><name>getCompileCommands</name><argument_list>(
<argument>StringRef FilePath</argument>)</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getAllFiles</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><block>{}</block></expr>;</return> }</block></expr></expr_stmt>










<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name> <macro><name>getAllCompileCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>FixedCompilationDatabase</name> <range>: <expr><name>public</name> <name>CompilationDatabase</name> <block>{
<expr><name>public</name><operator>:</operator>



























<specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FixedCompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<call><name>loadFromCommandLine</name><argument_list>(<argument><expr><name>int</name> <operator>&amp;</operator><name>Argc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><name>Argv</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>ErrorMsg</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Directory</name> <operator>=</operator> <literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;



<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FixedCompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<macro><name>loadFromFile</name><argument_list>(<argument>StringRef Path</argument>, <argument>std::string &amp;ErrorMsg</argument>)</argument_list></macro></expr>;



<expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FixedCompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<macro><name>loadFromBuffer</name><argument_list>(<argument>StringRef Directory</argument>, <argument>StringRef Data</argument>, <argument>std::string &amp;ErrorMsg</argument>)</argument_list></macro></expr>;



<expr><call><name>FixedCompilationDatabase</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Twine</name> <operator>&amp;</operator><name>Directory</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>CommandLine</name></expr></argument>)</argument_list></call></expr>;






<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name>
<macro><name>getCompileCommands</name><argument_list>(<argument>StringRef FilePath</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>


<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CompileCommand</name></expr></argument>&gt;</argument_list></name> <name>CompileCommands</name></expr>;
}</block></expr></range></decl>;</decl_stmt>




<expr_stmt><expr><name>tooling</name><operator>::</operator><name>CompileCommand</name> <macro><name>transferCompileCommand</name><argument_list>(<argument>tooling::CompileCommand</argument>,
<argument>StringRef Filename</argument>)</argument_list></macro></expr>;</expr_stmt>





<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<call><name>inferMissingCompileCommands</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<call><name>inferTargetAndDriverMode</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name> <name>Base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name>
<call><name>expandResponseFiles</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CompilationDatabase</name></expr></argument>&gt;</argument_list></name> <name>Base</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>FS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
