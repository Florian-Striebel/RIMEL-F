<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/AlignedAllocation.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_ALIGNED_ALLOCATION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_ALIGNED_ALLOCATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Triple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VersionTuple.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>VersionTuple</name> <macro><name>alignedAllocMinVersion</name><argument_list>(<argument>llvm::Triple::OSType OS</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>OS</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<break>break;</break>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>Darwin</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>MacOSX</name></expr>:</case>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">10U</literal></expr></argument>, <argument><expr><literal type="number">14U</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>IOS</name></expr>:</case>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>TvOS</name></expr>:</case>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">11U</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>WatchOS</name></expr>:</case>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>(<argument><expr><literal type="number">4U</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>llvm</name><operator>::</operator><name>Triple</name><operator>::</operator><name>ZOS</name></expr>:</case>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>VersionTuple</name><argument_list>()</argument_list></call></expr>;</return>
<expr_stmt/>}</block_content>

llvm_unreachable("Unexpected OS"</block></switch>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
