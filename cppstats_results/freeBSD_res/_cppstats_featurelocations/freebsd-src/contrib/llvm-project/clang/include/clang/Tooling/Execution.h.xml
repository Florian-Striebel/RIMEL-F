<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Execution.h">

























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_EXECUTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_EXECUTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/CommonOptionsParser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Tooling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/StringSaver.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<extern>extern llvm::cl::opt&lt;std::string&gt; ExecutorName;</extern>






<decl_stmt><decl><type><name>class</name></type> <name>ToolResults</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>ToolResults</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>addResult</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Key</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Value</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>AllKVResults</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>forEachResult</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>StringRef</name> <name>Key</name>, <name>StringRef</name> <name>Value</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Callback</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>InMemoryToolResults</name> <range>: <expr><name>public</name> <name>ToolResults</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>InMemoryToolResults</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>Strings</name><argument_list>(<argument>Arena</argument>)</argument_list></macro> <block>{}</block>
<name>void</name> <macro><name>addResult</name><argument_list>(<argument>StringRef Key</argument>, <argument>StringRef Value</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>AllKVResults</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
<expr><name>void</name> <macro><name>forEachResult</name><argument_list>(<argument>llvm::function_ref&lt;void(StringRef Key, StringRef Value)&gt;
Callback</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>Arena</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>UniqueStringSaver</name> <name>Strings</name></expr>;

<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>KVResults</name></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ExecutionContext</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ExecutionContext</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>explicit</name> <call><name>ExecutionContext</name><argument_list>(<argument><expr><name>ToolResults</name> <operator>*</operator><name>Results</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Results</name><argument_list>(<argument>Results</argument>)</argument_list></macro> <block>{}</block>


<name>void</name> <macro><name>reportResult</name><argument_list>(<argument>StringRef Key</argument>, <argument>StringRef Value</argument>)</argument_list></macro></expr>;</expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getRevision</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getCorpus</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getCurrentCompilationUnit</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ToolResults</name> <modifier>*</modifier></type><name>Results</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>ToolExecutor</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ToolExecutor</name><argument_list>()</argument_list></macro> <block>{}</block>


<name>virtual</name> <name>StringRef</name> <macro><name>getExecutorName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>virtual</name> <name>llvm</name><operator>::</operator><name>Error</name>
<call><name>execute</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;
<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendActionFactory</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>ArgumentsAdjuster</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>Actions</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <call><name>execute</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FrontendActionFactory</name></expr></argument>&gt;</argument_list></name> <name>Action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Error</name> <macro><name>execute</name><argument_list>(<argument>std::unique_ptr&lt;FrontendActionFactory&gt; Action</argument>,
<argument>ArgumentsAdjuster Adjuster</argument>)</argument_list></macro></expr>;</expr_stmt>





<function_decl><type><name>virtual</name> <name>ExecutionContext</name> <modifier>*</modifier></type><name>getExecutionContext</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function_decl><type><name>virtual</name> <name>ToolResults</name> <modifier>*</modifier></type><name>getToolResults</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>





<function_decl><type><name>virtual</name> <name>void</name></type> <name>mapVirtualFile</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>FilePath</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Content</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ToolExecutorPlugin</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>ToolExecutorPlugin</name><argument_list>()</argument_list></macro> <block>{}</block>




<name>virtual</name> <name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ToolExecutor</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>create</name><argument_list>(<argument><expr><name>CommonOptionsParser</name> <operator>&amp;</operator><name>OptionsParser</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>










<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ToolExecutor</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>createExecutorFromCommandLineArgs</name><argument_list>(<argument><expr><name>int</name> <operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>cl</name><operator>::</operator><name>OptionCategory</name> <operator>&amp;</operator><name>Category</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Overview</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Expected</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ToolExecutor</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<call><name>createExecutorFromCommandLineArgsImpl</name><argument_list>(<argument><expr><name>int</name> <operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><name>argv</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>cl</name><operator>::</operator><name>OptionCategory</name> <operator>&amp;</operator><name>Category</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Overview</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
