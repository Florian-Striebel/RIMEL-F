<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Syntax/Mutations.h">









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_SYNTAX_MUTATIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_SYNTAX_MUTATIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Core/Replacement.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Syntax/Nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Syntax/Tree.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>syntax</name> <block>{<block_content>



<expr_stmt><expr><name>tooling</name><operator>::</operator><name>Replacements</name> <call><name>computeReplacements</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Arena</name> <operator>&amp;</operator><name>A</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>syntax</name><operator>::</operator><name>TranslationUnit</name> <operator>&amp;</operator><name>TU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>removeStatement</name><argument_list>(<argument><expr><name>syntax</name><operator>::</operator><name>Arena</name> <operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>syntax</name><operator>::</operator><name>Statement</name> <operator>*</operator><name>S</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
