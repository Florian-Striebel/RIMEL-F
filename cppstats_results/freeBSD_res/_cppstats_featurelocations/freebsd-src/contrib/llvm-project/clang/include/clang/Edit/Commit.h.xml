<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Edit/Commit.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_EDIT_COMMIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_EDIT_COMMIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Edit/FileOffset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PPConditionalDirectiveRecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>edit</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>EditedSource</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Commit</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>EditKind</name> <block>{
<decl><name>Act_Insert</name></decl>,
<decl><name>Act_InsertFromRange</name></decl>,
<decl><name>Act_Remove</name></decl>
}</block>;</enum>

<struct>struct <name>Edit</name> <block>{
<decl_stmt><decl><type><name>EditKind</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>StringRef</name></type> <name>Text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileOffset</name></type> <name>Offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FileOffset</name></type> <name>InsertFromRangeOffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>BeforePrev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>getFileLocation</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>getFileRange</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>CharSourceRange</name></type> <name>getInsertFromRange</name><argument_list>(<argument><expr><name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
}</block>;</struct>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>SourceManager</name> <modifier>&amp;</modifier></type><name>SourceMgr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LangOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>PPConditionalDirectiveRecord</name> <modifier>*</modifier></type><name>PPRec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EditedSource</name> <modifier>*</modifier></type><name>Editor</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsCommitable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Edit</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>CachedEdits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <name>StrAlloc</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>Commit</name><parameter_list>(<parameter><decl><type><name>EditedSource</name> <modifier>&amp;</modifier></type><name>Editor</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>Commit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpts</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>PPConditionalDirectiveRecord</name> <operator>*</operator><name>PPRec</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>SourceMgr</name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>LangOpts</name><argument_list>(<argument><expr><name>LangOpts</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>PPRec</name><argument_list>(<argument>PPRec</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isCommitable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsCommitable</name></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><name>bool</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>afterToken</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>insertAfterToken</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>insert</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>beforePreviousInsertions</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>insertBefore</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>insert</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>insertFromRange</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>afterToken</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>insertWrap</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>after</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>replaceWithInner</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>CharSourceRange</name></type> <name>innerRange</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>replaceText</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>,
<parameter><decl><type><name>StringRef</name></type> <name>replacementText</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>insertFromRange</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>TokenRange</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>afterToken</name> <init>= <expr><name>false</name></expr></init></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>insertFromRange</name><argument_list>(<argument><expr><name>loc</name></expr></argument>, <argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>TokenRange</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>afterToken</name></expr></argument>, <argument><expr><name>beforePreviousInsertions</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>insertWrap</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>TokenRange</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>insertWrap</name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>TokenRange</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>TokenRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>remove</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>TokenRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>TokenRange</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>replace</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>TokenRange</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>replaceWithInner</name><parameter_list>(<parameter><decl><type><name>SourceRange</name></type> <name>TokenRange</name></decl></parameter>, <parameter><decl><type><name>SourceRange</name></type> <name>TokenInnerRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>replaceWithInner</name><argument_list>(<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>TokenRange</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>TokenInnerRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>using</name></type> <name>edit_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Edit</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>edit_iterator</name> <macro><name>edit_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>CachedEdits</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>edit_iterator</name> <macro><name>edit_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>CachedEdits</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<label><name>private</name>:</label>
<function_decl><type><name>void</name></type> <name>addInsert</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>,
<parameter><decl><type><name>FileOffset</name></type> <name>Offs</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addInsertFromRange</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>Offs</name></decl></parameter>,
<parameter><decl><type><name>FileOffset</name></type> <name>RangeOffs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>RangeLen</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>addRemove</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>Offs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>Len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>canInsert</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name> <modifier>&amp;</modifier></type><name>Offset</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>canInsertAfterToken</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name> <modifier>&amp;</modifier></type><name>Offset</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name> <modifier>&amp;</modifier></type><name>AfterLoc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>canInsertInOffset</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>OrigLoc</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name></type> <name>Offs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>canRemoveRange</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>FileOffset</name> <modifier>&amp;</modifier></type><name>Offs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>canReplaceText</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>loc</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>,
<parameter><decl><type><name>FileOffset</name> <modifier>&amp;</modifier></type><name>Offs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>&amp;</modifier></type><name>Len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>commitInsert</name><parameter_list>(<parameter><decl><type><name>FileOffset</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>text</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>beforePreviousInsertions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>commitRemove</name><parameter_list>(<parameter><decl><type><name>FileOffset</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>bool</name></type> <name>isAtStartOfMacroExpansion</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>loc</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <operator>*</operator><name>MacroBegin</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isAtEndOfMacroExpansion</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>loc</name></expr></argument>,
<argument><expr><name>SourceLocation</name> <operator>*</operator><name>MacroEnd</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
