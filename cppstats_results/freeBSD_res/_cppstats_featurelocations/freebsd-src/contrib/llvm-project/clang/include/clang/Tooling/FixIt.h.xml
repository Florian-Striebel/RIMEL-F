<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/FixIt.h">

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_FIXIT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_FIXIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>fixit</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>
<function_decl><type><name>StringRef</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><name>CharSourceRange</name></type> <name>Range</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>inline</specifier> <name>CharSourceRange</name></type> <name>getSourceRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceRange</name> <modifier>&amp;</modifier></type><name>Range</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>Range</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>CharSourceRange</name></type> <name>getSourceRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceLocation</name> <modifier>&amp;</modifier></type><name>Loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>CharSourceRange</name></type> <name>getSourceRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>CharSourceRange</name><operator>::</operator><call><name>getTokenRange</name><argument_list>(<argument><expr><call><name><name>Node</name><operator>.</operator><name>getSourceRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>StringRef</name></type> <name>getText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>internal</name><operator>::</operator><call><name>getText</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name>getSourceRange</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <name>FixItHint</name></type> <name>createRemoval</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>FixItHint</name><operator>::</operator><call><name>CreateRemoval</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name>getSourceRange</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>D</name></expr></argument>, <argument><expr><name>typename</name> <name>S</name></expr></argument>&gt;</argument_list></name>
<name>FixItHint</name></type> <name>createReplacement</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>D</name> <modifier>&amp;</modifier></type><name>Destination</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>S</name> <modifier>&amp;</modifier></type><name>Source</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>FixItHint</name><operator>::</operator><call><name>CreateReplacement</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name>getSourceRange</name><argument_list>(<argument><expr><name>Destination</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>getText</name><argument_list>(<argument><expr><name>Source</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>D</name></expr></argument>&gt;</argument_list></name>
<name>FixItHint</name></type> <name>createReplacement</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>D</name> <modifier>&amp;</modifier></type><name>Destination</name></decl></parameter>, <parameter><decl><type><name>StringRef</name></type> <name>Source</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>FixItHint</name><operator>::</operator><call><name>CreateReplacement</name><argument_list>(<argument><expr><name>internal</name><operator>::</operator><call><name>getSourceRange</name><argument_list>(<argument><expr><name>Destination</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>Source</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
