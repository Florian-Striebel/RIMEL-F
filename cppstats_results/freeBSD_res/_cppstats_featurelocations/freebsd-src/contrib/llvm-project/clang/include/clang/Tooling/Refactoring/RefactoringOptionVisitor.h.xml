<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptionVisitor.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_OPTION_VISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_REFACTOR_REFACTORING_OPTION_VISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>RefactoringOption</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>RefactoringOptionVisitor</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>RefactoringOptionVisitor</name><argument_list>()</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <call><name>visit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>RefactoringOption</name> <operator>&amp;</operator><name>Opt</name></expr></argument>,
<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>Value</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>traits</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>internal</name> <block>{<block_content>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>HasHandle</name> <block>{
<expr><name>private</name><operator>:</operator>
<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ClassT</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>auto</name> <call><name>check</name><argument_list>(<argument><expr><name>ClassT</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>-&gt;</operator> <name>typename</name> <name>std</name><operator>::</operator><name>is_same</name><operator>&lt;</operator>
<call><name>decltype</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringOptionVisitor</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>visit</name><argument_list>(
<argument><expr><name>std</name><operator>::</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringOption</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>std</name><operator>::</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
<expr><name>void</name><operator>&gt;</operator><operator>::</operator><name>type</name></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <name>std</name><operator>::</operator><name>false_type</name> <call><name>check</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>Type</name> <operator>=</operator> <call><name>decltype</name><argument_list>(<argument><expr><call><name><name>check</name><argument_list type="generic">&lt;<argument><expr><name>RefactoringOptionVisitor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>IsValidOptionType</name> <range>: <expr><name>internal</name><operator>::</operator><name><name>HasHandle</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Type</name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
