<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Visibility.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_VISIBILITY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_VISIBILITY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Linkage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>











<enum>enum <name>Visibility</name> <block>{


<decl><name>HiddenVisibility</name></decl>,




<decl><name>ProtectedVisibility</name></decl>,



<decl><name>DefaultVisibility</name></decl>
}</block>;</enum>

<function><type><specifier>inline</specifier> <name>Visibility</name></type> <name>minVisibility</name><parameter_list>(<parameter><decl><type><name>Visibility</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>Visibility</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>L</name> <operator>&lt;</operator> <name>R</name></expr> ?</condition><then> <expr><name>L</name></expr> </then><else>: <expr><name>R</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>LinkageInfo</name> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>linkage_</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>visibility_</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>explicit_</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>setVisibility</name><parameter_list>(<parameter><decl><type><name>Visibility</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>visibility_</name> <operator>=</operator> <name>V</name></expr>;</expr_stmt> <expr_stmt><expr><name>explicit_</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt> </block_content>}</block></function>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>LinkageInfo</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>linkage_</name><argument_list>(<argument><expr><name>ExternalLinkage</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>visibility_</name><argument_list>(<argument><expr><name>DefaultVisibility</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>explicit_</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>LinkageInfo</name><argument_list>(<argument>Linkage L</argument>, <argument>Visibility V</argument>, <argument>bool E</argument>)</argument_list></macro>
<operator>:</operator> <call><name>linkage_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>visibility_</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>explicit_</name><argument_list>(<argument>E</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getLinkage</name><argument_list>()</argument_list></call> <operator>==</operator> <name>L</name> <operator>&amp;&amp;</operator> <call><name>getVisibility</name><argument_list>()</argument_list></call> <operator>==</operator> <name>V</name> <operator>&amp;&amp;</operator>
<call><name>isVisibilityExplicit</name><argument_list>()</argument_list></call> <operator>==</operator> <name>E</name> <operator>&amp;&amp;</operator> <literal type="string">"Enum truncated!"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>LinkageInfo</name> <macro><name>external</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>LinkageInfo</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>LinkageInfo</name></type> <name>internal</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LinkageInfo</name><argument_list>(<argument><expr><name>InternalLinkage</name></expr></argument>, <argument><expr><name>DefaultVisibility</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>LinkageInfo</name></type> <name>uniqueExternal</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LinkageInfo</name><argument_list>(<argument><expr><name>UniqueExternalLinkage</name></expr></argument>, <argument><expr><name>DefaultVisibility</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>LinkageInfo</name></type> <name>none</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LinkageInfo</name><argument_list>(<argument><expr><name>NoLinkage</name></expr></argument>, <argument><expr><name>DefaultVisibility</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>LinkageInfo</name></type> <name>visible_none</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>LinkageInfo</name><argument_list>(<argument><expr><name>VisibleNoLinkage</name></expr></argument>, <argument><expr><name>DefaultVisibility</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>Linkage</name> <macro><name>getLinkage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Linkage</name><operator>)</operator><name>linkage_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Visibility</name> <macro><name>getVisibility</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>Visibility</name><operator>)</operator><name>visibility_</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isVisibilityExplicit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>explicit_</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setLinkage</name><parameter_list>(<parameter><decl><type><name>Linkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>linkage_</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>mergeLinkage</name><parameter_list>(<parameter><decl><type><name>Linkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>setLinkage</name><argument_list>(<argument><expr><call><name>minLinkage</name><argument_list>(<argument><expr><call><name>getLinkage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>mergeLinkage</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mergeLinkage</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getLinkage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mergeExternalVisibility</name><parameter_list>(<parameter><decl><type><name>Linkage</name></type> <name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Linkage</name></type> <name>ThisL</name> <init>= <expr><call><name>getLinkage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isExternallyVisible</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ThisL</name> <operator>==</operator> <name>VisibleNoLinkage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ThisL</name> <operator>=</operator> <name>NoLinkage</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ThisL</name> <operator>==</operator> <name>ExternalLinkage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ThisL</name> <operator>=</operator> <name>UniqueExternalLinkage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>setLinkage</name><argument_list>(<argument><expr><name>ThisL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>mergeExternalVisibility</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name></type> <name>Other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mergeExternalVisibility</name><argument_list>(<argument><expr><call><name><name>Other</name><operator>.</operator><name>getLinkage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>mergeVisibility</name><parameter_list>(<parameter><decl><type><name>Visibility</name></type> <name>newVis</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>newExplicit</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Visibility</name></type> <name>oldVis</name> <init>= <expr><call><name>getVisibility</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>oldVis</name> <operator>&lt;</operator> <name>newVis</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>oldVis</name> <operator>==</operator> <name>newVis</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>newExplicit</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>setVisibility</name><argument_list>(<argument><expr><name>newVis</name></expr></argument>, <argument><expr><name>newExplicit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>mergeVisibility</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mergeVisibility</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>isVisibilityExplicit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mergeLinkage</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mergeVisibility</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>mergeMaybeWithVisibility</name><parameter_list>(<parameter><decl><type><name>LinkageInfo</name></type> <name>other</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>withVis</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>mergeLinkage</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>withVis</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mergeVisibility</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
