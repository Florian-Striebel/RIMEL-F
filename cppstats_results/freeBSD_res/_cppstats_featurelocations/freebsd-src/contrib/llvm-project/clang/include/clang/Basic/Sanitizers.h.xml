<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/Sanitizers.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_SANITIZERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_SANITIZERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Transforms/Instrumentation/AddressSanitizerOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>hash_code</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SanitizerMask</name> <block>{<block_content>





<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>kNumElem</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>maskLoToHigh</name><index>[<expr><name>kNumElem</name></expr>]</index></name><block>{<block_content/>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>kNumBits</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>decltype</name><argument_list>(<argument><expr><name>maskLoToHigh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name></type> <name>kNumBitElem</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><call><name>decltype</name><argument_list>(<argument><expr><name><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<macro><name>constexpr</name></macro> <macro><name>SanitizerMask</name><argument_list>(<argument>uint64_t mask1</argument>, <argument>uint64_t mask2</argument>)</argument_list></macro>
: <macro><name>maskLoToHigh</name></macro><block>{<block_content><expr><name>mask1</name></expr><operator>,</operator> <expr><name>mask2</name></expr></block_content>}</block> <block>{<block_content/>}</block>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SanitizerMask</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>checkBitPos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>Pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name>Pos</name> <operator>&lt;</operator> <name>kNumBits</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>constexpr</name> <name>SanitizerMask</name></type> <name>bitPosToMask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>Pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Pos</name> <operator>&lt;</operator> <name>kNumBitElem</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>Pos</name> <operator>%</operator> <name>kNumBitElem</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Pos</name> <operator>&gt;=</operator> <name>kNumBitElem</name> <operator>&amp;&amp;</operator> <name>Pos</name> <operator>&lt;</operator> <operator>(</operator><name>kNumBitElem</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>
?</condition><then> <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>Pos</name> <operator>%</operator> <name>kNumBitElem</name><operator>)</operator></expr>
</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>SanitizerMask</name><argument_list>(<argument><expr><name>mask1</name></expr></argument>, <argument><expr><name>mask2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>unsigned</name> <macro><name>countPopulation</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>flipAllBits</name><parameter_list>()</parameter_list> <block>{<block_content>
<for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>Val</name> <operator>:</operator> <name>maskLoToHigh</name></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>Val</name> <operator>=</operator> <operator>~</operator><name>Val</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isPowerOf2</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>countPopulation</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>hash_value</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>constexpr</name> <name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>SanitizerMask</name> <operator>&amp;</operator><name>V</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>V</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>V</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SanitizerMask</name> <operator>&amp;</operator><name>operator</name><operator>&amp;=</operator><operator>(</operator><specifier>const</specifier> <name>SanitizerMask</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>kNumElem</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>maskLoToHigh</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;=</operator> <name><name>RHS</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>SanitizerMask</name> <operator>&amp;</operator><name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>SanitizerMask</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>kNumElem</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>maskLoToHigh</name><index>[<expr><name>k</name></expr>]</index></name> <operator>|=</operator> <name><name>RHS</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name>constexpr</name> <name>bool</name> <name>operator</name><operator>!</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>bool</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>constexpr</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>SanitizerMask</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator> <operator>==</operator> <name>RHS</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>constexpr</name> <specifier>inline</specifier> <name>SanitizerMask</name> <name>operator</name><operator>~</operator><operator>(</operator><name>SanitizerMask</name> <name>v</name><operator>)</operator> <block>{
<return>return <expr><call><name>SanitizerMask</name><argument_list>(<argument><expr><operator>~</operator><name><name>v</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>~</operator><name><name>v</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>friend</name> <name>constexpr</name> <specifier>inline</specifier> <name>SanitizerMask</name> <name>operator</name></type>&amp;(<name>SanitizerMask</name> <name>a</name>,
const <name>SanitizerMask</name> &amp;b</function>) <block>{<block_content>
<return>return <expr><call><name>SanitizerMask</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>a</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>b</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<expr_stmt><expr><name>friend</name> <name>constexpr</name> <specifier>inline</specifier> <name>SanitizerMask</name> <name>operator</name><operator>|</operator><operator>(</operator><name>SanitizerMask</name> <name>a</name><operator>,</operator>
<specifier>const</specifier> <name>SanitizerMask</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <block>{
<return>return <expr><call><name>SanitizerMask</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>a</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>b</name><operator>.</operator><name>maskLoToHigh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
};


<expr_stmt><expr><name>llvm</name><operator>::</operator><name>hash_code</name> <call><name>hash_value</name><argument_list>(<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>SanitizerMask</name> <operator>&amp;</operator><name>Arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<struct>struct <name>SanitizerKind</name> <block>{


<enum>enum <name>SanitizerOrdinal</name> : <type><name>uint64_t</name></type> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SO_##ID,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_GROUP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>ALIAS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SO_##ID##Group,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Sanitizers.def"</cpp:file></cpp:include>
<decl><name>SO_Count</name></decl>
}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static constexpr SanitizerMask ID = SanitizerMask::bitPosToMask(SO_##ID); static_assert(SanitizerMask::checkBitPos(SO_##ID), "Bit position too big.");</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITIZER_GROUP</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>ALIAS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static constexpr SanitizerMask ID = SanitizerMask(ALIAS); static constexpr SanitizerMask ID##Group = SanitizerMask::bitPosToMask(SO_##ID##Group); static_assert(SanitizerMask::checkBitPos(SO_##ID##Group), "Bit position too big.");</cpp:value></cpp:define>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/Sanitizers.def"</cpp:file></cpp:include>
}</block>;</struct>

<struct>struct <name>SanitizerSet</name> <block>{

<decl_stmt><decl><type><name>bool</name></type> <name>has</name><argument_list>(<argument><expr><name>SanitizerMask</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>K</name><operator>.</operator><name>isPowerOf2</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Has to be a single sanitizer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Mask</name> <operator>&amp;</operator> <name>K</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>hasOneOf</name><argument_list>(<argument><expr><name>SanitizerMask</name> <name>K</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Mask</name> <operator>&amp;</operator> <name>K</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>


<function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>SanitizerMask</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Value</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>K</name><operator>.</operator><name>isPowerOf2</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Has to be a single sanitizer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Mask</name> <operator>=</operator> <ternary><condition><expr><name>Value</name></expr> ?</condition><then> <expr><operator>(</operator><name>Mask</name> <operator>|</operator> <name>K</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>Mask</name> <operator>&amp;</operator> <operator>~</operator><name>K</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>SanitizerMask</name></type> <name>K</name> <init>= <expr><name>SanitizerKind</name><operator>::</operator><name>All</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Mask</name> <operator>&amp;=</operator> <operator>~</operator><name>K</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>Mask</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>SanitizerMask</name></type> <name>Mask</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><name>SanitizerMask</name></type> <name>parseSanitizerValue</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>AllowGroups</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>void</name></type> <name>serializeSanitizerSet</name><parameter_list>(<parameter><decl><type><name>SanitizerSet</name></type> <name>Set</name></decl></parameter>,
<parameter><decl><type><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>Values</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>SanitizerMask</name></type> <name>expandSanitizerGroups</name><parameter_list>(<parameter><decl><type><name>SanitizerMask</name></type> <name>Kinds</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>inline</specifier> <name>SanitizerMask</name></type> <name>getPPTransparentSanitizers</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><name>SanitizerKind</name><operator>::</operator><name>CFI</name> <operator>|</operator> <name>SanitizerKind</name><operator>::</operator><name>Integer</name> <operator>|</operator>
<name>SanitizerKind</name><operator>::</operator><name>ImplicitConversion</name> <operator>|</operator> <name>SanitizerKind</name><operator>::</operator><name>Nullability</name> <operator>|</operator>
<name>SanitizerKind</name><operator>::</operator><name>Undefined</name> <operator>|</operator> <name>SanitizerKind</name><operator>::</operator><name>FloatDivideByZero</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>StringRef</name></type> <name>AsanDtorKindToString</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>AsanDtorKind</name> <name>kind</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>AsanDtorKind</name> <macro><name>AsanDtorKindFromString</name><argument_list>(<argument>StringRef kind</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>StringRef</name></type> <name>AsanDetectStackUseAfterReturnModeToString</name><argument_list>(
<argument><expr><name>llvm</name><operator>::</operator><name>AsanDetectStackUseAfterReturnMode</name> <name>mode</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>AsanDetectStackUseAfterReturnMode</name>
<macro><name>AsanDetectStackUseAfterReturnModeFromString</name><argument_list>(<argument>StringRef modeStr</argument>)</argument_list></macro></expr>;</expr_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
