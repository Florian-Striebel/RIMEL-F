<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/DeclContextInternals.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_DECLCONTEXTINTERNALS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_DECLCONTEXTINTERNALS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclarationName.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerUnion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DependentDiagnostic</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>StoredDeclsList</name> <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>Decls</name> <init>= <expr><name>DeclListNode</name><operator>::</operator><name>Decls</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>DeclsAndHasExternalTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>Decls</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>DeclsAndHasExternalTy</name></type> <name>Data</name></decl>;</decl_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Fn</name></expr></argument>&gt;</argument_list></name>
<name>void</name></type> <name>erase_if</name><parameter_list>(<parameter><decl><type><name>Fn</name></type> <name>ShouldErase</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>Decls</name></type> <name>List</name> <init>= <expr><call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>List</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name> <init>= <expr><call><name>getASTContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>DeclListNode</name><operator>::</operator><name>Decls</name> <name>NewHead</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DeclListNode</name><operator>::</operator><name>Decls</name> <operator>*</operator><name>NewLast</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DeclListNode</name><operator>::</operator><name>Decls</name> <operator>*</operator><name>NewTail</name> <operator>=</operator> <operator>&amp;</operator><name>NewHead</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ShouldErase</name><argument_list>(<argument><expr><operator>*</operator><name>DeclListNode</name><operator>::</operator><call><name>iterator</name><argument_list>(<argument><expr><name>List</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NewLast</name> <operator>=</operator> <name>NewTail</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>NewTail</name> <operator>=</operator> <name>List</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Node</name> <operator>=</operator> <name><name>List</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>DeclListNode</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>NewTail</name> <operator>=</operator> <operator>&amp;</operator><name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>List</name> <operator>=</operator> <name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>N</name> <init>= <expr><name><name>List</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>DeclListNode</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name>List</name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>Rest</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>DeallocateDeclListNode</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>NewLast</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><name><name>NewLast</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>DeclListNode</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>NewLast</name> <operator>=</operator> <name><name>Node</name><operator>-&gt;</operator><name>D</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>DeallocateDeclListNode</name></name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>NewHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><call><name>find_if</name><argument_list>(<argument><expr><call><name>getLookupResult</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ShouldErase</name></expr></argument>)</argument_list></call> <operator>==</operator>
<call><name>getLookupResult</name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Still exists!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>erase_if</name><argument_list>(<argument><expr><index>[<expr><name>ND</name></expr>]</index><operator>(</operator><name>NamedDecl</name> <operator>*</operator><name>D</name><operator>)</operator> <block>{ <return>return <expr><name>D</name> <operator>==</operator> <name>ND</name></expr>;</return> }</block></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
</block_content>}</block></decl></decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>StoredDeclsList</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>StoredDeclsList</name><argument_list>(<argument><expr><name>StoredDeclsList</name> <operator>&amp;&amp;</operator><name>RHS</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Data</name><argument_list>(<argument>RHS.Data</argument>)</argument_list></macro> <block>{
<expr><call><name><name>RHS</name><operator>.</operator><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>RHS</name><operator>.</operator><name>Data</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>MaybeDeallocList</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<name>ASTContext</name> <operator>&amp;</operator><name>C</name> <operator>=</operator> <call><name>getASTContext</name><argument_list>()</argument_list></call></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>Decls</name></type> <name>List</name> <init>= <expr><call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>ToDealloc</name> <init>= <expr><name><name>List</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>DeclListNode</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>)</condition> <block>{<block_content>
<expr_stmt><expr><name>List</name> <operator>=</operator> <name><name>ToDealloc</name><operator>-&gt;</operator><name>Rest</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>DeallocateDeclListNode</name></name><argument_list>(<argument><expr><name>ToDealloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>StoredDeclsList</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>MaybeDeallocList</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>StoredDeclsList</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>StoredDeclsList</name> <operator>&amp;&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<expr><call><name>MaybeDeallocList</name><argument_list>()</argument_list></call></expr>;

<expr><name>Data</name> <operator>=</operator> <name><name>RHS</name><operator>.</operator><name>Data</name></name></expr>;
<expr><call><name><name>RHS</name><operator>.</operator><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>RHS</name><operator>.</operator><name>Data</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>getASTContext</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"No ASTContext."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>ND</name> <init>= <expr><call><name>getAsDecl</name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>ND</name><operator>-&gt;</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>getAsList</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>D</name><operator>-&gt;</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><name>DeclsAndHasExternalTy</name> <macro><name>getAsListAndHasExternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Data</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>NamedDecl</name> <operator>*</operator><macro><name>getAsDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getAsListAndHasExternal</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPointer</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>NamedDecl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>DeclListNode</name> <operator>*</operator><macro><name>getAsList</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getAsListAndHasExternal</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPointer</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>dyn_cast</name><argument_list type="generic">&lt;<argument><expr><name>DeclListNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasExternalDecls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getAsListAndHasExternal</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setHasExternalDecls</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"removing from empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>removeExternalDecls</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>erase_if</name><argument_list>(<argument><expr><index>[]</index><operator>(</operator><name>NamedDecl</name> <operator>*</operator><name>ND</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>ND</name><operator>-&gt;</operator><name>isFromASTFile</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>


<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

void <macro><name>replaceExternalDecls</name><argument_list>(<argument>ArrayRef&lt;NamedDecl*&gt; Decls</argument>)</argument_list></macro> <block>{<block_content>


<expr_stmt><expr><call><name>erase_if</name><argument_list>(<argument><expr><index>[<expr><name>Decls</name></expr>]</index><operator>(</operator><name>NamedDecl</name> <operator>*</operator><name>ND</name><operator>)</operator> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>ND</name><operator>-&gt;</operator><name>isFromASTFile</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr></argument>
<for>for <control>(<init><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name> <range>: <expr><name>Decls</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>D</name><operator>-&gt;</operator><name>declarationReplaces</name></name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></argument_list></call></expr></expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block>)<empty_stmt>;</empty_stmt>


<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>Decls</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name> <init>= <expr><call><name><name>Decls</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getASTContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>DeclListNode</name><operator>::</operator><name>Decls</name> <name>DeclsAsList</name> <operator>=</operator> <call><name><name>Decls</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>size_t</name></type> <name>I</name> <init>= <expr><call><name><name>Decls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>I</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><call><name><name>C</name><operator>.</operator><name>AllocateDeclListNode</name></name><argument_list>(<argument><expr><name><name>Decls</name><index>[<expr><name>I</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name> <operator>=</operator> <name>DeclsAsList</name></expr>;</expr_stmt>
<expr_stmt><expr><name>DeclsAsList</name> <operator>=</operator> <name>Node</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>DeclListNode</name><operator>::</operator><name>Decls</name> <name>Head</name> <operator>=</operator> <call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>Head</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>DeclsAsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>DeclListNode</name><operator>::</operator><name>Decls</name> <operator>*</operator><name>Tail</name> <operator>=</operator> <operator>&amp;</operator><name>Head</name></expr>;</expr_stmt>
<while>while <condition>(<decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><name><name>Tail</name><operator>-&gt;</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>DeclListNode</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Tail</name> <operator>=</operator> <operator>&amp;</operator><name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name></expr>;</expr_stmt></block_content></block></while>


<decl_stmt><decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><call><name><name>C</name><operator>.</operator><name>AllocateDeclListNode</name></name><argument_list>(<argument><expr><name><name>Tail</name><operator>-&gt;</operator><name>get</name></name><operator>&lt;</operator><name>NamedDecl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name> <operator>=</operator> <name>DeclsAsList</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>Tail</name> <operator>=</operator> <name>Node</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>Head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}


DeclContext<expr_stmt><expr><operator>::</operator><name>lookup_result</name> <macro><name>getLookupResult</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>DeclContext</name><operator>::</operator><call><name>lookup_result</name><argument_list>(<argument><expr><call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function><type><name>void</name></type> <name>addOrReplaceDecl</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>IsKnownNewer</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>OldD</name> <init>= <expr><call><name>getAsDecl</name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>D</name><operator>-&gt;</operator><name>declarationReplaces</name></name><argument_list>(<argument><expr><name>OldD</name></expr></argument>, <argument><expr><name>IsKnownNewer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name> <init>= <expr><call><name><name>D</name><operator>-&gt;</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><call><name><name>C</name><operator>.</operator><name>AllocateDeclListNode</name></name><argument_list>(<argument><expr><name>OldD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name> <operator>=</operator> <name>D</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>llvm</name><operator>::</operator><call><name>is_contained</name><argument_list>(<argument><expr><call><name>getLookupResult</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Already exists!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>N</name> <init>= <expr><call><name>getAsList</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition>;</condition>
<incr><expr><name>N</name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>Rest</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>DeclListNode</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>D</name><operator>-&gt;</operator><name>declarationReplaces</name></name><argument_list>(<argument><expr><name><name>N</name><operator>-&gt;</operator><name>D</name></name></expr></argument>, <argument><expr><name>IsKnownNewer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <name>D</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>ND</name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>Rest</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>NamedDecl</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name><name>D</name><operator>-&gt;</operator><name>declarationReplaces</name></name><argument_list>(<argument><expr><name>ND</name></expr></argument>, <argument><expr><name>IsKnownNewer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>Rest</name></name> <operator>=</operator> <name>D</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name> <init>= <expr><call><name><name>D</name><operator>-&gt;</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><call><name><name>C</name><operator>.</operator><name>AllocateDeclListNode</name></name><argument_list>(<argument><expr><name>ND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>Rest</name></name> <operator>=</operator> <name>Node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name> <operator>=</operator> <name>D</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>prependDeclNoReplace</name><parameter_list>(<parameter><decl><type><name>NamedDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>C</name> <init>= <expr><call><name><name>D</name><operator>-&gt;</operator><name>getASTContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DeclListNode</name> <modifier>*</modifier></type><name>Node</name> <init>= <expr><call><name><name>C</name><operator>.</operator><name>AllocateDeclListNode</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name> <operator>=</operator> <call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Data</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>LLVM_DUMP_METHOD</name> <name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>Decls</name> <name>D</name> <operator>=</operator> <call><name><name>Data</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>D</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"&lt;null&gt;\n"</literal></expr>;</expr_stmt>
<return>return;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>Node</name> <operator>=</operator> <name><name>D</name><operator>.</operator><name>dyn_cast</name></name><operator>&lt;</operator><name>DeclListNode</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'['</literal> <operator>&lt;&lt;</operator> <name><name>Node</name><operator>-&gt;</operator><name>D</name></name> <operator>&lt;&lt;</operator> <literal type="string">"] -&gt; "</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>D</name> <operator>=</operator> <name><name>Node</name><operator>-&gt;</operator><name>Rest</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><call><name>errs</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'['</literal> <operator>&lt;&lt;</operator> <name><name>D</name><operator>.</operator><name>get</name></name><operator>&lt;</operator><name>NamedDecl</name><operator>*</operator><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">"]\n"</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
}
}<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>StoredDeclsMap</name>
<range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name><name>SmallDenseMap</name><argument_list type="generic">&lt;<argument><expr><name>DeclarationName</name></expr></argument>, <argument><expr><name>StoredDeclsList</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name>ASTContext</name></expr>;
<expr><name>friend</name> <name>class</name> <name>DeclContext</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>StoredDeclsMap</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Previous</name></expr>;
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <name>void</name> <macro><name>DestroyAll</name><argument_list>(<argument>StoredDeclsMap *Map</argument>, <argument>bool Dependent</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DependentStoredDeclsMap</name> <range>: <expr><name>public</name> <name>StoredDeclsMap</name> <block>{
<expr><name>friend</name> <name>class</name> <name>DeclContext</name></expr>;
<expr><name>friend</name> <name>class</name> <name>DependentDiagnostic</name></expr>;

<expr><name>DependentDiagnostic</name> <operator>*</operator><name>FirstDiagnostic</name> <operator>=</operator> <name>nullptr</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>DependentStoredDeclsMap</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
}</block></expr></range></decl>;</decl_stmt>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
