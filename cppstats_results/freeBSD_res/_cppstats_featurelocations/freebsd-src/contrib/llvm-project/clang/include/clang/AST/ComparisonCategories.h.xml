<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ComparisonCategories.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_COMPARISONCATEGORIES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_COMPARISONCATEGORIES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/APSInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>StringRef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>APSInt</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VarDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CXXRecordDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NamespaceDecl</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ComparisonCategoryType</name> <range>: <expr><name>unsigned</name> <name>char</name> <block>{
<expr><name>PartialOrdering</name></expr>,
<expr><name>WeakOrdering</name></expr>,
<expr><name>StrongOrdering</name></expr>,
<expr><name>First</name> <operator>=</operator> <name>PartialOrdering</name></expr>,
<expr><name>Last</name> <operator>=</operator> <name>StrongOrdering</name></expr>
}</block></expr></range></decl>;</decl_stmt>



<function><type><specifier>inline</specifier> <name>ComparisonCategoryType</name></type> <name>commonComparisonType</name><parameter_list>(<parameter><decl><type><name>ComparisonCategoryType</name></type> <name>A</name></decl></parameter>,
<parameter><decl><type><name>ComparisonCategoryType</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>A</name> <operator>&lt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>



<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ComparisonCategoryType</name></expr></argument>&gt;</argument_list></name></type> <name>getComparisonCategoryForBuiltinCmp</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>T</name></decl></parameter>)</parameter_list>;</function_decl>




<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>ComparisonCategoryResult</name> <range>: <expr><name>unsigned</name> <name>char</name> <block>{
<expr><name>Equal</name></expr>,
<expr><name>Equivalent</name></expr>,
<expr><name>Less</name></expr>,
<expr><name>Greater</name></expr>,
<expr><name>Unordered</name></expr>,
<expr><name>Last</name> <operator>=</operator> <name>Unordered</name></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ComparisonCategoryInfo</name> <block>{<block_content>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ComparisonCategories</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Sema</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ComparisonCategoryInfo</name><argument_list>(<argument>const ASTContext &amp;Ctx</argument>, <argument>CXXRecordDecl *RD</argument>,
<argument>ComparisonCategoryType Kind</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Ctx</name><argument_list>(<argument><expr><name>Ctx</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Record</name><argument_list>(<argument><expr><name>RD</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Kind</name><argument_list>(<argument>Kind</argument>)</argument_list></macro> <expr><block>{}</block>

struct <name>ValueInfo</name> <block>{
<expr><name>ComparisonCategoryResult</name> <name>Kind</name></expr>;
<expr><name>VarDecl</name> <operator>*</operator><name>VD</name></expr>;

<macro><name>ValueInfo</name><argument_list>(<argument>ComparisonCategoryResult Kind</argument>, <argument>VarDecl *VD</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>, <macro><name>VD</name><argument_list>(<argument>VD</argument>)</argument_list></macro> <expr><block>{}</block>



<name>bool</name> <macro><name>hasValidIntValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>llvm</name><operator>::</operator><name>APSInt</name> <macro><name>getIntValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;</expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>



<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;
<argument><expr><name>ValueInfo</name></expr></argument>, <argument><expr><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><operator>(</operator><name>ComparisonCategoryResult</name><operator>::</operator><name>Last</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name>
<name>Objects</name></expr>;</expr_stmt>






<decl_stmt><decl><type><name>ValueInfo</name> <modifier>*</modifier></type><name>lookupValueInfo</name><argument_list>(<argument><expr><name>ComparisonCategoryResult</name> <name>ValueKind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>public</name>:</label>



<decl_stmt><decl><type><name>CXXRecordDecl</name> <modifier>*</modifier></type><name>Record</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ComparisonCategoryType</name></type> <name>Kind</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>QualType</name> <macro><name>getType</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ValueInfo</name> <modifier>*</modifier></type><name>getValueInfo</name><argument_list>(<argument><expr><name>ComparisonCategoryResult</name> <name>ValueKind</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>ValueInfo</name> <modifier>*</modifier></type><name>Info</name> <init>= <expr><call><name>lookupValueInfo</name><argument_list>(<argument><expr><name>ValueKind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Info</name> <operator>&amp;&amp;</operator>
<literal type="string">"comparison category does not contain the specified result kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Info</name><operator>-&gt;</operator><name>hasValidIntValue</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"couldn't determine the integer constant for this value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Info</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isStrong</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>using</name> <name>CCK</name> <operator>=</operator> <name>ComparisonCategoryType</name></expr>;
<return>return <expr><name>Kind</name> <operator>==</operator> <name>CCK</name><operator>::</operator><name>StrongOrdering</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isPartial</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>using</name> <name>CCK</name> <operator>=</operator> <name>ComparisonCategoryType</name></expr>;
<return>return <expr><name>Kind</name> <operator>==</operator> <name>CCK</name><operator>::</operator><name>PartialOrdering</name></expr>;</return>
}</block></expr></expr_stmt>




<decl_stmt><decl><type><name>ComparisonCategoryResult</name></type> <name>makeWeakResult</name><argument_list>(<argument><expr><name>ComparisonCategoryResult</name> <name>Res</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><name>using</name></type> <name>CCR</name> <init>= <expr><name>ComparisonCategoryResult</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isStrong</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Res</name> <operator>==</operator> <name>CCR</name><operator>::</operator><name>Equal</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CCR</name><operator>::</operator><name>Equivalent</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>Res</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>ValueInfo</name> <operator>*</operator><macro><name>getEqualOrEquiv</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getValueInfo</name><argument_list>(<argument><expr><call><name>makeWeakResult</name><argument_list>(<argument><expr><name>ComparisonCategoryResult</name><operator>::</operator><name>Equal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>ValueInfo</name> <operator>*</operator><macro><name>getLess</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getValueInfo</name><argument_list>(<argument><expr><name>ComparisonCategoryResult</name><operator>::</operator><name>Less</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>ValueInfo</name> <operator>*</operator><macro><name>getGreater</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getValueInfo</name><argument_list>(<argument><expr><name>ComparisonCategoryResult</name><operator>::</operator><name>Greater</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>ValueInfo</name> <operator>*</operator><macro><name>getUnordered</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getValueInfo</name><argument_list>(<argument><expr><name>ComparisonCategoryResult</name><operator>::</operator><name>Unordered</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ComparisonCategories</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>StringRef</name></type> <name>getCategoryString</name><parameter_list>(<parameter><decl><type><name>ComparisonCategoryType</name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>StringRef</name></type> <name>getResultString</name><parameter_list>(<parameter><decl><type><name>ComparisonCategoryResult</name></type> <name>Kind</name></decl></parameter>)</parameter_list>;</function_decl>



<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ComparisonCategoryResult</name></expr></argument>&gt;</argument_list></name>
<macro><name>getPossibleResultsForType</name><argument_list>(<argument>ComparisonCategoryType Type</argument>)</argument_list></macro></expr>;</expr_stmt>



<decl_stmt><decl><type><specifier>const</specifier> <name>ComparisonCategoryInfo</name> <modifier>&amp;</modifier></type><name>getInfo</name><argument_list>(<argument><expr><name>ComparisonCategoryType</name> <name>Kind</name></expr></argument>)</argument_list> const <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ComparisonCategoryInfo</name> <modifier>*</modifier></type><name>Result</name> <init>= <expr><call><name>lookupInfo</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Result</name> <operator>!=</operator> <name>nullptr</name> <operator>&amp;&amp;</operator>
<literal type="string">"information for specified comparison category has not been built"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>Result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>






<decl_stmt><decl><type><specifier>const</specifier> <name>ComparisonCategoryInfo</name> <modifier>&amp;</modifier></type><name>getInfoForType</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>public</name>:</label>




<decl_stmt><decl><type><specifier>const</specifier> <name>ComparisonCategoryInfo</name> <modifier>*</modifier></type><name>lookupInfo</name><argument_list>(<argument><expr><name>ComparisonCategoryType</name> <name>Kind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<function><type><name>ComparisonCategoryInfo</name> <modifier>*</modifier></type><name>lookupInfo</name><parameter_list>(<parameter><decl><type><name>ComparisonCategoryType</name></type> <name>Kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier></type><name>This</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>ComparisonCategoryInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>This</name><operator>.</operator><name>lookupInfo</name></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ComparisonCategoryInfo</name> <modifier>*</modifier></type><name>lookupInfoForType</name><argument_list>(<argument><expr><name>QualType</name> <name>Ty</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>

<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>ComparisonCategories</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Ctx</name><argument_list>(<argument>Ctx</argument>)</argument_list></macro> <block>{}</block>

<specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr>;</expr_stmt>



<expr_stmt><expr><name>mutable</name> <name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>ComparisonCategoryInfo</name></expr></argument>&gt;</argument_list></name> <name>Data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>NamespaceDecl</name> <modifier>*</modifier></type><name>StdNS</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
