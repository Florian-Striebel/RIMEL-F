<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/HeaderSearchOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_HEADERSEARCHOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_HEADERSEARCHOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/CachedHashString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Hashing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>frontend</name> <block>{<block_content>






<enum>enum <name>IncludeDirGroup</name> <block>{

<decl><name>Quoted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>Angled</name></decl>,


<decl><name>IndexHeaderMap</name></decl>,


<decl><name>System</name></decl>,


<decl><name>ExternCSystem</name></decl>,


<decl><name>CSystem</name></decl>,


<decl><name>CXXSystem</name></decl>,


<decl><name>ObjCSystem</name></decl>,


<decl><name>ObjCXXSystem</name></decl>,


<decl><name>After</name></decl>
}</block>;</enum>

</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>HeaderSearchOptions</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>Entry</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>frontend</name><operator>::</operator><name>IncludeDirGroup</name> <name>Group</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFramework</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>IgnoreSysRoot</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<macro><name>Entry</name><argument_list>(<argument>StringRef path</argument>, <argument>frontend::IncludeDirGroup group</argument>, <argument>bool isFramework</argument>,
<argument>bool ignoreSysRoot</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Group</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsFramework</name><argument_list>(<argument><expr><name>isFramework</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>IgnoreSysRoot</name><argument_list>(<argument>ignoreSysRoot</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>SystemHeaderPrefix</name> <block>{

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Prefix</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>IsSystemHeader</name></decl>;</decl_stmt>

<macro><name>SystemHeaderPrefix</name><argument_list>(<argument>StringRef Prefix</argument>, <argument>bool IsSystemHeader</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Prefix</name><argument_list>(<argument><expr><name>Prefix</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsSystemHeader</name><argument_list>(<argument>IsSystemHeader</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Sysroot</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Entry</name></expr></argument>&gt;</argument_list></name> <name>UserEntries</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SystemHeaderPrefix</name></expr></argument>&gt;</argument_list></name> <name>SystemHeaderPrefixes</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ResourceDir</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleCachePath</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleUserBuildPath</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>less</name><argument_list type="generic">&lt;&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>PrebuiltModuleFiles</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>PrebuiltModulePaths</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ModuleFormat</name></expr>;</expr_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>DisableModuleHash</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ImplicitModuleMaps</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>








<decl_stmt><decl><type><name>unsigned</name></type> <name>ModuleMapFileHomeIsCwd</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>EnablePrebuiltImplicitModules</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>








<decl_stmt><decl><type><name>unsigned</name></type> <name>ModuleCachePruneInterval</name> <init>= <expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>unsigned</name></type> <name>ModuleCachePruneAfter</name> <init>= <expr><literal type="number">31</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><name>uint64_t</name></type> <name>BuildSessionTimestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallSetVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>CachedHashString</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>ModulesIgnoreMacros</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>VFSOverlayFiles</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UseBuiltinIncludes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UseStandardSystemIncludes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UseStandardCXXIncludes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UseLibcxx</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>Verbose</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>unsigned</name></type> <name>ModulesValidateOncePerBuildSession</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ModulesValidateSystemHeaders</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>ValidateASTInputFilesContent</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UseDebugInfo</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ModulesValidateDiagnosticOptions</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ModulesHashContent</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>unsigned</name></type> <name>ModulesStrictContextHash</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<macro><name>HeaderSearchOptions</name><argument_list>(<argument>StringRef _Sysroot = <literal type="string">"/"</literal></argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Sysroot</name><argument_list>(<argument><expr><name>_Sysroot</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ModuleFormat</name><argument_list>(<argument><expr><literal type="string">"raw"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>DisableModuleHash</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ImplicitModuleMaps</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ModuleMapFileHomeIsCwd</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>EnablePrebuiltImplicitModules</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UseBuiltinIncludes</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UseStandardSystemIncludes</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UseStandardCXXIncludes</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UseLibcxx</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Verbose</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ModulesValidateOncePerBuildSession</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ModulesValidateSystemHeaders</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ValidateASTInputFilesContent</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UseDebugInfo</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ModulesValidateDiagnosticOptions</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ModulesHashContent</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>ModulesStrictContextHash</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <macro><name>AddPath</name><argument_list>(<argument>StringRef Path</argument>, <argument>frontend::IncludeDirGroup Group</argument>,
<argument>bool IsFramework</argument>, <argument>bool IgnoreSysRoot</argument>)</argument_list></macro> <block>{
<expr><call><name><name>UserEntries</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>Path</name></expr></argument>, <argument><expr><name>Group</name></expr></argument>, <argument><expr><name>IsFramework</name></expr></argument>, <argument><expr><name>IgnoreSysRoot</name></expr></argument>)</argument_list></call></expr>;
}</block>




<name>void</name> <macro><name>AddSystemHeaderPrefix</name><argument_list>(<argument>StringRef Prefix</argument>, <argument>bool IsSystemHeader</argument>)</argument_list></macro> <block>{
<expr><call><name><name>SystemHeaderPrefixes</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>Prefix</name></expr></argument>, <argument><expr><name>IsSystemHeader</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>AddVFSOverlayFile</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <block>{
<expr><call><name><name>VFSOverlayFiles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>AddPrebuiltModulePath</name><argument_list>(<argument>StringRef Name</argument>)</argument_list></macro> <block>{
<expr><call><name><name>PrebuiltModulePaths</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>hash_code</name> <macro><name>hash_value</name><argument_list>(<argument>const HeaderSearchOptions::Entry &amp;E</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_combine</name><argument_list>(<argument><expr><name><name>E</name><operator>.</operator><name>Path</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>Group</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>IsFramework</name></name></expr></argument>, <argument><expr><name><name>E</name><operator>.</operator><name>IgnoreSysRoot</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>llvm</name><operator>::</operator><name>hash_code</name>
<macro><name>hash_value</name><argument_list>(<argument>const HeaderSearchOptions::SystemHeaderPrefix &amp;SHP</argument>)</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_combine</name><argument_list>(<argument><expr><name><name>SHP</name><operator>.</operator><name>Prefix</name></name></expr></argument>, <argument><expr><name><name>SHP</name><operator>.</operator><name>IsSystemHeader</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
