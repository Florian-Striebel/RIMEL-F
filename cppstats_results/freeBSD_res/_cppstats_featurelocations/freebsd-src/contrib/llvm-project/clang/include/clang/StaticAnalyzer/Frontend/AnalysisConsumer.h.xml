<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Frontend/AnalysisConsumer.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_FRONTEND_ANALYSISCONSUMER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_FRONTEND_ANALYSISCONSUMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiagnosticsEngine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CodeInjector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CompilerInstance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>PathDiagnosticConsumer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CheckerManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CheckerRegistry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AnalysisASTConsumer</name> <range>: <expr><name>public</name> <name>ASTConsumer</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>virtual</name> <name>void</name> <call><name>AddDiagnosticConsumer</name><argument_list>(<argument><expr><name>PathDiagnosticConsumer</name> <operator>*</operator><name>Consumer</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;











<expr><name>virtual</name> <name>void</name>
<call><name>AddCheckerRegistrationFn</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>CheckerRegistry</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Fn</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;
}</block></expr></range></decl>;</decl_stmt>




<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>AnalysisASTConsumer</name></expr></argument>&gt;</argument_list></name>
<call><name>CreateAnalysisConsumer</name><argument_list>(<argument><expr><name>CompilerInstance</name> <operator>&amp;</operator><name>CI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
