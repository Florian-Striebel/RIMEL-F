<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Frontend/FrontendOptions.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_FRONTEND_FRONTENDOPTIONS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_FRONTEND_FRONTENDOPTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTDumperUtils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LangStandard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Frontend/CommandLineSourceLoc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/CodeCompleteOptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Serialization/ModuleFileExtension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/MemoryBuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemoryBuffer</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>frontend</name> <block>{<block_content>

<enum>enum <name>ActionKind</name> <block>{

<decl><name>ASTDeclList</name></decl>,


<decl><name>ASTDump</name></decl>,


<decl><name>ASTPrint</name></decl>,


<decl><name>ASTView</name></decl>,


<decl><name>DumpCompilerOptions</name></decl>,


<decl><name>DumpRawTokens</name></decl>,


<decl><name>DumpTokens</name></decl>,


<decl><name>EmitAssembly</name></decl>,


<decl><name>EmitBC</name></decl>,


<decl><name>EmitHTML</name></decl>,


<decl><name>EmitLLVM</name></decl>,


<decl><name>EmitLLVMOnly</name></decl>,


<decl><name>EmitCodeGenOnly</name></decl>,


<decl><name>EmitObj</name></decl>,


<decl><name>FixIt</name></decl>,


<decl><name>GenerateModule</name></decl>,


<decl><name>GenerateModuleInterface</name></decl>,


<decl><name>GenerateHeaderModule</name></decl>,


<decl><name>GeneratePCH</name></decl>,


<decl><name>GenerateInterfaceStubs</name></decl>,


<decl><name>InitOnly</name></decl>,


<decl><name>ModuleFileInfo</name></decl>,


<decl><name>VerifyPCH</name></decl>,


<decl><name>ParseSyntaxOnly</name></decl>,


<decl><name>PluginAction</name></decl>,


<decl><name>PrintPreamble</name></decl>,


<decl><name>PrintPreprocessedInput</name></decl>,


<decl><name>RewriteMacros</name></decl>,


<decl><name>RewriteObjC</name></decl>,


<decl><name>RewriteTest</name></decl>,


<decl><name>RunAnalysis</name></decl>,


<decl><name>TemplightDump</name></decl>,


<decl><name>MigrateSource</name></decl>,


<decl><name>RunPreprocessorOnly</name></decl>,


<decl><name>PrintDependencyDirectivesSourceMinimizerOutput</name></decl>
}</block>;</enum>

</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>InputKind</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>Language</name></type> <name>Lang</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Fmt</name> <range>: <expr><literal type="number">3</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>Preprocessed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<label><name>public</name>:</label>

<enum>enum <name>Format</name> <block>{
<decl><name>Source</name></decl>,
<decl><name>ModuleMap</name></decl>,
<decl><name>Precompiled</name></decl>
}</block>;</enum>

<macro><name>constexpr</name></macro> <macro><name>InputKind</name><argument_list>(<argument>Language L = Language::Unknown</argument>, <argument>Format F = Source</argument>,
<argument>bool PP = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Lang</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Fmt</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Preprocessed</name><argument_list>(<argument>PP</argument>)</argument_list></macro> <expr><block>{}</block>

<name>Language</name> <macro><name>getLanguage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Language</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Lang</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>Format</name> <macro><name>getFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Format</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Fmt</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPreprocessed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Preprocessed</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isUnknown</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Lang</name> <operator>==</operator> <name>Language</name><operator>::</operator><name>Unknown</name> <operator>&amp;&amp;</operator> <name>Fmt</name> <operator>==</operator> <name>Source</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isObjectiveC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Lang</name> <operator>==</operator> <name>Language</name><operator>::</operator><name>ObjC</name> <operator>||</operator> <name>Lang</name> <operator>==</operator> <name>Language</name><operator>::</operator><name>ObjCXX</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>InputKind</name> <macro><name>getPreprocessed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>InputKind</name><argument_list>(<argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getFormat</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>InputKind</name></type> <name>withFormat</name><argument_list>(<argument><expr><name>Format</name> <name>F</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>InputKind</name><argument_list>(<argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>F</name></expr></argument>, <argument><expr><call><name>isPreprocessed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FrontendInputFile</name> <block>{<block_content>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>File</name></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>InputKind</name></type> <name>Kind</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsSystem</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FrontendInputFile</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>FrontendInputFile</name><argument_list>(<argument>StringRef File</argument>, <argument>InputKind Kind</argument>, <argument>bool IsSystem = false</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>File</name><argument_list>(<argument><expr><call><name><name>File</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsSystem</name><argument_list>(<argument>IsSystem</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>FrontendInputFile</name><argument_list>(<argument>llvm::MemoryBufferRef Buffer</argument>, <argument>InputKind Kind</argument>,
<argument>bool IsSystem = false</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Buffer</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Kind</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsSystem</name><argument_list>(<argument>IsSystem</argument>)</argument_list></macro> <expr><block>{}</block>

<name>InputKind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Kind</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isSystem</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsSystem</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>File</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>Buffer</name> <operator>==</operator> <name>None</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isBuffer</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Buffer</name> <operator>!=</operator> <name>None</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isPreprocessed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Kind</name><operator>.</operator><name>isPreprocessed</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getFile</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>File</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>MemoryBufferRef</name> <macro><name>getBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isBuffer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><operator>*</operator><name>Buffer</name></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FrontendOptions</name> <block>{<block_content>
<label><name>public</name>:</label>

<decl_stmt><decl><type><name>unsigned</name></type> <name>DisableFree</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>RelocatablePCH</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ShowHelp</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ShowStats</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>PrintSupportedCPUs</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TimeTrace</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ShowVersion</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>FixWhatYouCan</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>FixOnlyWarnings</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>FixAndRecompile</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>FixToTemporaries</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ARCMTMigrateEmitARCErrors</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>SkipFunctionBodies</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UseGlobalModuleIndex</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>GenerateGlobalModuleIndex</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ASTDumpDecls</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ASTDumpAll</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ASTDumpLookups</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ASTDumpDeclTypes</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>BuildingImplicitModule</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>ModulesEmbedAllFiles</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IncludeTimestamps</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>UseTemporary</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsSystemModule</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>AllowPCMWithCompilerErrors</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodeCompleteOptions</name></type> <name>CodeCompleteOpts</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ASTDumpOutputFormat</name></type> <name>ASTDumpFormat</name> <init>= <expr><name>ADOF_Default</name></expr></init></decl>;</decl_stmt>

<enum>enum <block>{
<decl><name>ARCMT_None</name></decl>,
<decl><name>ARCMT_Check</name></decl>,
<decl><name>ARCMT_Modify</name></decl>,
<decl><name>ARCMT_Migrate</name></decl>
}</block> <decl><name>ARCMTAction</name> <init>= <expr><name>ARCMT_None</name></expr></init></decl>;</enum>

<enum>enum <block>{
<decl><name>ObjCMT_None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>ObjCMT_Literals</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,


<decl><name>ObjCMT_Subscripting</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,


<decl><name>ObjCMT_ReadonlyProperty</name> <init>= <expr><literal type="number">0x4</literal></expr></init></decl>,


<decl><name>ObjCMT_ReadwriteProperty</name> <init>= <expr><literal type="number">0x8</literal></expr></init></decl>,


<decl><name>ObjCMT_Property</name> <init>= <expr><operator>(</operator><name>ObjCMT_ReadonlyProperty</name> <operator>|</operator> <name>ObjCMT_ReadwriteProperty</name><operator>)</operator></expr></init></decl>,


<decl><name>ObjCMT_Annotation</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,


<decl><name>ObjCMT_Instancetype</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,


<decl><name>ObjCMT_NsMacros</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,


<decl><name>ObjCMT_ProtocolConformance</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,


<decl><name>ObjCMT_AtomicProperty</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,


<decl><name>ObjCMT_ReturnsInnerPointerProperty</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,


<decl><name>ObjCMT_NsAtomicIOSOnlyProperty</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,


<decl><name>ObjCMT_DesignatedInitializer</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>,


<decl><name>ObjCMT_PropertyDotSyntax</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,

<decl><name>ObjCMT_MigrateDecls</name> <init>= <expr><operator>(</operator><name>ObjCMT_ReadonlyProperty</name> <operator>|</operator> <name>ObjCMT_ReadwriteProperty</name> <operator>|</operator>
<name>ObjCMT_Annotation</name> <operator>|</operator> <name>ObjCMT_Instancetype</name> <operator>|</operator>
<name>ObjCMT_NsMacros</name> <operator>|</operator> <name>ObjCMT_ProtocolConformance</name> <operator>|</operator>
<name>ObjCMT_NsAtomicIOSOnlyProperty</name> <operator>|</operator>
<name>ObjCMT_DesignatedInitializer</name><operator>)</operator></expr></init></decl>,
<decl><name>ObjCMT_MigrateAll</name> <init>= <expr><operator>(</operator><name>ObjCMT_Literals</name> <operator>|</operator> <name>ObjCMT_Subscripting</name> <operator>|</operator>
<name>ObjCMT_MigrateDecls</name> <operator>|</operator> <name>ObjCMT_PropertyDotSyntax</name><operator>)</operator></expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ObjCMTAction</name> <init>= <expr><name>ObjCMT_None</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ObjCMTWhiteListPath</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>MTMigrateDir</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ARCMTMigrateReportOut</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>InputKind</name></type> <name>DashX</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>FrontendInputFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>Inputs</name></decl>;</decl_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OriginalModuleMap</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OutputFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>FixItSuffix</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ASTDumpFilter</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>ParsedSourceLocation</name></type> <name>CodeCompletionAt</name></decl>;</decl_stmt>


<expr_stmt><expr><name>frontend</name><operator>::</operator><name>ActionKind</name> <name>ProgramAction</name> <operator>=</operator> <name>frontend</name><operator>::</operator><name>ParseSyntaxOnly</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>ActionName</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>PluginArgs</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>AddPluginActions</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Plugins</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ModuleFileExtension</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>ModuleFileExtensions</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ModuleMapFiles</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ModuleFiles</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ModulesEmbedFiles</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>ASTMergeFiles</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>LLVMArgs</name></expr>;</expr_stmt>



<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>OverrideRecordLayoutsFile</name></expr>;</expr_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>AuxTriple</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>AuxTargetCPU</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>AuxTargetFeatures</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>StatsFile</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TimeTraceGranularity</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FrontendOptions</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>DisableFree</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RelocatablePCH</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ShowHelp</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ShowStats</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>TimeTrace</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ShowVersion</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>FixWhatYouCan</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FixOnlyWarnings</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>FixAndRecompile</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>FixToTemporaries</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ARCMTMigrateEmitARCErrors</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>SkipFunctionBodies</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UseGlobalModuleIndex</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>GenerateGlobalModuleIndex</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ASTDumpDecls</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ASTDumpLookups</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>BuildingImplicitModule</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>ModulesEmbedAllFiles</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IncludeTimestamps</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UseTemporary</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>AllowPCMWithCompilerErrors</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>TimeTraceGranularity</name><argument_list>(<argument><literal type="number">500</literal></argument>)</argument_list></macro> <expr><block>{}</block>






<specifier>static</specifier> <name>InputKind</name> <macro><name>getInputKindForExtension</name><argument_list>(<argument>StringRef Extension</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
