<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Sema/SemaFixItUtils.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_SEMA_SEMAFIXITUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_SEMA_SEMAFIXITUTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Expr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<enum>enum <name>OverloadFixItKind</name> <block>{
<decl><name>OFIK_Undefined</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>OFIK_Dereference</name></decl>,
<decl><name>OFIK_TakeAddress</name></decl>,
<decl><name>OFIK_RemoveDereference</name></decl>,
<decl><name>OFIK_RemoveTakeAddress</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>Sema</name></decl>;</decl_stmt>




<struct>struct <name>ConversionFixItGenerator</name> <block>{

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>compareTypesSimple</name><parameter_list>(<parameter><decl><type><name>CanQualType</name></type> <name>From</name></decl></parameter>,
<parameter><decl><type><name>CanQualType</name></type> <name>To</name></decl></parameter>,
<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>ExprValueKind</name></type> <name>FromVK</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FixItHint</name></expr></argument>&gt;</argument_list></name> <name>Hints</name></expr>;</expr_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>NumConversionsFixed</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>OverloadFixItKind</name></type> <name>Kind</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>TypeComparisonFuncTy</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CanQualType</name></type> <name>FromTy</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CanQualType</name></type> <name>ToTy</name></decl></parameter>,
<parameter><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>,
<parameter><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl></parameter>,
<parameter><decl><type><name>ExprValueKind</name></type> <name>FromVK</name></decl></parameter>)</parameter_list>;</function_decl></typedef>



<decl_stmt><decl><type><name>TypeComparisonFuncTy</name></type> <name>CompareTypes</name></decl>;</decl_stmt>

<macro><name>ConversionFixItGenerator</name><argument_list>(<argument>TypeComparisonFuncTy Foo</argument>)</argument_list></macro>: <expr_stmt><expr><call><name>NumConversionsFixed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Kind</name><argument_list>(<argument><expr><name>OFIK_Undefined</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>CompareTypes</name><argument_list>(<argument>Foo</argument>)</argument_list></macro> <expr><block>{}</block>

<call><name>ConversionFixItGenerator</name><argument_list>()</argument_list></call><operator>:</operator> <call><name>NumConversionsFixed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Kind</name><argument_list>(<argument><expr><name>OFIK_Undefined</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>CompareTypes</name><argument_list>(<argument>compareTypesSimple</argument>)</argument_list></macro> <expr><block>{}</block>


<name>void</name> <macro><name>setConversionChecker</name><argument_list>(<argument>TypeComparisonFuncTy Foo</argument>)</argument_list></macro> <block>{
<expr><name>CompareTypes</name> <operator>=</operator> <name>Foo</name></expr>;
}</block>


<name>bool</name> <macro><name>tryToFixConversion</name><argument_list>(<argument>const Expr *FromExpr</argument>,
<argument>const QualType FromQTy</argument>, <argument>const QualType ToQTy</argument>,
<argument>Sema &amp;S</argument>)</argument_list></macro></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name><name>Hints</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>NumConversionsFixed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isNull</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><operator>(</operator><name>NumConversionsFixed</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
