<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/GlobalDecl.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_GLOBALDECL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_GLOBALDECL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Attr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclObjC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclOpenMP.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/ABI.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Casting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/type_traits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>DynamicInitKind</name> <range>: <expr><name>unsigned</name> <block>{
<expr><name>NoStub</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>Initializer</name></expr>,
<expr><name>AtExit</name></expr>,
<expr><name>GlobalArrayDestructor</name></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>KernelReferenceKind</name> <range>: <expr><name>unsigned</name> <block>{
<expr><name>Kernel</name> <operator>=</operator> <literal type="number">0</literal></expr>,
<expr><name>Stub</name> <operator>=</operator> <literal type="number">1</literal></expr>,
}</block></expr></range></decl>;</decl_stmt>













<decl_stmt><decl><type><name>class</name></type> <name>GlobalDecl</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name> <name>Value</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>MultiVersionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Use other ctor with ctor decls!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Use other ctor with dtor decls!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>CUDAGlobalAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Use other ctor with GPU kernels!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>Value</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>GlobalDecl</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>GlobalDecl</name><argument_list>(<argument>const VarDecl *D</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const FunctionDecl *D</argument>, <argument>unsigned MVIndex = <literal type="number">0</literal></argument>)</argument_list></macro>
: <macro><name>MultiVersionIndex</name><argument_list>(<argument>MVIndex</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>CUDAGlobalAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>Value</name><operator>.</operator><name>setPointerAndInt</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>unsigned</name><argument_list>(<argument><expr><call><name>getDefaultKernelReference</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const FunctionDecl *D</argument>, <argument>KernelReferenceKind Kind</argument>)</argument_list></macro>
: <macro><name>Value</name><argument_list>(<argument>D</argument>, <argument>unsigned(Kind)</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>D</name><operator>-&gt;</operator><name>hasAttr</name></name><operator>&lt;</operator><name>CUDAGlobalAttr</name><operator>&gt;</operator><operator>(</operator><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="string">"Decl is not a GPU kernel!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const NamedDecl *D</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const BlockDecl *D</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const CapturedDecl *D</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const ObjCMethodDecl *D</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const OMPDeclareReductionDecl *D</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const OMPDeclareMapperDecl *D</argument>)</argument_list></macro> <block>{<block_content> <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const CXXConstructorDecl *D</argument>, <argument>CXXCtorType Type</argument>)</argument_list></macro> : <macro><name>Value</name><argument_list>(<argument>D</argument>, <argument>Type</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const CXXDestructorDecl *D</argument>, <argument>CXXDtorType Type</argument>)</argument_list></macro> : <macro><name>Value</name><argument_list>(<argument>D</argument>, <argument>Type</argument>)</argument_list></macro> <block>{<block_content/>}</block>
<macro><name>GlobalDecl</name><argument_list>(<argument>const VarDecl *D</argument>, <argument>DynamicInitKind StubKind</argument>)</argument_list></macro>
: <macro><name>Value</name><argument_list>(<argument>D</argument>, <argument>unsigned(StubKind)</argument>)</argument_list></macro> <block>{<block_content/>}</block>

<expr_stmt><expr><name>GlobalDecl</name> <macro><name>getCanonicalDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>GlobalDecl</name> <name>CanonGD</name></expr>;
<expr><call><name><name>CanonGD</name><operator>.</operator><name>Value</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getCanonicalDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>CanonGD</name><operator>.</operator><name>Value</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name><name>CanonGD</name><operator>.</operator><name>MultiVersionIndex</name></name> <operator>=</operator> <name>MultiVersionIndex</name></expr>;

<return>return <expr><name>CanonGD</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Value</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>CXXCtorType</name> <macro><name>getCtorType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Decl is not a ctor!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>CXXDtorType</name> <macro><name>getDtorType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Decl is not a dtor!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CXXDtorType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>DynamicInitKind</name> <macro><name>getDynamicInitKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>VarDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>hasGlobalStorage</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Decl is not a global variable!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>DynamicInitKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getMultiVersionIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>hasAttr</name><argument_list type="generic">&lt;<argument><expr><name>CUDAGlobalAttr</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Decl is not a plain FunctionDecl!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>MultiVersionIndex</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>KernelReferenceKind</name> <macro><name>getKernelReferenceKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>hasAttr</name><argument_list type="generic">&lt;<argument><expr><name>CUDAGlobalAttr</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Decl is not a GPU kernel!"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>KernelReferenceKind</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Value</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>GlobalDecl</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator> <specifier>const</specifier> <name>GlobalDecl</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Value</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Value</name></name> <operator>&amp;&amp;</operator>
<name><name>LHS</name><operator>.</operator><name>MultiVersionIndex</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>MultiVersionIndex</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>void</name> <operator>*</operator><macro><name>getAsOpaquePtr</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>Value</name><operator>.</operator><name>getOpaqueValue</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>getAsOpaquePtr</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>GlobalDecl</name></type> <name>getFromOpaquePtr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>GD</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>GD</name><operator>.</operator><name>Value</name><operator>.</operator><name>setFromOpaqueValue</name></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>GD</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>KernelReferenceKind</name></type> <name>getDefaultKernelReference</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionDecl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><call><name><name>D</name><operator>-&gt;</operator><name>getLangOpts</name></name><argument_list>()</argument_list></call><operator>.</operator><name>CUDAIsDevice</name></expr> ?</condition><then> <expr><name>KernelReferenceKind</name><operator>::</operator><name>Kernel</name></expr>
</then><else>: <expr><name>KernelReferenceKind</name><operator>::</operator><name>Stub</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalDecl</name></type> <name>getWithDecl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>Result</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>Value</name><operator>.</operator><name>setPointer</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalDecl</name></type> <name>getWithCtorType</name><parameter_list>(<parameter><decl><type><name>CXXCtorType</name></type> <name>Type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>Result</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>Value</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalDecl</name></type> <name>getWithDtorType</name><parameter_list>(<parameter><decl><type><name>CXXDtorType</name></type> <name>Type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>Result</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>Value</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><name>Type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalDecl</name></type> <name>getWithMultiVersionIndex</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>Index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>hasAttr</name><argument_list type="generic">&lt;<argument><expr><name>CUDAGlobalAttr</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXConstructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>CXXDestructorDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Decl is not a plain FunctionDecl!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>Result</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>MultiVersionIndex</name></name> <operator>=</operator> <name>Index</name></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GlobalDecl</name></type> <name>getWithKernelReferenceKind</name><parameter_list>(<parameter><decl><type><name>KernelReferenceKind</name></type> <name>Kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>isa</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>FunctionDecl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDecl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name><name>hasAttr</name><argument_list type="generic">&lt;<argument><expr><name>CUDAGlobalAttr</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Decl is not a GPU kernel!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>GlobalDecl</name></type> <name>Result</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>Result</name><operator>.</operator><name>Value</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><call><name>unsigned</name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>GlobalDecl</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>GlobalDecl</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><call><name>GlobalDecl</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>GlobalDecl</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>GlobalDecl</name><operator>::</operator>
<call><name>getFromOpaquePtr</name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>clang::GlobalDecl GD</argument>)</argument_list></macro> <block>{
<return>return <expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><call><name><name>GD</name><operator>.</operator><name>getAsOpaquePtr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>clang::GlobalDecl LHS</argument>,
<argument>clang::GlobalDecl RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;

}</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
