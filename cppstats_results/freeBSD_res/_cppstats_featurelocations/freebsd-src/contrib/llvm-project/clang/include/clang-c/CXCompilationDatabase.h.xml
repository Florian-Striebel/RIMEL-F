<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang-c/CXCompilationDatabase.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_C_CXCOMPILATIONDATABASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_C_CXCOMPILATIONDATABASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/CXString.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/ExternC.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang-c/Platform.h"</cpp:file></cpp:include>

<macro><name>LLVM_CLANG_C_EXTERN_C_BEGIN</name></macro>














<typedef>typedef <type><name>void</name> <modifier>*</modifier></type> <name>CXCompilationDatabase</name>;</typedef>










<typedef>typedef <type><name>void</name> <modifier>*</modifier></type> <name>CXCompileCommands</name>;</typedef>




<typedef>typedef <type><name>void</name> <modifier>*</modifier></type> <name>CXCompileCommand</name>;</typedef>




<typedef>typedef <type><enum>enum <block>{



<decl><name>CXCompilationDatabase_NoError</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,




<decl><name>CXCompilationDatabase_CanNotLoadDatabase</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block></enum></type> <name>CXCompilationDatabase_Error</name>;</typedef>








<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCompilationDatabase</name></type>
<name>clang_CompilationDatabase_fromDirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BuildDir</name></decl></parameter>,
<parameter><decl><type><name>CXCompilationDatabase_Error</name> <modifier>*</modifier></type><name>ErrorCode</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type>
<name>clang_CompilationDatabase_dispose</name><parameter_list>(<parameter><decl><type><name>CXCompilationDatabase</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCompileCommands</name></type>
<name>clang_CompilationDatabase_getCompileCommands</name><parameter_list>(<parameter><decl><type><name>CXCompilationDatabase</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CompleteFileName</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCompileCommands</name></type>
<name>clang_CompilationDatabase_getAllCompileCommands</name><parameter_list>(<parameter><decl><type><name>CXCompilationDatabase</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>void</name></type> <name>clang_CompileCommands_dispose</name><parameter_list>(<parameter><decl><type><name>CXCompileCommands</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_CompileCommands_getSize</name><parameter_list>(<parameter><decl><type><name>CXCompileCommands</name></type></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXCompileCommand</name></type>
<name>clang_CompileCommands_getCommand</name><parameter_list>(<parameter><decl><type><name>CXCompileCommands</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_CompileCommand_getDirectory</name><parameter_list>(<parameter><decl><type><name>CXCompileCommand</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_CompileCommand_getFilename</name><parameter_list>(<parameter><decl><type><name>CXCompileCommand</name></type></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_CompileCommand_getNumArgs</name><parameter_list>(<parameter><decl><type><name>CXCompileCommand</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_CompileCommand_getArg</name><parameter_list>(<parameter><decl><type><name>CXCompileCommand</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>unsigned</name></type>
<name>clang_CompileCommand_getNumMappedSources</name><parameter_list>(<parameter><decl><type><name>CXCompileCommand</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_CompileCommand_getMappedSourcePath</name><parameter_list>(<parameter><decl><type><name>CXCompileCommand</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>CINDEX_LINKAGE</name> <name>CXString</name></type>
<name>clang_CompileCommand_getMappedSourceContent</name><parameter_list>(<parameter><decl><type><name>CXCompileCommand</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>I</name></decl></parameter>)</parameter_list>;</function_decl>





<expr><name>LLVM_CLANG_C_EXTERN_C_END</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
