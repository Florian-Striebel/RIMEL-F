<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTTypeTraits.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTTYPETRAITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTTYPETRAITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTFwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclCXX.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/NestedNameSpecifier.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TemplateBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeLoc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMapInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/AlignOf.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>raw_ostream</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<struct_decl>struct <name>PrintingPolicy</name>;</struct_decl>



<enum>enum <name>TraversalKind</name> <block>{

<decl><name>TK_AsIs</name></decl>,


<decl><name>TK_IgnoreUnlessSpelledInSource</name></decl>
}</block>;</enum>






<decl_stmt><decl><type><name>class</name></type> <name>ASTNodeKind</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>ASTNodeKind</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>KindId</name><argument_list>(<argument>NKI_None</argument>)</argument_list></macro> <block>{}</block>


<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>ASTNodeKind</name> <macro><name>getFromNodeKind</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>ASTNodeKind</name><argument_list>(<argument><expr><name><name>KindToKindId</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<function_decl><type><specifier>static</specifier> <name>ASTNodeKind</name></type> <name>getFromNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>&amp;</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ASTNodeKind</name></type> <name>getFromNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ASTNodeKind</name></type> <name>getFromNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Type</name> <modifier>&amp;</modifier></type><name>T</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ASTNodeKind</name></type> <name>getFromNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OMPClause</name> <modifier>&amp;</modifier></type><name>C</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><name>bool</name></type> <name>isSame</name><argument_list>(<argument><expr><name>ASTNodeKind</name> <name>Other</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>KindId</name> <operator>!=</operator> <name>NKI_None</name> <operator>&amp;&amp;</operator> <name>KindId</name> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>KindId</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isNone</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>KindId</name> <operator>==</operator> <name>NKI_None</name></expr>;</return> }</block></expr></expr_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>isBaseOf</name><argument_list>(<argument><expr><name>ASTNodeKind</name> <name>Other</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator><name>Distance</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>asStringRef</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>ASTNodeKind</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>KindId</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>KindId</name></name></expr>;</return>
}</block></expr></expr_stmt>




<function_decl><type><specifier>static</specifier> <name>ASTNodeKind</name></type> <name>getMostDerivedType</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>Kind1</name></decl></parameter>, <parameter><decl><type><name>ASTNodeKind</name></type> <name>Kind2</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>ASTNodeKind</name></type> <name>getMostDerivedCommonAncestor</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>Kind1</name></decl></parameter>,
<parameter><decl><type><name>ASTNodeKind</name></type> <name>Kind2</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>ASTNodeKind</name></macro> <macro><name>getCladeKind</name><argument_list>()</argument_list></macro> <decl_stmt><decl><type><specifier>const</specifier></type></decl>;</decl_stmt>


<struct>struct <name>DenseMapInfo</name> <block>{

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ASTNodeKind</name></type> <name>getEmptyKey</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>ASTNodeKind</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ASTNodeKind</name></type> <name>getTombstoneKey</name><parameter_list>()</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ASTNodeKind</name><argument_list>(<argument><expr><name>NKI_NumberOfKinds</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTNodeKind</name> <modifier>&amp;</modifier></type><name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>Val</name><operator>.</operator><name>KindId</name></name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ASTNodeKind</name> <modifier>&amp;</modifier></type><name>LHS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ASTNodeKind</name> <modifier>&amp;</modifier></type><name>RHS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>LHS</name><operator>.</operator><name>KindId</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>KindId</name></name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>



<expr_stmt><expr><name>bool</name> <macro><name>hasPointerIdentity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>KindId</name> <operator>&gt;</operator> <name>NKI_LastKindWithoutPointerIdentity</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>private</name>:</label>



<enum>enum <name>NodeKindId</name> <block>{
<decl><name>NKI_None</name></decl>,
<decl><name>NKI_TemplateArgument</name></decl>,
<decl><name>NKI_TemplateArgumentLoc</name></decl>,
<decl><name>NKI_TemplateName</name></decl>,
<decl><name>NKI_NestedNameSpecifierLoc</name></decl>,
<decl><name>NKI_QualType</name></decl>,
<decl><name>NKI_TypeLoc</name></decl>,
<decl><name>NKI_LastKindWithoutPointerIdentity</name> <init>= <expr><name>NKI_TypeLoc</name></expr></init></decl>,
<decl><name>NKI_CXXBaseSpecifier</name></decl>,
<decl><name>NKI_CXXCtorInitializer</name></decl>,
<decl><name>NKI_NestedNameSpecifier</name></decl>,
<decl><name>NKI_Decl</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NKI_##DERIVED##Decl,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclNodes.inc"</cpp:file></cpp:include>
<decl><name>NKI_Stmt</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NKI_##DERIVED,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtNodes.inc"</cpp:file></cpp:include>
<decl><name>NKI_Type</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NKI_##DERIVED##Type,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeNodes.inc"</cpp:file></cpp:include>
<decl><name>NKI_OMPClause</name></decl>,
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_CLANG_CLAUSE_CLASS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAUSE_CLASS</name><parameter_list>(<parameter><type><name>Enum</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>, <parameter><type><name>Class</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NKI_##Class,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Frontend/OpenMP/OMP.inc"</cpp:file></cpp:include>
<decl><name>NKI_NumberOfKinds</name></decl>
}</block>;</enum>


<macro><name>ASTNodeKind</name><argument_list>(<argument>NodeKindId KindId</argument>)</argument_list></macro> : <macro><name>KindId</name><argument_list>(<argument>KindId</argument>)</argument_list></macro> <block>{<block_content/>}</block>





<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isBaseOf</name><parameter_list>(<parameter><decl><type><name>NodeKindId</name></type> <name>Base</name></decl></parameter>, <parameter><decl><type><name>NodeKindId</name></type> <name>Derived</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>Distance</name></decl></parameter>)</parameter_list>;</function_decl>




<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator> struct <name>KindToKindId</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>NodeKindId</name> <name>Id</name> <operator>=</operator> <name>NKI_None</name></expr>;
}</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name><name>KindToKindId</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name><name>KindToKindId</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr></range></decl>;</decl_stmt>


<struct>struct <name>KindInfo</name> <block>{

<decl_stmt><decl><type><name>NodeKindId</name></type> <name>ParentId</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>KindInfo</name></type> <name><name>AllKindInfo</name><index>[<expr><name>NKI_NumberOfKinds</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NodeKindId</name></type> <name>KindId</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KIND_TO_KIND_ID</name><parameter_list>(<parameter><type><name>Class</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>template &lt;&gt; struct ASTNodeKind::KindToKindId&lt;Class&gt; { static const NodeKindId Id = NKI_##Class; };</cpp:value></cpp:define>



<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>CXXCtorInitializer</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>TemplateArgument</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>TemplateArgumentLoc</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>TemplateName</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>NestedNameSpecifier</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>NestedNameSpecifierLoc</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>QualType</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>TypeLoc</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>Decl</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>Stmt</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>Type</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>OMPClause</argument>)</argument_list></macro>
<macro><name>KIND_TO_KIND_ID</name><argument_list>(<argument>CXXBaseSpecifier</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECL</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KIND_TO_KIND_ID(DERIVED##Decl)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/DeclNodes.inc"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KIND_TO_KIND_ID(DERIVED)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/StmtNodes.inc"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>DERIVED</name></type></parameter>, <parameter><type><name>BASE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KIND_TO_KIND_ID(DERIVED##Type)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeNodes.inc"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GEN_CLANG_CLAUSE_CLASS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLAUSE_CLASS</name><parameter_list>(<parameter><type><name>Enum</name></type></parameter>, <parameter><type><name>Str</name></type></parameter>, <parameter><type><name>Class</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>KIND_TO_KIND_ID(Class)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Frontend/OpenMP/OMP.inc"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KIND_TO_KIND_ID</name></cpp:undef>

<expr_stmt><expr><specifier>inline</specifier> <name>raw_ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator> <name>ASTNodeKind</name> <name>K</name><operator>)</operator> <block>{
<expr><name>OS</name> <operator>&lt;&lt;</operator> <call><name><name>K</name><operator>.</operator><name>asStringRef</name></name><argument_list>()</argument_list></call></expr>;
<return>return <expr><name>OS</name></expr>;</return>
}</block></expr></expr_stmt>













<decl_stmt><decl><type><name>class</name></type> <name>DynTypedNode</name> <block>{<block_content>
<label><name>public</name>:</label>

<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <name>DynTypedNode</name></type> <name>create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><name><name>BaseConverter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>create</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>













<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>get</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>BaseConverter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Storage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<specifier>const</specifier> <name>T</name> <operator>&amp;</operator><macro><name>getUnchecked</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>BaseConverter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getUnchecked</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Storage</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>ASTNodeKind</name> <macro><name>getNodeKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NodeKind</name></expr>;</return> }</block></expr></expr_stmt>






<expr_stmt><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><macro><name>getMemoizationData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>NodeKind</name><operator>.</operator><name>hasPointerIdentity</name></name><argument_list>()</argument_list></call>
<operator>?</operator> <operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>Storage</name></expr></argument>)</argument_list></call>
<operator>:</operator> <name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>PrintingPolicy</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>dump</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<expr_stmt><expr><name>SourceRange</name> <macro><name>getSourceRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>







<expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>DynTypedNode</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>NodeKind</name><operator>.</operator><name>isSame</name></name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NodeKind</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NodeKind</name> <operator>&lt;</operator> <name><name>Other</name><operator>.</operator><name>NodeKind</name></name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>getUnchecked</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsOpaquePtr</name><argument_list>()</argument_list></call> <operator>&lt;</operator>
<name><name>Other</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>QualType</name><operator>&gt;</operator><operator>(</operator><operator>)</operator><operator>.</operator><call><name>getAsOpaquePtr</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>TypeLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>TLA</name> <init>= <expr><call><name><name>getUnchecked</name><argument_list type="generic">&lt;<argument><expr><name>TypeLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>TLB</name> <init>= <expr><name><name>Other</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>TypeLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>TLA</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsOpaquePtr</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>TLA</name><operator>.</operator><name>getOpaqueData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>TLB</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsOpaquePtr</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>TLB</name><operator>.</operator><name>getOpaqueData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(
<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>NNSLA</name> <init>= <expr><call><name><name>getUnchecked</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>NNSLB</name> <init>= <expr><name><name>Other</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>NestedNameSpecifierLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>NNSLA</name><operator>.</operator><name>getNestedNameSpecifier</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>NNSLA</name><operator>.</operator><name>getOpaqueData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<name>std</name><operator>::</operator><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name>NNSLB</name><operator>.</operator><name>getNestedNameSpecifier</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>NNSLB</name><operator>.</operator><name>getOpaqueData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getMemoizationData</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Other</name><operator>.</operator><name>getMemoizationData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>getMemoizationData</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>Other</name><operator>.</operator><name>getMemoizationData</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>DynTypedNode</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>NodeKind</name><operator>.</operator><name>isSame</name></name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>NodeKind</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>getUnchecked</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>QualType</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>TypeLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>getUnchecked</name><argument_list type="generic">&lt;<argument><expr><name>TypeLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Other</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>TypeLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>getUnchecked</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>==</operator>
<name><name>Other</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>NestedNameSpecifierLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>getMemoizationData</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Other</name><operator>.</operator><name>getMemoizationData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>getMemoizationData</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>Other</name><operator>.</operator><name>getMemoizationData</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>DynTypedNode</name> <operator>&amp;</operator><name>Other</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><operator>!</operator><name>operator</name><operator>==</operator><operator>(</operator><name>Other</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>



<struct>struct <name>DenseMapInfo</name> <block>{
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>DynTypedNode</name></type> <name>getEmptyKey</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>Node</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Node</name><operator>.</operator><name>NodeKind</name></name> <operator>=</operator> <name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Node</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>DynTypedNode</name></type> <name>getTombstoneKey</name><parameter_list>()</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>Node</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Node</name><operator>.</operator><name>NodeKind</name></name> <operator>=</operator> <name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Node</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>getHashValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DynTypedNode</name> <modifier>&amp;</modifier></type><name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>TypeLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name><name>Val</name><operator>.</operator><name>NodeKind</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>TL</name> <init>= <expr><name><name>Val</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>TypeLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_combine</name><argument_list>(<argument><expr><call><name><name>TL</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAsOpaquePtr</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>TL</name><operator>.</operator><name>getOpaqueData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(
<argument><expr><name><name>Val</name><operator>.</operator><name>NodeKind</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>NNSL</name> <init>= <expr><name><name>Val</name><operator>.</operator><name>getUnchecked</name></name><operator>&lt;</operator><name>NestedNameSpecifierLoc</name><operator>&gt;</operator><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_combine</name><argument_list>(<argument><expr><call><name><name>NNSL</name><operator>.</operator><name>getNestedNameSpecifier</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>NNSL</name><operator>.</operator><name>getOpaqueData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Val</name><operator>.</operator><name>getMemoizationData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>llvm</name><operator>::</operator><call><name>hash_value</name><argument_list>(<argument><expr><call><name><name>Val</name><operator>.</operator><name>getMemoizationData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DynTypedNode</name> <modifier>&amp;</modifier></type><name>LHS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DynTypedNode</name> <modifier>&amp;</modifier></type><name>RHS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>auto</name></type> <name>Empty</name> <init>= <expr><name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>TombStone</name> <init>= <expr><name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>isEqual</name><argument_list>(<argument><expr><name><name>LHS</name><operator>.</operator><name>NodeKind</name></name></expr></argument>, <argument><expr><name>Empty</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>isEqual</name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>NodeKind</name></name></expr></argument>, <argument><expr><name>Empty</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>isEqual</name><argument_list>(<argument><expr><name><name>LHS</name><operator>.</operator><name>NodeKind</name></name></expr></argument>, <argument><expr><name>TombStone</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name><operator>::</operator><call><name>isEqual</name><argument_list>(<argument><expr><name><name>RHS</name><operator>.</operator><name>NodeKind</name></name></expr></argument>, <argument><expr><name>TombStone</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
<name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
</block_content>}</block></function>
}</block>;</struct>

<label><name>private</name>:</label>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><name>typename</name> <name>EnablerT</name> <operator>=</operator> <name>void</name><operator>&gt;</operator> struct <name>BaseConverter</name></expr>;</expr_stmt>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><name>typename</name> <name>BaseT</name><operator>&gt;</operator> struct <name>DynCastPtrConverter</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>get</name><argument_list>(<argument>ASTNodeKind NodeKind</argument>, <argument>const void *Storage</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isBaseOf</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name>getUnchecked</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>, <argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>getUnchecked</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>NodeKind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Storage</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isBaseOf</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>BaseT</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>DynTypedNode</name></type> <name>create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BaseT</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>Result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>NodeKind</name></name> <operator>=</operator> <name>ASTNodeKind</name><operator>::</operator><call><name>getFromNode</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;Result.Storage</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>(</operator><operator>&amp;</operator><name>Node</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>
};


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>PtrConverter</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>get</name><argument_list>(<argument>ASTNodeKind NodeKind</argument>, <argument>const void *Storage</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><call><name>getUnchecked</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>, <argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>getUnchecked</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>NodeKind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Storage</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(
<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>DynTypedNode</name></type> <name>create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>Result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>NodeKind</name></name> <operator>=</operator> <name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;Result.Storage</argument>)</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>(</operator><operator>&amp;</operator><name>Node</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>
};


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator> struct <name>ValueConverter</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>get</name><argument_list>(<argument>ASTNodeKind NodeKind</argument>, <argument>const void *Storage</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>getUnchecked</name><parameter_list>(<parameter><decl><type><name>ASTNodeKind</name></type> <name>NodeKind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>Storage</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSame</name><argument_list>(<argument><expr><name>NodeKind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Storage</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>DynTypedNode</name></type> <name>create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>Node</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>DynTypedNode</name></type> <name>Result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Result</name><operator>.</operator><name>NodeKind</name></name> <operator>=</operator> <name>ASTNodeKind</name><operator>::</operator><call><name><name>getFromNodeKind</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<macro><name>new</name> <argument_list>(<argument>&amp;Result.Storage</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Result</name></expr>;</return>
</block_content>}</block></function>
};

<decl_stmt><decl><type><name>ASTNodeKind</name></type> <name>NodeKind</name></decl>;</decl_stmt>









<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>AlignedCharArrayUnion</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>TemplateArgument</name></expr></argument>,
<argument><expr><name>TemplateArgumentLoc</name></expr></argument>, <argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>,
<argument><expr><name>QualType</name></expr></argument>, <argument><expr><name>TypeLoc</name></expr></argument>&gt;</argument_list></name>
<name>Storage</name></expr>;</expr_stmt>
};

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>T</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>DynCastPtrConverter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Decl</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>T</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>Stmt</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>DynCastPtrConverter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Stmt</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>T</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>DynCastPtrConverter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>T</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_base_of</name><argument_list type="generic">&lt;<argument><expr><name>OMPClause</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>DynCastPtrConverter</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>OMPClause</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>NestedNameSpecifier</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>PtrConverter</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifier</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>CXXCtorInitializer</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>PtrConverter</name><argument_list type="generic">&lt;<argument><expr><name>CXXCtorInitializer</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>TemplateArgument</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>ValueConverter</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgument</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLoc</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>ValueConverter</name><argument_list type="generic">&lt;<argument><expr><name>TemplateArgumentLoc</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>TemplateName</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>ValueConverter</name><argument_list type="generic">&lt;<argument><expr><name>TemplateName</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>ValueConverter</name><argument_list type="generic">&lt;<argument><expr><name>NestedNameSpecifierLoc</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>,
<argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>ValueConverter</name><argument_list type="generic">&lt;<argument><expr><name>QualType</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;
<argument><expr><name>TypeLoc</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name> <operator>:</operator> <name>public</name> <name><name>ValueConverter</name><argument_list type="generic">&lt;<argument><expr><name>TypeLoc</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator>
struct <name>DynTypedNode</name><operator>::</operator><name><name>BaseConverter</name><argument_list type="generic">&lt;<argument><expr><name>CXXBaseSpecifier</name></expr></argument>, <argument><expr><name>void</name></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>PtrConverter</name><argument_list type="generic">&lt;<argument><expr><name>CXXBaseSpecifier</name></expr></argument>&gt;</argument_list></name> <block>{}</block></expr>;</expr_stmt>





<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name></expr><operator>,</operator> <expr><name>typename</name> <name>EnablerT</name><operator>&gt;</operator> struct <name>DynTypedNode</name><operator>::</operator><name>BaseConverter</name> <block>{
<expr><specifier>static</specifier> <specifier>const</specifier> <name>T</name> <operator>*</operator><macro><name>get</name><argument_list>(<argument>ASTNodeKind NodeKind</argument>, <argument>const char Storage[]</argument>)</argument_list></macro> <block>{
<return>return <expr><name>NULL</name></expr>;</return></block></expr>
}</block></expr></expr_stmt>
};

}

namespace <macro><name>llvm</name></macro> <block>{<block_content>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct</type> <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>ASTNodeKind</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>clang</name><operator>::</operator><name>ASTNodeKind</name><operator>::</operator><name>DenseMapInfo</name> <block>{}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name>
struct</type> <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>DynTypedNode</name></expr></argument>&gt;</argument_list></name> <range>: <expr><name>clang</name><operator>::</operator><name>DynTypedNode</name><operator>::</operator><name>DenseMapInfo</name> <block>{}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
