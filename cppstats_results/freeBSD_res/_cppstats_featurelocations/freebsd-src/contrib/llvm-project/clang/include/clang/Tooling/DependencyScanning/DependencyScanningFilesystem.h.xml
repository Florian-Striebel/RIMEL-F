<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/DependencyScanning/DependencyScanningFilesystem.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_FILESYSTEM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_DEPENDENCY_SCANNING_FILESYSTEM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/PreprocessorExcludedConditionalDirectiveSkipMapping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorOr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>dependencies</name> <block>{<block_content>










<decl_stmt><decl><type><name>class</name></type> <name>CachedFileSystemEntry</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><call><name>CachedFileSystemEntry</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>MaybeStat</name><argument_list>(<argument>llvm::vfs::Status()</argument>)</argument_list></macro> <block>{}</block>

<macro><name>CachedFileSystemEntry</name><argument_list>(<argument>std::error_code Error</argument>)</argument_list></macro> <operator>:</operator> <macro><name>MaybeStat</name><argument_list>(<argument>std::move(Error)</argument>)</argument_list></macro> <block>{}</block>









<specifier>static</specifier> <name>CachedFileSystemEntry</name> <macro><name>createFileEntry</name><argument_list>(<argument>StringRef Filename</argument>,
<argument>llvm::vfs::FileSystem &amp;FS</argument>,
<argument>bool Minimize = true</argument>)</argument_list></macro></expr>;</expr_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>CachedFileSystemEntry</name></type> <name>createDirectoryEntry</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name> <operator>&amp;&amp;</operator><name>Stat</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>MaybeStat</name> <operator>||</operator> <call><name><name>MaybeStat</name><operator>-&gt;</operator><name>isStatusKnown</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isDirectory</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MaybeStat</name> <operator>&amp;&amp;</operator> <call><name><name>MaybeStat</name><operator>-&gt;</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <macro><name>getContents</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>MaybeStat</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>MaybeStat</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>MaybeStat</name><operator>-&gt;</operator><name>isDirectory</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"not a file"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Contents</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name></expr></argument>&gt;</argument_list></name> <macro><name>getStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"not initialized"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>MaybeStat</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>StringRef</name> <macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isValid</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"not initialized"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>MaybeStat</name><operator>-&gt;</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><specifier>const</specifier> <name>PreprocessorSkippedRangeMapping</name> <operator>&amp;</operator><macro><name>getPPSkippedRangeMapping</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>PPSkippedRangeMapping</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><call><name>CachedFileSystemEntry</name><argument_list>(<argument><expr><name>CachedFileSystemEntry</name> <operator>&amp;&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<decl_stmt><decl><type><name>CachedFileSystemEntry</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><name>CachedFileSystemEntry</name> <operator>&amp;&amp;</operator><operator>)</operator> <operator>=</operator> default</expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CachedFileSystemEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CachedFileSystemEntry</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CachedFileSystemEntry</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CachedFileSystemEntry</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>private</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name></expr></argument>&gt;</argument_list></name> <name>MaybeStat</name></expr>;</expr_stmt>




<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallString</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <name>Contents</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>PreprocessorSkippedRangeMapping</name></type> <name>PPSkippedRangeMapping</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>DependencyScanningFilesystemSharedCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>SharedFileSystemEntry</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>ValueLock</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CachedFileSystemEntry</name></type> <name>Value</name></decl>;</decl_stmt>
}</block>;</struct>





<function_decl><type><name>SharedFileSystemEntry</name> <modifier>&amp;</modifier></type><name>get</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Minimized</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>class</name></type> <name>SingleCache</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>SingleCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>SharedFileSystemEntry</name> <modifier>&amp;</modifier></type><name>get</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Key</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<struct>struct <name>CacheShard</name> <block>{
<expr_stmt><expr><name>std</name><operator>::</operator><name>mutex</name> <name>CacheLock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>SharedFileSystemEntry</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name> <name>Cache</name></expr>;</expr_stmt>
}</block>;</struct>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>CacheShard</name><index>[]</index></name></expr></argument>&gt;</argument_list></name> <name>CacheShards</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>NumShards</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>SingleCache</name></type> <name>CacheMinimized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SingleCache</name></type> <name>CacheOriginal</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>DependencyScanningFilesystemLocalCache</name> <block>{<block_content>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>SingleCache</name> <init>=
<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CachedFileSystemEntry</name> <operator>*</operator></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleCache</name></type> <name>CacheMinimized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SingleCache</name></type> <name>CacheOriginal</name></decl>;</decl_stmt>

<function><type><name>SingleCache</name> <modifier>&amp;</modifier></type><name>selectCache</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Minimized</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>Minimized</name></expr> ?</condition><then> <expr><name>CacheMinimized</name></expr> </then><else>: <expr><name>CacheOriginal</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<label><name>public</name>:</label>
<function><type><name>void</name></type> <name>setCachedEntry</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>Minimized</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>CachedFileSystemEntry</name> <modifier>*</modifier></type><name>Entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SingleCache</name> <modifier>&amp;</modifier></type><name>Cache</name> <init>= <expr><call><name>selectCache</name><argument_list>(<argument><expr><name>Minimized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsInserted</name> <init>= <expr><call><name><name>Cache</name><operator>.</operator><name>try_emplace</name></name><argument_list>(<argument><expr><name>Filename</name></expr></argument>, <argument><expr><name>Entry</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>IsInserted</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>IsInserted</name> <operator>&amp;&amp;</operator> <literal type="string">"local cache is updated more than once"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>CachedFileSystemEntry</name> <modifier>*</modifier></type><name>getCachedEntry</name><parameter_list>(<parameter><decl><type><name>StringRef</name></type> <name>Filename</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>Minimized</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>SingleCache</name> <modifier>&amp;</modifier></type><name>Cache</name> <init>= <expr><call><name>selectCache</name><argument_list>(<argument><expr><name>Minimized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>It</name> <init>= <expr><call><name><name>Cache</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>Filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>It</name> <operator>==</operator> <call><name><name>Cache</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>nullptr</name></expr> </then><else>: <expr><call><name><name>It</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>










<decl_stmt><decl><type><name>class</name></type> <name>DependencyScanningWorkerFilesystem</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>ProxyFileSystem</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>DependencyScanningWorkerFilesystem</name><argument_list>(
<argument><expr><name>DependencyScanningFilesystemSharedCache</name> <operator>&amp;</operator><name>SharedCache</name></expr></argument>,
<argument><expr><name><name>IntrusiveRefCntPtr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>FileSystem</name></expr></argument>&gt;</argument_list></name> <name>FS</name></expr></argument>,
<argument><expr><name>ExcludedPreprocessorDirectiveSkipMapping</name> <operator>*</operator><name>PPSkipMappings</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>ProxyFileSystem</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>FS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name>SharedCache</name><argument_list>(<argument><expr><name>SharedCache</name></expr></argument>)</argument_list></call></expr>,
<macro><name>PPSkipMappings</name><argument_list>(<argument>PPSkipMappings</argument>)</argument_list></macro> <expr><block>{}</block>

<name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name></expr></argument>&gt;</argument_list></name> <macro><name>status</name><argument_list>(<argument>const Twine &amp;Path</argument>)</argument_list></macro> <name>override</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>File</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<macro><name>openFileForRead</name><argument_list>(<argument>const Twine &amp;Path</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>void</name> <macro><name>clearIgnoredFiles</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>IgnoredFiles</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>ignoreFile</name><argument_list>(<argument>StringRef Filename</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>
<name>bool</name> <macro><name>shouldIgnoreFile</name><argument_list>(<argument>StringRef Filename</argument>)</argument_list></macro></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>ErrorOr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CachedFileSystemEntry</name> <operator>*</operator></expr></argument>&gt;</argument_list></name>
<macro><name>getOrCreateFileSystemEntry</name><argument_list>(<argument>const StringRef Filename</argument>)</argument_list></macro></expr>;


<expr><name>DependencyScanningFilesystemSharedCache</name> <operator>&amp;</operator><name>SharedCache</name></expr>;


<expr><name>DependencyScanningFilesystemLocalCache</name> <name>Cache</name></expr>;



<expr><name>ExcludedPreprocessorDirectiveSkipMapping</name> <operator>*</operator><name>PPSkipMappings</name></expr>;

<expr><name>llvm</name><operator>::</operator><name><name>StringSet</name><argument_list type="generic">&lt;&gt;</argument_list></name> <name>IgnoredFiles</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
