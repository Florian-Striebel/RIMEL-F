<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/FunctionSummary.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_FUNCTIONSUMMARY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_FUNCTIONSUMMARY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/None.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallBitVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>SetOfDecls</name> <init>= <expr><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>SetOfConstDecls</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseSet</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FunctionSummariesTy</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>FunctionSummary</name> <block>{<block_content>
<label><name>public</name>:</label>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SmallBitVector</name> <name>VisitedBasicBlocks</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TotalBasicBlocks</name> <range>: <expr><literal type="number">30</literal></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name></type> <name>InlineChecked</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>MayInline</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>TimesInlined</name> <range>: <expr><literal type="number">32</literal></expr></range></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FunctionSummary</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>TotalBasicBlocks</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>InlineChecked</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MayInline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>TimesInlined</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>MapTy</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>FunctionSummary</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MapTy</name></type> <name>Map</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>iterator</name> <macro><name>findOrInsertSummary</name><argument_list>(<argument>const Decl *D</argument>)</argument_list></macro> <block>{
<expr><name>MapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>I</name></expr>;</return></block_content></block></if></if_stmt>

<name>using</name> <name>KVPair</name> <operator>=</operator> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>FunctionSummary</name></expr></argument>&gt;</argument_list></name></block></expr>;</expr_stmt>

<expr_stmt><expr><name>I</name> <operator>=</operator> <call><name><name>Map</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>KVPair</name><argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><call><name>FunctionSummary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>I</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>markMayInline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name>findOrInsertSummary</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>InlineChecked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>MayInline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>markShouldNotInline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name>findOrInsertSummary</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>InlineChecked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>MayInline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>markReachedMaxBlockCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>markShouldNotInline</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>mayInline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>InlineChecked</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>MayInline</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>None</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>markVisitedBasicBlock</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decl</name><modifier>*</modifier></type> <name>D</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>TotalIDs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name>findOrInsertSummary</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>SmallBitVector</name> <operator>&amp;</operator><name>Blocks</name> <operator>=</operator> <name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>VisitedBasicBlocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ID</name> <operator>&lt;</operator> <name>TotalIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>TotalIDs</name> <operator>&gt;</operator> <call><name><name>Blocks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Blocks</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>TotalIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>TotalBasicBlocks</name></name> <operator>=</operator> <name>TotalIDs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name><name>Blocks</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>getNumVisitedBasicBlocks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>VisitedBasicBlocks</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>getNumTimesInlined</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>TimesInlined</name></name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bumpNumTimesInlined</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>iterator</name> <name>I</name> <operator>=</operator> <call><name>findOrInsertSummary</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>TimesInlined</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name></type> <name>getPercentBlocksReachable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>MapTy</name><operator>::</operator><name>const_iterator</name> <name>I</name> <operator>=</operator> <call><name><name>Map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><call><name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>VisitedBasicBlocks</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator>
<name><name>I</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>TotalBasicBlocks</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>unsigned</name></type> <name>getTotalNumBasicBlocks</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name></type> <name>getTotalNumVisitedBasicBlocks</name><parameter_list>()</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
