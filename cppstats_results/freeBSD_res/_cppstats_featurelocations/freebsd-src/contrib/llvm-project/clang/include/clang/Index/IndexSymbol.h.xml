<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Index/IndexSymbol.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_INDEX_INDEXSYMBOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_INDEX_INDEXSYMBOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/MacroInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/DataTypes.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LangOptions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>index</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SymbolKind</name> <range>: <expr><name>uint8_t</name> <block>{
<expr><name>Unknown</name></expr>,

<expr><name>Module</name></expr>,
<expr><name>Namespace</name></expr>,
<expr><name>NamespaceAlias</name></expr>,
<expr><name>Macro</name></expr>,

<expr><name>Enum</name></expr>,
<expr><name>Struct</name></expr>,
<expr><name>Class</name></expr>,
<expr><name>Protocol</name></expr>,
<expr><name>Extension</name></expr>,
<expr><name>Union</name></expr>,
<expr><name>TypeAlias</name></expr>,

<expr><name>Function</name></expr>,
<expr><name>Variable</name></expr>,
<expr><name>Field</name></expr>,
<expr><name>EnumConstant</name></expr>,

<expr><name>InstanceMethod</name></expr>,
<expr><name>ClassMethod</name></expr>,
<expr><name>StaticMethod</name></expr>,
<expr><name>InstanceProperty</name></expr>,
<expr><name>ClassProperty</name></expr>,
<expr><name>StaticProperty</name></expr>,

<expr><name>Constructor</name></expr>,
<expr><name>Destructor</name></expr>,
<expr><name>ConversionFunction</name></expr>,

<expr><name>Parameter</name></expr>,
<expr><name>Using</name></expr>,
<expr><name>TemplateTypeParm</name></expr>,
<expr><name>TemplateTemplateParm</name></expr>,
<expr><name>NonTypeTemplateParm</name></expr>,
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SymbolLanguage</name> <range>: <expr><name>uint8_t</name> <block>{
<expr><name>C</name></expr>,
<expr><name>ObjC</name></expr>,
<expr><name>CXX</name></expr>,
<expr><name>Swift</name></expr>,
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SymbolSubKind</name> <range>: <expr><name>uint8_t</name> <block>{
<expr><name>None</name></expr>,
<expr><name>CXXCopyConstructor</name></expr>,
<expr><name>CXXMoveConstructor</name></expr>,
<expr><name>AccessorGetter</name></expr>,
<expr><name>AccessorSetter</name></expr>,
<expr><name>UsingTypename</name></expr>,
<expr><name>UsingValue</name></expr>,
<expr><name>UsingEnum</name></expr>,
}</block></expr></range></decl>;</decl_stmt>

<typedef>typedef <type><name>uint16_t</name></type> <name>SymbolPropertySet</name>;</typedef>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SymbolProperty</name> <range>: <expr><name>SymbolPropertySet</name> <block>{
<expr><name>Generic</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>,
<expr><name>TemplatePartialSpecialization</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
<expr><name>TemplateSpecialization</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>,
<expr><name>UnitTest</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>,
<expr><name>IBAnnotated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>,
<expr><name>IBOutletCollection</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>,
<expr><name>GKInspectable</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>,
<expr><name>Local</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>,

<expr><name>ProtocolInterface</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>,
}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>SymbolPropertyBitNum</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SymbolRole</name> <range>: <expr><name>uint32_t</name> <block>{
<expr><name>Declaration</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>,
<expr><name>Definition</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>,
<expr><name>Reference</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>,
<expr><name>Read</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>,
<expr><name>Write</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>,
<expr><name>Call</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>,
<expr><name>Dynamic</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>,
<expr><name>AddressOf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>,
<expr><name>Implicit</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>,


<expr><name>Undefinition</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>,


<expr><name>RelationChildOf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>,
<expr><name>RelationBaseOf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>,
<expr><name>RelationOverrideOf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>,
<expr><name>RelationReceivedBy</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>,
<expr><name>RelationCalledBy</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>,
<expr><name>RelationExtendedBy</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>,
<expr><name>RelationAccessorOf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>,
<expr><name>RelationContainedBy</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr>,
<expr><name>RelationIBTypeOf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>,
<expr><name>RelationSpecializationOf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal></expr>,



<expr><name>NameReference</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>,
}</block></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>SymbolRoleBitNum</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>unsigned</name></type> <name>SymbolRoleSet</name>;</typedef>


<struct>struct <name>SymbolRelation</name> <block>{
<decl_stmt><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>RelatedSymbol</name></decl>;</decl_stmt>

<macro><name>SymbolRelation</name><argument_list>(<argument>SymbolRoleSet Roles</argument>, <argument>const Decl *Sym</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Roles</name><argument_list>(<argument><expr><name>Roles</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>RelatedSymbol</name><argument_list>(<argument>Sym</argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>SymbolInfo</name> <block>{
<decl_stmt><decl><type><name>SymbolKind</name></type> <name>Kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolSubKind</name></type> <name>SubKind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolLanguage</name></type> <name>Lang</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SymbolPropertySet</name></type> <name>Properties</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>SymbolInfo</name></type> <name>getSymbolInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>SymbolInfo</name></type> <name>getSymbolInfoForMacro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MacroInfo</name> <modifier>&amp;</modifier></type><name>MI</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isFunctionLocalSymbol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>applyForEachSymbolRole</name><argument_list>(<argument><expr><name>SymbolRoleSet</name> <name>Roles</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>SymbolRole</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Fn</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>applyForEachSymbolRoleInterruptible</name><argument_list>(<argument><expr><name>SymbolRoleSet</name> <name>Roles</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>SymbolRole</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Fn</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>printSymbolRoles</name><parameter_list>(<parameter><decl><type><name>SymbolRoleSet</name></type> <name>Roles</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>bool</name></type> <name>printSymbolName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LangOptions</name> <modifier>&amp;</modifier></type><name>LO</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>StringRef</name></type> <name>getSymbolKindString</name><parameter_list>(<parameter><decl><type><name>SymbolKind</name></type> <name>K</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>getSymbolSubKindString</name><parameter_list>(<parameter><decl><type><name>SymbolSubKind</name></type> <name>K</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>StringRef</name></type> <name>getSymbolLanguageString</name><parameter_list>(<parameter><decl><type><name>SymbolLanguage</name></type> <name>K</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>applyForEachSymbolProperty</name><argument_list>(<argument><expr><name>SymbolPropertySet</name> <name>Props</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>function_ref</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>SymbolProperty</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>Fn</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>printSymbolProperties</name><parameter_list>(<parameter><decl><type><name>SymbolPropertySet</name></type> <name>Props</name></decl></parameter>, <parameter><decl><type><name>raw_ostream</name> <modifier>&amp;</modifier></type><name>OS</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
