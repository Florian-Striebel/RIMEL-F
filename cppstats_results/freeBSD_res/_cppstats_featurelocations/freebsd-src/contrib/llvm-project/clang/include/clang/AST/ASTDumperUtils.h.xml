<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/ASTDumperUtils.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_ASTDUMPERUTILS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_ASTDUMPERUTILS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>


<enum>enum <name>ASTDumpOutputFormat</name> <block>{
<decl><name>ADOF_Default</name></decl>,
<decl><name>ADOF_JSON</name></decl>
}</block>;</enum>




<struct>struct <name>TerminalColor</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>Colors</name> <name>Color</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Bold</name></decl>;</decl_stmt>
}</block>;</struct>












<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>DeclKindNameColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>GREEN</name></expr>, <expr><name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>AttrColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>BLUE</name></expr>, <expr><name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>StmtColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>MAGENTA</name></expr>, <expr><name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>CommentColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>BLUE</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>TypeColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>GREEN</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>AddressColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>YELLOW</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>LocationColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>YELLOW</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>ValueKindColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>CYAN</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>ObjectKindColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>CYAN</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>ErrorsColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>RED</name></expr>, <expr><name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>NullColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>BLUE</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>UndeserializedColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>GREEN</name></expr>,
<expr><name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>CastColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>RED</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>ValueColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>CYAN</name></expr>, <expr><name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>DeclNameColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>CYAN</name></expr>, <expr><name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TerminalColor</name></type> <name>IndentColor</name> <init>= <expr><block>{<expr><name>llvm</name><operator>::</operator><name>raw_ostream</name><operator>::</operator><name>BLUE</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ColorScope</name> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>raw_ostream</name> <operator>&amp;</operator><name>OS</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ShowColors</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ColorScope</name><argument_list>(<argument>llvm::raw_ostream &amp;OS</argument>, <argument>bool ShowColors</argument>, <argument>TerminalColor Color</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>OS</name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>ShowColors</name><argument_list>(<argument>ShowColors</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>ShowColors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>OS</name><operator>.</operator><name>changeColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>Color</name></name></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>Bold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
<expr_stmt><expr><operator>~</operator><macro><name>ColorScope</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>ShowColors</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>OS</name><operator>.</operator><name>resetColor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
