<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/Transformer/Stencil.h">


















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_TRANSFORMER_STENCIL_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_TRANSFORMER_STENCIL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/ASTTypeTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchFinder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Transformer/MatchConsumer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Transformer/RangeSelector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>transformer</name> <block>{<block_content>

<decl_stmt><decl><type><name>using</name></type> <name>StencilInterface</name> <init>= <expr><name><name>MatchComputation</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>









<decl_stmt><decl><type><name>using</name></type> <name>Stencil</name> <init>= <expr><name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>StencilInterface</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>detail</name> <block>{<block_content>




<decl_stmt><decl><type><name>Stencil</name></type> <name>makeStencil</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Text</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>Stencil</name></type> <name>makeStencil</name><parameter_list>(<parameter><decl><type><name>RangeSelector</name></type> <name>Selector</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>inline</specifier> <name>Stencil</name></type> <name>makeStencil</name><parameter_list>(<parameter><decl><type><name>Stencil</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>S</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>Stencil</name></type> <name>catVector</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Stencil</name></expr></argument>&gt;</argument_list></name> <name>Parts</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Ts</name></expr></argument>&gt;</argument_list></name> <name>Stencil</name></type> <name>cat</name><argument_list>(<argument><expr><name>Ts</name> <operator>&amp;&amp;</operator><operator>...</operator> <name>Parts</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <macro><name>catVector</name><argument_list>(<argument>{detail::makeStencil(std::forward&lt;Ts&gt;(Parts))...}</argument>)</argument_list></macro>;</return>
</block_content>}</block></decl></decl_stmt>









<decl_stmt><decl><type><name>Stencil</name></type> <name>expression</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Id</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><name>Stencil</name></type> <name>deref</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ExprId</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Stencil</name></type> <name>maybeDeref</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ExprId</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Stencil</name></type> <name>addressOf</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ExprId</name></expr></argument>)</argument_list></decl>;</decl_stmt>





<decl_stmt><decl><type><name>Stencil</name></type> <name>maybeAddressOf</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>ExprId</name></expr></argument>)</argument_list></decl>;</decl_stmt>






<decl_stmt><decl><type><name>Stencil</name></type> <name>access</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>BaseId</name></expr></argument>, <argument><expr><name>Stencil</name> <name>Member</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>inline</specifier> <name>Stencil</name></type> <name>access</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>BaseId</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Member</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>access</name><argument_list>(<argument><expr><name>BaseId</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><call><name>makeStencil</name><argument_list>(<argument><expr><name>Member</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>Stencil</name></type> <name>ifBound</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Id</name></expr></argument>, <argument><expr><name>Stencil</name> <name>TrueStencil</name></expr></argument>, <argument><expr><name>Stencil</name> <name>FalseStencil</name></expr></argument>)</argument_list></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>inline</specifier> <name>Stencil</name></type> <name>ifBound</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Id</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>TrueText</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>FalseText</name></expr></argument>)</argument_list> <block>{<block_content>
<return>return <expr><call><name>ifBound</name><argument_list>(<argument><expr><name>Id</name></expr></argument>, <argument><expr><name>detail</name><operator>::</operator><call><name>makeStencil</name><argument_list>(<argument><expr><name>TrueText</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>detail</name><operator>::</operator><call><name>makeStencil</name><argument_list>(<argument><expr><name>FalseText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function_decl><type><name>Stencil</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name><name>MatchConsumer</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>C</name></decl></parameter>)</parameter_list>;</function_decl>








<decl_stmt><decl><type><name>Stencil</name></type> <name>describe</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Id</name></expr></argument>)</argument_list></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Stencil</name></type> <name>dPrint</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StringRef</name> <name>Id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
