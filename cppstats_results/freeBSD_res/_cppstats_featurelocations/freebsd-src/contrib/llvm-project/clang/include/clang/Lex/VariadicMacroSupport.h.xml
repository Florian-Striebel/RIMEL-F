<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/VariadicMacroSupport.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_VARIADICMACROSUPPORT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_VARIADICMACROSUPPORT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Preprocessor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>class</name></type> <name>VariadicMacroScopeGuard</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>Preprocessor</name> <modifier>&amp;</modifier></type><name>PP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Ident__VA_ARGS__</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Ident__VA_OPT__</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>VariadicMacroScopeGuard</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Preprocessor</name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>PP</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Ident__VA_ARGS__</name><argument_list>(<argument><expr><name><name>PP</name><operator>.</operator><name>Ident__VA_ARGS__</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>Ident__VA_OPT__</name><argument_list>(<argument>PP.Ident__VA_OPT__</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Ident__VA_ARGS__</name><operator>-&gt;</operator><name>isPoisoned</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"__VA_ARGS__ should be poisoned "</literal>
<literal type="string">"outside an ISO C/C++ variadic "</literal>
<literal type="string">"macro definition!"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Ident__VA_OPT__</name><operator>-&gt;</operator><name>isPoisoned</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"__VA_OPT__ should be poisoned!"</literal></expr></argument>)</argument_list></call></expr>;
}</block>



<name>void</name> <macro><name>enterScope</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>Ident__VA_ARGS__</name><operator>-&gt;</operator><name>setIsPoisoned</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Ident__VA_OPT__</name><operator>-&gt;</operator><name>setIsPoisoned</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;
}</block>





<name>void</name> <macro><name>exitScope</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>Ident__VA_ARGS__</name><operator>-&gt;</operator><name>setIsPoisoned</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Ident__VA_OPT__</name><operator>-&gt;</operator><name>setIsPoisoned</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>VariadicMacroScopeGuard</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>exitScope</name><argument_list>()</argument_list></call></expr>; }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>VAOptDefinitionContext</name> <block>{<block_content>

<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>SourceLocation</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>UnmatchedOpeningParens</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>IdentifierInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>Ident__VA_OPT__</name></decl>;</decl_stmt>


<label><name>public</name>:</label>
<expr_stmt><expr><call><name>VAOptDefinitionContext</name><argument_list>(<argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>Ident__VA_OPT__</name><argument_list>(<argument>PP.Ident__VA_OPT__</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>isVAOptToken</name><argument_list>(<argument>const Token &amp;T</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Ident__VA_OPT__</name> <operator>&amp;&amp;</operator> <call><name><name>T</name><operator>.</operator><name>getIdentifierInfo</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>Ident__VA_OPT__</name></expr>;</return>
}</block></expr></expr_stmt>



<expr_stmt><expr><name>bool</name> <macro><name>isInVAOpt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>UnmatchedOpeningParens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>sawVAOptFollowedByOpeningParens</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SourceLocation</name></type> <name>LParenLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isInVAOpt</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Must NOT be within VAOPT context to call this"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>UnmatchedOpeningParens</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>LParenLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getUnmatchedOpeningParenLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isInVAOpt</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Must be within VAOPT context to call this"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>UnmatchedOpeningParens</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>




<function><type><name>bool</name></type> <name>sawClosingParen</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isInVAOpt</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Must be within VAOPT context to call this"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>UnmatchedOpeningParens</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>!</operator><call><name><name>UnmatchedOpeningParens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sawOpeningParen</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>LParenLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isInVAOpt</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Must be within VAOPT context to call this"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>UnmatchedOpeningParens</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>LParenLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isAtTopLevel</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>UnmatchedOpeningParens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>VAOptExpansionContext</name> <range>: <expr><name>VAOptDefinitionContext</name> <block>{

<expr><name>Token</name> <name>SyntheticEOFToken</name></expr>;



<expr><name>SourceLocation</name> <name>VAOptLoc</name></expr>;





<expr><name>int</name> <name>NumOfTokensPriorToVAOpt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>LeadingSpaceForStringifiedToken</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>unsigned</name> <name>StringifyBefore</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>CharifyBefore</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>BeginsWithPlaceholder</name> <operator>:</operator> <literal type="number">1</literal></expr>;
<expr><name>unsigned</name> <name>EndsWithPlaceholder</name> <operator>:</operator> <literal type="number">1</literal></expr>;

<expr><name>bool</name> <macro><name>hasStringifyBefore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isReset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Must only be called if the state has not been reset"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>StringifyBefore</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>isReset</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>NumOfTokensPriorToVAOpt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name><name>VAOptLoc</name><operator>.</operator><name>isInvalid</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>public</name><operator>:</operator>
<call><name>VAOptExpansionContext</name><argument_list>(<argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>VAOptDefinitionContext</name><argument_list>(<argument><expr><name>PP</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>LeadingSpaceForStringifiedToken</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>StringifyBefore</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>CharifyBefore</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>BeginsWithPlaceholder</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>, <macro><name>EndsWithPlaceholder</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{
<expr><call><name><name>SyntheticEOFToken</name><operator>.</operator><name>startToken</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>SyntheticEOFToken</name><operator>.</operator><name>setKind</name></name><argument_list>(<argument><expr><name>tok</name><operator>::</operator><name>eof</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>reset</name><argument_list>()</argument_list></macro> <block>{
<expr><name>VAOptLoc</name> <operator>=</operator> <call><name>SourceLocation</name><argument_list>()</argument_list></call></expr>;
<expr><name>NumOfTokensPriorToVAOpt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;
<expr><name>LeadingSpaceForStringifiedToken</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>StringifyBefore</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>CharifyBefore</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>BeginsWithPlaceholder</name> <operator>=</operator> <name>false</name></expr>;
<expr><name>EndsWithPlaceholder</name> <operator>=</operator> <name>false</name></expr>;
}</block>

<specifier>const</specifier> <name>Token</name> <operator>&amp;</operator><macro><name>getEOFTok</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>SyntheticEOFToken</name></expr>;</return> }</block>

<name>void</name> <macro><name>sawHashOrHashAtBefore</name><argument_list>(<argument>const bool HasLeadingSpace</argument>,
<argument>const bool IsHashAt</argument>)</argument_list></macro> <block>{

<expr><name>StringifyBefore</name> <operator>=</operator> <operator>!</operator><name>IsHashAt</name></expr>;
<expr><name>CharifyBefore</name> <operator>=</operator> <name>IsHashAt</name></expr>;
<expr><name>LeadingSpaceForStringifiedToken</name> <operator>=</operator> <name>HasLeadingSpace</name></expr>;
}</block>

<name>void</name> <macro><name>hasPlaceholderAfterHashhashAtStart</name><argument_list>()</argument_list></macro> <block>{ <expr><name>BeginsWithPlaceholder</name> <operator>=</operator> <name>true</name></expr>; }</block>
<name>void</name> <macro><name>hasPlaceholderBeforeRParen</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isAtTopLevel</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>EndsWithPlaceholder</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>


<name>bool</name> <macro><name>beginsWithPlaceholder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isReset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Must only be called if the state has not been reset"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>BeginsWithPlaceholder</name></expr>;</return>
}</block>
<name>bool</name> <macro><name>endsWithPlaceholder</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isReset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Must only be called if the state has not been reset"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>EndsWithPlaceholder</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>hasCharifyBefore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isReset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Must only be called if the state has not been reset"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>CharifyBefore</name></expr>;</return>
}</block>
<name>bool</name> <macro><name>hasStringifyOrCharifyBefore</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>hasStringifyBefore</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>hasCharifyBefore</name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>unsigned</name> <name>int</name> <macro><name>getNumberOfTokensPriorToVAOpt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isReset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Must only be called if the state has not been reset"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>NumOfTokensPriorToVAOpt</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>getLeadingSpaceForStringifiedToken</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasStringifyBefore</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Must only be called if this has been marked for stringification"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>LeadingSpaceForStringifiedToken</name></expr>;</return>
}</block>

<name>void</name> <macro><name>sawVAOptFollowedByOpeningParens</name><argument_list>(<argument>const SourceLocation VAOptLoc</argument>,
<argument>const unsigned int NumPriorTokens</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>VAOptLoc</name><operator>.</operator><name>isFileID</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Must not come from a macro expansion"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>isReset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Must only be called if the state has been reset"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>VAOptDefinitionContext</name><operator>::</operator><call><name>sawVAOptFollowedByOpeningParens</name><argument_list>(<argument><expr><call><name>SourceLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name><name>this</name><operator>-&gt;</operator><name>VAOptLoc</name></name> <operator>=</operator> <name>VAOptLoc</name></expr>;
<expr><name>NumOfTokensPriorToVAOpt</name> <operator>=</operator> <name>NumPriorTokens</name></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name>NumOfTokensPriorToVAOpt</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<literal type="string">"Too many prior tokens"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>SourceLocation</name> <macro><name>getVAOptLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isReset</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<literal type="string">"Must only be called if the state has not been reset"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>VAOptLoc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"__VA_OPT__ location must be valid"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>VAOptLoc</name></expr>;</return>
}</block>
<name>using</name> <name>VAOptDefinitionContext</name><operator>::</operator><name>isVAOptToken</name></expr>;
<expr><name>using</name> <name>VAOptDefinitionContext</name><operator>::</operator><name>isInVAOpt</name></expr>;
<expr><name>using</name> <name>VAOptDefinitionContext</name><operator>::</operator><name>sawClosingParen</name></expr>;
<expr><name>using</name> <name>VAOptDefinitionContext</name><operator>::</operator><name>sawOpeningParen</name></expr>;

}</block></expr></range></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
