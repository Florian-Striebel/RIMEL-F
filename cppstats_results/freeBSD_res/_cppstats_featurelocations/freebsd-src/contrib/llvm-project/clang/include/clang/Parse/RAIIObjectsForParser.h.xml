<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Parse/RAIIObjectsForParser.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LIB_PARSE_RAIIOBJECTSFORPARSER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LIB_PARSE_RAIIOBJECTSFORPARSER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Parse/ParseDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Parse/Parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/DelayedDiagnostic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/ParsedTemplate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Sema/Sema.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




















<decl_stmt><decl><type><name>class</name></type> <name>SuppressAccessChecks</name> <block>{<block_content>
<decl_stmt><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>S</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sema</name><operator>::</operator><name>DelayedDiagnosticPool</name> <name>DiagnosticPool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Sema</name><operator>::</operator><name>ParsingDeclState</name> <name>State</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Active</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<macro><name>SuppressAccessChecks</name><argument_list>(<argument>Parser &amp;P</argument>, <argument>bool activate = true</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><call><name><name>P</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>DiagnosticPool</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>activate</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>State</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>PushParsingDeclaration</name></name><argument_list>(<argument><expr><name>DiagnosticPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Active</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><name>Active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}
SuppressAccessChecks(SuppressAccessChecks &amp;&amp;Other</block></block></if></if_stmt>)
<operator>:</operator> <call><name>S</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>S</name></name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>DiagnosticPool</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>DiagnosticPool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
<call><name>State</name><argument_list>(<argument><expr><name><name>Other</name><operator>.</operator><name>State</name></name></expr></argument>)</argument_list></call><operator>,</operator> <macro><name>Active</name><argument_list>(<argument>Other.Active</argument>)</argument_list></macro> <block>{
<expr><name><name>Other</name><operator>.</operator><name>Active</name></name> <operator>=</operator> <name>false</name></expr>;
}</block></block>
<name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><name>SuppressAccessChecks</name> <operator>&amp;&amp;</operator><name>Other</name><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>

<function><type><name>void</name></type> <name>done</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Active</name> <operator>&amp;&amp;</operator> <literal type="string">"trying to end an inactive suppression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>PopParsingDeclaration</name></name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Active</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>redelay</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Active</name> <operator>&amp;&amp;</operator> <literal type="string">"redelaying without having ended first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DiagnosticPool</name><operator>.</operator><name>pool_empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>redelayDiagnostics</name></name><argument_list>(<argument><expr><name>DiagnosticPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>DiagnosticPool</name><operator>.</operator><name>pool_empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><operator>~</operator><macro><name>SuppressAccessChecks</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><name>Active</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>done</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>ParsingDeclRAIIObject</name> <block>{<block_content>
<decl_stmt><decl><type><name>Sema</name> <modifier>&amp;</modifier></type><name>Actions</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sema</name><operator>::</operator><name>DelayedDiagnosticPool</name> <name>DiagnosticPool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Sema</name><operator>::</operator><name>ParsingDeclState</name> <name>State</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Popped</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ParsingDeclRAIIObject</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ParsingDeclRAIIObject</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ParsingDeclRAIIObject</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<enum>enum <name>NoParent_t</name> <block>{ <decl><name>NoParent</name></decl> }</block>;</enum>
<macro><name>ParsingDeclRAIIObject</name><argument_list>(<argument>Parser &amp;P</argument>, <argument>NoParent_t _</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Actions</name><argument_list>(<argument><expr><call><name><name>P</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>DiagnosticPool</name><argument_list>(<argument>nullptr</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>push</name><argument_list>()</argument_list></call></expr>;
}</block>


<call><name>ParsingDeclRAIIObject</name><argument_list>(<argument><expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>sema</name><operator>::</operator><name>DelayedDiagnosticPool</name> <operator>*</operator><name>parentPool</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Actions</name><argument_list>(<argument><expr><call><name><name>P</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>DiagnosticPool</name><argument_list>(<argument>parentPool</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>push</name><argument_list>()</argument_list></call></expr>;
}</block>




<call><name>ParsingDeclRAIIObject</name><argument_list>(<argument><expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>ParsingDeclRAIIObject</name> <operator>*</operator><name>other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Actions</name><argument_list>(<argument><expr><call><name><name>P</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>DiagnosticPool</name><argument_list>(<argument>other ? other-&gt;DiagnosticPool.getParent() : nullptr</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>other</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>DiagnosticPool</name><operator>.</operator><name>steal</name></name><argument_list>(<argument><expr><name><name>other</name><operator>-&gt;</operator><name>DiagnosticPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>other</name><operator>-&gt;</operator><name>abort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
push(</block></if></if_stmt>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><operator>~</operator><macro><name>ParsingDeclRAIIObject</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;
}</block>

<name>sema</name><operator>::</operator><name>DelayedDiagnosticPool</name> <operator>&amp;</operator><macro><name>getDelayedDiagnosticPool</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>DiagnosticPool</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>sema</name><operator>::</operator><name>DelayedDiagnosticPool</name> <operator>&amp;</operator><macro><name>getDelayedDiagnosticPool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>DiagnosticPool</name></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>abort</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pop</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>complete</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Popped</name> <operator>&amp;&amp;</operator> <literal type="string">"ParsingDeclaration has already been popped!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pop</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>abortAndRemember</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>pop</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<label><name>private</name>:</label>
<function><type><name>void</name></type> <name>push</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>State</name> <operator>=</operator> <call><name><name>Actions</name><operator>.</operator><name>PushParsingDeclaration</name></name><argument_list>(<argument><expr><name>DiagnosticPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Popped</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pop</name><parameter_list>(<parameter><decl><type><name>Decl</name> <modifier>*</modifier></type><name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Popped</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>Actions</name><operator>.</operator><name>PopParsingDeclaration</name></name><argument_list>(<argument><expr><name>State</name></expr></argument>, <argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>Popped</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>ParsingDeclSpec</name> <range>: <expr><name>public</name> <name>DeclSpec</name> <block>{
<expr><name>ParsingDeclRAIIObject</name> <name>ParsingRAII</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ParsingDeclSpec</name><argument_list>(<argument><expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>DeclSpec</name><argument_list>(<argument><expr><call><name><name>P</name><operator>.</operator><name>getAttrFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>ParsingRAII</name><argument_list>(<argument>P</argument>, <argument>ParsingDeclRAIIObject::NoParent</argument>)</argument_list></macro> <expr><block>{}</block>
<call><name>ParsingDeclSpec</name><argument_list>(<argument><expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>ParsingDeclRAIIObject</name> <operator>*</operator><name>RAII</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>DeclSpec</name><argument_list>(<argument><expr><call><name><name>P</name><operator>.</operator><name>getAttrFactory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
<macro><name>ParsingRAII</name><argument_list>(<argument>P</argument>, <argument>RAII</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>sema</name><operator>::</operator><name>DelayedDiagnosticPool</name> <operator>&amp;</operator><macro><name>getDelayedDiagnosticPool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ParsingRAII</name><operator>.</operator><name>getDelayedDiagnosticPool</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>complete</name><argument_list>(<argument>Decl *D</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ParsingRAII</name><operator>.</operator><name>complete</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>abort</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>ParsingRAII</name><operator>.</operator><name>abort</name></name><argument_list>()</argument_list></call></expr>;
}</block>
}</expr>;


<expr><name>class</name> <name>ParsingDeclarator</name> <operator>:</operator> <name>public</name> <name>Declarator</name> <block>{
<expr><name>ParsingDeclRAIIObject</name> <name>ParsingRAII</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ParsingDeclarator</name><argument_list>(<argument>Parser &amp;P</argument>, <argument>const ParsingDeclSpec &amp;DS</argument>, <argument>DeclaratorContext C</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Declarator</name><argument_list>(<argument><expr><name>DS</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>, <macro><name>ParsingRAII</name><argument_list>(<argument>P</argument>, <argument>&amp;DS.getDelayedDiagnosticPool()</argument>)</argument_list></macro> <expr><block>{
}</block>

<specifier>const</specifier> <name>ParsingDeclSpec</name> <operator>&amp;</operator><macro><name>getDeclSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParsingDeclSpec</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>Declarator</name><operator>::</operator><call><name>getDeclSpec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ParsingDeclSpec</name> <operator>&amp;</operator><macro><name>getMutableDeclSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>ParsingDeclSpec</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDeclSpec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> <block>{
<expr><name>Declarator</name><operator>::</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>ParsingRAII</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>complete</name><argument_list>(<argument>Decl *D</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ParsingRAII</name><operator>.</operator><name>complete</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;


<expr><name>class</name> <name>ParsingFieldDeclarator</name> <operator>:</operator> <name>public</name> <name>FieldDeclarator</name> <block>{
<expr><name>ParsingDeclRAIIObject</name> <name>ParsingRAII</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>ParsingFieldDeclarator</name><argument_list>(<argument><expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ParsingDeclSpec</name> <operator>&amp;</operator><name>DS</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>FieldDeclarator</name><argument_list>(<argument><expr><name>DS</name></expr></argument>)</argument_list></call></expr>, <macro><name>ParsingRAII</name><argument_list>(<argument>P</argument>, <argument>&amp;DS.getDelayedDiagnosticPool()</argument>)</argument_list></macro> <expr><block>{
}</block>

<specifier>const</specifier> <name>ParsingDeclSpec</name> <operator>&amp;</operator><macro><name>getDeclSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParsingDeclSpec</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>D</name><operator>.</operator><name>getDeclSpec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>ParsingDeclSpec</name> <operator>&amp;</operator><macro><name>getMutableDeclSpec</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>ParsingDeclSpec</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getDeclSpec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>complete</name><argument_list>(<argument>Decl *D</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ParsingRAII</name><operator>.</operator><name>complete</name></name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;





<expr><name>class</name> <name>ExtensionRAIIObject</name> <block>{
<expr><call><name>ExtensionRAIIObject</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ExtensionRAIIObject</name> <operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;
<expr><name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>ExtensionRAIIObject</name> <operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr>;

<expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>Diags</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>ExtensionRAIIObject</name><argument_list>(<argument><expr><name>DiagnosticsEngine</name> <operator>&amp;</operator><name>diags</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Diags</name><argument_list>(<argument>diags</argument>)</argument_list></macro> <block>{
<expr><call><name><name>Diags</name><operator>.</operator><name>IncrementAllExtensionsSilenced</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<operator>~</operator><macro><name>ExtensionRAIIObject</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>Diags</name><operator>.</operator><name>DecrementAllExtensionsSilenced</name></name><argument_list>()</argument_list></call></expr>;
}</block></expr>
}</block></expr>;




<expr><name>class</name> <name>ColonProtectionRAIIObject</name> <block>{
<expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr>;
<expr><name>bool</name> <name>OldVal</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>ColonProtectionRAIIObject</name><argument_list>(<argument>Parser &amp;p</argument>, <argument>bool Value = true</argument>)</argument_list></macro>
<operator>:</operator> <call><name>P</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>, <macro><name>OldVal</name><argument_list>(<argument>P.ColonIsSacred</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>P</name><operator>.</operator><name>ColonIsSacred</name></name> <operator>=</operator> <name>Value</name></expr>;
}</block>



<name>void</name> <macro><name>restore</name><argument_list>()</argument_list></macro> <block>{
<expr><name><name>P</name><operator>.</operator><name>ColonIsSacred</name></name> <operator>=</operator> <name>OldVal</name></expr>;
}</block>

<operator>~</operator><macro><name>ColonProtectionRAIIObject</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>restore</name><argument_list>()</argument_list></call></expr>;
}</block></expr>
}</block></expr>;



<expr><name>class</name> <name>ParsingOpenMPDirectiveRAII</name> <block>{
<expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr>;
<expr><name>bool</name> <name>OldVal</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>ParsingOpenMPDirectiveRAII</name><argument_list>(<argument>Parser &amp;P</argument>, <argument>bool Value = true</argument>)</argument_list></macro>
<operator>:</operator> <call><name>P</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>, <macro><name>OldVal</name><argument_list>(<argument>P.OpenMPDirectiveParsing</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>P</name><operator>.</operator><name>OpenMPDirectiveParsing</name></name> <operator>=</operator> <name>Value</name></expr>;
}</block>



<name>void</name> <macro><name>restore</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>P</name><operator>.</operator><name>OpenMPDirectiveParsing</name></name> <operator>=</operator> <name>OldVal</name></expr>; }</block>

<operator>~</operator><macro><name>ParsingOpenMPDirectiveRAII</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>restore</name><argument_list>()</argument_list></call></expr>; }</block></expr>
}</block></expr>;



<expr><name>class</name> <name>GreaterThanIsOperatorScope</name> <block>{
<expr><name>bool</name> <operator>&amp;</operator><name>GreaterThanIsOperator</name></expr>;
<expr><name>bool</name> <name>OldGreaterThanIsOperator</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>GreaterThanIsOperatorScope</name><argument_list>(<argument>bool &amp;GTIO</argument>, <argument>bool Val</argument>)</argument_list></macro>
<operator>:</operator> <call><name>GreaterThanIsOperator</name><argument_list>(<argument><expr><name>GTIO</name></expr></argument>)</argument_list></call></expr>, <macro><name>OldGreaterThanIsOperator</name><argument_list>(<argument>GTIO</argument>)</argument_list></macro> <expr><block>{
<expr><name>GreaterThanIsOperator</name> <operator>=</operator> <name>Val</name></expr>;
}</block>

<operator>~</operator><macro><name>GreaterThanIsOperatorScope</name><argument_list>()</argument_list></macro> <block>{
<expr><name>GreaterThanIsOperator</name> <operator>=</operator> <name>OldGreaterThanIsOperator</name></expr>;
}</block></expr>
}</block></expr>;

<expr><name>class</name> <name>InMessageExpressionRAIIObject</name> <block>{
<expr><name>bool</name> <operator>&amp;</operator><name>InMessageExpression</name></expr>;
<expr><name>bool</name> <name>OldValue</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>InMessageExpressionRAIIObject</name><argument_list>(<argument>Parser &amp;P</argument>, <argument>bool Value</argument>)</argument_list></macro>
<operator>:</operator> <call><name>InMessageExpression</name><argument_list>(<argument><expr><name><name>P</name><operator>.</operator><name>InMessageExpression</name></name></expr></argument>)</argument_list></call></expr>,
<macro><name>OldValue</name><argument_list>(<argument>P.InMessageExpression</argument>)</argument_list></macro> <expr><block>{
<expr><name>InMessageExpression</name> <operator>=</operator> <name>Value</name></expr>;
}</block>

<operator>~</operator><macro><name>InMessageExpressionRAIIObject</name><argument_list>()</argument_list></macro> <block>{
<expr><name>InMessageExpression</name> <operator>=</operator> <name>OldValue</name></expr>;
}</block></expr>
}</block></expr>;



<expr><name>class</name> <name>ParenBraceBracketBalancer</name> <block>{
<expr><name>Parser</name> <operator>&amp;</operator><name>P</name></expr>;
<expr><name>unsigned</name> <name>short</name> <name>ParenCount</name></expr>, <expr><name>BracketCount</name></expr>, <expr><name>BraceCount</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>ParenBraceBracketBalancer</name><argument_list>(<argument><expr><name>Parser</name> <operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>P</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>ParenCount</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>ParenCount</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name>BracketCount</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>BracketCount</name></name></expr></argument>)</argument_list></call></expr>,
<macro><name>BraceCount</name><argument_list>(<argument>p.BraceCount</argument>)</argument_list></macro> <expr><block>{ }</block>

<operator>~</operator><macro><name>ParenBraceBracketBalancer</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name><name>P</name><operator>.</operator><name>AngleBrackets</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;
<expr><name><name>P</name><operator>.</operator><name>ParenCount</name></name> <operator>=</operator> <name>ParenCount</name></expr>;
<expr><name><name>P</name><operator>.</operator><name>BracketCount</name></name> <operator>=</operator> <name>BracketCount</name></expr>;
<expr><name><name>P</name><operator>.</operator><name>BraceCount</name></name> <operator>=</operator> <name>BraceCount</name></expr>;
}</block></expr>
}</block></expr>;

<expr><name>class</name> <name>PoisonSEHIdentifiersRAIIObject</name> <block>{
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident_AbnormalTermination</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident_GetExceptionCode</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident_GetExceptionInfo</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident__abnormal_termination</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident__exception_code</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident__exception_info</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident___abnormal_termination</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident___exception_code</name></expr>;
<expr><name>PoisonIdentifierRAIIObject</name> <name>Ident___exception_info</name></expr>;
<expr><name>public</name><operator>:</operator>
<macro><name>PoisonSEHIdentifiersRAIIObject</name><argument_list>(<argument>Parser &amp;Self</argument>, <argument>bool NewValue</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Ident_AbnormalTermination</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident_AbnormalTermination</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Ident_GetExceptionCode</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident_GetExceptionCode</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Ident_GetExceptionInfo</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident_GetExceptionInfo</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Ident__abnormal_termination</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident__abnormal_termination</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Ident__exception_code</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident__exception_code</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Ident__exception_info</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident__exception_info</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Ident___abnormal_termination</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident___abnormal_termination</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>Ident___exception_code</name><argument_list>(<argument><expr><name><name>Self</name><operator>.</operator><name>Ident___exception_code</name></name></expr></argument>, <argument><expr><name>NewValue</name></expr></argument>)</argument_list></call></expr>,
<macro><name>Ident___exception_info</name><argument_list>(<argument>Self.Ident___exception_info</argument>, <argument>NewValue</argument>)</argument_list></macro> <expr><block>{
}</block></expr>
}</block></expr>;



<expr><name>class</name> <name>BalancedDelimiterTracker</name> <operator>:</operator> <name>public</name> <name>GreaterThanIsOperatorScope</name> <block>{
<expr><name>Parser</name><operator>&amp;</operator> <name>P</name></expr>;
<expr><name>tok</name><operator>::</operator><name>TokenKind</name> <name>Kind</name></expr>, <expr><name>Close</name></expr>, <expr><name>FinalToken</name></expr>;
<expr><call><call><name>SourceLocation</name> <argument_list>(<argument><expr><name>Parser</name><operator>::</operator><operator>*</operator><name>Consumer</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;
<expr><name>SourceLocation</name> <name>LOpen</name></expr>, <expr><name>LClose</name></expr>;

<expr><name>unsigned</name> <name>short</name> <operator>&amp;</operator><macro><name>getDepth</name><argument_list>()</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>Kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>tok</name><operator>::</operator><name>l_brace</name></expr>:</case> <return>return <expr><name><name>P</name><operator>.</operator><name>BraceCount</name></name></expr>;</return>
<case>case <expr><name>tok</name><operator>::</operator><name>l_square</name></expr>:</case> <return>return <expr><name><name>P</name><operator>.</operator><name>BracketCount</name></name></expr>;</return>
<case>case <expr><name>tok</name><operator>::</operator><name>l_paren</name></expr>:</case> <return>return <expr><name><name>P</name><operator>.</operator><name>ParenCount</name></name></expr>;</return>
<default>default:</default> <expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Wrong token kind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

bool diagnoseOverflow(</block></switch>)</block></expr>;
<expr><name>bool</name> <call><name>diagnoseMissingClose</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>BalancedDelimiterTracker</name><argument_list>(<argument>Parser&amp; p</argument>, <argument>tok::TokenKind k</argument>,
<argument>tok::TokenKind FinalToken = tok::semi</argument>)</argument_list></macro>
<operator>:</operator> <call><name>GreaterThanIsOperatorScope</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>GreaterThanIsOperator</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>P</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Kind</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>, <macro><name>FinalToken</name><argument_list>(<argument>FinalToken</argument>)</argument_list></macro>
<expr><block>{
<switch>switch <condition>(<expr><name>Kind</name></expr>)</condition> <block>{<block_content>
<default>default:</default> <expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"Unexpected balanced token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>tok</name><operator>::</operator><name>l_brace</name></expr>:</case>
<expr_stmt><expr><name>Close</name> <operator>=</operator> <name>tok</name><operator>::</operator><name>r_brace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Consumer</name> <operator>=</operator> <operator>&amp;</operator><name>Parser</name><operator>::</operator><name>ConsumeBrace</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>tok</name><operator>::</operator><name>l_paren</name></expr>:</case>
<expr_stmt><expr><name>Close</name> <operator>=</operator> <name>tok</name><operator>::</operator><name>r_paren</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Consumer</name> <operator>=</operator> <operator>&amp;</operator><name>Parser</name><operator>::</operator><name>ConsumeParen</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>tok</name><operator>::</operator><name>l_square</name></expr>:</case>
<expr_stmt><expr><name>Close</name> <operator>=</operator> <name>tok</name><operator>::</operator><name>r_square</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Consumer</name> <operator>=</operator> <operator>&amp;</operator><name>Parser</name><operator>::</operator><name>ConsumeBracket</name></expr>;</expr_stmt>
<break>break;</break>
<expr_stmt/>}</block_content>
}

SourceLocation getOpenLocation(</block></switch>) <specifier>const</specifier> <block>{ <return>return <expr><name>LOpen</name></expr>;</return> }</block></block>
<name>SourceLocation</name> <macro><name>getCloseLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>LClose</name></expr>;</return> }</block>
<name>SourceRange</name> <macro><name>getRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>SourceRange</name><argument_list>(<argument><expr><name>LOpen</name></expr></argument>, <argument><expr><name>LClose</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>bool</name> <macro><name>consumeOpen</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>P</name><operator>.</operator><name>Tok</name><operator>.</operator><name>is</name></name><argument_list>(<argument><expr><name>Kind</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block></expr>

<if_stmt><if>if <condition>(<expr><call><name>getDepth</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>P</name><operator>.</operator><name>getLangOpts</name></name><argument_list>()</argument_list></call><operator>.</operator><name>BracketDepth</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LOpen</name> <operator>=</operator> <operator>(</operator><name>P</name><operator>.*</operator><name>Consumer</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/>}</block_content>

return diagnoseOverflow(</block></if></if_stmt>)</block></expr>;
}</block>

<name>bool</name> <macro><name>expectAndConsume</name><argument_list>(<argument>unsigned DiagID = diag::err_expected</argument>,
<argument>const char *Msg = <literal type="string">""</literal></argument>,
<argument>tok::TokenKind SkipToTok = tok::unknown</argument>)</argument_list></macro></expr>;
<expr><name>bool</name> <macro><name>consumeClose</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>P</name><operator>.</operator><name>Tok</name><operator>.</operator><name>is</name></name><argument_list>(<argument><expr><name>Close</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>LClose</name> <operator>=</operator> <operator>(</operator><name>P</name><operator>.*</operator><name>Consumer</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<expr_stmt/>}</block_content> else if (P.Tok.is(tok::semi</block></if></if_stmt>) <operator>&amp;&amp;</operator> <call><name><name>P</name><operator>.</operator><name>NextToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>is</name><argument_list>(<argument><expr><name>Close</name></expr></argument>)</argument_list></call>)</block> <block>{
<expr><name>SourceLocation</name> <name>SemiLoc</name> <operator>=</operator> <call><name><name>P</name><operator>.</operator><name>ConsumeToken</name></name><argument_list>()</argument_list></call></expr>;
<expr><call><name><name>P</name><operator>.</operator><name>Diag</name></name><argument_list>(<argument><expr><name>SemiLoc</name></expr></argument>, <argument><expr><name>diag</name><operator>::</operator><name>err_unexpected_semi</name></expr></argument>)</argument_list></call>
<operator>&lt;&lt;</operator> <name>Close</name> <operator>&lt;&lt;</operator> <name>FixItHint</name><operator>::</operator><call><name>CreateRemoval</name><argument_list>(<argument><expr><call><name>SourceRange</name><argument_list>(<argument><expr><name>SemiLoc</name></expr></argument>, <argument><expr><name>SemiLoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><name>LClose</name> <operator>=</operator> <operator>(</operator><name>P</name><operator>.*</operator><name>Consumer</name><operator>)</operator><operator>(</operator><operator>)</operator></expr>;
<return>return <expr><name>false</name></expr>;</return>
}</block></expr>

<return>return <expr><call><name>diagnoseMissingClose</name><argument_list>()</argument_list></call></expr>;</return>
}</block>
<name>void</name> <call><name>skipToEnd</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
