<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathDiagnosticConsumers.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHDIAGNOSTICCONSUMERS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHDIAGNOSTICCONSUMERS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/PathDiagnostic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AnalyzerOptions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>MacroExpansionContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>cross_tu</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>CrossTranslationUnitContext</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PathDiagnosticConsumer</name></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PathDiagnosticConsumer</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>PathDiagnosticConsumers</name></expr>;</expr_stmt></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYSIS_DIAGNOSTICS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>CMDFLAG</name></type></parameter>, <parameter><type><name>DESC</name></type></parameter>, <parameter><type><name>CREATEFN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void CREATEFN(PathDiagnosticConsumerOptions Diagopts, PathDiagnosticConsumers &amp;C, const std::string &amp;Prefix, const Preprocessor &amp;PP, const cross_tu::CrossTranslationUnitContext &amp;CTU, const MacroExpansionContext &amp;MacroExpansions);</cpp:value></cpp:define>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/Analyses.def"</cpp:file></cpp:include>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
