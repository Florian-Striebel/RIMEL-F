<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/CallGraph.h">















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_CALLGRAPH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_CALLGRAPH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/Decl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/RecursiveASTVisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/GraphTraits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/STLExtras.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SetVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/iterator_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CallGraphNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Decl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DeclContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>class</name></type> <name>CallGraph</name> <range>: <expr><name>public</name> <name><name>RecursiveASTVisitor</name><argument_list type="generic">&lt;<argument><expr><name>CallGraph</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>friend</name> <name>class</name> <name>CallGraphNode</name></expr>;

<expr><name>using</name> <name>FunctionMapTy</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CallGraphNode</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr>;


<expr><name>FunctionMapTy</name> <name>FunctionMap</name></expr>;


<expr><name>CallGraphNode</name> <operator>*</operator><name>Root</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>CallGraph</name><argument_list>()</argument_list></call></expr>;
<expr><operator>~</operator><call><name>CallGraph</name><argument_list>()</argument_list></call></expr>;





<expr><name>void</name> <macro><name>addToCallGraph</name><argument_list>(<argument>Decl *D</argument>)</argument_list></macro> <block>{
<expr><call><name>TraverseDecl</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;
}</block>


<specifier>static</specifier> <name>bool</name> <call><name>includeInGraph</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;




<expr><specifier>static</specifier> <name>bool</name> <call><name>includeCalleeInGraph</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;


<expr><name>CallGraphNode</name> <operator>*</operator><macro><name>getNode</name><argument_list>(<argument>const Decl *</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><name>CallGraphNode</name> <operator>*</operator><call><name>getOrInsertNode</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>using</name> <name>iterator</name> <operator>=</operator> <name>FunctionMapTy</name><operator>::</operator><name>iterator</name></expr>;
<expr><name>using</name> <name>const_iterator</name> <operator>=</operator> <name>FunctionMapTy</name><operator>::</operator><name>const_iterator</name></expr>;



<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>FunctionMap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name><name>FunctionMap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FunctionMap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FunctionMap</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>


<name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>FunctionMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>CallGraphNode</name> <operator>*</operator><macro><name>getRoot</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Root</name></expr>;</return> }</block>




<name>using</name> <name>nodes_iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>CallGraphNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;
<expr><name>using</name> <name>const_nodes_iterator</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>SetVector</name><argument_list type="generic">&lt;<argument><expr><name>CallGraphNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr>;

<expr><name>void</name> <macro><name>print</name><argument_list>(<argument>raw_ostream &amp;os</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>void</name> <macro><name>viewGraph</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>addNodesForBlocks</name><argument_list>(<argument><expr><name>DeclContext</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call></expr>;



<expr><name>bool</name> <macro><name>VisitFunctionDecl</name><argument_list>(<argument>FunctionDecl *FD</argument>)</argument_list></macro> <block>{


<if_stmt><if>if <condition>(<expr><call><name>includeInGraph</name><argument_list>(<argument><expr><name>FD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>FD</name><operator>-&gt;</operator><name>isThisDeclarationADefinition</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>addNodesForBlocks</name><argument_list>(<argument><expr><name>FD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>addNodeForDecl</name><argument_list>(<argument><expr><name>FD</name></expr></argument>, <argument><expr><call><name><name>FD</name><operator>-&gt;</operator><name>isGlobal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return true</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>


<name>bool</name> <macro><name>VisitObjCMethodDecl</name><argument_list>(<argument>ObjCMethodDecl *MD</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>includeInGraph</name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>addNodesForBlocks</name><argument_list>(<argument><expr><name>MD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addNodeForDecl</name><argument_list>(<argument><expr><name>MD</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
return true</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block>


<name>bool</name> <macro><name>TraverseStmt</name><argument_list>(<argument>Stmt *S</argument>)</argument_list></macro> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>bool</name> <macro><name>shouldWalkTypesOfTypeLocs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block>
<name>bool</name> <macro><name>shouldVisitTemplateInstantiations</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
<name>bool</name> <macro><name>shouldVisitImplicitCode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>

<name>void</name> <macro><name>addNodeForDecl</name><argument_list>(<argument>Decl *D</argument>, <argument>bool IsGlobal</argument>)</argument_list></macro></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CallGraphNode</name> <block>{<block_content>
<label><name>public</name>:</label>
<struct>struct <name>CallRecord</name> <block>{
<decl_stmt><decl><type><name>CallGraphNode</name> <modifier>*</modifier></type><name>Callee</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>CallExpr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CallRecord</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<expr_stmt><expr><call><name>CallRecord</name><argument_list>(<argument><expr><name>CallGraphNode</name> <operator>*</operator><name>Callee_</name></expr></argument>, <argument><expr><name>Expr</name> <operator>*</operator><name>CallExpr_</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Callee</name><argument_list>(<argument><expr><name>Callee_</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CallExpr</name><argument_list>(<argument>CallExpr_</argument>)</argument_list></macro> <expr><block>{}</block>



<name>operator</name> <name>CallGraphNode</name> <operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>Callee</name></expr>;</return> }</block></expr></expr_stmt>
}</block>;</struct>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>Decl</name> <modifier>*</modifier></type><name>FD</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>CallRecord</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>&gt;</argument_list></name></type> <name>CalledFunctions</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>CallGraphNode</name><argument_list>(<argument><expr><name>Decl</name> <operator>*</operator><name>D</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>FD</name><argument_list>(<argument>D</argument>)</argument_list></macro> <block>{}</block>

<name>using</name> <name>iterator</name> <operator>=</operator> <name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>CallRecord</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>const_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>CallRecord</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>


<function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>CalledFunctions</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>CalledFunctions</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>CalledFunctions</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>CalledFunctions</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>callees</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>iterator_range</name><argument_list type="generic">&lt;<argument><expr><name>const_iterator</name></expr></argument>&gt;</argument_list></name> <macro><name>callees</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>make_range</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>CalledFunctions</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>CalledFunctions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>addCallee</name><parameter_list>(<parameter><decl><type><name>CallRecord</name></type> <name>Call</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>CalledFunctions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>Decl</name> <operator>*</operator><macro><name>getDecl</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>FD</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>FunctionDecl</name> <operator>*</operator><macro><name>getDefinition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getDecl</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getAsFunction</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDefinition</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>os</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CallGraphNode</name><operator>::</operator><name>CallRecord</name> <operator>&amp;</operator><name>LHS</name><operator>,</operator>
<specifier>const</specifier> <name>CallGraphNode</name><operator>::</operator><name>CallRecord</name> <operator>&amp;</operator><name>RHS</name><operator>)</operator> <block>{
<return>return <expr><name><name>LHS</name><operator>.</operator><name>Callee</name></name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>Callee</name></name></expr>;</return>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>llvm</name> <block>{<block_content>


<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><operator>&gt;</operator> struct <name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>::</operator><name>CallRecord</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>::</operator><name>CallRecord</name> <macro><name>getEmptyKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>::</operator><call><name>CallRecord</name><argument_list>(
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraphNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getEmptyKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <specifier>inline</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>::</operator><name>CallRecord</name> <macro><name>getTombstoneKey</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>::</operator><call><name>CallRecord</name><argument_list>(
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraphNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>Expr</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getTombstoneKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>getHashValue</name><argument_list>(<argument>const clang::CallGraphNode::CallRecord &amp;Val</argument>)</argument_list></macro> <block>{


<return>return <expr><name><name>DenseMapInfo</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraphNode</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>getHashValue</name><argument_list>(<argument><expr><name><name>Val</name><operator>.</operator><name>Callee</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>isEqual</name><argument_list>(<argument>const clang::CallGraphNode::CallRecord &amp;LHS</argument>,
<argument>const clang::CallGraphNode::CallRecord &amp;RHS</argument>)</argument_list></macro> <block>{
<return>return <expr><name>LHS</name> <operator>==</operator> <name>RHS</name></expr>;</return>
}</block>
}</expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>NodeType</name> <operator>=</operator> <name>clang</name><operator>::</operator><name>CallGraphNode</name></expr>;
<expr><name>using</name> <name>NodeRef</name> <operator>=</operator> <name>clang</name><operator>::</operator><name>CallGraphNode</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>ChildIteratorType</name> <operator>=</operator> <name>NodeType</name><operator>::</operator><name>iterator</name></expr>;

<expr><specifier>static</specifier> <name>NodeType</name> <operator>*</operator><macro><name>getEntryNode</name><argument_list>(<argument>clang::CallGraphNode *CGN</argument>)</argument_list></macro> <block>{ <return>return <expr><name>CGN</name></expr>;</return> }</block>
<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_begin</name><argument_list>(<argument>NodeType *N</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_end</name><argument_list>(<argument>NodeType *N</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>NodeType</name> <operator>=</operator> <specifier>const</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name></expr>;
<expr><name>using</name> <name>NodeRef</name> <operator>=</operator> <specifier>const</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name> <operator>*</operator></expr>;
<expr><name>using</name> <name>ChildIteratorType</name> <operator>=</operator> <name>NodeType</name><operator>::</operator><name>const_iterator</name></expr>;

<expr><specifier>static</specifier> <name>NodeType</name> <operator>*</operator><macro><name>getEntryNode</name><argument_list>(<argument>const clang::CallGraphNode *CGN</argument>)</argument_list></macro> <block>{ <return>return <expr><name>CGN</name></expr>;</return> }</block>
<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_begin</name><argument_list>(<argument>NodeType *N</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
<specifier>static</specifier> <name>ChildIteratorType</name> <macro><name>child_end</name><argument_list>(<argument>NodeType *N</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>N</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraph</name><operator>*</operator></expr></argument>&gt;</argument_list></name>
<operator>:</operator> <name>public</name> <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>NodeType</name> <operator>*</operator><macro><name>getEntryNode</name><argument_list>(<argument>clang::CallGraph *CGN</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CGN</name><operator>-&gt;</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name> <operator>*</operator>
<macro><name>CGGetValue</name><argument_list>(<argument>clang::CallGraph::const_iterator::value_type &amp;P</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>P</name><operator>.</operator><name>second</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>using</name> <name>nodes_iterator</name> <operator>=</operator>
<name><name>mapped_iterator</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraph</name><operator>::</operator><name>iterator</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><operator>&amp;</operator><name>CGGetValue</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_begin</name><argument_list>(<argument>clang::CallGraph *CG</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name><name>CG</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>CGGetValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_end</name> <argument_list>(<argument>clang::CallGraph *CG</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name><name>CG</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>CGGetValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>size</name><argument_list>(<argument>clang::CallGraph *CG</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>CG</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;&gt;</argument_list></name> struct <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CallGraph</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>:</operator>
<name>public</name> <name><name>GraphTraits</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><specifier>static</specifier> <name>NodeType</name> <operator>*</operator><macro><name>getEntryNode</name><argument_list>(<argument>const clang::CallGraph *CGN</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CGN</name><operator>-&gt;</operator><name>getRoot</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>clang</name><operator>::</operator><name>CallGraphNode</name> <operator>*</operator>
<macro><name>CGGetValue</name><argument_list>(<argument>clang::CallGraph::const_iterator::value_type &amp;P</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>P</name><operator>.</operator><name>second</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>using</name> <name>nodes_iterator</name> <operator>=</operator>
<name><name>mapped_iterator</name><argument_list type="generic">&lt;<argument><expr><name>clang</name><operator>::</operator><name>CallGraph</name><operator>::</operator><name>const_iterator</name></expr></argument>, <argument><expr><name>decltype</name><operator>(</operator><operator>&amp;</operator><name>CGGetValue</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr>;

<expr><specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_begin</name><argument_list>(<argument>const clang::CallGraph *CG</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name><name>CG</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>CGGetValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>nodes_iterator</name> <macro><name>nodes_end</name><argument_list>(<argument>const clang::CallGraph *CG</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>nodes_iterator</name><argument_list>(<argument><expr><call><name><name>CG</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>CGGetValue</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>unsigned</name> <macro><name>size</name><argument_list>(<argument>const clang::CallGraph *CG</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>CG</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
}</expr>;

}</block></expr></block></expr></block></expr></block></expr></block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
