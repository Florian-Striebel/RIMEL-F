<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/TypeLocVisitor.h">










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_TYPELOCVISITOR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_TYPELOCVISITOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeLoc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/ErrorHandling.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISPATCH</name><parameter_list>(<parameter><type><name>CLASSNAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return static_cast&lt;ImplClass*&gt;(this)-&gt; Visit##CLASSNAME(TyLoc.castAs&lt;CLASSNAME&gt;())</cpp:value></cpp:define>



<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>ImplClass</name></expr></argument>, <argument><expr><name>typename</name> <name>RetTy</name><operator>=</operator><name>void</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>TypeLocVisitor</name> <block>{<block_content>
<label><name>public</name>:</label>
<function><type><name>RetTy</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><name>TypeLoc</name></type> <name>TyLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><call><name><name>TyLoc</name><operator>.</operator><name>getTypeLocClass</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_TYPELOC</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPELOC</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case TypeLoc::CLASS: DISPATCH(CLASS##TypeLoc);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeLocNodes.def"</cpp:file></cpp:include>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"unexpected type loc class!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RetTy</name></type> <name>Visit</name><parameter_list>(<parameter><decl><type><name>UnqualTypeLoc</name></type> <name>TyLoc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<switch>switch <condition>(<expr><call><name><name>TyLoc</name><operator>.</operator><name>getTypeLocClass</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABSTRACT_TYPELOC</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPELOC</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case TypeLoc::CLASS: DISPATCH(CLASS##TypeLoc);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeLocNodes.def"</cpp:file></cpp:include>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>llvm_unreachable</name><argument_list>(<argument><expr><literal type="string">"unexpected type loc class!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPELOC</name><parameter_list>(<parameter><type><name>CLASS</name></type></parameter>, <parameter><type><name>PARENT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RetTy Visit##CLASS##TypeLoc(CLASS##TypeLoc TyLoc) { DISPATCH(PARENT); }</cpp:value></cpp:define>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/TypeLocNodes.def"</cpp:file></cpp:include>

<function><type><name>RetTy</name></type> <name>VisitTypeLoc</name><parameter_list>(<parameter><decl><type><name>TypeLoc</name></type> <name>TyLoc</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>RetTy</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DISPATCH</name></cpp:undef>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
