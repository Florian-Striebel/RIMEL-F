<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_CODEGEN_CONSTANTINITBUILDER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_CODEGEN_CONSTANTINITBUILDER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/Constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/IR/GlobalValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CharUnits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/CodeGen/ConstantInitFuture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>CodeGen</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>CodeGenModule</name></decl>;</decl_stmt>




















<decl_stmt><decl><type><name>class</name></type> <name>ConstantInitBuilderBase</name> <block>{<block_content>
<struct>struct <name>SelfReference</name> <block>{
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>Dummy</name></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>&gt;</argument_list></name> <name>Indices</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SelfReference</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>dummy</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>Dummy</name><argument_list>(<argument>dummy</argument>)</argument_list></macro> <block>{}</block></expr></expr_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>CodeGenModule</name> <modifier>&amp;</modifier></type><name>CGM</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name><operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>&gt;</argument_list></name> <name>Buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SelfReference</name></expr></argument>&gt;</argument_list></name> <name>SelfReferences</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Frozen</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ConstantInitFuture</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ConstantAggregateBuilderBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name></type> <name>ConstantAggregateBuilderTemplateBase</name></decl>;</decl_stmt>

<label><name>protected</name>:</label>
<macro><name>explicit</name></macro> <expr_stmt><expr><call><name>ConstantInitBuilderBase</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>CGM</name><argument_list>(<argument>CGM</argument>)</argument_list></macro> <block>{}</block>

<operator>~</operator><macro><name>ConstantInitBuilderBase</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>Buffer</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"didn't claim all values out of buffer"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>SelfReferences</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"didn't apply all self-references"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><macro><name>createGlobal</name><argument_list>(<argument>llvm::Constant *initializer</argument>,
<argument>const llvm::Twine &amp;name</argument>,
<argument>CharUnits alignment</argument>,
<argument>bool constant = false</argument>,
<argument>llvm::GlobalValue::LinkageTypes linkage
= llvm::GlobalValue::InternalLinkage</argument>,
<argument>unsigned addressSpace = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ConstantInitFuture</name></type> <name>createFuture</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>initializer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>setGlobalInitializer</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>GV</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>initializer</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>resolveSelfReferences</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><name>GV</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>abandon</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>newEnd</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ConstantAggregateBuilderBase</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>ConstantInitBuilderBase</name> <modifier>&amp;</modifier></type><name>Builder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConstantAggregateBuilderBase</name> <modifier>*</modifier></type><name>Parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>Begin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>size_t</name></type> <name>CachedOffsetEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Finished</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Frozen</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Packed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>CharUnits</name></type> <name>CachedOffsetFromGlobal</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getBuffer</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name><name>Builder</name><operator>.</operator><name>Buffer</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><macro><name>getBuffer</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name><name>Builder</name><operator>.</operator><name>Buffer</name></name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><call><name>ConstantAggregateBuilderBase</name><argument_list>(<argument><expr><name>ConstantInitBuilderBase</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><name>ConstantAggregateBuilderBase</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Begin</name><argument_list>(<argument>builder.Buffer.size()</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>Frozen</name></name> <operator>&amp;&amp;</operator> <literal type="string">"parent already has child builder active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>Frozen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>builder</name><operator>.</operator><name>Frozen</name></name> <operator>&amp;&amp;</operator> <literal type="string">"builder already has child builder active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>builder</name><operator>.</operator><name>Frozen</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

~ConstantAggregateBuilderBase(</block></block></if></if_stmt>) <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"didn't finish aggregate builder"</literal></expr></argument>)</argument_list></call></expr>;
}</block></block>

<name>void</name> <macro><name>markFinished</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Frozen</name> <operator>&amp;&amp;</operator> <literal type="string">"child builder still active"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"builder already finished"</literal></expr></argument>)</argument_list></call></expr>;
<expr><name>Finished</name> <operator>=</operator> <name>true</name></expr>;
<if_stmt><if>if <condition>(<expr><name>Parent</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>Parent</name><operator>-&gt;</operator><name>Frozen</name></name> <operator>&amp;&amp;</operator>
<literal type="string">"parent not frozen while child builder active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Parent</name><operator>-&gt;</operator><name>Frozen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content> else <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>Builder</name><operator>.</operator><name>Frozen</name></name> <operator>&amp;&amp;</operator>
<literal type="string">"builder not frozen while child builder active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>Builder</name><operator>.</operator><name>Frozen</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

public:

ConstantAggregateBuilderBase(const ConstantAggregateBuilderBase &amp;</block></block></if></if_stmt>) <operator>=</operator> <name>delete</name></block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ConstantAggregateBuilderBase</name> <modifier>&amp;</modifier></type><name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>ConstantAggregateBuilderBase</name> <operator>&amp;</operator><operator>)</operator>
<operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>



<expr_stmt><expr><call><name>ConstantAggregateBuilderBase</name><argument_list>(<argument><expr><name>ConstantAggregateBuilderBase</name> <operator>&amp;&amp;</operator><name>other</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Builder</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>Builder</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Parent</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>Parent</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Begin</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>Begin</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>CachedOffsetEnd</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>CachedOffsetEnd</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>Finished</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>Finished</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Frozen</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>Frozen</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Packed</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>Packed</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>CachedOffsetFromGlobal</name><argument_list>(<argument>other.CachedOffsetFromGlobal</argument>)</argument_list></macro> <expr><block>{
<expr><name><name>other</name><operator>.</operator><name>Finished</name></name> <operator>=</operator> <name>true</name></expr>;
}</block>
<name>ConstantAggregateBuilderBase</name> <operator>&amp;</operator><name>operator</name><operator>=</operator><operator>(</operator><name>ConstantAggregateBuilderBase</name> <operator>&amp;&amp;</operator><name>other</name><operator>)</operator>
<operator>=</operator> <name>delete</name></expr>;</expr_stmt>



<expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>Finished</name></name> <operator>&amp;&amp;</operator> <literal type="string">"cannot query after finishing builder"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>Frozen</name></name> <operator>&amp;&amp;</operator> <literal type="string">"cannot query while sub-builder is active"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>Begin</name></name> <operator>&lt;=</operator> <call><name><name>this</name><operator>-&gt;</operator><name>getBuffer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>getBuffer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>Begin</name></name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>abandon</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>markFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>abandon</name></name><argument_list>(<argument><expr><name>Begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>void</name></type> <name>add</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>&amp;&amp;</operator> <literal type="string">"adding null value to constant initializer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add more values after finishing builder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Frozen</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add values while subbuilder is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<function_decl><type><name>void</name></type> <name>addSize</name><parameter_list>(<parameter><decl><type><name>CharUnits</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>void</name></type> <name>addInt</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>intTy</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>value</name></expr></argument>,
<argument><expr><name>bool</name> <name>isSigned</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>ConstantInt</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>intTy</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isSigned</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>addNullPointer</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>PointerType</name> <operator>*</operator><name>ptrTy</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>ConstantPointerNull</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>ptrTy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>addBitCast</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>ConstantExpr</name><operator>::</operator><call><name>getBitCast</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>addAll</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>values</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add more values after finishing builder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Frozen</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add values while subbuilder is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>values</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>







<decl_stmt><decl><type><name>void</name></type> <name>addRelativeOffset</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name>getRelativeOffset</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>void</name></type> <name>addRelativeOffsetToPosition</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>type</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>target</name></expr></argument>, <argument><expr><name>size_t</name> <name>position</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name>getRelativeOffsetToPosition</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><name>void</name></type> <name>addTaggedRelativeOffset</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>type</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>address</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>tag</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>offset</name> <operator>=</operator> <call><name>getRelativeOffset</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name>ConstantExpr</name><operator>::</operator><call><name>getAdd</name><argument_list>(<argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>ConstantInt</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>






<expr_stmt><expr><name>CharUnits</name> <macro><name>getNextOffsetFromGlobal</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add more values after finishing builder"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Frozen</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add values while subbuilder is active"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name>getOffsetFromGlobalTo</name><argument_list>(<argument><expr><call><name><name>Builder</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>PlaceholderPosition</name> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>Index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>ConstantAggregateBuilderBase</name></decl>;</decl_stmt>
<macro><name>PlaceholderPosition</name><argument_list>(<argument>size_t index</argument>)</argument_list></macro> : <macro><name>Index</name><argument_list>(<argument>index</argument>)</argument_list></macro> <block>{<block_content/>}</block>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>










<function><type><name>PlaceholderPosition</name></type> <name>addPlaceholder</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add more values after finishing builder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Frozen</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add values while subbuilder is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>Builder</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>Builder</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>PlaceholderPosition</name></type> <name>addPlaceholderWithSize</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>expectedType</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>fillPlaceholderWithInt</name><argument_list>(<argument><expr><name>PlaceholderPosition</name> <name>position</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>value</name></expr></argument>,
<argument><expr><name>bool</name> <name>isSigned</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>fillPlaceholder</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>ConstantInt</name><operator>::</operator><call><name>get</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isSigned</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>void</name></type> <name>fillPlaceholder</name><argument_list>(<argument><expr><name>PlaceholderPosition</name> <name>position</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>value</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Finished</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot change values after finishing builder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>Frozen</name> <operator>&amp;&amp;</operator> <literal type="string">"cannot add values while subbuilder is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><operator>&amp;</operator><name>slot</name> <operator>=</operator> <name><name>Builder</name><operator>.</operator><name>Buffer</name><index>[<expr><name><name>position</name><operator>.</operator><name>Index</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>slot</name> <operator>==</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <literal type="string">"placeholder already filled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>getAddrOfCurrentPosition</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>getAddrOfPosition</name><argument_list>(<argument>llvm::Type *type</argument>, <argument>size_t position</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getGEPIndicesToCurrentPosition</name><argument_list>(
<argument>llvm::SmallVectorImpl&lt;llvm::Constant*&gt; &amp;indices</argument>)</argument_list></macro> <block>{
<expr><call><name>getGEPIndicesTo</name><argument_list>(<argument><expr><name>indices</name></expr></argument>, <argument><expr><call><name><name>Builder</name><operator>.</operator><name>Buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>indices</name></expr>;</return>
}</block></expr></expr_stmt>

<label><name>protected</name>:</label>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>finishArray</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>eltTy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>finishStruct</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>structTy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>void</name></type> <name>getGEPIndicesTo</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>indices</name></expr></argument>,
<argument><expr><name>size_t</name> <name>position</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><call><name>getRelativeOffset</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>IntegerType</name> <operator>*</operator><name>offsetType</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>getRelativeOffsetToPosition</name><argument_list>(<argument>llvm::IntegerType *offsetType</argument>,
<argument>llvm::Constant *target</argument>,
<argument>size_t position</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CharUnits</name></type> <name>getOffsetFromGlobalTo</name><argument_list>(<argument><expr><name>size_t</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Impl</name></expr></argument>, <argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>ConstantAggregateBuilderTemplateBase</name>
<range>: <expr><name>public</name> <name>Traits</name><operator>::</operator><name>AggregateBuilderBase</name> <block>{
<expr><name>using</name> <name>super</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>AggregateBuilderBase</name></expr>;
<expr><name>public</name><operator>:</operator>
<name>using</name> <name>InitBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>InitBuilder</name></expr>;
<expr><name>using</name> <name>ArrayBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>ArrayBuilder</name></expr>;
<expr><name>using</name> <name>StructBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>StructBuilder</name></expr>;
<expr><name>using</name> <name>AggregateBuilderBase</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>AggregateBuilderBase</name></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>ConstantAggregateBuilderTemplateBase</name><argument_list>(<argument><expr><name>InitBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><name>AggregateBuilderBase</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>super</name><argument_list>(<argument>builder</argument>, <argument>parent</argument>)</argument_list></macro> <block>{}</block>

<name>Impl</name> <operator>&amp;</operator><macro><name>asImpl</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><operator>*</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Impl</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block>

<name>public</name><operator>:</operator>
<name>ArrayBuilder</name> <macro><name>beginArray</name><argument_list>(<argument>llvm::Type *eltTy = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ArrayBuilder</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>InitBuilder</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>Builder</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>eltTy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>StructBuilder</name> <macro><name>beginStruct</name><argument_list>(<argument>llvm::StructType *ty = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>StructBuilder</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>InitBuilder</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>Builder</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>










<name>void</name> <macro><name>finishAndAddTo</name><argument_list>(<argument>AggregateBuilderBase &amp;parent</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>Parent</name></name> <operator>==</operator> <operator>&amp;</operator><name>parent</name> <operator>&amp;&amp;</operator> <literal type="string">"adding to non-parent builder"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>parent</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finishImpl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>




<name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name><modifier>...</modifier> <name>As</name></expr></argument>&gt;</argument_list></name>
<name>llvm</name><operator>::</operator><name>GlobalVariable</name> <operator>*</operator><macro><name>finishAndCreateGlobal</name><argument_list>(<argument>As &amp;&amp;...args</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>Parent</name></name> <operator>&amp;&amp;</operator> <literal type="string">"finishing non-root builder"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Builder</name><operator>.</operator><name>createGlobal</name></name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finishImpl</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>As</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block>




<name>void</name> <macro><name>finishAndSetAsInitializer</name><argument_list>(<argument>llvm::GlobalVariable *global</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>Parent</name></name> <operator>&amp;&amp;</operator> <literal type="string">"finishing non-root builder"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Builder</name><operator>.</operator><name>setGlobalInitializer</name></name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finishImpl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>









<name>ConstantInitFuture</name> <macro><name>finishAndCreateFuture</name><argument_list>()</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>Parent</name></name> <operator>&amp;&amp;</operator> <literal type="string">"finishing non-root builder"</literal></expr></argument>)</argument_list></call></expr>;
<return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>Builder</name><operator>.</operator><name>createFuture</name></name><argument_list>(<argument><expr><call><name>asImpl</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finishImpl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>ConstantArrayBuilderTemplateBase</name>
<operator>:</operator> <name>public</name> <name><name>ConstantAggregateBuilderTemplateBase</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Traits</name><operator>::</operator><name>ArrayBuilder</name></expr></argument>,
<argument><expr><name>Traits</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>super</name> <operator>=</operator>
<name><name>ConstantAggregateBuilderTemplateBase</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Traits</name><operator>::</operator><name>ArrayBuilder</name></expr></argument>, <argument><expr><name>Traits</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>InitBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>InitBuilder</name></expr>;
<expr><name>using</name> <name>AggregateBuilderBase</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>AggregateBuilderBase</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>EltTy</name></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name>ConstantAggregateBuilderTemplateBase</name></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>ConstantArrayBuilderTemplateBase</name><argument_list>(<argument><expr><name>InitBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><name>AggregateBuilderBase</name> <operator>*</operator><name>parent</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>eltTy</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>, <macro><name>EltTy</name><argument_list>(<argument>eltTy</argument>)</argument_list></macro> <expr><block>{}</block>

<name>private</name><operator>:</operator>


<name>llvm</name><operator>::</operator><name>Constant</name> <operator>*</operator><macro><name>finishImpl</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><name>AggregateBuilderBase</name><operator>::</operator><call><name>finishArray</name><argument_list>(<argument><expr><name>EltTy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;






<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>ConstantStructBuilderTemplateBase</name>
<operator>:</operator> <name>public</name> <name><name>ConstantAggregateBuilderTemplateBase</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Traits</name><operator>::</operator><name>StructBuilder</name></expr></argument>,
<argument><expr><name>Traits</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>using</name> <name>super</name> <operator>=</operator>
<name><name>ConstantAggregateBuilderTemplateBase</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Traits</name><operator>::</operator><name>StructBuilder</name></expr></argument>,<argument><expr><name>Traits</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>InitBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>InitBuilder</name></expr>;
<expr><name>using</name> <name>AggregateBuilderBase</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>AggregateBuilderBase</name></expr>;

<expr><name>private</name><operator>:</operator>
<name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>StructTy</name></expr>;

<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name></expr></argument>, <argument><expr><name>class</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name>ConstantAggregateBuilderTemplateBase</name></expr>;

<expr><name>protected</name><operator>:</operator>
<call><name>ConstantStructBuilderTemplateBase</name><argument_list>(<argument><expr><name>InitBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><name>AggregateBuilderBase</name> <operator>*</operator><name>parent</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>structTy</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>, <macro><name>StructTy</name><argument_list>(<argument>structTy</argument>)</argument_list></macro> <expr><block>{
<if_stmt><if>if <condition>(<expr><name>structTy</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>Packed</name></name> <operator>=</operator> <call><name><name>structTy</name><operator>-&gt;</operator><name>isPacked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
}</block>

<name>public</name><operator>:</operator>
<name>void</name> <macro><name>setPacked</name><argument_list>(<argument>bool packed</argument>)</argument_list></macro> <block>{
<expr><name><name>this</name><operator>-&gt;</operator><name>Packed</name></name> <operator>=</operator> <name>packed</name></expr>;
}</block>



<name>void</name> <macro><name>suggestType</name><argument_list>(<argument>llvm::StructType *structTy</argument>)</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>structTy</name><operator>-&gt;</operator><name>getNumElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>StructTy</name> <operator>=</operator> <name>structTy</name></expr>;</expr_stmt>
<expr_stmt/>}</block_content>
}

private:


llvm::Constant *finishImpl(</block></if></if_stmt>) <block>{
<return>return <expr><name>AggregateBuilderBase</name><operator>::</operator><call><name>finishStruct</name><argument_list>(<argument><expr><name>StructTy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></block>
}</expr>;






<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>class</name> <name>ConstantInitBuilderTemplateBase</name> <operator>:</operator> <name>public</name> <name>ConstantInitBuilderBase</name> <block>{
<expr><name>protected</name><operator>:</operator>
<call><name>ConstantInitBuilderTemplateBase</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ConstantInitBuilderBase</name><argument_list>(<argument>CGM</argument>)</argument_list></macro> <block>{}</block>

<name>public</name><operator>:</operator>
<name>using</name> <name>InitBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>InitBuilder</name></expr>;
<expr><name>using</name> <name>ArrayBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>ArrayBuilder</name></expr>;
<expr><name>using</name> <name>StructBuilder</name> <operator>=</operator> <name>typename</name> <name>Traits</name><operator>::</operator><name>StructBuilder</name></expr>;

<expr><name>ArrayBuilder</name> <macro><name>beginArray</name><argument_list>(<argument>llvm::Type *eltTy = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ArrayBuilder</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>InitBuilder</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>eltTy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>StructBuilder</name> <macro><name>beginStruct</name><argument_list>(<argument>llvm::StructType *structTy = nullptr</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>StructBuilder</name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>InitBuilder</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>structTy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name>class</name> <name>ConstantInitBuilder</name></expr>;
<expr><name>class</name> <name>ConstantStructBuilder</name></expr>;
<expr><name>class</name> <name>ConstantArrayBuilder</name></expr>;

struct <expr><name>ConstantInitBuilderTraits</name> <block>{
<expr><name>using</name> <name>InitBuilder</name> <operator>=</operator> <name>ConstantInitBuilder</name></expr>;
<expr><name>using</name> <name>AggregateBuilderBase</name> <operator>=</operator> <name>ConstantAggregateBuilderBase</name></expr>;
<expr><name>using</name> <name>ArrayBuilder</name> <operator>=</operator> <name>ConstantArrayBuilder</name></expr>;
<expr><name>using</name> <name>StructBuilder</name> <operator>=</operator> <name>ConstantStructBuilder</name></expr>;
}</block></expr>;


<expr><name>class</name> <name>ConstantInitBuilder</name>
<operator>:</operator> <name>public</name> <name><name>ConstantInitBuilderTemplateBase</name><argument_list type="generic">&lt;<argument><expr><name>ConstantInitBuilderTraits</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <call><name>ConstantInitBuilder</name><argument_list>(<argument><expr><name>CodeGenModule</name> <operator>&amp;</operator><name>CGM</name></expr></argument>)</argument_list></call> <operator>:</operator>
<macro><name>ConstantInitBuilderTemplateBase</name><argument_list>(<argument>CGM</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;



<expr><name>class</name> <name>ConstantArrayBuilder</name>
<operator>:</operator> <name>public</name> <name><name>ConstantArrayBuilderTemplateBase</name><argument_list type="generic">&lt;<argument><expr><name>ConstantInitBuilderTraits</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name>ConstantInitBuilderTemplateBase</name></expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Impl</name></expr></argument>, <argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name>CodeGen</name><operator>::</operator><name>ConstantAggregateBuilderTemplateBase</name></expr>;

<expr><call><name>ConstantArrayBuilder</name><argument_list>(<argument><expr><name>ConstantInitBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><name>ConstantAggregateBuilderBase</name> <operator>*</operator><name>parent</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>Type</name> <operator>*</operator><name>eltTy</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ConstantArrayBuilderTemplateBase</name><argument_list>(<argument>builder</argument>, <argument>parent</argument>, <argument>eltTy</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;



<expr><name>class</name> <name>ConstantStructBuilder</name>
<operator>:</operator> <name>public</name> <name><name>ConstantStructBuilderTemplateBase</name><argument_list type="generic">&lt;<argument><expr><name>ConstantInitBuilderTraits</name></expr></argument>&gt;</argument_list></name> <block>{
<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name>ConstantInitBuilderTemplateBase</name></expr>;


<expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>Impl</name></expr></argument>, <argument><expr><name>class</name> <name>Traits</name></expr></argument>&gt;</argument_list></name>
<name>friend</name> <name>class</name> <name>CodeGen</name><operator>::</operator><name>ConstantAggregateBuilderTemplateBase</name></expr>;

<expr><call><name>ConstantStructBuilder</name><argument_list>(<argument><expr><name>ConstantInitBuilder</name> <operator>&amp;</operator><name>builder</name></expr></argument>,
<argument><expr><name>ConstantAggregateBuilderBase</name> <operator>*</operator><name>parent</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>StructType</name> <operator>*</operator><name>structTy</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>ConstantStructBuilderTemplateBase</name><argument_list>(<argument>builder</argument>, <argument>parent</argument>, <argument>structTy</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr>;

}</block></expr>
}</block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
