<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Testing/TestClangConfig.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TESTING_TESTCLANGCONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TESTING_TESTCLANGCONFIG_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Testing/CommandLineArgs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/raw_ostream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>






<struct>struct <name>TestClangConfig</name> <block>{
<decl_stmt><decl><type><name>TestLanguage</name></type> <name>Language</name></decl>;</decl_stmt>


<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>Target</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isC</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_C89</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_C99</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isC99OrLater</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_C99</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isCXX</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_CXX03</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_CXX11</name> <operator>||</operator>
<name>Language</name> <operator>==</operator> <name>Lang_CXX14</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_CXX17</name> <operator>||</operator>
<name>Language</name> <operator>==</operator> <name>Lang_CXX20</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isCXX11OrLater</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_CXX11</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_CXX14</name> <operator>||</operator>
<name>Language</name> <operator>==</operator> <name>Lang_CXX17</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_CXX20</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isCXX14OrLater</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_CXX14</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_CXX17</name> <operator>||</operator>
<name>Language</name> <operator>==</operator> <name>Lang_CXX20</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isCXX17OrLater</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_CXX17</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_CXX20</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isCXX20OrLater</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_CXX20</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>supportsCXXDynamicExceptionSpecification</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Language</name> <operator>==</operator> <name>Lang_CXX03</name> <operator>||</operator> <name>Language</name> <operator>==</operator> <name>Lang_CXX11</name> <operator>||</operator>
<name>Language</name> <operator>==</operator> <name>Lang_CXX14</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasDelayedTemplateParsing</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Target</name> <operator>==</operator> <literal type="string">"x86_64-pc-win32-msvc"</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>getCommandLineArgs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>Result</name> <operator>=</operator> <call><name>getCommandLineArgsForTesting</name><argument_list>(<argument><expr><name>Language</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"-target"</literal></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>Result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Target</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>Result</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>std</name><operator>::</operator><name>string</name> <name>Result</name></expr>;
<expr><name>llvm</name><operator>::</operator><name>raw_string_ostream</name> <call><name>OS</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>;
<expr><name>OS</name> <operator>&lt;&lt;</operator> <literal type="string">"{ Language="</literal> <operator>&lt;&lt;</operator> <name>Language</name> <operator>&lt;&lt;</operator> <literal type="string">", Target="</literal> <operator>&lt;&lt;</operator> <name>Target</name> <operator>&lt;&lt;</operator> <literal type="string">" }"</literal></expr>;
<return>return <expr><call><name><name>OS</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>friend</name> <name>std</name><operator>::</operator><name>ostream</name> <operator>&amp;</operator><name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>std</name><operator>::</operator><name>ostream</name> <operator>&amp;</operator><name>OS</name><operator>,</operator>
<specifier>const</specifier> <name>TestClangConfig</name> <operator>&amp;</operator><name>ClangConfig</name><operator>)</operator> <block>{
<return>return <expr><name>OS</name> <operator>&lt;&lt;</operator> <call><name><name>ClangConfig</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
}</block>;</struct>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
