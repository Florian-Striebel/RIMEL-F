<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/FormatString.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_FORMATSTRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_FORMATSTRING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/CanonicalType.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>TargetInfo</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>namespace</name></type> <name>analyze_format_string</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>OptionalFlag</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>OptionalFlag</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Representation</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>representation</name><argument_list>(<argument><expr><name>Representation</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>flag</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
<name>bool</name> <macro><name>isSet</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flag</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>set</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setPosition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getPosition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>position</name></expr>;</return>
}</block></expr></expr_stmt>
<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>representation</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>flag</name></expr>;</return> }</block></expr></expr_stmt>
<decl_stmt><decl><type><name>OptionalFlag</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>bool</name> <operator>&amp;</operator><name>rhs</name><operator>)</operator> <block>{
<expr><name>flag</name> <operator>=</operator> <name>rhs</name></expr>;
<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
}</block></expr></init></decl></decl_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>representation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flag</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>LengthModifier</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>None</name></decl>,
<decl><name>AsChar</name></decl>,
<decl><name>AsShort</name></decl>,
<decl><name>AsShortLong</name></decl>,
<decl><name>AsLong</name></decl>,
<decl><name>AsLongLong</name></decl>,
<decl><name>AsQuad</name></decl>,
<decl><name>AsIntMax</name></decl>,
<decl><name>AsSizeT</name></decl>,
<decl><name>AsPtrDiff</name></decl>,
<decl><name>AsInt32</name></decl>,
<decl><name>AsInt3264</name></decl>,
<decl><name>AsInt64</name></decl>,
<decl><name>AsLongDouble</name></decl>,
<decl><name>AsAllocate</name></decl>,
<decl><name>AsMAllocate</name></decl>,
<decl><name>AsWide</name></decl>,
<decl><name>AsWideChar</name> <init>= <expr><name>AsLong</name></expr></init></decl>
}</block>;</enum>

<expr_stmt><expr><call><name>LengthModifier</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>Position</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>kind</name><argument_list>(<argument>None</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>LengthModifier</name><argument_list>(<argument>const char *pos</argument>, <argument>Kind k</argument>)</argument_list></macro>
<operator>:</operator> <call><name>Position</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>kind</name><argument_list>(<argument>k</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Position</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>AsLongLong</name></expr>:</case>
<case>case <expr><name>AsChar</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>AsInt32</name></expr>:</case>
<case>case <expr><name>AsInt64</name></expr>:</case>
<return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><name>None</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<expr_stmt/>}</block_content>
}

Kind getKind(</block></switch>) <specifier>const</specifier> <block>{ <return>return <expr><name>kind</name></expr>;</return> }</block>
<name>void</name> <macro><name>setKind</name><argument_list>(<argument>Kind k</argument>)</argument_list></macro> <block>{ <expr><name>kind</name> <operator>=</operator> <name>k</name></expr>; }</block></block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ConversionSpecifier</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>InvalidSpecifier</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>cArg</name></decl>,
<decl><name>dArg</name></decl>,
<decl><name>DArg</name></decl>,
<decl><name>iArg</name></decl>,
<decl><name>IntArgBeg</name> <init>= <expr><name>dArg</name></expr></init></decl>,
<decl><name>IntArgEnd</name> <init>= <expr><name>iArg</name></expr></init></decl>,

<decl><name>oArg</name></decl>,
<decl><name>OArg</name></decl>,
<decl><name>uArg</name></decl>,
<decl><name>UArg</name></decl>,
<decl><name>xArg</name></decl>,
<decl><name>XArg</name></decl>,
<decl><name>UIntArgBeg</name> <init>= <expr><name>oArg</name></expr></init></decl>,
<decl><name>UIntArgEnd</name> <init>= <expr><name>XArg</name></expr></init></decl>,

<decl><name>fArg</name></decl>,
<decl><name>FArg</name></decl>,
<decl><name>eArg</name></decl>,
<decl><name>EArg</name></decl>,
<decl><name>gArg</name></decl>,
<decl><name>GArg</name></decl>,
<decl><name>aArg</name></decl>,
<decl><name>AArg</name></decl>,
<decl><name>DoubleArgBeg</name> <init>= <expr><name>fArg</name></expr></init></decl>,
<decl><name>DoubleArgEnd</name> <init>= <expr><name>AArg</name></expr></init></decl>,

<decl><name>sArg</name></decl>,
<decl><name>pArg</name></decl>,
<decl><name>nArg</name></decl>,
<decl><name>PercentArg</name></decl>,
<decl><name>CArg</name></decl>,
<decl><name>SArg</name></decl>,




<decl><name>PArg</name></decl>,



<decl><name>ZArg</name></decl>,


<decl><name>ObjCObjArg</name></decl>,
<decl><name>ObjCBeg</name> <init>= <expr><name>ObjCObjArg</name></expr></init></decl>,
<decl><name>ObjCEnd</name> <init>= <expr><name>ObjCObjArg</name></expr></init></decl>,


<decl><name>FreeBSDbArg</name></decl>,
<decl><name>FreeBSDDArg</name></decl>,
<decl><name>FreeBSDrArg</name></decl>,
<decl><name>FreeBSDyArg</name></decl>,


<decl><name>PrintErrno</name></decl>,

<decl><name>PrintfConvBeg</name> <init>= <expr><name>ObjCObjArg</name></expr></init></decl>,
<decl><name>PrintfConvEnd</name> <init>= <expr><name>PrintErrno</name></expr></init></decl>,


<decl><name>ScanListArg</name></decl>,
<decl><name>ScanfConvBeg</name> <init>= <expr><name>ScanListArg</name></expr></init></decl>,
<decl><name>ScanfConvEnd</name> <init>= <expr><name>ScanListArg</name></expr></init></decl>
}</block>;</enum>

<macro><name>ConversionSpecifier</name><argument_list>(<argument>bool isPrintf = true</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>IsPrintf</name><argument_list>(<argument><expr><name>isPrintf</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Position</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>EndScanList</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<macro><name>kind</name><argument_list>(<argument>InvalidSpecifier</argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>ConversionSpecifier</name><argument_list>(<argument>bool isPrintf</argument>, <argument>const char *pos</argument>, <argument>Kind k</argument>)</argument_list></macro>
<operator>:</operator> <call><name>IsPrintf</name><argument_list>(<argument><expr><name>isPrintf</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Position</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>EndScanList</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>kind</name><argument_list>(<argument>k</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Position</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>StringRef</name> <macro><name>getCharacters</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>StringRef</name><argument_list>(<argument><expr><call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>consumesDataArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PrintErrno</name></expr>:</case>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>IsPrintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>PercentArg</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<case>case <expr><name>InvalidSpecifier</name></expr>:</case>
<return>return <expr><name>false</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>true</name></expr>;</return>
<expr_stmt/>}</block_content>
}

Kind getKind(</block></switch>) <specifier>const</specifier> <block>{ <return>return <expr><name>kind</name></expr>;</return> }</block>
<name>void</name> <macro><name>setKind</name><argument_list>(<argument>Kind k</argument>)</argument_list></macro> <block>{ <expr><name>kind</name> <operator>=</operator> <name>k</name></expr>; }</block></block>
<name>unsigned</name> <macro><name>getLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>EndScanList</name> <operator>?</operator> <name>EndScanList</name> <operator>-</operator> <name>Position</name> <operator>:</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setEndScanList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>EndScanList</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>isIntArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>kind</name> <operator>&gt;=</operator> <name>IntArgBeg</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&lt;=</operator> <name>IntArgEnd</name><operator>)</operator> <operator>||</operator>
<name>kind</name> <operator>==</operator> <name>FreeBSDrArg</name> <operator>||</operator> <name>kind</name> <operator>==</operator> <name>FreeBSDyArg</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUIntArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kind</name> <operator>&gt;=</operator> <name>UIntArgBeg</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&lt;=</operator> <name>UIntArgEnd</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isAnyIntArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kind</name> <operator>&gt;=</operator> <name>IntArgBeg</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&lt;=</operator> <name>UIntArgEnd</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isDoubleArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>kind</name> <operator>&gt;=</operator> <name>DoubleArgBeg</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&lt;=</operator> <name>DoubleArgEnd</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>toString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isPrintfKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPrintf</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>ConversionSpecifier</name></expr></argument>&gt;</argument_list></name> <macro><name>getStandardSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>IsPrintf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Position</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>EndScanList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ArgType</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{ <decl><name>UnknownTy</name></decl>, <decl><name>InvalidTy</name></decl>, <decl><name>SpecificTy</name></decl>, <decl><name>ObjCPointerTy</name></decl>, <decl><name>CPointerTy</name></decl>,
<decl><name>AnyCharTy</name></decl>, <decl><name>CStrTy</name></decl>, <decl><name>WCStrTy</name></decl>, <decl><name>WIntTy</name></decl> }</block>;</enum>


<enum>enum <name>MatchKind</name> <block>{


<decl><name>NoMatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,


<decl><name>Match</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>NoMatchPedantic</name></decl>,


<decl><name>NoMatchTypeConfusion</name></decl>,
}</block>;</enum>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>Kind</name></type> <name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QualType</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>Ptr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TypeKind</name> <block>{<block_content> <expr_stmt><expr><name>DontCare</name></expr><operator>,</operator> <expr><name>SizeT</name></expr><operator>,</operator> <expr><name>PtrdiffT</name></expr></expr_stmt> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>TypeKind</name></type> <name>TK</name> <init>= <expr><name>TypeKind</name><operator>::</operator><name>DontCare</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<macro><name>ArgType</name><argument_list>(<argument>Kind K = UnknownTy</argument>, <argument>const char *N = nullptr</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>K</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Name</name><argument_list>(<argument>N</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>ArgType</name><argument_list>(<argument>QualType T</argument>, <argument>const char *N = nullptr</argument>)</argument_list></macro> <operator>:</operator> <call><name>K</name><argument_list>(<argument><expr><name>SpecificTy</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>T</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Name</name><argument_list>(<argument>N</argument>)</argument_list></macro> <expr><block>{}</block>
<macro><name>ArgType</name><argument_list>(<argument>CanQualType T</argument>)</argument_list></macro> <operator>:</operator> <call><name>K</name><argument_list>(<argument><expr><name>SpecificTy</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>T</name><argument_list>(<argument>T</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>ArgType</name> <macro><name>Invalid</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><call><name>ArgType</name><argument_list>(<argument><expr><name>InvalidTy</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>K</name> <operator>!=</operator> <name>InvalidTy</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isSizeT</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TK</name> <operator>==</operator> <name>TypeKind</name><operator>::</operator><name>SizeT</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isPtrdiffT</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>TK</name> <operator>==</operator> <name>TypeKind</name><operator>::</operator><name>PtrdiffT</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><specifier>static</specifier> <name>ArgType</name></type> <name>PtrTo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgType</name><modifier>&amp;</modifier></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>K</name></name> <operator>&gt;=</operator> <name>InvalidTy</name> <operator>&amp;&amp;</operator> <literal type="string">"ArgType cannot be pointer to invalid/unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ArgType</name></type> <name>Res</name> <init>= <expr><name>A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Res</name><operator>.</operator><name>Ptr</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><name>Res</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ArgType</name></type> <name>makeSizeT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgType</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ArgType</name></type> <name>Res</name> <init>= <expr><name>A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Res</name><operator>.</operator><name>TK</name></name> <operator>=</operator> <name>TypeKind</name><operator>::</operator><name>SizeT</name></expr>;</expr_stmt>
<return>return <expr><name>Res</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>ArgType</name></type> <name>makePtrdiffT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgType</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ArgType</name></type> <name>Res</name> <init>= <expr><name>A</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>Res</name><operator>.</operator><name>TK</name></name> <operator>=</operator> <name>TypeKind</name><operator>::</operator><name>PtrdiffT</name></expr>;</expr_stmt>
<return>return <expr><name>Res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>MatchKind</name></type> <name>matchesType</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>QualType</name> <name>argTy</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>QualType</name></type> <name>getRepresentativeType</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>ArgType</name></type> <name>makeVectorType</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>unsigned</name> <name>NumElts</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>getRepresentativeTypeName</name><argument_list>(<argument>ASTContext &amp;C</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OptionalAmount</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>HowSpecified</name> <block>{ <decl><name>NotSpecified</name></decl>, <decl><name>Constant</name></decl>, <decl><name>Arg</name></decl>, <decl><name>Invalid</name></decl> }</block>;</enum>

<macro><name>OptionalAmount</name><argument_list>(<argument>HowSpecified howSpecified</argument>,
<argument>unsigned amount</argument>,
<argument>const char *amountStart</argument>,
<argument>unsigned amountLength</argument>,
<argument>bool usesPositionalArg</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>amountStart</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>length</name><argument_list>(<argument><expr><name>amountLength</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>hs</name><argument_list>(<argument><expr><name>howSpecified</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>amt</name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UsesPositionalArg</name><argument_list>(<argument><expr><name>usesPositionalArg</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>UsesDotPrefix</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<macro><name>OptionalAmount</name><argument_list>(<argument>bool valid = true</argument>)</argument_list></macro>
<operator>:</operator> <call><name>start</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>length</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>hs</name><argument_list>(<argument><expr><name>valid</name> <operator>?</operator> <name>NotSpecified</name> <operator>:</operator> <name>Invalid</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>amt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UsesPositionalArg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>UsesDotPrefix</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>explicit</name> <macro><name>OptionalAmount</name><argument_list>(<argument>unsigned Amount</argument>)</argument_list></macro>
<operator>:</operator> <call><name>start</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>length</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>hs</name><argument_list>(<argument><expr><name>Constant</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>amt</name><argument_list>(<argument><expr><name>Amount</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UsesPositionalArg</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>UsesDotPrefix</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>hs</name> <operator>==</operator> <name>Invalid</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>HowSpecified</name> <macro><name>getHowSpecified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>hs</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setHowSpecified</name><parameter_list>(<parameter><decl><type><name>HowSpecified</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>hs</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>hasDataArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>hs</name> <operator>==</operator> <name>Arg</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getArgIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasDataArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>amt</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getConstantAmount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>hs</name> <operator>==</operator> <name>Constant</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>amt</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>getStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{

<return>return <expr><name>start</name> <operator>-</operator> <name>UsesDotPrefix</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getConstantLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>hs</name> <operator>==</operator> <name>Constant</name></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>length</name> <operator>+</operator> <name>UsesDotPrefix</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>ArgType</name></type> <name>getArgType</name><argument_list>(<argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Ctx</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>toString</name><argument_list>(<argument><expr><name>raw_ostream</name> <operator>&amp;</operator><name>os</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>usesPositionalArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>bool</name><operator>)</operator> <name>UsesPositionalArg</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getPositionalArgIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name>hasDataArgument</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<return>return <expr><name>amt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>usesDotPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UsesDotPrefix</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setUsesDotPrefix</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>UsesDotPrefix</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HowSpecified</name></type> <name>hs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>UsesPositionalArg</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>UsesDotPrefix</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>FormatSpecifier</name> <block>{<block_content>
<label><name>protected</name>:</label>
<decl_stmt><decl><type><name>LengthModifier</name></type> <name>LM</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalAmount</name></type> <name>FieldWidth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ConversionSpecifier</name></type> <name>CS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OptionalAmount</name></type> <name>VectorNumElts</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>bool</name></type> <name>UsesPositionalArg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>argIndex</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
<macro><name>FormatSpecifier</name><argument_list>(<argument>bool isPrintf</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>CS</name><argument_list>(<argument><expr><name>isPrintf</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>VectorNumElts</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><call><name>UsesPositionalArg</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>argIndex</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>setLengthModifier</name><argument_list>(<argument>LengthModifier lm</argument>)</argument_list></macro> <block>{
<expr><name>LM</name> <operator>=</operator> <name>lm</name></expr>;
}</block>

<name>void</name> <macro><name>setUsesPositionalArg</name><argument_list>()</argument_list></macro> <block>{ <expr><name>UsesPositionalArg</name> <operator>=</operator> <name>true</name></expr>; }</block>

<name>void</name> <macro><name>setArgIndex</name><argument_list>(<argument>unsigned i</argument>)</argument_list></macro> <block>{
<expr><name>argIndex</name> <operator>=</operator> <name>i</name></expr>;
}</block>

<name>unsigned</name> <macro><name>getArgIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>argIndex</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>unsigned</name> <macro><name>getPositionalArgIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>argIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>LengthModifier</name> <operator>&amp;</operator><macro><name>getLengthModifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>LM</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>OptionalAmount</name> <operator>&amp;</operator><macro><name>getFieldWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>FieldWidth</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setVectorNumElts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionalAmount</name> <modifier>&amp;</modifier></type><name>Amt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>VectorNumElts</name> <operator>=</operator> <name>Amt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>const</specifier> <name>OptionalAmount</name> <operator>&amp;</operator><macro><name>getVectorNumElts</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>VectorNumElts</name></expr>;</return>
}</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setFieldWidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptionalAmount</name> <modifier>&amp;</modifier></type><name>Amt</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>FieldWidth</name> <operator>=</operator> <name>Amt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><name>bool</name> <macro><name>usesPositionalArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UsesPositionalArg</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasValidLengthModifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasStandardLengthModifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>LengthModifier</name></expr></argument>&gt;</argument_list></name> <macro><name>getCorrectedLengthModifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>hasStandardConversionSpecifier</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LangOpt</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasStandardLengthConversionCombination</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>



<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>namedTypeToLengthModifier</name><parameter_list>(<parameter><decl><type><name>QualType</name></type> <name>QT</name></decl></parameter>, <parameter><decl><type><name>LengthModifier</name> <modifier>&amp;</modifier></type><name>LM</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><name>namespace</name></type> <name>analyze_printf</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PrintfConversionSpecifier</name> <range>:
<expr><name>public</name> <name>analyze_format_string</name><operator>::</operator><name>ConversionSpecifier</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>PrintfConversionSpecifier</name><argument_list>()</argument_list></call>
<operator>:</operator> <macro><name>ConversionSpecifier</name><argument_list>(<argument>true</argument>, <argument>nullptr</argument>, <argument>InvalidSpecifier</argument>)</argument_list></macro> <block>{}</block>

<macro><name>PrintfConversionSpecifier</name><argument_list>(<argument>const char *pos</argument>, <argument>Kind k</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>ConversionSpecifier</name><argument_list>(<argument>true</argument>, <argument>pos</argument>, <argument>k</argument>)</argument_list></macro> <block>{}</block>

<name>bool</name> <macro><name>isObjCArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kind</name> <operator>&gt;=</operator> <name>ObjCBeg</name> <operator>&amp;&amp;</operator> <name>kind</name> <operator>&lt;=</operator> <name>ObjCEnd</name></expr>;</return> }</block>
<name>bool</name> <macro><name>isDoubleArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>kind</name> <operator>&gt;=</operator> <name>DoubleArgBeg</name> <operator>&amp;&amp;</operator>
<name>kind</name> <operator>&lt;=</operator> <name>DoubleArgEnd</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const analyze_format_string::ConversionSpecifier *CS</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>CS</name><operator>-&gt;</operator><name>isPrintfKind</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>ArgType</name></expr>;
<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>LengthModifier</name></expr>;
<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>OptionalAmount</name></expr>;
<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>OptionalFlag</name></expr>;

<expr><name>class</name> <name>PrintfSpecifier</name> <operator>:</operator> <name>public</name> <name>analyze_format_string</name><operator>::</operator><name>FormatSpecifier</name> <block>{
<expr><name>OptionalFlag</name> <name>HasThousandsGrouping</name></expr>;
<expr><name>OptionalFlag</name> <name>IsLeftJustified</name></expr>;
<expr><name>OptionalFlag</name> <name>HasPlusPrefix</name></expr>;
<expr><name>OptionalFlag</name> <name>HasSpacePrefix</name></expr>;
<expr><name>OptionalFlag</name> <name>HasAlternativeForm</name></expr>;
<expr><name>OptionalFlag</name> <name>HasLeadingZeroes</name></expr>;
<expr><name>OptionalFlag</name> <name>HasObjCTechnicalTerm</name></expr>;
<expr><name>OptionalFlag</name> <name>IsPrivate</name></expr>;
<expr><name>OptionalFlag</name> <name>IsPublic</name></expr>;
<expr><name>OptionalFlag</name> <name>IsSensitive</name></expr>;
<expr><name>OptionalAmount</name> <name>Precision</name></expr>;
<expr><name>StringRef</name> <name>MaskType</name></expr>;

<expr><name>ArgType</name> <macro><name>getScalarArgType</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>bool IsObjCLiteral</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>PrintfSpecifier</name><argument_list>()</argument_list></call>
<operator>:</operator> <call><name>FormatSpecifier</name><argument_list>( <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>HasThousandsGrouping</name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>IsLeftJustified</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HasPlusPrefix</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HasSpacePrefix</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HasAlternativeForm</name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>HasLeadingZeroes</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>HasObjCTechnicalTerm</name><argument_list>(<argument><expr><literal type="string">"tt"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>IsPrivate</name><argument_list>(<argument><expr><literal type="string">"private"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>IsPublic</name><argument_list>(<argument><expr><literal type="string">"public"</literal></expr></argument>)</argument_list></call></expr>,
<macro><name>IsSensitive</name><argument_list>(<argument><literal type="string">"sensitive"</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>static</specifier> <name>PrintfSpecifier</name> <call><name>Parse</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>beg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>;


<expr><name>void</name> <macro><name>setConversionSpecifier</name><argument_list>(<argument>const PrintfConversionSpecifier &amp;cs</argument>)</argument_list></macro> <block>{
<expr><name>CS</name> <operator>=</operator> <name>cs</name></expr>;
}</block>
<name>void</name> <macro><name>setHasThousandsGrouping</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>HasThousandsGrouping</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setIsLeftJustified</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>IsLeftJustified</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setHasPlusPrefix</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>HasPlusPrefix</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setHasSpacePrefix</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>HasSpacePrefix</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setHasAlternativeForm</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>HasAlternativeForm</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setHasLeadingZeros</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>HasLeadingZeroes</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setHasObjCTechnicalTerm</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>HasObjCTechnicalTerm</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setIsPrivate</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{ <expr><call><name><name>IsPrivate</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>setIsPublic</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{ <expr><call><name><name>IsPublic</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>; }</block>
<name>void</name> <macro><name>setIsSensitive</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>IsSensitive</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>
<name>void</name> <macro><name>setUsesPositionalArg</name><argument_list>()</argument_list></macro> <block>{ <expr><name>UsesPositionalArg</name> <operator>=</operator> <name>true</name></expr>; }</block>



<specifier>const</specifier> <name>PrintfConversionSpecifier</name> <operator>&amp;</operator><macro><name>getConversionSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>PrintfConversionSpecifier</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>void</name> <macro><name>setPrecision</name><argument_list>(<argument>const OptionalAmount &amp;Amt</argument>)</argument_list></macro> <block>{
<expr><name>Precision</name> <operator>=</operator> <name>Amt</name></expr>;
<expr><call><name><name>Precision</name><operator>.</operator><name>setUsesDotPrefix</name></name><argument_list>()</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>OptionalAmount</name> <operator>&amp;</operator><macro><name>getPrecision</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>Precision</name></expr>;</return>
}</block>

<name>bool</name> <macro><name>consumesDataArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getConversionSpecifier</name><argument_list>()</argument_list></call><operator>.</operator><call><name>consumesDataArgument</name><argument_list>()</argument_list></call></expr>;</return>
}</block>






<name>ArgType</name> <macro><name>getArgType</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>, <argument>bool IsObjCLiteral</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>hasThousandsGrouping</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>HasThousandsGrouping</name></expr>;</return>
}</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>isLeftJustified</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsLeftJustified</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>hasPlusPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasPlusPrefix</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>hasAlternativeForm</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasAlternativeForm</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>hasLeadingZeros</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasLeadingZeroes</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>hasSpacePrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasSpacePrefix</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>hasObjCTechnicalTerm</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasObjCTechnicalTerm</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>isPrivate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPrivate</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>isPublic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPublic</name></expr>;</return> }</block>
<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>isSensitive</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsSensitive</name></expr>;</return> }</block>
<name>bool</name> <macro><name>usesPositionalArg</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UsesPositionalArg</name></expr>;</return> }</block>

<name>StringRef</name> <macro><name>getMaskType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>MaskType</name></expr>;</return> }</block>
<name>void</name> <macro><name>setMaskType</name><argument_list>(<argument>StringRef S</argument>)</argument_list></macro> <block>{ <expr><name>MaskType</name> <operator>=</operator> <name>S</name></expr>; }</block>




<name>bool</name> <macro><name>fixType</name><argument_list>(<argument>QualType QT</argument>, <argument>const LangOptions &amp;LangOpt</argument>, <argument>ASTContext &amp;Ctx</argument>,
<argument>bool IsObjCLiteral</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>toString</name><argument_list>(<argument>raw_ostream &amp;os</argument>)</argument_list></macro> <specifier>const</specifier></expr>;


<expr><name>bool</name> <macro><name>hasValidPlusPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasValidAlternativeForm</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasValidLeadingZeros</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasValidSpacePrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasValidLeftJustified</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasValidThousandsGroupingPrefix</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>hasValidPrecision</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>bool</name> <macro><name>hasValidFieldWidth</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;
}</block>




<name>namespace</name> <name>analyze_scanf</name> <block>{

<expr><name>class</name> <name>ScanfConversionSpecifier</name> <operator>:</operator>
<name>public</name> <name>analyze_format_string</name><operator>::</operator><name>ConversionSpecifier</name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>ScanfConversionSpecifier</name><argument_list>()</argument_list></call>
<operator>:</operator> <macro><name>ConversionSpecifier</name><argument_list>(<argument>false</argument>, <argument>nullptr</argument>, <argument>InvalidSpecifier</argument>)</argument_list></macro> <block>{}</block>

<macro><name>ScanfConversionSpecifier</name><argument_list>(<argument>const char *pos</argument>, <argument>Kind k</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>ConversionSpecifier</name><argument_list>(<argument>false</argument>, <argument>pos</argument>, <argument>k</argument>)</argument_list></macro> <block>{}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const analyze_format_string::ConversionSpecifier *CS</argument>)</argument_list></macro> <block>{
<return>return <expr><operator>!</operator><call><name><name>CS</name><operator>-&gt;</operator><name>isPrintfKind</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>
}</expr>;

<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>ArgType</name></expr>;
<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>LengthModifier</name></expr>;
<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>OptionalAmount</name></expr>;
<expr><name>using</name> <name>analyze_format_string</name><operator>::</operator><name>OptionalFlag</name></expr>;

<expr><name>class</name> <name>ScanfSpecifier</name> <operator>:</operator> <name>public</name> <name>analyze_format_string</name><operator>::</operator><name>FormatSpecifier</name> <block>{
<expr><name>OptionalFlag</name> <name>SuppressAssignment</name></expr>;
<expr><name>public</name><operator>:</operator>
<call><name>ScanfSpecifier</name><argument_list>()</argument_list></call> <operator>:</operator>
<call><name>FormatSpecifier</name><argument_list>( <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
<macro><name>SuppressAssignment</name><argument_list>(<argument><literal type="string">"*"</literal></argument>)</argument_list></macro> <expr><block>{}</block>

<name>void</name> <macro><name>setSuppressAssignment</name><argument_list>(<argument>const char *position</argument>)</argument_list></macro> <block>{
<expr><call><name><name>SuppressAssignment</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>const</specifier> <name>OptionalFlag</name> <operator>&amp;</operator><macro><name>getSuppressAssignment</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>SuppressAssignment</name></expr>;</return>
}</block>

<name>void</name> <macro><name>setConversionSpecifier</name><argument_list>(<argument>const ScanfConversionSpecifier &amp;cs</argument>)</argument_list></macro> <block>{
<expr><name>CS</name> <operator>=</operator> <name>cs</name></expr>;
}</block>

<specifier>const</specifier> <name>ScanfConversionSpecifier</name> <operator>&amp;</operator><macro><name>getConversionSpecifier</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>ScanfConversionSpecifier</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>CS</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>bool</name> <macro><name>consumesDataArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>CS</name><operator>.</operator><name>consumesDataArgument</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>SuppressAssignment</name></expr>;</return>
}</block>

<name>ArgType</name> <macro><name>getArgType</name><argument_list>(<argument>ASTContext &amp;Ctx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>fixType</name><argument_list>(<argument>QualType QT</argument>, <argument>QualType RawQT</argument>, <argument>const LangOptions &amp;LangOpt</argument>,
<argument>ASTContext &amp;Ctx</argument>)</argument_list></macro></expr>;

<expr><name>void</name> <macro><name>toString</name><argument_list>(<argument>raw_ostream &amp;os</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><specifier>static</specifier> <name>ScanfSpecifier</name> <call><name>Parse</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>beg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

}</block>




<name>namespace</name> <name>analyze_format_string</name> <block>{

enum <expr><name>PositionContext</name> <block>{ <expr><name>FieldWidthPos</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>PrecisionPos</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>;

<expr><name>class</name> <name>FormatStringHandler</name> <block>{
<expr><name>public</name><operator>:</operator>
<macro><name>FormatStringHandler</name><argument_list>()</argument_list></macro> <block>{}</block>
<name>virtual</name> <operator>~</operator><call><name>FormatStringHandler</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>HandleNullChar</name><argument_list>(<argument>const char *nullCharacter</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>HandlePosition</name><argument_list>(<argument>const char *startPos</argument>, <argument>unsigned posLen</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>HandleInvalidPosition</name><argument_list>(<argument>const char *startPos</argument>, <argument>unsigned posLen</argument>,
<argument>PositionContext p</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>HandleZeroPosition</name><argument_list>(<argument>const char *startPos</argument>, <argument>unsigned posLen</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>HandleIncompleteSpecifier</name><argument_list>(<argument>const char *startSpecifier</argument>,
<argument>unsigned specifierLen</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>HandleEmptyObjCModifierFlag</name><argument_list>(<argument>const char *startFlags</argument>,
<argument>unsigned flagsLen</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>HandleInvalidObjCModifierFlag</name><argument_list>(<argument>const char *startFlag</argument>,
<argument>unsigned flagLen</argument>)</argument_list></macro> <block>{}</block>

<name>virtual</name> <name>void</name> <macro><name>HandleObjCFlagsWithNonObjCConversion</name><argument_list>(<argument>const char *flagsStart</argument>,
<argument>const char *flagsEnd</argument>,
<argument>const char *conversionPosition</argument>)</argument_list></macro> <block>{}</block>


<name>virtual</name> <name>bool</name> <macro><name>HandleInvalidPrintfConversionSpecifier</name><argument_list>(
<argument>const analyze_printf::PrintfSpecifier &amp;FS</argument>,
<argument>const char *startSpecifier</argument>,
<argument>unsigned specifierLen</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>HandlePrintfSpecifier</name><argument_list>(<argument>const analyze_printf::PrintfSpecifier &amp;FS</argument>,
<argument>const char *startSpecifier</argument>,
<argument>unsigned specifierLen</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>


<name>virtual</name> <name>void</name> <macro><name>handleInvalidMaskType</name><argument_list>(<argument>StringRef MaskType</argument>)</argument_list></macro> <block>{}</block>



<name>virtual</name> <name>bool</name> <macro><name>HandleInvalidScanfConversionSpecifier</name><argument_list>(
<argument>const analyze_scanf::ScanfSpecifier &amp;FS</argument>,
<argument>const char *startSpecifier</argument>,
<argument>unsigned specifierLen</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>bool</name> <macro><name>HandleScanfSpecifier</name><argument_list>(<argument>const analyze_scanf::ScanfSpecifier &amp;FS</argument>,
<argument>const char *startSpecifier</argument>,
<argument>unsigned specifierLen</argument>)</argument_list></macro> <block>{
<return>return <expr><name>true</name></expr>;</return>
}</block>

<name>virtual</name> <name>void</name> <macro><name>HandleIncompleteScanList</name><argument_list>(<argument>const char *start</argument>, <argument>const char *end</argument>)</argument_list></macro> <block>{}</block>
}</expr>;

<expr><name>bool</name> <macro><name>ParsePrintfString</name><argument_list>(<argument>FormatStringHandler &amp;H</argument>,
<argument>const char *beg</argument>, <argument>const char *end</argument>, <argument>const LangOptions &amp;LO</argument>,
<argument>const TargetInfo &amp;Target</argument>, <argument>bool isFreeBSDKPrintf</argument>)</argument_list></macro></expr>;

<expr><name>bool</name> <call><name>ParseFormatStringHasSArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>beg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>end</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <call><name>ParseScanfString</name><argument_list>(<argument><expr><name>FormatStringHandler</name> <operator>&amp;</operator><name>H</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>beg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>end</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>)</argument_list></call></expr>;


<expr><name>bool</name> <call><name>parseFormatStringHasFormattingSpecifiers</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>Begin</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>End</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>LangOptions</name> <operator>&amp;</operator><name>LO</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>TargetInfo</name> <operator>&amp;</operator><name>Target</name></expr></argument>)</argument_list></call></expr>;

}</block></expr>
}</block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt></block_content></block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
