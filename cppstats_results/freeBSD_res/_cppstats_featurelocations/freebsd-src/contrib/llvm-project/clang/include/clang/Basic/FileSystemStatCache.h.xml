<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_BASIC_FILESYSTEMSTATCACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_BASIC_FILESYSTEMSTATCACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/StringRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/FileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/VirtualFileSystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>




<decl_stmt><decl><type><name>class</name></type> <name>FileSystemStatCache</name> <block>{<block_content>
<function_decl><type><name>virtual</name> <name>void</name></type> <name>anchor</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>public</name>:</label>
<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>FileSystemStatCache</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>











<expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name>error_code</name>
<macro><name>get</name><argument_list>(<argument>StringRef Path</argument>, <argument>llvm::vfs::Status &amp;Status</argument>, <argument>bool isFile</argument>,
<argument>std::unique_ptr&lt;llvm::vfs::File&gt; *F</argument>,
<argument>FileSystemStatCache *Cache</argument>, <argument>llvm::vfs::FileSystem &amp;FS</argument>)</argument_list></macro></expr>;</expr_stmt>

<label><name>protected</name>:</label>



<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>error_code</name> <macro><name>getStat</name><argument_list>(<argument>StringRef Path</argument>, <argument>llvm::vfs::Status &amp;Status</argument>,
<argument>bool isFile</argument>,
<argument>std::unique_ptr&lt;llvm::vfs::File&gt; *F</argument>,
<argument>llvm::vfs::FileSystem &amp;FS</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>MemorizeStatCalls</name> <range>: <expr><name>public</name> <name>FileSystemStatCache</name> <block>{
<expr><name>public</name><operator>:</operator>

<name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name></expr></argument>, <argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name> <name>StatCalls</name></expr>;

<expr><name>using</name> <name>iterator</name> <operator>=</operator>
<name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>llvm</name><operator>::</operator><name>vfs</name><operator>::</operator><name>Status</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>StatCalls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>StatCalls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>std</name><operator>::</operator><name>error_code</name> <macro><name>getStat</name><argument_list>(<argument>StringRef Path</argument>, <argument>llvm::vfs::Status &amp;Status</argument>,
<argument>bool isFile</argument>,
<argument>std::unique_ptr&lt;llvm::vfs::File&gt; *F</argument>,
<argument>llvm::vfs::FileSystem &amp;FS</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
