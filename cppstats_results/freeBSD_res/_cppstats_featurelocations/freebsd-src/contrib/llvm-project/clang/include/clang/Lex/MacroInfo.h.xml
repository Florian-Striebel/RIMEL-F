<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Lex/MacroInfo.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_LEX_MACROINFO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_LEX_MACROINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Lex/Token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/LLVM.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/SourceLocation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/FoldingSet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/PointerIntPair.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/SmallVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/Support/Allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>DefMacroDirective</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>IdentifierInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SourceManager</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>class</name></type> <name>MacroInfo</name> <block>{<block_content>




<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Location</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>SourceLocation</name></type> <name>EndLocation</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ParameterList</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>NumParameters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>SmallVector</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>&gt;</argument_list></name></type> <name>ReplacementTokens</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>unsigned</name></type> <name>DefinitionLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>bool</name></type> <name>IsDefinitionLengthCached</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsFunctionLike</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>IsC99Varargs</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>IsGNUVarargs</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>






<decl_stmt><decl><type><name>bool</name></type> <name>IsBuiltinMacro</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>HasCommaPasting</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>IsDisabled</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>bool</name></type> <name>IsUsed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsAllowRedefinitionsWithoutWarning</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>IsWarnIfUnused</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>UsedForHeaderGuard</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>


<macro><name>MacroInfo</name><argument_list>(<argument>SourceLocation DefLoc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><operator>~</operator><call><name>MacroInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

<label><name>public</name>:</label>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getDefinitionLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Location</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setDefinitionEndLoc</name><parameter_list>(<parameter><decl><type><name>SourceLocation</name></type> <name>EndLoc</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>EndLocation</name> <operator>=</operator> <name>EndLoc</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><name>SourceLocation</name> <macro><name>getDefinitionEndLoc</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>EndLocation</name></expr>;</return> }</block></expr></expr_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>getDefinitionLength</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>IsDefinitionLengthCached</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>DefinitionLength</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>getDefinitionLengthSlow</name><argument_list>(<argument><expr><name>SM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>








<decl_stmt><decl><type><name>bool</name></type> <name>isIdenticalTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MacroInfo</name> <operator>&amp;</operator><name>Other</name></expr></argument>, <argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>,
<argument><expr><name>bool</name> <name>Syntactically</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function><type><name>void</name></type> <name>setIsBuiltinMacro</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsBuiltinMacro</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>setIsUsed</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsUsed</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt> </block_content>}</block></function>


<function><type><name>void</name></type> <name>setIsAllowRedefinitionsWithoutWarning</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><name>IsAllowRedefinitionsWithoutWarning</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>setIsWarnIfUnused</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsWarnIfUnused</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></function>



<decl_stmt><decl><type><name>void</name></type> <name>setParameterList</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>IdentifierInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>List</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>PPAllocator</name></expr></argument>)</argument_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ParameterList</name> <operator>==</operator> <name>nullptr</name> <operator>&amp;&amp;</operator> <name>NumParameters</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<literal type="string">"Parameter list already set!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name><name>List</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>NumParameters</name> <operator>=</operator> <call><name><name>List</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ParameterList</name> <operator>=</operator> <name><name>PPAllocator</name><operator>.</operator><name>Allocate</name></name><operator>&lt;</operator><name>IdentifierInfo</name> <operator>*</operator><operator>&gt;</operator><operator>(</operator><call><name><name>List</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><call><name>copy</name><argument_list>(<argument><expr><call><name><name>List</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>List</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>using</name></type> <name>param_iterator</name> <init>= <expr><name>IdentifierInfo</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>param_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumParameters</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>param_iterator</name> <macro><name>param_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ParameterList</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>param_iterator</name> <macro><name>param_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ParameterList</name> <operator>+</operator> <name>NumParameters</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>unsigned</name> <macro><name>getNumParams</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumParameters</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>params</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ParameterList</name></expr></argument>, <argument><expr><name>NumParameters</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>getParameterNum</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IdentifierInfo</name> <operator>*</operator><name>Arg</name></expr></argument>)</argument_list> const <block>{<block_content>
<for>for <control>(<init><decl><type><name>param_iterator</name></type> <name>I</name> <init>= <expr><call><name>param_begin</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><call><name>param_end</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>I</name> <operator>!=</operator> <name>E</name></expr>;</condition> <incr><expr><operator>++</operator><name>I</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>I</name> <operator>==</operator> <name>Arg</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>I</name> <operator>-</operator> <call><name>param_begin</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<function><type><name>void</name></type> <name>setIsFunctionLike</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsFunctionLike</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>isFunctionLike</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsFunctionLike</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isObjectLike</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>IsFunctionLike</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setIsC99Varargs</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsC99Varargs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>setIsGNUVarargs</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsGNUVarargs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>
<expr_stmt><expr><name>bool</name> <macro><name>isC99Varargs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsC99Varargs</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isGNUVarargs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsGNUVarargs</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isVariadic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsC99Varargs</name> <operator>|</operator> <name>IsGNUVarargs</name></expr>;</return> }</block></expr></expr_stmt>







<expr_stmt><expr><name>bool</name> <macro><name>isBuiltinMacro</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsBuiltinMacro</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>hasCommaPasting</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>HasCommaPasting</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>void</name></type> <name>setHasCommaPasting</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>HasCommaPasting</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>



<expr_stmt><expr><name>bool</name> <macro><name>isUsed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsUsed</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isAllowRedefinitionsWithoutWarning</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>IsAllowRedefinitionsWithoutWarning</name></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isWarnIfUnused</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsWarnIfUnused</name></expr>;</return> }</block></expr></expr_stmt>


<expr_stmt><expr><name>unsigned</name> <macro><name>getNumTokens</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ReplacementTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Token</name> <modifier>&amp;</modifier></type><name>getReplacementToken</name><argument_list>(<argument><expr><name>unsigned</name> <name>Tok</name></expr></argument>)</argument_list> const <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>Tok</name> <operator>&lt;</operator> <call><name><name>ReplacementTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid token #"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ReplacementTokens</name><index>[<expr><name>Tok</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name></type> <name>tokens_iterator</name> <init>= <expr><name><name>SmallVectorImpl</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tokens_iterator</name> <macro><name>tokens_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ReplacementTokens</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>tokens_iterator</name> <macro><name>tokens_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ReplacementTokens</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>tokens_empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ReplacementTokens</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>Token</name></expr></argument>&gt;</argument_list></name> <macro><name>tokens</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ReplacementTokens</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>AddTokenToBody</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Token</name> <modifier>&amp;</modifier></type><name>Tok</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(
<argument><expr><operator>!</operator><name>IsDefinitionLengthCached</name> <operator>&amp;&amp;</operator>
<literal type="string">"Changing replacement tokens after definition length got calculated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ReplacementTokens</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<expr_stmt><expr><name>bool</name> <macro><name>isEnabled</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><name>IsDisabled</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>EnableMacro</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>IsDisabled</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot enable an already-enabled macro!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IsDisabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DisableMacro</name><parameter_list>()</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>IsDisabled</name> <operator>&amp;&amp;</operator> <literal type="string">"Cannot disable an already-disabled macro!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>IsDisabled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isUsedForHeaderGuard</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UsedForHeaderGuard</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setUsedForHeaderGuard</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>Val</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>UsedForHeaderGuard</name> <operator>=</operator> <name>Val</name></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>Preprocessor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>getDefinitionLengthSlow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>MacroDirective</name> <block>{<block_content>
<label><name>public</name>:</label>
<enum>enum <name>Kind</name> <block>{
<decl><name>MD_Define</name></decl>,
<decl><name>MD_Undefine</name></decl>,
<decl><name>MD_Visibility</name></decl>
}</block>;</enum>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>MacroDirective</name> <modifier>*</modifier></type><name>Previous</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SourceLocation</name></type> <name>Loc</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>MDKind</name> <range>: <expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>IsFromPCH</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name></type> <name>IsPublic</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<macro><name>MacroDirective</name><argument_list>(<argument>Kind K</argument>, <argument>SourceLocation Loc</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>Loc</name><argument_list>(<argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>MDKind</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>IsFromPCH</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsPublic</name><argument_list>(<argument>true</argument>)</argument_list></macro> <expr><block>{}</block>

<name>public</name><operator>:</operator>
<name>Kind</name> <macro><name>getKind</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Kind</name><argument_list>(<argument><expr><name>MDKind</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Loc</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>void</name></type> <name>setPrevious</name><parameter_list>(<parameter><decl><type><name>MacroDirective</name> <modifier>*</modifier></type><name>Prev</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>Previous</name> <operator>=</operator> <name>Prev</name></expr>;</expr_stmt> </block_content>}</block></function>


<expr_stmt><expr><specifier>const</specifier> <name>MacroDirective</name> <operator>*</operator><macro><name>getPrevious</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Previous</name></expr>;</return> }</block></expr></expr_stmt>


<function><type><name>MacroDirective</name> <modifier>*</modifier></type><name>getPrevious</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>Previous</name></expr>;</return> </block_content>}</block></function>


<expr_stmt><expr><name>bool</name> <macro><name>isFromPCH</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsFromPCH</name></expr>;</return> }</block></expr></expr_stmt>

<function><type><name>void</name></type> <name>setIsFromPCH</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>IsFromPCH</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> </block_content>}</block></function>

<decl_stmt><decl><type><name>class</name></type> <name>DefInfo</name> <block>{<block_content>
<decl_stmt><decl><type><name>DefMacroDirective</name> <modifier>*</modifier></type><name>DefDirective</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SourceLocation</name></type> <name>UndefLoc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>IsPublic</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>
<expr_stmt><expr><call><name>DefInfo</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>
<macro><name>DefInfo</name><argument_list>(<argument>DefMacroDirective *DefDirective</argument>, <argument>SourceLocation UndefLoc</argument>,
<argument>bool isPublic</argument>)</argument_list></macro>
: <expr_stmt><expr><call><name>DefDirective</name><argument_list>(<argument><expr><name>DefDirective</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>UndefLoc</name><argument_list>(<argument><expr><name>UndefLoc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>IsPublic</name><argument_list>(<argument>isPublic</argument>)</argument_list></macro> <expr><block>{}</block>

<specifier>const</specifier> <name>DefMacroDirective</name> <operator>*</operator><macro><name>getDirective</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DefDirective</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>DefMacroDirective</name> <modifier>*</modifier></type><name>getDirective</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>DefDirective</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><specifier>inline</specifier> <name>SourceLocation</name> <macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
<function_decl><type><specifier>inline</specifier> <name>MacroInfo</name> <modifier>*</modifier></type><name>getMacroInfo</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>MacroInfo</name> <operator>*</operator><macro><name>getMacroInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DefInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getMacroInfo</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>SourceLocation</name> <macro><name>getUndefLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>UndefLoc</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isUndefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>UndefLoc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isPublic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPublic</name></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>DefDirective</name> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>bool</name> <macro><name>isInvalid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>!</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<expr_stmt><expr><name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

<function_decl><type><specifier>inline</specifier> <name>DefInfo</name></type> <name>getPreviousDefinition</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>DefInfo</name> <macro><name>getPreviousDefinition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>DefInfo</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getPreviousDefinition</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>




<function_decl><type><name>DefInfo</name></type> <name>getDefinition</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>const</specifier> <name>DefInfo</name> <macro><name>getDefinition</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>const_cast</name><argument_list type="generic">&lt;<argument><expr><name>MacroDirective</name> <operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>getDefinition</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isDefined</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>DefInfo</name></type> <name>Def</name> <init>= <expr><call><name>getDefinition</name><argument_list>()</argument_list></call></expr></init></decl>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>!</operator><call><name><name>Def</name><operator>.</operator><name>isUndefined</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>MacroInfo</name> <operator>*</operator><macro><name>getMacroInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getDefinition</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMacroInfo</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><name>MacroInfo</name> <modifier>*</modifier></type><name>getMacroInfo</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>getDefinition</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMacroInfo</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>



<decl_stmt><decl><type><specifier>const</specifier> <name>DefInfo</name></type> <name>findDirectiveAtLoc</name><argument_list>(<argument><expr><name>SourceLocation</name> <name>L</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>SourceManager</name> <operator>&amp;</operator><name>SM</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<expr_stmt><expr><name>void</name> <macro><name>dump</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>classof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MacroDirective</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>true</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>DefMacroDirective</name> <range>: <expr><name>public</name> <name>MacroDirective</name> <block>{
<expr><name>MacroInfo</name> <operator>*</operator><name>Info</name></expr>;

<expr><name>public</name><operator>:</operator>
<macro><name>DefMacroDirective</name><argument_list>(<argument>MacroInfo *MI</argument>, <argument>SourceLocation Loc</argument>)</argument_list></macro>
<operator>:</operator> <call><name>MacroDirective</name><argument_list>(<argument><expr><name>MD_Define</name></expr></argument>, <argument><expr><name>Loc</name></expr></argument>)</argument_list></call></expr>, <macro><name>Info</name><argument_list>(<argument>MI</argument>)</argument_list></macro> <expr><block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><name>MI</name> <operator>&amp;&amp;</operator> <literal type="string">"MacroInfo is null"</literal></expr></argument>)</argument_list></call></expr>;
}</block>
<name>explicit</name> <call><name>DefMacroDirective</name><argument_list>(<argument><expr><name>MacroInfo</name> <operator>*</operator><name>MI</name></expr></argument>)</argument_list></call>
<operator>:</operator> <macro><name>DefMacroDirective</name><argument_list>(<argument>MI</argument>, <argument>MI-&gt;getDefinitionLoc()</argument>)</argument_list></macro> <block>{}</block>


<specifier>const</specifier> <name>MacroInfo</name> <operator>*</operator><macro><name>getInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Info</name></expr>;</return> }</block>
<name>MacroInfo</name> <operator>*</operator><macro><name>getInfo</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>Info</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const MacroDirective *MD</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MD_Define</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const DefMacroDirective *</argument>)</argument_list></macro> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;


<expr><name>class</name> <name>UndefMacroDirective</name> <operator>:</operator> <name>public</name> <name>MacroDirective</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>UndefMacroDirective</name><argument_list>(<argument>SourceLocation UndefLoc</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>MacroDirective</name><argument_list>(<argument>MD_Undefine</argument>, <argument>UndefLoc</argument>)</argument_list></macro> <block>{
<expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>UndefLoc</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <literal type="string">"Invalid UndefLoc!"</literal></expr></argument>)</argument_list></call></expr>;
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const MacroDirective *MD</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MD_Undefine</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const UndefMacroDirective *</argument>)</argument_list></macro> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;


<expr><name>class</name> <name>VisibilityMacroDirective</name> <operator>:</operator> <name>public</name> <name>MacroDirective</name> <block>{
<expr><name>public</name><operator>:</operator>
<name>explicit</name> <macro><name>VisibilityMacroDirective</name><argument_list>(<argument>SourceLocation Loc</argument>, <argument>bool Public</argument>)</argument_list></macro>
<operator>:</operator> <macro><name>MacroDirective</name><argument_list>(<argument>MD_Visibility</argument>, <argument>Loc</argument>)</argument_list></macro> <block>{
<expr><name>IsPublic</name> <operator>=</operator> <name>Public</name></expr>;
}</block>



<name>bool</name> <macro><name>isPublic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>IsPublic</name></expr>;</return> }</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const MacroDirective *MD</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MD_Visibility</name></expr>;</return>
}</block>

<specifier>static</specifier> <name>bool</name> <macro><name>classof</name><argument_list>(<argument>const VisibilityMacroDirective *</argument>)</argument_list></macro> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;

<expr><specifier>inline</specifier> <name>SourceLocation</name> <name>MacroDirective</name><operator>::</operator><name>DefInfo</name><operator>::</operator><macro><name>getLocation</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isInvalid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>DefDirective</name><operator>-&gt;</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>MacroInfo</name> <operator>*</operator><name>MacroDirective</name><operator>::</operator><name>DefInfo</name><operator>::</operator><macro><name>getMacroInfo</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isInvalid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>DefDirective</name><operator>-&gt;</operator><name>getInfo</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>

<specifier>inline</specifier> <name>MacroDirective</name><operator>::</operator><name>DefInfo</name>
<name>MacroDirective</name><operator>::</operator><name>DefInfo</name><operator>::</operator><macro><name>getPreviousDefinition</name><argument_list>()</argument_list></macro> <block>{
<if_stmt><if>if <condition>(<expr><call><name>isInvalid</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>DefDirective</name><operator>-&gt;</operator><name>getPrevious</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><call><name><name>DefDirective</name><operator>-&gt;</operator><name>getPrevious</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDefinition</name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></range></decl></decl_stmt>








<decl_stmt><decl><type><name>class</name></type> <name>ModuleMacro</name> <range>: <expr><name>public</name> <name>llvm</name><operator>::</operator><name>FoldingSetNode</name> <block>{
<expr><name>friend</name> <name>class</name> <name>Preprocessor</name></expr>;


<expr><name>IdentifierInfo</name> <operator>*</operator><name>II</name></expr>;


<expr><name>MacroInfo</name> <operator>*</operator><name>Macro</name></expr>;


<expr><name>Module</name> <operator>*</operator><name>OwningModule</name></expr>;


<expr><name>unsigned</name> <name>NumOverriddenBy</name> <operator>=</operator> <literal type="number">0</literal></expr>;


<expr><name>unsigned</name> <name>NumOverrides</name></expr>;

<expr><call><name>ModuleMacro</name><argument_list>(<argument><expr><name>Module</name> <operator>*</operator><name>OwningModule</name></expr></argument>, <argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>II</name></expr></argument>, <argument><expr><name>MacroInfo</name> <operator>*</operator><name>Macro</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMacro</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Overrides</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>II</name><argument_list>(<argument><expr><name>II</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>Macro</name><argument_list>(<argument><expr><name>Macro</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>OwningModule</name><argument_list>(<argument><expr><name>OwningModule</name></expr></argument>)</argument_list></call></expr>,
<macro><name>NumOverrides</name><argument_list>(<argument>Overrides.size()</argument>)</argument_list></macro> <expr><block>{
<expr><name>std</name><operator>::</operator><call><name>copy</name><argument_list>(<argument><expr><call><name><name>Overrides</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Overrides</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMacro</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>public</name><operator>:</operator>
<specifier>static</specifier> <name>ModuleMacro</name> <operator>*</operator><call><name>create</name><argument_list>(<argument><expr><name>Preprocessor</name> <operator>&amp;</operator><name>PP</name></expr></argument>, <argument><expr><name>Module</name> <operator>*</operator><name>OwningModule</name></expr></argument>,
<argument><expr><name>IdentifierInfo</name> <operator>*</operator><name>II</name></expr></argument>, <argument><expr><name>MacroInfo</name> <operator>*</operator><name>Macro</name></expr></argument>,
<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMacro</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Overrides</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>OwningModule</name></expr></argument>, <argument><expr><name>II</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>, <argument>Module *OwningModule</argument>,
<argument>const IdentifierInfo *II</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>OwningModule</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><name>II</name></expr></argument>)</argument_list></call></expr>;
}</block>


<name>IdentifierInfo</name> <operator>*</operator><macro><name>getName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>II</name></expr>;</return> }</block>


<name>Module</name> <operator>*</operator><macro><name>getOwningModule</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>OwningModule</name></expr>;</return> }</block>



<name>MacroInfo</name> <operator>*</operator><macro><name>getMacroInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Macro</name></expr>;</return> }</block>



<name>using</name> <name>overrides_iterator</name> <operator>=</operator> <name>ModuleMacro</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr>;

<expr><name>overrides_iterator</name> <macro><name>overrides_begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>overrides_iterator</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block>

<name>overrides_iterator</name> <macro><name>overrides_end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>overrides_begin</name><argument_list>()</argument_list></call> <operator>+</operator> <name>NumOverrides</name></expr>;</return>
}</block>

<name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMacro</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>overrides</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><name>llvm</name><operator>::</operator><call><name>makeArrayRef</name><argument_list>(<argument><expr><call><name>overrides_begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>overrides_end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>



<name>unsigned</name> <macro><name>getNumOverridingMacros</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>NumOverriddenBy</name></expr>;</return> }</block>
}</expr>;





<expr><name>class</name> <name>MacroDefinition</name> <block>{
<expr><name>llvm</name><operator>::</operator><name><name>PointerIntPair</name><argument_list type="generic">&lt;<argument><expr><name>DefMacroDirective</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>LatestLocalAndAmbiguous</name></expr>;
<expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMacro</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ModuleMacros</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>MacroDefinition</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;
<macro><name>MacroDefinition</name><argument_list>(<argument>DefMacroDirective *MD</argument>, <argument>ArrayRef&lt;ModuleMacro *&gt; MMs</argument>,
<argument>bool IsAmbiguous</argument>)</argument_list></macro>
<operator>:</operator> <expr><call><name>LatestLocalAndAmbiguous</name><argument_list>(<argument><expr><name>MD</name></expr></argument>, <argument><expr><name>IsAmbiguous</name></expr></argument>)</argument_list></call></expr>, <macro><name>ModuleMacros</name><argument_list>(<argument>MMs</argument>)</argument_list></macro> <expr><block>{}</block>


<name>explicit</name> <name>operator</name> <macro><name>bool</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getLocalDirective</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>ModuleMacros</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block>


<name>MacroInfo</name> <operator>*</operator><macro><name>getMacroInfo</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ModuleMacros</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>ModuleMacros</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getMacroInfo</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>MD</name> <operator>=</operator> <call><name>getLocalDirective</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name><name>MD</name><operator>-&gt;</operator><name>getMacroInfo</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr>
<return>return <expr><name>nullptr</name></expr>;</return>
}</block></expr></range></decl></decl_stmt>


<expr_stmt><expr><name>bool</name> <macro><name>isAmbiguous</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>LatestLocalAndAmbiguous</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>DefMacroDirective</name> <operator>*</operator><macro><name>getLocalDirective</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name><name>LatestLocalAndAmbiguous</name><operator>.</operator><name>getPointer</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ModuleMacro</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getModuleMacros</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>ModuleMacros</name></expr>;</return> }</block></expr></expr_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Fn</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>forAllDefinitions</name><argument_list>(<argument><expr><name>Fn</name> <name>F</name></expr></argument>)</argument_list> const <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>auto</name> <operator>*</operator><name>MD</name> <operator>=</operator> <call><name>getLocalDirective</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>F</name><argument_list>(<argument><expr><call><name><name>MD</name><operator>-&gt;</operator><name>getMacroInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>auto</name> <operator>*</operator><name>MM</name> <operator>:</operator> <call><name>getModuleMacros</name><argument_list>()</argument_list></call></expr></init>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>F</name><argument_list>(<argument><expr><call><name><name>MM</name><operator>-&gt;</operator><name>getMacroInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>
};

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
