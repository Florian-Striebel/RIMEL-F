<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Analysis/Analyses/ExprMutationAnalyzer.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_ANALYSIS_ANALYSES_EXPRMUTATIONANALYZER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_ANALYSIS_ANALYSES_EXPRMUTATIONANALYZER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/AST/AST.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/ASTMatchers/ASTMatchers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/DenseMap.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FunctionParmMutationAnalyzer</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>ExprMutationAnalyzer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>ExprMutationAnalyzer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>&amp;</operator><name>Stm</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call>
<operator>:</operator> <call><name>Stm</name><argument_list>(<argument><expr><name>Stm</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>Context</name><argument_list>(<argument>Context</argument>)</argument_list></macro> <expr><block>{}</block>

<name>bool</name> <macro><name>isMutated</name><argument_list>(<argument>const Expr *Exp</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name>findMutation</name><argument_list>(<argument><expr><name>Exp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return> }</block></expr></expr_stmt>
<function><type><name>bool</name></type> <name>isMutated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Dec</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>findMutation</name><argument_list>(<argument><expr><name>Dec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return> </block_content>}</block></function>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Dec</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>isPointeeMutated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>findPointeeMutation</name><argument_list>(<argument><expr><name>Exp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>bool</name></type> <name>isPointeeMutated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Dec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>findPointeeMutation</name><argument_list>(<argument><expr><name>Dec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></function>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findPointeeMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findPointeeMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Dec</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>using</name></type> <name>MutationFinder</name> <init>= <expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><operator>(</operator><name>ExprMutationAnalyzer</name><operator>::</operator><operator>*</operator><operator>)</operator><operator>(</operator><specifier>const</specifier> <name>Expr</name> <operator>*</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>using</name></type> <name>ResultMap</name> <init>= <expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findMutationMemoized</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>Exp</name></expr></argument>,
<argument><expr><name>llvm</name><operator>::</operator><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>MutationFinder</name></expr></argument>&gt;</argument_list></name> <name>Finders</name></expr></argument>,
<argument><expr><name>ResultMap</name> <operator>&amp;</operator><name>MemoizedResults</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>tryEachDeclRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decl</name> <modifier>*</modifier></type><name>Dec</name></decl></parameter>, <parameter><decl><type><name>MutationFinder</name></type> <name>Finder</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>isUnevaluated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findExprMutation</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ast_matchers</name><operator>::</operator><name>BoundNodes</name></expr></argument>&gt;</argument_list></name></type> <name>Matches</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findDeclMutation</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ast_matchers</name><operator>::</operator><name>BoundNodes</name></expr></argument>&gt;</argument_list></name></type> <name>Matches</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type>
<name>findExprPointeeMutation</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ast_matchers</name><operator>::</operator><name>BoundNodes</name></expr></argument>&gt;</argument_list></name></type> <name>Matches</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type>
<name>findDeclPointeeMutation</name><parameter_list>(<parameter><decl><type><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>ast_matchers</name><operator>::</operator><name>BoundNodes</name></expr></argument>&gt;</argument_list></name></type> <name>Matches</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findDirectMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findMemberMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findArrayElementMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findCastMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findRangeLoopMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findReferenceMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findFunctionArgMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>Exp</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>&amp;</modifier></type><name>Stm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Context</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>*</operator></expr></argument>,
<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FunctionParmMutationAnalyzer</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
<name>FuncParmAnalyzer</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>ResultMap</name></type> <name>Results</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ResultMap</name></type> <name>PointeeResults</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>



<decl_stmt><decl><type><name>class</name></type> <name>FunctionParmMutationAnalyzer</name> <block>{<block_content>
<label><name>public</name>:</label>
<expr_stmt><expr><call><name>FunctionParmMutationAnalyzer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FunctionDecl</name> <operator>&amp;</operator><name>Func</name></expr></argument>, <argument><expr><name>ASTContext</name> <operator>&amp;</operator><name>Context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>bool</name></type> <name>isMutated</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>Parm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>findMutation</name><argument_list>(<argument><expr><name>Parm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nullptr</name></expr>;</return>
</block_content>}</block></function>
<function_decl><type><specifier>const</specifier> <name>Stmt</name> <modifier>*</modifier></type><name>findMutation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParmVarDecl</name> <modifier>*</modifier></type><name>Parm</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>ExprMutationAnalyzer</name></type> <name>BodyAnalyzer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>llvm</name><operator>::</operator><name><name>DenseMap</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ParmVarDecl</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>Results</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
