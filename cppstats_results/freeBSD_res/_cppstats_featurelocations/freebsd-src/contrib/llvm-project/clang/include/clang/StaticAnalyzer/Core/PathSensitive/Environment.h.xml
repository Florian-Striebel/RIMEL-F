<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/Environment.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_ENVIRONMENT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_ENVIRONMENT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Analysis/AnalysisDeclContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ImmutableMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Stmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>ento</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SValBuilder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SymbolReaper</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>class</name></type> <name>EnvironmentEntry</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator></expr></argument>,
<argument><expr><specifier>const</specifier> <name>StackFrameContext</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
<call><name>EnvironmentEntry</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><name>L</name></expr></argument>)</argument_list></call></expr>;

<expr><specifier>const</specifier> <name>Stmt</name> <operator>*</operator><macro><name>getStmt</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>first</name></expr>;</return> }</block>
<specifier>const</specifier> <name>LocationContext</name> <operator>*</operator><macro><name>getLocationContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>second</name></expr>;</return> }</block>


<specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>,
<argument>const EnvironmentEntry &amp;E</argument>)</argument_list></macro> <block>{
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>getStmt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
<expr><call><name><name>ID</name><operator>.</operator><name>AddPointer</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>getLocationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
}</block>

<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID &amp;ID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>
}</expr>;


<expr><name>class</name> <name>Environment</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>friend</name> <name>class</name> <name>EnvironmentManager</name></expr>;

<expr><name>using</name> <name>BindingsTy</name> <operator>=</operator> <name>llvm</name><operator>::</operator><name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><expr><name>EnvironmentEntry</name></expr></argument>, <argument><expr><name>SVal</name></expr></argument>&gt;</argument_list></name></expr>;

<expr><name>BindingsTy</name> <name>ExprBindings</name></expr>;

<macro><name>Environment</name><argument_list>(<argument>BindingsTy eb</argument>)</argument_list></macro> <operator>:</operator> <macro><name>ExprBindings</name><argument_list>(<argument>eb</argument>)</argument_list></macro> <expr><block>{}</block>

<name>SVal</name> <macro><name>lookupExpr</name><argument_list>(<argument>const EnvironmentEntry &amp;E</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name><operator>:</operator>
<name>using</name> <name>iterator</name> <operator>=</operator> <name>BindingsTy</name><operator>::</operator><name>iterator</name></expr>;

<expr><name>iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ExprBindings</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>
<name>iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>ExprBindings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>



<name>SVal</name> <macro><name>getSVal</name><argument_list>(<argument>const EnvironmentEntry &amp;E</argument>, <argument>SValBuilder &amp;svalBuilder</argument>)</argument_list></macro> <specifier>const</specifier></expr>;



<expr><specifier>static</specifier> <name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID&amp; ID</argument>, <argument>const Environment* env</argument>)</argument_list></macro> <block>{
<expr><call><name><name>env</name><operator>-&gt;</operator><name>ExprBindings</name><operator>.</operator><name>Profile</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;
}</block>



<name>void</name> <macro><name>Profile</name><argument_list>(<argument>llvm::FoldingSetNodeID&amp; ID</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
<expr><call><name>Profile</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Environment</name><operator>&amp;</operator> <name>RHS</name><operator>)</operator> <specifier>const</specifier> <block>{
<return>return <expr><name>ExprBindings</name> <operator>==</operator> <name><name>RHS</name><operator>.</operator><name>ExprBindings</name></name></expr>;</return>
}</block>

<name>void</name> <macro><name>printJson</name><argument_list>(<argument>raw_ostream &amp;Out</argument>, <argument>const ASTContext &amp;Ctx</argument>,
<argument>const LocationContext *LCtx = nullptr</argument>, <argument>const char *NL = <literal type="string">"\n"</literal></argument>,
<argument>unsigned int Space = <literal type="number">0</literal></argument>, <argument>bool IsDot = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;

<expr><name>class</name> <name>EnvironmentManager</name> <block>{
<expr><name>private</name><operator>:</operator>
<name>using</name> <name>FactoryTy</name> <operator>=</operator> <name>Environment</name><operator>::</operator><name>BindingsTy</name><operator>::</operator><name>Factory</name></expr>;

<expr><name>FactoryTy</name> <name>F</name></expr>;

<expr><name>public</name><operator>:</operator>
<call><name>EnvironmentManager</name><argument_list>(<argument><expr><name>llvm</name><operator>::</operator><name>BumpPtrAllocator</name> <operator>&amp;</operator><name>Allocator</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>F</name><argument_list>(<argument>Allocator</argument>)</argument_list></macro> <block>{}</block>

<name>Environment</name> <macro><name>getInitialEnvironment</name><argument_list>()</argument_list></macro> <block>{
<return>return <expr><call><name>Environment</name><argument_list>(<argument><expr><call><name><name>F</name><operator>.</operator><name>getEmptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>


<name>Environment</name> <macro><name>bindExpr</name><argument_list>(<argument>Environment Env</argument>, <argument>const EnvironmentEntry &amp;E</argument>, <argument>SVal V</argument>,
<argument>bool Invalidate</argument>)</argument_list></macro></expr>;

<expr><name>Environment</name> <macro><name>removeDeadBindings</name><argument_list>(<argument>Environment Env</argument>,
<argument>SymbolReaper &amp;SymReaper</argument>,
<argument>ProgramStateRef state</argument>)</argument_list></macro></expr>;
}</block></expr>;

}</block></expr></range></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
