<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/AST/NSAPI.h">







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_AST_NSAPI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_AST_NSAPI_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Basic/IdentifierTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/ArrayRef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llvm/ADT/Optional.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ASTContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ObjCInterfaceDecl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QualType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Expr</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>NSAPI</name> <block>{<block_content>
<label><name>public</name>:</label>
<function_decl><type><name>explicit</name></type> <name>NSAPI</name><parameter_list>(<parameter><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>ASTContext</name> <operator>&amp;</operator><macro><name>getASTContext</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>Ctx</name></expr>;</return> }</block></expr></expr_stmt>

<enum>enum <name>NSClassIdKindKind</name> <block>{
<decl><name>ClassId_NSObject</name></decl>,
<decl><name>ClassId_NSString</name></decl>,
<decl><name>ClassId_NSArray</name></decl>,
<decl><name>ClassId_NSMutableArray</name></decl>,
<decl><name>ClassId_NSDictionary</name></decl>,
<decl><name>ClassId_NSMutableDictionary</name></decl>,
<decl><name>ClassId_NSNumber</name></decl>,
<decl><name>ClassId_NSMutableSet</name></decl>,
<decl><name>ClassId_NSMutableOrderedSet</name></decl>,
<decl><name>ClassId_NSValue</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>NumClassIds</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<enum>enum <name>NSStringMethodKind</name> <block>{
<decl><name>NSStr_stringWithString</name></decl>,
<decl><name>NSStr_stringWithUTF8String</name></decl>,
<decl><name>NSStr_stringWithCStringEncoding</name></decl>,
<decl><name>NSStr_stringWithCString</name></decl>,
<decl><name>NSStr_initWithString</name></decl>,
<decl><name>NSStr_initWithUTF8String</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>NumNSStringMethods</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IdentifierInfo</name> <modifier>*</modifier></type><name>getNSClassId</name><argument_list>(<argument><expr><name>NSClassIdKindKind</name> <name>K</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>Selector</name></type> <name>getNSStringSelector</name><argument_list>(<argument><expr><name>NSStringMethodKind</name> <name>MK</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isNSUTF8StringEncodingConstant</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isObjCEnumerator</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="string">"NSUTF8StringEncoding"</literal></expr></argument>, <argument><expr><name>NSUTF8StringEncodingId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<decl_stmt><decl><type><name>bool</name></type> <name>isNSASCIIStringEncodingConstant</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><call><name>isObjCEnumerator</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="string">"NSASCIIStringEncoding"</literal></expr></argument>,<argument><expr><name>NSASCIIStringEncodingId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>



<enum>enum <name>NSArrayMethodKind</name> <block>{
<decl><name>NSArr_array</name></decl>,
<decl><name>NSArr_arrayWithArray</name></decl>,
<decl><name>NSArr_arrayWithObject</name></decl>,
<decl><name>NSArr_arrayWithObjects</name></decl>,
<decl><name>NSArr_arrayWithObjectsCount</name></decl>,
<decl><name>NSArr_initWithArray</name></decl>,
<decl><name>NSArr_initWithObjects</name></decl>,
<decl><name>NSArr_objectAtIndex</name></decl>,
<decl><name>NSMutableArr_replaceObjectAtIndex</name></decl>,
<decl><name>NSMutableArr_addObject</name></decl>,
<decl><name>NSMutableArr_insertObjectAtIndex</name></decl>,
<decl><name>NSMutableArr_setObjectAtIndexedSubscript</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>NumNSArrayMethods</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Selector</name></type> <name>getNSArraySelector</name><argument_list>(<argument><expr><name>NSArrayMethodKind</name> <name>MK</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NSArrayMethodKind</name></expr></argument>&gt;</argument_list></name></type> <name>getNSArrayMethodKind</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>Sel</name></decl></parameter>)</parameter_list>;</function_decl>



<enum>enum <name>NSDictionaryMethodKind</name> <block>{
<decl><name>NSDict_dictionary</name></decl>,
<decl><name>NSDict_dictionaryWithDictionary</name></decl>,
<decl><name>NSDict_dictionaryWithObjectForKey</name></decl>,
<decl><name>NSDict_dictionaryWithObjectsForKeys</name></decl>,
<decl><name>NSDict_dictionaryWithObjectsForKeysCount</name></decl>,
<decl><name>NSDict_dictionaryWithObjectsAndKeys</name></decl>,
<decl><name>NSDict_initWithDictionary</name></decl>,
<decl><name>NSDict_initWithObjectsAndKeys</name></decl>,
<decl><name>NSDict_initWithObjectsForKeys</name></decl>,
<decl><name>NSDict_objectForKey</name></decl>,
<decl><name>NSMutableDict_setObjectForKey</name></decl>,
<decl><name>NSMutableDict_setObjectForKeyedSubscript</name></decl>,
<decl><name>NSMutableDict_setValueForKey</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>NumNSDictionaryMethods</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Selector</name></type> <name>getNSDictionarySelector</name><argument_list>(<argument><expr><name>NSDictionaryMethodKind</name> <name>MK</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NSDictionaryMethodKind</name></expr></argument>&gt;</argument_list></name></type> <name>getNSDictionaryMethodKind</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>Sel</name></decl></parameter>)</parameter_list>;</function_decl>



<enum>enum <name>NSSetMethodKind</name> <block>{
<decl><name>NSMutableSet_addObject</name></decl>,
<decl><name>NSOrderedSet_insertObjectAtIndex</name></decl>,
<decl><name>NSOrderedSet_setObjectAtIndex</name></decl>,
<decl><name>NSOrderedSet_setObjectAtIndexedSubscript</name></decl>,
<decl><name>NSOrderedSet_replaceObjectAtIndexWithObject</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>NumNSSetMethods</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>Selector</name></type> <name>getNSSetSelector</name><argument_list>(<argument><expr><name>NSSetMethodKind</name> <name>MK</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<function_decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NSSetMethodKind</name></expr></argument>&gt;</argument_list></name></type> <name>getNSSetMethodKind</name><parameter_list>(<parameter><decl><type><name>Selector</name></type> <name>Sel</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><name>Selector</name> <macro><name>getObjectForKeyedSubscriptSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getOrInitSelector</name><argument_list>(<argument><expr><call><name>StringRef</name><argument_list>(<argument><expr><literal type="string">"objectForKeyedSubscript"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>objectForKeyedSubscriptSel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Selector</name> <macro><name>getObjectAtIndexedSubscriptSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getOrInitSelector</name><argument_list>(<argument><expr><call><name>StringRef</name><argument_list>(<argument><expr><literal type="string">"objectAtIndexedSubscript"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>objectAtIndexedSubscriptSel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Selector</name> <macro><name>getSetObjectForKeyedSubscriptSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>StringRef</name> <name><name>Ids</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="string">"setObject"</literal></expr>, <expr><literal type="string">"forKeyedSubscript"</literal></expr> }</block></expr>;
<return>return <expr><call><name>getOrInitSelector</name><argument_list>(<argument><expr><name>Ids</name></expr></argument>, <argument><expr><name>setObjectForKeyedSubscriptSel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Selector</name> <macro><name>getSetObjectAtIndexedSubscriptSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<expr><name>StringRef</name> <name><name>Ids</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="string">"setObject"</literal></expr>, <expr><literal type="string">"atIndexedSubscript"</literal></expr> }</block></expr>;
<return>return <expr><call><name>getOrInitSelector</name><argument_list>(<argument><expr><name>Ids</name></expr></argument>, <argument><expr><name>setObjectAtIndexedSubscriptSel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<expr_stmt><expr><name>Selector</name> <macro><name>getIsEqualSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getOrInitSelector</name><argument_list>(<argument><expr><call><name>StringRef</name><argument_list>(<argument><expr><literal type="string">"isEqual"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isEqualSel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Selector</name> <macro><name>getNewSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getOrInitNullarySelector</name><argument_list>(<argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><name>NewSel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>Selector</name> <macro><name>getInitSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
<return>return <expr><call><name>getOrInitNullarySelector</name><argument_list>(<argument><expr><literal type="string">"init"</literal></expr></argument>, <argument><expr><name>InitSel</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>


<enum>enum <name>NSNumberLiteralMethodKind</name> <block>{
<decl><name>NSNumberWithChar</name></decl>,
<decl><name>NSNumberWithUnsignedChar</name></decl>,
<decl><name>NSNumberWithShort</name></decl>,
<decl><name>NSNumberWithUnsignedShort</name></decl>,
<decl><name>NSNumberWithInt</name></decl>,
<decl><name>NSNumberWithUnsignedInt</name></decl>,
<decl><name>NSNumberWithLong</name></decl>,
<decl><name>NSNumberWithUnsignedLong</name></decl>,
<decl><name>NSNumberWithLongLong</name></decl>,
<decl><name>NSNumberWithUnsignedLongLong</name></decl>,
<decl><name>NSNumberWithFloat</name></decl>,
<decl><name>NSNumberWithDouble</name></decl>,
<decl><name>NSNumberWithBool</name></decl>,
<decl><name>NSNumberWithInteger</name></decl>,
<decl><name>NSNumberWithUnsignedInteger</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>NumNSNumberLiteralMethods</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><name>Selector</name></type> <name>getNSNumberLiteralSelector</name><argument_list>(<argument><expr><name>NSNumberLiteralMethodKind</name> <name>MK</name></expr></argument>,
<argument><expr><name>bool</name> <name>Instance</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isNSNumberLiteralSelector</name><argument_list>(<argument><expr><name>NSNumberLiteralMethodKind</name> <name>MK</name></expr></argument>,
<argument><expr><name>Selector</name> <name>Sel</name></expr></argument>)</argument_list> const <block>{<block_content>
<return>return <expr><name>Sel</name> <operator>==</operator> <call><name>getNSNumberLiteralSelector</name><argument_list>(<argument><expr><name>MK</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>Sel</name> <operator>==</operator> <call><name>getNSNumberLiteralSelector</name><argument_list>(<argument><expr><name>MK</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NSNumberLiteralMethodKind</name></expr></argument>&gt;</argument_list></name></type>
<name>getNSNumberLiteralMethodKind</name><argument_list>(<argument><expr><name>Selector</name> <name>Sel</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>NSNumberLiteralMethodKind</name></expr></argument>&gt;</argument_list></name></type>
<name>getNSNumberFactoryMethodKind</name><argument_list>(<argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isObjCBOOLType</name><argument_list>(<argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isObjCNSIntegerType</name><argument_list>(<argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>isObjCNSUIntegerType</name><argument_list>(<argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>StringRef</name></type> <name>GetNSIntegralKind</name><argument_list>(<argument><expr><name>QualType</name> <name>T</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isMacroDefined</name><argument_list>(<argument><expr><name>StringRef</name> <name>Id</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>


<decl_stmt><decl><type><name>bool</name></type> <name>isSubclassOfNSClass</name><argument_list>(<argument><expr><name>ObjCInterfaceDecl</name> <operator>*</operator><name>InterfaceDecl</name></expr></argument>,
<argument><expr><name>NSClassIdKindKind</name> <name>NSClassKind</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
<decl_stmt><decl><type><name>bool</name></type> <name>isObjCTypedef</name><argument_list>(<argument><expr><name>QualType</name> <name>T</name></expr></argument>, <argument><expr><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><name>IdentifierInfo</name> <operator>*</operator><operator>&amp;</operator><name>II</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>isObjCEnumerator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Expr</name> <operator>*</operator><name>E</name></expr></argument>,
<argument><expr><name>StringRef</name> <name>name</name></expr></argument>, <argument><expr><name>IdentifierInfo</name> <operator>*</operator><operator>&amp;</operator><name>II</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Selector</name></type> <name>getOrInitSelector</name><argument_list>(<argument><expr><name><name>ArrayRef</name><argument_list type="generic">&lt;<argument><expr><name>StringRef</name></expr></argument>&gt;</argument_list></name> <name>Ids</name></expr></argument>, <argument><expr><name>Selector</name> <operator>&amp;</operator><name>Sel</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<decl_stmt><decl><type><name>Selector</name></type> <name>getOrInitNullarySelector</name><argument_list>(<argument><expr><name>StringRef</name> <name>Id</name></expr></argument>, <argument><expr><name>Selector</name> <operator>&amp;</operator><name>Sel</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASTContext</name> <modifier>&amp;</modifier></type><name>Ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>IdentifierInfo</name> <modifier>*</modifier></type><name><name>ClassIds</name><index>[<expr><name>NumClassIds</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>Selector</name></type> <name><name>NSStringSelectors</name><index>[<expr><name>NumNSStringMethods</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>Selector</name></type> <name><name>NSArraySelectors</name><index>[<expr><name>NumNSArrayMethods</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>Selector</name></type> <name><name>NSDictionarySelectors</name><index>[<expr><name>NumNSDictionaryMethods</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>Selector</name></type> <name><name>NSSetSelectors</name><index>[<expr><name>NumNSSetMethods</name></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>mutable</name> <name>Selector</name></type> <name><name>NSNumberClassSelectors</name><index>[<expr><name>NumNSNumberLiteralMethods</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>Selector</name></type> <name><name>NSNumberInstanceSelectors</name><index>[<expr><name>NumNSNumberLiteralMethods</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>Selector</name></type> <name>objectForKeyedSubscriptSel</name></decl>, <decl><type ref="prev"/><name>objectAtIndexedSubscriptSel</name></decl>,
<decl><type ref="prev"/><name>setObjectForKeyedSubscriptSel</name></decl>,<decl><type ref="prev"/><name>setObjectAtIndexedSubscriptSel</name></decl>,
<decl><type ref="prev"/><name>isEqualSel</name></decl>, <decl><type ref="prev"/><name>InitSel</name></decl>, <decl><type ref="prev"/><name>NewSel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>BOOLId</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>NSIntegerId</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>NSUIntegerId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutable</name> <name>IdentifierInfo</name> <modifier>*</modifier></type><name>NSASCIIStringEncodingId</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>NSUTF8StringEncodingId</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
