<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/llvm-project/clang/include/clang/Tooling/AllTUsExecution.h">












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LLVM_CLANG_TOOLING_ALLTUSEXECUTION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLVM_CLANG_TOOLING_ALLTUSEXECUTION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/ArgumentsAdjusters.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clang/Tooling/Execution.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>clang</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>tooling</name> <block>{<block_content>



<decl_stmt><decl><type><name>class</name></type> <name>AllTUsToolExecutor</name> <range>: <expr><name>public</name> <name>ToolExecutor</name> <block>{
<expr><name>public</name><operator>:</operator>
<specifier>static</specifier> <specifier>const</specifier> <name>char</name> <operator>*</operator><name>ExecutorName</name></expr>;




<macro><name>AllTUsToolExecutor</name><argument_list>(<argument>const CompilationDatabase &amp;Compilations</argument>,
<argument>unsigned ThreadCount</argument>,
<argument>std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps =
std::make_shared&lt;PCHContainerOperations&gt;()</argument>)</argument_list></macro>;





<macro><name>AllTUsToolExecutor</name><argument_list>(<argument>CommonOptionsParser Options</argument>, <argument>unsigned ThreadCount</argument>,
<argument>std::shared_ptr&lt;PCHContainerOperations&gt; PCHContainerOps =
std::make_shared&lt;PCHContainerOperations&gt;()</argument>)</argument_list></macro>;

<expr><name>StringRef</name> <macro><name>getExecutorName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><name>ExecutorName</name></expr>;</return> }</block>

<name>using</name> <name>ToolExecutor</name><operator>::</operator><name>execute</name></expr>;

<expr><name>llvm</name><operator>::</operator><name>Error</name>
<macro><name>execute</name><argument_list>(<argument>llvm::ArrayRef&lt;
std::pair&lt;std::unique_ptr&lt;FrontendActionFactory&gt;</argument>, <argument>ArgumentsAdjuster&gt;&gt;
Actions</argument>)</argument_list></macro> <name>override</name></expr>;

<expr><name>ExecutionContext</name> <operator>*</operator><macro><name>getExecutionContext</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><operator>&amp;</operator><name>Context</name></expr>;</return> }</block></expr>;

<expr><name>ToolResults</name> <operator>*</operator><macro><name>getToolResults</name><argument_list>()</argument_list></macro> <name>override</name> <block>{ <return>return <expr><call><name><name>Results</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>void</name> <macro><name>mapVirtualFile</name><argument_list>(<argument>StringRef FilePath</argument>, <argument>StringRef Content</argument>)</argument_list></macro> <name>override</name> <block>{
<expr><name><name>OverlayFiles</name><index>[<expr><name>FilePath</name></expr>]</index></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>Content</name></expr></argument>)</argument_list></call></expr>;
}</block>

<name>private</name><operator>:</operator>

<name>llvm</name><operator>::</operator><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CommonOptionsParser</name></expr></argument>&gt;</argument_list></name> <name>OptionsParser</name></expr>;
<expr><specifier>const</specifier> <name>CompilationDatabase</name> <operator>&amp;</operator><name>Compilations</name></expr>;
<expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ToolResults</name></expr></argument>&gt;</argument_list></name> <name>Results</name></expr>;
<expr><name>ExecutionContext</name> <name>Context</name></expr>;
<expr><name>llvm</name><operator>::</operator><name><name>StringMap</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>OverlayFiles</name></expr>;
<expr><name>unsigned</name> <name>ThreadCount</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<extern>extern llvm::cl::opt&lt;unsigned&gt; ExecutorConcurrency;</extern>
<extern>extern llvm::cl::opt&lt;std::string&gt; Filter;</extern>

</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
